[package]
name = "mwpf"
version = "0.1.1"
authors = ["Yue Wu <wuyue16pku@gmail.com>"]
edition = "2021"
license = "MIT"
description = "Hypergraph Minimum-Weight Parity Factor (MWPF) Solver for Quantum LDPC Codes"
readme = "README.md"
homepage = "https://hyper-mwpf.com"
repository = "https://github.com/yuewuo/mwpf"
keywords = ["QEC", "quantum-computing", "error-correction", "visualization"]
categories = ["science"]
exclude = ["tutorial/*", "benchmark/*", "visualize/data/persist/*", ".github/*"]
default-run = "mwpf"

[package.metadata.maturin]
python-source = "src/python"

# see https://doc.rust-lang.org/1.39.0/cargo/reference/manifest.html#the-documentation-field-optional
[badges]
maintenance = { status = "actively-developed" }

[lib]
name = "mwpf"
path = "src/lib.rs"
crate-type = ["lib", "cdylib"]

[[bin]]
name = "mwpf"
path = "src/main.rs"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

# profiling: see scripts/NOTES.md

# embed debug symbols
[profile.release]
debug = true

[features]
# to enable a feature, use `--features xxx`
default = ["f64_weight", "qecp_integrate", "embed_visualizer"]
f64_weight = ["float_lp"] # use f64 instead of BigRational as weight type
rational_weight = ["slp"]
u32_index = [] # use u32 instead of usize as index type, to save memory
python_binding = ["pyo3"] # bind to Python
wasm_binding = ["wasm-bindgen"] # bind to wasm
colorful = [] # enable colorful output in case terminal exists
qecp_integrate = ["qecp"] # integrate with qecp
float_lp = ["highs"] # use floating point LP solver, which is highs
incr_lp = [
] # solve lp problems incrementally, compatible with highs, by modifying the internal data of the probelm
embed_visualizer = [
] # use nodejs to build frontend and embed in Python instead of outputing individual JSON files

[dependencies]
pyo3 = { version = "0.22.6", features = [
    "extension-module",
    "multiple-pymethods",
    "abi3-py37",
    "num-bigint",
], optional = true }
serde = { version = "1.0.214", features = ["derive", "rc"] }
serde-wasm-bindgen = "0.6.5"
serde_json = "1.0.59"
chrono = "0.4.19"
urlencoding = "2.1.0"
clap = { version = "4.2.7", features = ["cargo", "derive"] }
pbr = { version = "1.0.4" }
rand_xoshiro = "0.6.0"
derivative = "2.2.0"
parking_lot = { version = "0.12.1", features = ["hardware-lock-elision"] }
num-rational = "0.4.1"
num-traits = "0.2.15"
num-bigint = "0.4.5"
more-asserts = "0.3.1"
rand = { version = "0.8.5", features = ["small_rng"] }
prettytable-rs = "0.10.0"
itertools = "0.11.0"
cfg-if = "1.0.0"
getrandom = { version = "0.2", features = ["js"] }
wasm-bindgen = { version = "0.2.86", optional = true }
lazy_static = "1.4.0"
slp = { path = "src/slp", optional = true }
highs = { path = "src/highs", optional = true }
sugar = "0.2.0"
maplit = "1.0.2"
qecp = { version = "0.2.5", optional = true, default-features = false, features = [
    "fusion_blossom",
] }
serde_variant = "0.1.3"
priority-queue = "2.0.3"
heapz = { path = "src/heapz" }
hashbrown = "0.14.5"
pheap = { path = "src/pheap" }
tempfile = "3.13.0"
flate2 = "1.0.34"
base64 = "0.22.1"

[dev-dependencies]
test-case = "3.1.0"

[package.metadata.docs.rs]
# to run locally: `RUSTDOCFLAGS="--html-in-header katex-header.html" cargo doc --no-deps`
rustdoc-args = ["--html-in-header", "katex-header.html"]
