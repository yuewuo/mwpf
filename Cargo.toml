[package]
name = "mwpf"
version = "0.2.9"
authors = ["Yue Wu <wuyue16pku@gmail.com>"]
edition = "2021"
license = "MIT"
description = "Hypergraph Minimum-Weight Parity Factor (MWPF) Solver for Quantum LDPC Codes"
readme = "README.md"
homepage = "https://hyper-mwpf.com"
repository = "https://github.com/yuewuo/mwpf"
keywords = ["QEC", "quantum-computing", "error-correction", "visualization"]
categories = ["science"]
exclude = ["tutorial/*", "benchmark/*", "visualize/data/persist/*", ".github/*"]
default-run = "mwpf"

# see https://doc.rust-lang.org/1.39.0/cargo/reference/manifest.html#the-documentation-field-optional
[badges]
maintenance = { status = "actively-developed" }

[lib]
name = "mwpf"
path = "src/lib.rs"
crate-type = ["lib", "cdylib"]

[[bin]]
name = "mwpf"
path = "src/main.rs"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

# profiling: see scripts/NOTES.md

# embed debug symbols
[profile.release]
debug = true

[features]
# to enable a feature, use `--features xxx`
default = [
    "f64_weight",
    "qecp_integrate",
    "embed_visualizer",
    "progress_bar",
    "fast_ds",
]
f64_weight = ["float_lp"] # use f64 instead of BigRational as weight type
rational_weight = ["slp"]
slp = [] # placeholder feature; the src/slp dependency is always included
python_binding = ["pyo3"] # bind to Python
wasm_binding = ["wasm-bindgen"] # bind to wasm
progress_bar = ["pbr"] # make pbr an optional dependency because of wasm
colorful = [] # enable colorful output in case terminal exists
qecp_integrate = ["qecp"] # integrate with qecp
float_lp = ["highs"] # use floating point LP solver, which is highs
highs = [] # placeholder feature; the src/highs dependency is always included
incr_lp = [
] # solve lp problems incrementally, compatible with highs, by modifying the internal data of the probelm
embed_visualizer = [
] # use nodejs to build frontend and embed in Python instead of outputing individual JSON files
loose_sanity_check = [] # do not panic when check fails
fast_ds = ["gxhash"] # use fast data structures to fast iterate

[dependencies]
pyo3 = { version = "0.23.4", features = [
    "extension-module",
    "multiple-pymethods",
    "abi3-py38",
    "num-bigint",
    "macros",
], optional = true }
serde = { version = "1.0.217", features = ["derive", "rc"] }
serde-wasm-bindgen = "0.6.5"
serde_json = { version = "1.0.138", features = ["arbitrary_precision"] }
ciborium = "0.2.2"
chrono = "0.4.39"
urlencoding = "2.1.0"
clap = { version = "4.5.30", features = ["cargo", "derive"] }
pbr = { version = "1.0.4", optional = true }
rand_xoshiro = "0.6.0"
derivative = "2.2.0"
parking_lot = { version = "0.12.1", features = ["hardware-lock-elision"] }
num-rational = { version = "0.4.1", features = ["serde"] }
num-traits = "0.2.15"
num-bigint = { version = "0.4.5", features = ["serde"] }
more-asserts = "0.3.1"
rand = { version = "0.8.5", features = ["small_rng"] }
prettytable-rs = "0.10.0"
itertools = "0.14.0"
cfg-if = "1.0.0"
getrandom = { version = "0.2.15", features = ["js"] }
wasm-bindgen = { version = "0.2.100", optional = true }
lazy_static = "1.4.0"
slp = { path = "src/slp" }
highs = { path = "src/highs" }
sugar = "0.2.0"
maplit = "1.0.2"
qecp = { version = "0.2.5", optional = true, default-features = false }
serde_variant = "0.1.3"
priority-queue = "2.1.2"
heapz = { path = "src/heapz" }
hashbrown = "0.15.2"
pheap = { path = "src/pheap" }
tempfile = "3.17.1"
flate2 = "1.0.35"
base64 = "0.22.1"
bp = { path = "src/bp" }
thread-priority = "1.2.0"
lnexp = "0.2.1"
gxhash = { version = "3.5.0", optional = true }

[dev-dependencies]
test-case = "3.1.0"
bytebuffer = "2.3.0"

[build-dependencies]
chrono = "0.4.19"

[package.metadata.docs.rs]
# to run locally: `RUSTDOCFLAGS="--html-in-header katex-header.html" cargo doc --no-deps`
rustdoc-args = ["--html-in-header", "katex-header.html"]
