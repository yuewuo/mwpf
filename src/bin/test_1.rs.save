use mwpf::{dual_module_pq::DualModulePQ, example_codes::CodeCapacityTailoredCode, plugin::{PluginImpl, RepeatStrategy}, plugin_single_hair::PluginSingleHair, plugin_union_find::PluginUnionFind};

pub fn main() {
    primal_module_serial_basic_3_improved_with_dual_pq_impl_m();
}

fn primal_module_serial_basic_3_improved_with_dual_pq_impl_m() {
    // cargo test primal_module_serial_basic_3_improved_with_dual_pq_impl_m -- --nocapture
    let visualize_filename = "primal_module_serial_basic_3_improved_with_dual_pq_impl_m.json".to_string();
    let defect_vertices = vec![14, 15, 16, 17, 22, 25, 28, 31, 36, 37, 38, 39];
    let code = CodeCapacityTailoredCode::new(7, 0., 0.01, 1);
    primal_module_serial_basic_standard_syndrome_with_dual_pq_impl(
        code,
        visualize_filename,
        defect_vertices,
        5,
        vec![
            PluginUnionFind::entry(),
            PluginSingleHair::entry_with_strategy(RepeatStrategy::Once),
        ],
        GrowingStrategy::ModeBased,
    );
}

pub fn primal_module_serial_basic_standard_syndrome_with_dual_pq_impl(
    code: impl ExampleCode,
    visualize_filename: String,
    defect_vertices: Vec<VertexIndex>,
    final_dual: Weight,
    plugins: PluginVec,
    growing_strategy: GrowingStrategy,
) -> (
    DualModuleInterfacePtr,
    PrimalModuleSerial,
    impl DualModuleImpl + MWPSVisualizer,
) {
    println!("{defect_vertices:?}");
    let visualizer = {
        let visualizer = Visualizer::new(
            Some(visualize_data_folder() + visualize_filename.as_str()),
            code.get_positions(),
            true,
        )
        .unwrap();
        print_visualize_link(visualize_filename.clone());
        visualizer
    };
    // create dual module
    let model_graph = code.get_model_graph();
    primal_module_serial_basic_standard_syndrome_optional_viz(
        code,
        defect_vertices,
        final_dual,
        plugins,
        growing_strategy,
        DualModulePQ::<FutureObstacleQueue<Rational>>::new_empty(&model_graph.initializer),
        model_graph,
        Some(visualizer),
    )
}