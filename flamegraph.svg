<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="7025"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.01%)</title><rect x="0.0000%" y="453" width="0.0142%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.01%)</title><rect x="0.0000%" y="437" width="0.0142%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.01%)</title><rect x="0.0142%" y="341" width="0.0142%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.2642%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="0.0142%" y="325" width="0.0142%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.2642%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.01%)</title><rect x="0.0285%" y="261" width="0.0142%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.2785%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.03%)</title><rect x="0.0427%" y="261" width="0.0285%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="2"/><text x="0.2927%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="0.0854%" y="245" width="0.0142%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="1"/><text x="0.3354%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (2 samples, 0.03%)</title><rect x="0.1708%" y="229" width="0.0285%" height="15" fill="rgb(228,23,34)" fg:x="12" fg:w="2"/><text x="0.4208%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.03%)</title><rect x="0.1993%" y="229" width="0.0285%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="2"/><text x="0.4493%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.03%)</title><rect x="0.2278%" y="229" width="0.0285%" height="15" fill="rgb(220,122,19)" fg:x="16" fg:w="2"/><text x="0.4778%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (2 samples, 0.03%)</title><rect x="0.2278%" y="213" width="0.0285%" height="15" fill="rgb(250,228,42)" fg:x="16" fg:w="2"/><text x="0.4778%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.03%)</title><rect x="0.2278%" y="197" width="0.0285%" height="15" fill="rgb(240,193,28)" fg:x="16" fg:w="2"/><text x="0.4778%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::mwpf_solver::SolverSerialJointSingleHair as mwpf::mwpf_solver::PrimalDualSolver&gt;::clear (18 samples, 0.26%)</title><rect x="0.0285%" y="341" width="0.2562%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="18"/><text x="0.2785%" y="351.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::clear (18 samples, 0.26%)</title><rect x="0.0285%" y="325" width="0.2562%" height="15" fill="rgb(206,188,39)" fg:x="2" fg:w="18"/><text x="0.2785%" y="335.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (18 samples, 0.26%)</title><rect x="0.0285%" y="309" width="0.2562%" height="15" fill="rgb(217,207,13)" fg:x="2" fg:w="18"/><text x="0.2785%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.26%)</title><rect x="0.0285%" y="293" width="0.2562%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="18"/><text x="0.2785%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (18 samples, 0.26%)</title><rect x="0.0285%" y="277" width="0.2562%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="18"/><text x="0.2785%" y="287.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (15 samples, 0.21%)</title><rect x="0.0712%" y="261" width="0.2135%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="15"/><text x="0.3212%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (13 samples, 0.19%)</title><rect x="0.0996%" y="245" width="0.1851%" height="15" fill="rgb(221,200,47)" fg:x="7" fg:w="13"/><text x="0.3496%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.03%)</title><rect x="0.2562%" y="229" width="0.0285%" height="15" fill="rgb(226,26,5)" fg:x="18" fg:w="2"/><text x="0.5062%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::compute_maximum_update_length (1 samples, 0.01%)</title><rect x="0.2847%" y="309" width="0.0142%" height="15" fill="rgb(249,33,26)" fg:x="20" fg:w="1"/><text x="0.5347%" y="319.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::pop_event (1 samples, 0.01%)</title><rect x="0.2847%" y="293" width="0.0142%" height="15" fill="rgb(235,183,28)" fg:x="20" fg:w="1"/><text x="0.5347%" y="303.50"></text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (1 samples, 0.01%)</title><rect x="0.2847%" y="277" width="0.0142%" height="15" fill="rgb(221,5,38)" fg:x="20" fg:w="1"/><text x="0.5347%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_single_hair::PluginSingleHair as mwpf::plugin::PluginImpl&gt;::find_relaxers (1 samples, 0.01%)</title><rect x="0.2989%" y="261" width="0.0142%" height="15" fill="rgb(247,18,42)" fg:x="21" fg:w="1"/><text x="0.5489%" y="271.50"></text></g><g><title>mwpf`mwpf::matrix::hair::HairView&lt;M&gt;::new (1 samples, 0.01%)</title><rect x="0.2989%" y="245" width="0.0142%" height="15" fill="rgb(241,131,45)" fg:x="21" fg:w="1"/><text x="0.5489%" y="255.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (1 samples, 0.01%)</title><rect x="0.2989%" y="229" width="0.0142%" height="15" fill="rgb(249,31,29)" fg:x="21" fg:w="1"/><text x="0.5489%" y="239.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (2 samples, 0.03%)</title><rect x="0.2989%" y="293" width="0.0285%" height="15" fill="rgb(225,111,53)" fg:x="21" fg:w="2"/><text x="0.5489%" y="303.50"></text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (2 samples, 0.03%)</title><rect x="0.2989%" y="277" width="0.0285%" height="15" fill="rgb(238,160,17)" fg:x="21" fg:w="2"/><text x="0.5489%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (1 samples, 0.01%)</title><rect x="0.3132%" y="261" width="0.0142%" height="15" fill="rgb(214,148,48)" fg:x="22" fg:w="1"/><text x="0.5632%" y="271.50"></text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (1 samples, 0.01%)</title><rect x="0.3132%" y="245" width="0.0142%" height="15" fill="rgb(232,36,49)" fg:x="22" fg:w="1"/><text x="0.5632%" y="255.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (1 samples, 0.01%)</title><rect x="0.3132%" y="229" width="0.0142%" height="15" fill="rgb(209,103,24)" fg:x="22" fg:w="1"/><text x="0.5632%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune (3 samples, 0.04%)</title><rect x="0.2989%" y="309" width="0.0427%" height="15" fill="rgb(229,88,8)" fg:x="21" fg:w="3"/><text x="0.5489%" y="319.50"></text></g><g><title>mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize (1 samples, 0.01%)</title><rect x="0.3274%" y="293" width="0.0142%" height="15" fill="rgb(213,181,19)" fg:x="23" fg:w="1"/><text x="0.5774%" y="303.50"></text></g><g><title>mwpf`highs::Model::solve (1 samples, 0.01%)</title><rect x="0.3274%" y="277" width="0.0142%" height="15" fill="rgb(254,191,54)" fg:x="23" fg:w="1"/><text x="0.5774%" y="287.50"></text></g><g><title>mwpf`Highs::run (1 samples, 0.01%)</title><rect x="0.3274%" y="261" width="0.0142%" height="15" fill="rgb(241,83,37)" fg:x="23" fg:w="1"/><text x="0.5774%" y="271.50"></text></g><g><title>mwpf`Highs::runPresolve (1 samples, 0.01%)</title><rect x="0.3274%" y="245" width="0.0142%" height="15" fill="rgb(233,36,39)" fg:x="23" fg:w="1"/><text x="0.5774%" y="255.50"></text></g><g><title>mwpf`PresolveComponent::run (1 samples, 0.01%)</title><rect x="0.3274%" y="229" width="0.0142%" height="15" fill="rgb(226,3,54)" fg:x="23" fg:w="1"/><text x="0.5774%" y="239.50"></text></g><g><title>mwpf`presolve::HPresolve::run (1 samples, 0.01%)</title><rect x="0.3274%" y="213" width="0.0142%" height="15" fill="rgb(245,192,40)" fg:x="23" fg:w="1"/><text x="0.5774%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::presolve (1 samples, 0.01%)</title><rect x="0.3274%" y="197" width="0.0142%" height="15" fill="rgb(238,167,29)" fg:x="23" fg:w="1"/><text x="0.5774%" y="207.50"></text></g><g><title>mwpf`presolve::HPresolve::initialRowAndColPresolve (1 samples, 0.01%)</title><rect x="0.3274%" y="181" width="0.0142%" height="15" fill="rgb(232,182,51)" fg:x="23" fg:w="1"/><text x="0.5774%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::updateRowDualImpliedBounds (1 samples, 0.01%)</title><rect x="0.3274%" y="165" width="0.0142%" height="15" fill="rgb(231,60,39)" fg:x="23" fg:w="1"/><text x="0.5774%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="0.3701%" y="293" width="0.0142%" height="15" fill="rgb(208,69,12)" fg:x="26" fg:w="1"/><text x="0.6201%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::get_edge_nodes (3 samples, 0.04%)</title><rect x="0.3843%" y="293" width="0.0427%" height="15" fill="rgb(235,93,37)" fg:x="27" fg:w="3"/><text x="0.6343%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.04%)</title><rect x="0.3843%" y="277" width="0.0427%" height="15" fill="rgb(213,116,39)" fg:x="27" fg:w="3"/><text x="0.6343%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.11%)</title><rect x="0.4413%" y="261" width="0.1139%" height="15" fill="rgb(222,207,29)" fg:x="31" fg:w="8"/><text x="0.6913%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.01%)</title><rect x="0.6548%" y="245" width="0.0142%" height="15" fill="rgb(206,96,30)" fg:x="46" fg:w="1"/><text x="0.9048%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="0.6548%" y="229" width="0.0142%" height="15" fill="rgb(218,138,4)" fg:x="46" fg:w="1"/><text x="0.9048%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="0.6690%" y="245" width="0.0142%" height="15" fill="rgb(250,191,14)" fg:x="47" fg:w="1"/><text x="0.9190%" y="255.50"></text></g><g><title>mwpf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.01%)</title><rect x="0.6833%" y="245" width="0.0142%" height="15" fill="rgb(239,60,40)" fg:x="48" fg:w="1"/><text x="0.9333%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="1.7509%" y="229" width="0.0142%" height="15" fill="rgb(206,27,48)" fg:x="123" fg:w="1"/><text x="2.0009%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.17%)</title><rect x="1.7651%" y="229" width="0.1708%" height="15" fill="rgb(225,35,8)" fg:x="124" fg:w="12"/><text x="2.0151%" y="239.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.14%)</title><rect x="1.9359%" y="229" width="0.1423%" height="15" fill="rgb(250,213,24)" fg:x="136" fg:w="10"/><text x="2.1859%" y="239.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (20 samples, 0.28%)</title><rect x="2.0783%" y="229" width="0.2847%" height="15" fill="rgb(247,123,22)" fg:x="146" fg:w="20"/><text x="2.3283%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (11 samples, 0.16%)</title><rect x="2.8897%" y="213" width="0.1566%" height="15" fill="rgb(231,138,38)" fg:x="203" fg:w="11"/><text x="3.1397%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.16%)</title><rect x="2.8897%" y="197" width="0.1566%" height="15" fill="rgb(231,145,46)" fg:x="203" fg:w="11"/><text x="3.1397%" y="207.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (30 samples, 0.43%)</title><rect x="3.0463%" y="213" width="0.4270%" height="15" fill="rgb(251,118,11)" fg:x="214" fg:w="30"/><text x="3.2963%" y="223.50"></text></g><g><title>mwpf`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (216 samples, 3.07%)</title><rect x="0.6975%" y="245" width="3.0747%" height="15" fill="rgb(217,147,25)" fg:x="49" fg:w="216"/><text x="0.9475%" y="255.50">mwp..</text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (99 samples, 1.41%)</title><rect x="2.3630%" y="229" width="1.4093%" height="15" fill="rgb(247,81,37)" fg:x="166" fg:w="99"/><text x="2.6130%" y="239.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (21 samples, 0.30%)</title><rect x="3.4733%" y="213" width="0.2989%" height="15" fill="rgb(209,12,38)" fg:x="244" fg:w="21"/><text x="3.7233%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::get_edge_slack_tune (13 samples, 0.19%)</title><rect x="3.7722%" y="245" width="0.1851%" height="15" fill="rgb(227,1,9)" fg:x="265" fg:w="13"/><text x="4.0222%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (247 samples, 3.52%)</title><rect x="0.5552%" y="261" width="3.5160%" height="15" fill="rgb(248,47,43)" fg:x="39" fg:w="247"/><text x="0.8052%" y="271.50">mwp..</text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.11%)</title><rect x="3.9573%" y="245" width="0.1139%" height="15" fill="rgb(221,10,30)" fg:x="278" fg:w="8"/><text x="4.2073%" y="255.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (8 samples, 0.11%)</title><rect x="3.9573%" y="229" width="0.1139%" height="15" fill="rgb(210,229,1)" fg:x="278" fg:w="8"/><text x="4.2073%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.11%)</title><rect x="3.9573%" y="213" width="0.1139%" height="15" fill="rgb(222,148,37)" fg:x="278" fg:w="8"/><text x="4.2073%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.11%)</title><rect x="3.9573%" y="197" width="0.1139%" height="15" fill="rgb(234,67,33)" fg:x="278" fg:w="8"/><text x="4.2073%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.11%)</title><rect x="3.9573%" y="181" width="0.1139%" height="15" fill="rgb(247,98,35)" fg:x="278" fg:w="8"/><text x="4.2073%" y="191.50"></text></g><g><title>mwpf`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.13%)</title><rect x="4.0712%" y="261" width="0.1281%" height="15" fill="rgb(247,138,52)" fg:x="286" fg:w="9"/><text x="4.3212%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::get_edge_slack_tune (1 samples, 0.01%)</title><rect x="4.1993%" y="261" width="0.0142%" height="15" fill="rgb(213,79,30)" fg:x="295" fg:w="1"/><text x="4.4493%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.21%)</title><rect x="4.4128%" y="245" width="0.2135%" height="15" fill="rgb(246,177,23)" fg:x="310" fg:w="15"/><text x="4.6628%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.21%)</title><rect x="4.4128%" y="229" width="0.2135%" height="15" fill="rgb(230,62,27)" fg:x="310" fg:w="15"/><text x="4.6628%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (31 samples, 0.44%)</title><rect x="4.2135%" y="261" width="0.4413%" height="15" fill="rgb(216,154,8)" fg:x="296" fg:w="31"/><text x="4.4635%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="4.6263%" y="245" width="0.0285%" height="15" fill="rgb(244,35,45)" fg:x="325" fg:w="2"/><text x="4.8763%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.23%)</title><rect x="6.1637%" y="245" width="0.2278%" height="15" fill="rgb(251,115,12)" fg:x="433" fg:w="16"/><text x="6.4137%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (86 samples, 1.22%)</title><rect x="6.3915%" y="245" width="1.2242%" height="15" fill="rgb(240,54,50)" fg:x="449" fg:w="86"/><text x="6.6415%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (60 samples, 0.85%)</title><rect x="6.7616%" y="229" width="0.8541%" height="15" fill="rgb(233,84,52)" fg:x="475" fg:w="60"/><text x="7.0116%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.14%)</title><rect x="7.6299%" y="229" width="0.1423%" height="15" fill="rgb(207,117,47)" fg:x="536" fg:w="10"/><text x="7.8799%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (560 samples, 7.97%)</title><rect x="0.4413%" y="277" width="7.9715%" height="15" fill="rgb(249,43,39)" fg:x="31" fg:w="560"/><text x="0.6913%" y="287.50">mwpf`&lt;alloc..</text></g><g><title>mwpf`core::slice::sort::merge_sort (264 samples, 3.76%)</title><rect x="4.6548%" y="261" width="3.7580%" height="15" fill="rgb(209,38,44)" fg:x="327" fg:w="264"/><text x="4.9048%" y="271.50">mwpf..</text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (56 samples, 0.80%)</title><rect x="7.6157%" y="245" width="0.7972%" height="15" fill="rgb(236,212,23)" fg:x="535" fg:w="56"/><text x="7.8657%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (45 samples, 0.64%)</title><rect x="7.7722%" y="229" width="0.6406%" height="15" fill="rgb(242,79,21)" fg:x="546" fg:w="45"/><text x="8.0222%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.54%)</title><rect x="7.8719%" y="213" width="0.5409%" height="15" fill="rgb(211,96,35)" fg:x="553" fg:w="38"/><text x="8.1219%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="8.4128%" y="277" width="0.0142%" height="15" fill="rgb(253,215,40)" fg:x="591" fg:w="1"/><text x="8.6628%" y="287.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.01%)</title><rect x="8.4128%" y="261" width="0.0142%" height="15" fill="rgb(211,81,21)" fg:x="591" fg:w="1"/><text x="8.6628%" y="271.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="8.4128%" y="245" width="0.0142%" height="15" fill="rgb(208,190,38)" fg:x="591" fg:w="1"/><text x="8.6628%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="8.4128%" y="229" width="0.0142%" height="15" fill="rgb(235,213,38)" fg:x="591" fg:w="1"/><text x="8.6628%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="8.4128%" y="213" width="0.0142%" height="15" fill="rgb(237,122,38)" fg:x="591" fg:w="1"/><text x="8.6628%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.01%)</title><rect x="8.4128%" y="197" width="0.0142%" height="15" fill="rgb(244,218,35)" fg:x="591" fg:w="1"/><text x="8.6628%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="8.4128%" y="181" width="0.0142%" height="15" fill="rgb(240,68,47)" fg:x="591" fg:w="1"/><text x="8.6628%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.01%)</title><rect x="8.4128%" y="165" width="0.0142%" height="15" fill="rgb(210,16,53)" fg:x="591" fg:w="1"/><text x="8.6628%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (2 samples, 0.03%)</title><rect x="8.4270%" y="277" width="0.0285%" height="15" fill="rgb(235,124,12)" fg:x="592" fg:w="2"/><text x="8.6770%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.01%)</title><rect x="8.4555%" y="277" width="0.0142%" height="15" fill="rgb(224,169,11)" fg:x="594" fg:w="1"/><text x="8.7055%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="8.4555%" y="261" width="0.0142%" height="15" fill="rgb(250,166,2)" fg:x="594" fg:w="1"/><text x="8.7055%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.07%)</title><rect x="8.4698%" y="261" width="0.0712%" height="15" fill="rgb(242,216,29)" fg:x="595" fg:w="5"/><text x="8.7198%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node_tune (2 samples, 0.03%)</title><rect x="8.5409%" y="261" width="0.0285%" height="15" fill="rgb(230,116,27)" fg:x="600" fg:w="2"/><text x="8.7909%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="8.5409%" y="245" width="0.0285%" height="15" fill="rgb(228,99,48)" fg:x="600" fg:w="2"/><text x="8.7909%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.19%)</title><rect x="8.5694%" y="245" width="0.1851%" height="15" fill="rgb(253,11,6)" fg:x="602" fg:w="13"/><text x="8.8194%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.14%)</title><rect x="8.6121%" y="229" width="0.1423%" height="15" fill="rgb(247,143,39)" fg:x="605" fg:w="10"/><text x="8.8621%" y="239.50"></text></g><g><title>mwpf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (17 samples, 0.24%)</title><rect x="8.5694%" y="261" width="0.2420%" height="15" fill="rgb(236,97,10)" fg:x="602" fg:w="17"/><text x="8.8194%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.06%)</title><rect x="8.7544%" y="245" width="0.0569%" height="15" fill="rgb(233,208,19)" fg:x="615" fg:w="4"/><text x="9.0044%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (321 samples, 4.57%)</title><rect x="8.8256%" y="245" width="4.5694%" height="15" fill="rgb(216,164,2)" fg:x="620" fg:w="321"/><text x="9.0756%" y="255.50">mwpf`..</text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (287 samples, 4.09%)</title><rect x="9.3096%" y="229" width="4.0854%" height="15" fill="rgb(220,129,5)" fg:x="654" fg:w="287"/><text x="9.5596%" y="239.50">mwpf..</text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 0.63%)</title><rect x="13.3950%" y="245" width="0.6263%" height="15" fill="rgb(242,17,10)" fg:x="941" fg:w="44"/><text x="13.6450%" y="255.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_or_create_node_tune (391 samples, 5.57%)</title><rect x="8.4698%" y="277" width="5.5658%" height="15" fill="rgb(242,107,0)" fg:x="595" fg:w="391"/><text x="8.7198%" y="287.50">mwpf`mw..</text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_node (367 samples, 5.22%)</title><rect x="8.8114%" y="261" width="5.2242%" height="15" fill="rgb(251,28,31)" fg:x="619" fg:w="367"/><text x="9.0614%" y="271.50">mwpf`m..</text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.01%)</title><rect x="14.0214%" y="245" width="0.0142%" height="15" fill="rgb(233,223,10)" fg:x="985" fg:w="1"/><text x="14.2714%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="14.0356%" y="245" width="0.0427%" height="15" fill="rgb(215,21,27)" fg:x="986" fg:w="3"/><text x="14.2856%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.04%)</title><rect x="14.0356%" y="229" width="0.0427%" height="15" fill="rgb(232,23,21)" fg:x="986" fg:w="3"/><text x="14.2856%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.03%)</title><rect x="14.1210%" y="213" width="0.0285%" height="15" fill="rgb(244,5,23)" fg:x="992" fg:w="2"/><text x="14.3710%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.13%)</title><rect x="14.0356%" y="261" width="0.1281%" height="15" fill="rgb(226,81,46)" fg:x="986" fg:w="9"/><text x="14.2856%" y="271.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.09%)</title><rect x="14.0783%" y="245" width="0.0854%" height="15" fill="rgb(247,70,30)" fg:x="989" fg:w="6"/><text x="14.3283%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (6 samples, 0.09%)</title><rect x="14.0783%" y="229" width="0.0854%" height="15" fill="rgb(212,68,19)" fg:x="989" fg:w="6"/><text x="14.3283%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.01%)</title><rect x="14.1495%" y="213" width="0.0142%" height="15" fill="rgb(240,187,13)" fg:x="994" fg:w="1"/><text x="14.3995%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.01%)</title><rect x="14.1495%" y="197" width="0.0142%" height="15" fill="rgb(223,113,26)" fg:x="994" fg:w="1"/><text x="14.3995%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="14.1495%" y="181" width="0.0142%" height="15" fill="rgb(206,192,2)" fg:x="994" fg:w="1"/><text x="14.3995%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.09%)</title><rect x="14.1637%" y="213" width="0.0854%" height="15" fill="rgb(241,108,4)" fg:x="995" fg:w="6"/><text x="14.4137%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.06%)</title><rect x="14.1922%" y="197" width="0.0569%" height="15" fill="rgb(247,173,49)" fg:x="997" fg:w="4"/><text x="14.4422%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::bulk_build_from_sorted_iter (8 samples, 0.11%)</title><rect x="14.1637%" y="245" width="0.1139%" height="15" fill="rgb(224,114,35)" fg:x="995" fg:w="8"/><text x="14.4137%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (8 samples, 0.11%)</title><rect x="14.1637%" y="229" width="0.1139%" height="15" fill="rgb(245,159,27)" fg:x="995" fg:w="8"/><text x="14.4137%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="14.2491%" y="213" width="0.0285%" height="15" fill="rgb(245,172,44)" fg:x="1001" fg:w="2"/><text x="14.4991%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.16%)</title><rect x="14.2776%" y="229" width="0.1566%" height="15" fill="rgb(236,23,11)" fg:x="1003" fg:w="11"/><text x="14.5276%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (16 samples, 0.23%)</title><rect x="14.4342%" y="229" width="0.2278%" height="15" fill="rgb(205,117,38)" fg:x="1014" fg:w="16"/><text x="14.6842%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.19%)</title><rect x="14.4769%" y="213" width="0.1851%" height="15" fill="rgb(237,72,25)" fg:x="1017" fg:w="13"/><text x="14.7269%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="14.6619%" y="213" width="0.0427%" height="15" fill="rgb(244,70,9)" fg:x="1030" fg:w="3"/><text x="14.9119%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (60 samples, 0.85%)</title><rect x="14.1637%" y="261" width="0.8541%" height="15" fill="rgb(217,125,39)" fg:x="995" fg:w="60"/><text x="14.4137%" y="271.50"></text></g><g><title>mwpf`core::slice::sort::merge_sort (52 samples, 0.74%)</title><rect x="14.2776%" y="245" width="0.7402%" height="15" fill="rgb(235,36,10)" fg:x="1003" fg:w="52"/><text x="14.5276%" y="255.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (25 samples, 0.36%)</title><rect x="14.6619%" y="229" width="0.3559%" height="15" fill="rgb(251,123,47)" fg:x="1030" fg:w="25"/><text x="14.9119%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (22 samples, 0.31%)</title><rect x="14.7046%" y="213" width="0.3132%" height="15" fill="rgb(221,13,13)" fg:x="1033" fg:w="22"/><text x="14.9546%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.26%)</title><rect x="14.7616%" y="197" width="0.2562%" height="15" fill="rgb(238,131,9)" fg:x="1037" fg:w="18"/><text x="15.0116%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (1 samples, 0.01%)</title><rect x="15.0178%" y="261" width="0.0142%" height="15" fill="rgb(211,50,8)" fg:x="1055" fg:w="1"/><text x="15.2678%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="15.0605%" y="165" width="0.0142%" height="15" fill="rgb(245,182,24)" fg:x="1058" fg:w="1"/><text x="15.3105%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.01%)</title><rect x="15.0747%" y="165" width="0.0142%" height="15" fill="rgb(242,14,37)" fg:x="1059" fg:w="1"/><text x="15.3247%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.01%)</title><rect x="15.0747%" y="149" width="0.0142%" height="15" fill="rgb(246,228,12)" fg:x="1059" fg:w="1"/><text x="15.3247%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="15.0747%" y="133" width="0.0142%" height="15" fill="rgb(213,55,15)" fg:x="1059" fg:w="1"/><text x="15.3247%" y="143.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.06%)</title><rect x="15.0463%" y="213" width="0.0569%" height="15" fill="rgb(209,9,3)" fg:x="1057" fg:w="4"/><text x="15.2963%" y="223.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.06%)</title><rect x="15.0463%" y="197" width="0.0569%" height="15" fill="rgb(230,59,30)" fg:x="1057" fg:w="4"/><text x="15.2963%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.06%)</title><rect x="15.0463%" y="181" width="0.0569%" height="15" fill="rgb(209,121,21)" fg:x="1057" fg:w="4"/><text x="15.2963%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="15.0890%" y="165" width="0.0142%" height="15" fill="rgb(220,109,13)" fg:x="1060" fg:w="1"/><text x="15.3390%" y="175.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer_forest::RelaxerForest&gt; (6 samples, 0.09%)</title><rect x="15.0320%" y="261" width="0.0854%" height="15" fill="rgb(232,18,1)" fg:x="1056" fg:w="6"/><text x="15.2820%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.09%)</title><rect x="15.0320%" y="245" width="0.0854%" height="15" fill="rgb(215,41,42)" fg:x="1056" fg:w="6"/><text x="15.2820%" y="255.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.07%)</title><rect x="15.0463%" y="229" width="0.0712%" height="15" fill="rgb(224,123,36)" fg:x="1057" fg:w="5"/><text x="15.2963%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.01%)</title><rect x="15.1032%" y="213" width="0.0142%" height="15" fill="rgb(240,125,3)" fg:x="1061" fg:w="1"/><text x="15.3532%" y="223.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (18 samples, 0.26%)</title><rect x="15.1174%" y="261" width="0.2562%" height="15" fill="rgb(205,98,50)" fg:x="1062" fg:w="18"/><text x="15.3674%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (2 samples, 0.03%)</title><rect x="15.3452%" y="245" width="0.0285%" height="15" fill="rgb(205,185,37)" fg:x="1078" fg:w="2"/><text x="15.5952%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="15.3737%" y="245" width="0.0142%" height="15" fill="rgb(238,207,15)" fg:x="1080" fg:w="1"/><text x="15.6237%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (9 samples, 0.13%)</title><rect x="15.3879%" y="245" width="0.1281%" height="15" fill="rgb(213,199,42)" fg:x="1081" fg:w="9"/><text x="15.6379%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="16.4982%" y="229" width="0.0142%" height="15" fill="rgb(235,201,11)" fg:x="1159" fg:w="1"/><text x="16.7482%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.03%)</title><rect x="16.5125%" y="229" width="0.0285%" height="15" fill="rgb(207,46,11)" fg:x="1160" fg:w="2"/><text x="16.7625%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="16.5409%" y="213" width="0.0142%" height="15" fill="rgb(241,35,35)" fg:x="1162" fg:w="1"/><text x="16.7909%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="16.5836%" y="197" width="0.0142%" height="15" fill="rgb(243,32,47)" fg:x="1165" fg:w="1"/><text x="16.8336%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.04%)</title><rect x="16.5979%" y="197" width="0.0427%" height="15" fill="rgb(247,202,23)" fg:x="1166" fg:w="3"/><text x="16.8479%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.07%)</title><rect x="16.6406%" y="197" width="0.0712%" height="15" fill="rgb(219,102,11)" fg:x="1169" fg:w="5"/><text x="16.8906%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.04%)</title><rect x="16.6690%" y="181" width="0.0427%" height="15" fill="rgb(243,110,44)" fg:x="1171" fg:w="3"/><text x="16.9190%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.04%)</title><rect x="16.6690%" y="165" width="0.0427%" height="15" fill="rgb(222,74,54)" fg:x="1171" fg:w="3"/><text x="16.9190%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (13 samples, 0.19%)</title><rect x="16.5409%" y="229" width="0.1851%" height="15" fill="rgb(216,99,12)" fg:x="1162" fg:w="13"/><text x="16.7909%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (12 samples, 0.17%)</title><rect x="16.5552%" y="213" width="0.1708%" height="15" fill="rgb(226,22,26)" fg:x="1163" fg:w="12"/><text x="16.8052%" y="223.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.01%)</title><rect x="16.7117%" y="197" width="0.0142%" height="15" fill="rgb(217,163,10)" fg:x="1174" fg:w="1"/><text x="16.9617%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.04%)</title><rect x="16.8399%" y="213" width="0.0427%" height="15" fill="rgb(213,25,53)" fg:x="1183" fg:w="3"/><text x="17.0899%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="16.8826%" y="213" width="0.0142%" height="15" fill="rgb(252,105,26)" fg:x="1186" fg:w="1"/><text x="17.1326%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.07%)</title><rect x="17.1103%" y="197" width="0.0712%" height="15" fill="rgb(220,39,43)" fg:x="1202" fg:w="5"/><text x="17.3603%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.48%)</title><rect x="16.7260%" y="229" width="0.4840%" height="15" fill="rgb(229,68,48)" fg:x="1175" fg:w="34"/><text x="16.9760%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (22 samples, 0.31%)</title><rect x="16.8968%" y="213" width="0.3132%" height="15" fill="rgb(252,8,32)" fg:x="1187" fg:w="22"/><text x="17.1468%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.03%)</title><rect x="17.1815%" y="197" width="0.0285%" height="15" fill="rgb(223,20,43)" fg:x="1207" fg:w="2"/><text x="17.4315%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (4 samples, 0.06%)</title><rect x="17.2100%" y="197" width="0.0569%" height="15" fill="rgb(229,81,49)" fg:x="1209" fg:w="4"/><text x="17.4600%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.06%)</title><rect x="17.2100%" y="181" width="0.0569%" height="15" fill="rgb(236,28,36)" fg:x="1209" fg:w="4"/><text x="17.4600%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="17.2242%" y="165" width="0.0427%" height="15" fill="rgb(249,185,26)" fg:x="1210" fg:w="3"/><text x="17.4742%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="17.2669%" y="181" width="0.0142%" height="15" fill="rgb(249,174,33)" fg:x="1213" fg:w="1"/><text x="17.5169%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::convert::From&lt;[(K,V) (15 samples, 0.21%)</title><rect x="17.2100%" y="229" width="0.2135%" height="15" fill="rgb(233,201,37)" fg:x="1209" fg:w="15"/><text x="17.4600%" y="239.50"></text></g><g><title> N]&gt;&gt;::from (15 samples, 0.21%)</title><rect x="17.2100%" y="213" width="0.2135%" height="15" fill="rgb(221,78,26)" fg:x="1209" fg:w="15"/><text x="17.4600%" y="223.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (11 samples, 0.16%)</title><rect x="17.2669%" y="197" width="0.1566%" height="15" fill="rgb(250,127,30)" fg:x="1213" fg:w="11"/><text x="17.5169%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (10 samples, 0.14%)</title><rect x="17.2811%" y="181" width="0.1423%" height="15" fill="rgb(230,49,44)" fg:x="1214" fg:w="10"/><text x="17.5311%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.07%)</title><rect x="17.3523%" y="165" width="0.0712%" height="15" fill="rgb(229,67,23)" fg:x="1219" fg:w="5"/><text x="17.6023%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="17.4235%" y="229" width="0.0142%" height="15" fill="rgb(249,83,47)" fg:x="1224" fg:w="1"/><text x="17.6735%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.03%)</title><rect x="17.4377%" y="213" width="0.0285%" height="15" fill="rgb(215,43,3)" fg:x="1225" fg:w="2"/><text x="17.6877%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.07%)</title><rect x="17.4662%" y="213" width="0.0712%" height="15" fill="rgb(238,154,13)" fg:x="1227" fg:w="5"/><text x="17.7162%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="17.5231%" y="197" width="0.0142%" height="15" fill="rgb(219,56,2)" fg:x="1231" fg:w="1"/><text x="17.7731%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.01%)</title><rect x="17.5231%" y="181" width="0.0142%" height="15" fill="rgb(233,0,4)" fg:x="1231" fg:w="1"/><text x="17.7731%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.01%)</title><rect x="17.5231%" y="165" width="0.0142%" height="15" fill="rgb(235,30,7)" fg:x="1231" fg:w="1"/><text x="17.7731%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.01%)</title><rect x="17.5231%" y="149" width="0.0142%" height="15" fill="rgb(250,79,13)" fg:x="1231" fg:w="1"/><text x="17.7731%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="17.5374%" y="197" width="0.0142%" height="15" fill="rgb(211,146,34)" fg:x="1232" fg:w="1"/><text x="17.7874%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.03%)</title><rect x="17.5516%" y="197" width="0.0285%" height="15" fill="rgb(228,22,38)" fg:x="1233" fg:w="2"/><text x="17.8016%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::bulk_build_from_sorted_iter (11 samples, 0.16%)</title><rect x="17.5374%" y="213" width="0.1566%" height="15" fill="rgb(235,168,5)" fg:x="1232" fg:w="11"/><text x="17.7874%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (8 samples, 0.11%)</title><rect x="17.5801%" y="197" width="0.1139%" height="15" fill="rgb(221,155,16)" fg:x="1235" fg:w="8"/><text x="17.8301%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (87 samples, 1.24%)</title><rect x="17.4377%" y="229" width="1.2384%" height="15" fill="rgb(215,215,53)" fg:x="1225" fg:w="87"/><text x="17.6877%" y="239.50"></text></g><g><title>mwpf`core::slice::sort::merge_sort (69 samples, 0.98%)</title><rect x="17.6940%" y="213" width="0.9822%" height="15" fill="rgb(223,4,10)" fg:x="1243" fg:w="69"/><text x="17.9440%" y="223.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (10 samples, 0.14%)</title><rect x="18.5338%" y="197" width="0.1423%" height="15" fill="rgb(234,103,6)" fg:x="1302" fg:w="10"/><text x="18.7838%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.10%)</title><rect x="18.6762%" y="229" width="0.0996%" height="15" fill="rgb(227,97,0)" fg:x="1312" fg:w="7"/><text x="18.9262%" y="239.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.01%)</title><rect x="18.7758%" y="229" width="0.0142%" height="15" fill="rgb(234,150,53)" fg:x="1319" fg:w="1"/><text x="19.0258%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.11%)</title><rect x="19.5018%" y="197" width="0.1139%" height="15" fill="rgb(228,201,54)" fg:x="1370" fg:w="8"/><text x="19.7518%" y="207.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.01%)</title><rect x="19.6157%" y="197" width="0.0142%" height="15" fill="rgb(222,22,37)" fg:x="1378" fg:w="1"/><text x="19.8657%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (11 samples, 0.16%)</title><rect x="19.5018%" y="213" width="0.1566%" height="15" fill="rgb(237,53,32)" fg:x="1370" fg:w="11"/><text x="19.7518%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.03%)</title><rect x="19.6299%" y="197" width="0.0285%" height="15" fill="rgb(233,25,53)" fg:x="1379" fg:w="2"/><text x="19.8799%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (62 samples, 0.88%)</title><rect x="18.7900%" y="229" width="0.8826%" height="15" fill="rgb(210,40,34)" fg:x="1320" fg:w="62"/><text x="19.0400%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.01%)</title><rect x="19.6584%" y="213" width="0.0142%" height="15" fill="rgb(241,220,44)" fg:x="1381" fg:w="1"/><text x="19.9084%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (12 samples, 0.17%)</title><rect x="19.6726%" y="229" width="0.1708%" height="15" fill="rgb(235,28,35)" fg:x="1382" fg:w="12"/><text x="19.9226%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (9 samples, 0.13%)</title><rect x="19.8434%" y="229" width="0.1281%" height="15" fill="rgb(210,56,17)" fg:x="1394" fg:w="9"/><text x="20.0934%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (14 samples, 0.20%)</title><rect x="19.9715%" y="229" width="0.1993%" height="15" fill="rgb(224,130,29)" fg:x="1403" fg:w="14"/><text x="20.2215%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.09%)</title><rect x="20.1851%" y="213" width="0.0854%" height="15" fill="rgb(235,212,8)" fg:x="1418" fg:w="6"/><text x="20.4351%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (11 samples, 0.16%)</title><rect x="20.1708%" y="229" width="0.1566%" height="15" fill="rgb(223,33,50)" fg:x="1417" fg:w="11"/><text x="20.4208%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (4 samples, 0.06%)</title><rect x="20.2705%" y="213" width="0.0569%" height="15" fill="rgb(219,149,13)" fg:x="1424" fg:w="4"/><text x="20.5205%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::node::BalancingContext&lt;K,V&gt;::bulk_steal_left (1 samples, 0.01%)</title><rect x="20.3132%" y="197" width="0.0142%" height="15" fill="rgb(250,156,29)" fg:x="1427" fg:w="1"/><text x="20.5632%" y="207.50"></text></g><g><title>mwpf`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="20.3274%" y="213" width="0.0142%" height="15" fill="rgb(216,193,19)" fg:x="1428" fg:w="1"/><text x="20.5774%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.01%)</title><rect x="20.3416%" y="197" width="0.0142%" height="15" fill="rgb(216,135,14)" fg:x="1429" fg:w="1"/><text x="20.5916%" y="207.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.04%)</title><rect x="20.3274%" y="229" width="0.0427%" height="15" fill="rgb(241,47,5)" fg:x="1428" fg:w="3"/><text x="20.5774%" y="239.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (2 samples, 0.03%)</title><rect x="20.3416%" y="213" width="0.0285%" height="15" fill="rgb(233,42,35)" fg:x="1429" fg:w="2"/><text x="20.5916%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.01%)</title><rect x="20.3559%" y="197" width="0.0142%" height="15" fill="rgb(231,13,6)" fg:x="1430" fg:w="1"/><text x="20.6059%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.01%)</title><rect x="20.3559%" y="181" width="0.0142%" height="15" fill="rgb(207,181,40)" fg:x="1430" fg:w="1"/><text x="20.6059%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.01%)</title><rect x="20.3559%" y="165" width="0.0142%" height="15" fill="rgb(254,173,49)" fg:x="1430" fg:w="1"/><text x="20.6059%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.01%)</title><rect x="20.3559%" y="149" width="0.0142%" height="15" fill="rgb(221,1,38)" fg:x="1430" fg:w="1"/><text x="20.6059%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.06%)</title><rect x="27.2456%" y="213" width="0.0569%" height="15" fill="rgb(206,124,46)" fg:x="1914" fg:w="4"/><text x="27.4956%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.03%)</title><rect x="27.3025%" y="213" width="0.0285%" height="15" fill="rgb(249,21,11)" fg:x="1918" fg:w="2"/><text x="27.5525%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="27.3310%" y="213" width="0.0142%" height="15" fill="rgb(222,201,40)" fg:x="1920" fg:w="1"/><text x="27.5810%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.23%)</title><rect x="27.3452%" y="213" width="0.2278%" height="15" fill="rgb(235,61,29)" fg:x="1921" fg:w="16"/><text x="27.5952%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="27.5872%" y="197" width="0.0142%" height="15" fill="rgb(219,207,3)" fg:x="1938" fg:w="1"/><text x="27.8372%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="27.7153%" y="181" width="0.0142%" height="15" fill="rgb(222,56,46)" fg:x="1947" fg:w="1"/><text x="27.9653%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.01%)</title><rect x="27.7295%" y="181" width="0.0142%" height="15" fill="rgb(239,76,54)" fg:x="1948" fg:w="1"/><text x="27.9795%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.09%)</title><rect x="27.7438%" y="181" width="0.0854%" height="15" fill="rgb(231,124,27)" fg:x="1949" fg:w="6"/><text x="27.9938%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (30 samples, 0.43%)</title><rect x="27.8292%" y="181" width="0.4270%" height="15" fill="rgb(249,195,6)" fg:x="1955" fg:w="30"/><text x="28.0792%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (15 samples, 0.21%)</title><rect x="28.0427%" y="165" width="0.2135%" height="15" fill="rgb(237,174,47)" fg:x="1970" fg:w="15"/><text x="28.2927%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (7 samples, 0.10%)</title><rect x="28.1566%" y="149" width="0.0996%" height="15" fill="rgb(206,201,31)" fg:x="1978" fg:w="7"/><text x="28.4066%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="28.2420%" y="133" width="0.0142%" height="15" fill="rgb(231,57,52)" fg:x="1984" fg:w="1"/><text x="28.4920%" y="143.50"></text></g><g><title>mwpf`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="28.2562%" y="181" width="0.0142%" height="15" fill="rgb(248,177,22)" fg:x="1985" fg:w="1"/><text x="28.5062%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (51 samples, 0.73%)</title><rect x="27.5730%" y="213" width="0.7260%" height="15" fill="rgb(215,211,37)" fg:x="1937" fg:w="51"/><text x="27.8230%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (49 samples, 0.70%)</title><rect x="27.6014%" y="197" width="0.6975%" height="15" fill="rgb(241,128,51)" fg:x="1939" fg:w="49"/><text x="27.8514%" y="207.50"></text></g><g><title>mwpf`__rdl_alloc (2 samples, 0.03%)</title><rect x="28.2705%" y="181" width="0.0285%" height="15" fill="rgb(227,165,31)" fg:x="1986" fg:w="2"/><text x="28.5205%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="28.2989%" y="213" width="0.0427%" height="15" fill="rgb(228,167,24)" fg:x="1988" fg:w="3"/><text x="28.5489%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.06%)</title><rect x="28.4840%" y="197" width="0.0569%" height="15" fill="rgb(228,143,12)" fg:x="2001" fg:w="4"/><text x="28.7340%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 samples, 0.21%)</title><rect x="28.3416%" y="213" width="0.2135%" height="15" fill="rgb(249,149,8)" fg:x="1991" fg:w="15"/><text x="28.5916%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="28.5409%" y="197" width="0.0142%" height="15" fill="rgb(243,35,44)" fg:x="2005" fg:w="1"/><text x="28.7909%" y="207.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (588 samples, 8.37%)</title><rect x="20.3701%" y="229" width="8.3701%" height="15" fill="rgb(246,89,9)" fg:x="1431" fg:w="588"/><text x="20.6201%" y="239.50">mwpf`mwpf::i..</text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (13 samples, 0.19%)</title><rect x="28.5552%" y="213" width="0.1851%" height="15" fill="rgb(233,213,13)" fg:x="2006" fg:w="13"/><text x="28.8052%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.03%)</title><rect x="28.7117%" y="197" width="0.0285%" height="15" fill="rgb(233,141,41)" fg:x="2017" fg:w="2"/><text x="28.9617%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.03%)</title><rect x="28.7117%" y="181" width="0.0285%" height="15" fill="rgb(239,167,4)" fg:x="2017" fg:w="2"/><text x="28.9617%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.01%)</title><rect x="28.7260%" y="165" width="0.0142%" height="15" fill="rgb(209,217,16)" fg:x="2018" fg:w="1"/><text x="28.9760%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.01%)</title><rect x="28.9822%" y="213" width="0.0142%" height="15" fill="rgb(219,88,35)" fg:x="2036" fg:w="1"/><text x="29.2322%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="28.9964%" y="213" width="0.0142%" height="15" fill="rgb(220,193,23)" fg:x="2037" fg:w="1"/><text x="29.2464%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (54 samples, 0.77%)</title><rect x="45.8648%" y="197" width="0.7687%" height="15" fill="rgb(230,90,52)" fg:x="3222" fg:w="54"/><text x="46.1148%" y="207.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (1,244 samples, 17.71%)</title><rect x="29.0107%" y="213" width="17.7082%" height="15" fill="rgb(252,106,19)" fg:x="2038" fg:w="1244"/><text x="29.2607%" y="223.50">mwpf`mwpf::matrix::echelon::..</text></g><g><title>mwpf`mwpf::matrix::row::ParityRow::xor_two_rows (6 samples, 0.09%)</title><rect x="46.6335%" y="197" width="0.0854%" height="15" fill="rgb(206,74,20)" fg:x="3276" fg:w="6"/><text x="46.8835%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.06%)</title><rect x="46.7900%" y="197" width="0.0569%" height="15" fill="rgb(230,138,44)" fg:x="3287" fg:w="4"/><text x="47.0400%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.03%)</title><rect x="46.8185%" y="181" width="0.0285%" height="15" fill="rgb(235,182,43)" fg:x="3289" fg:w="2"/><text x="47.0685%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="46.8470%" y="197" width="0.0427%" height="15" fill="rgb(242,16,51)" fg:x="3291" fg:w="3"/><text x="47.0970%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="47.3879%" y="165" width="0.0142%" height="15" fill="rgb(248,9,4)" fg:x="3329" fg:w="1"/><text x="47.6379%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.01%)</title><rect x="47.4021%" y="165" width="0.0142%" height="15" fill="rgb(210,31,22)" fg:x="3330" fg:w="1"/><text x="47.6521%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="47.4164%" y="165" width="0.0142%" height="15" fill="rgb(239,54,39)" fg:x="3331" fg:w="1"/><text x="47.6664%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (6 samples, 0.09%)</title><rect x="47.3594%" y="181" width="0.0854%" height="15" fill="rgb(230,99,41)" fg:x="3327" fg:w="6"/><text x="47.6094%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.01%)</title><rect x="47.4306%" y="165" width="0.0142%" height="15" fill="rgb(253,106,12)" fg:x="3332" fg:w="1"/><text x="47.6806%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (41 samples, 0.58%)</title><rect x="46.8897%" y="197" width="0.5836%" height="15" fill="rgb(213,46,41)" fg:x="3294" fg:w="41"/><text x="47.1397%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.03%)</title><rect x="47.4448%" y="181" width="0.0285%" height="15" fill="rgb(215,133,35)" fg:x="3333" fg:w="2"/><text x="47.6948%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.04%)</title><rect x="47.4733%" y="197" width="0.0427%" height="15" fill="rgb(213,28,5)" fg:x="3335" fg:w="3"/><text x="47.7233%" y="207.50"></text></g><g><title>mwpf`mwpf::matrix::interface::MatrixTail::set_tail_edges (59 samples, 0.84%)</title><rect x="46.7189%" y="213" width="0.8399%" height="15" fill="rgb(215,77,49)" fg:x="3282" fg:w="59"/><text x="46.9689%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.04%)</title><rect x="47.5160%" y="197" width="0.0427%" height="15" fill="rgb(248,100,22)" fg:x="3338" fg:w="3"/><text x="47.7660%" y="207.50"></text></g><g><title>mwpf`mwpf::matrix::hair::HairView&lt;M&gt;::new (1,325 samples, 18.86%)</title><rect x="28.7402%" y="229" width="18.8612%" height="15" fill="rgb(208,67,9)" fg:x="2019" fg:w="1325"/><text x="28.9902%" y="239.50">mwpf`mwpf::matrix::hair::Hair..</text></g><g><title>mwpf`mwpf::matrix::row::ParityRow::xor_two_rows (3 samples, 0.04%)</title><rect x="47.5587%" y="213" width="0.0427%" height="15" fill="rgb(219,133,21)" fg:x="3341" fg:w="3"/><text x="47.8087%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="52.9253%" y="213" width="0.0142%" height="15" fill="rgb(246,46,29)" fg:x="3718" fg:w="1"/><text x="53.1753%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.03%)</title><rect x="52.9395%" y="213" width="0.0285%" height="15" fill="rgb(246,185,52)" fg:x="3719" fg:w="2"/><text x="53.1895%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.03%)</title><rect x="52.9680%" y="213" width="0.0285%" height="15" fill="rgb(252,136,11)" fg:x="3721" fg:w="2"/><text x="53.2180%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.01%)</title><rect x="52.9964%" y="213" width="0.0142%" height="15" fill="rgb(219,138,53)" fg:x="3723" fg:w="1"/><text x="53.2464%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.04%)</title><rect x="53.0107%" y="213" width="0.0427%" height="15" fill="rgb(211,51,23)" fg:x="3724" fg:w="3"/><text x="53.2607%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.11%)</title><rect x="53.0534%" y="213" width="0.1139%" height="15" fill="rgb(247,221,28)" fg:x="3727" fg:w="8"/><text x="53.3034%" y="223.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.01%)</title><rect x="53.1673%" y="213" width="0.0142%" height="15" fill="rgb(251,222,45)" fg:x="3735" fg:w="1"/><text x="53.4173%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.06%)</title><rect x="53.3523%" y="197" width="0.0569%" height="15" fill="rgb(217,162,53)" fg:x="3748" fg:w="4"/><text x="53.6023%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.01%)</title><rect x="53.4093%" y="197" width="0.0142%" height="15" fill="rgb(229,93,14)" fg:x="3752" fg:w="1"/><text x="53.6593%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.01%)</title><rect x="53.4235%" y="197" width="0.0142%" height="15" fill="rgb(209,67,49)" fg:x="3753" fg:w="1"/><text x="53.6735%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.01%)</title><rect x="53.4235%" y="181" width="0.0142%" height="15" fill="rgb(213,87,29)" fg:x="3753" fg:w="1"/><text x="53.6735%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.01%)</title><rect x="53.4235%" y="165" width="0.0142%" height="15" fill="rgb(205,151,52)" fg:x="3753" fg:w="1"/><text x="53.6735%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (19 samples, 0.27%)</title><rect x="53.1815%" y="213" width="0.2705%" height="15" fill="rgb(253,215,39)" fg:x="3736" fg:w="19"/><text x="53.4315%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="53.4377%" y="197" width="0.0142%" height="15" fill="rgb(221,220,41)" fg:x="3754" fg:w="1"/><text x="53.6877%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.03%)</title><rect x="53.4662%" y="197" width="0.0285%" height="15" fill="rgb(218,133,21)" fg:x="3756" fg:w="2"/><text x="53.7162%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="53.4947%" y="197" width="0.0142%" height="15" fill="rgb(221,193,43)" fg:x="3758" fg:w="1"/><text x="53.7447%" y="207.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.01%)</title><rect x="53.5089%" y="197" width="0.0142%" height="15" fill="rgb(240,128,52)" fg:x="3759" fg:w="1"/><text x="53.7589%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.03%)</title><rect x="53.5516%" y="181" width="0.0285%" height="15" fill="rgb(253,114,12)" fg:x="3762" fg:w="2"/><text x="53.8016%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.03%)</title><rect x="53.5516%" y="165" width="0.0285%" height="15" fill="rgb(215,223,47)" fg:x="3762" fg:w="2"/><text x="53.8016%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.01%)</title><rect x="53.5943%" y="149" width="0.0142%" height="15" fill="rgb(248,225,23)" fg:x="3765" fg:w="1"/><text x="53.8443%" y="159.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (13 samples, 0.19%)</title><rect x="53.4520%" y="213" width="0.1851%" height="15" fill="rgb(250,108,0)" fg:x="3755" fg:w="13"/><text x="53.7020%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (8 samples, 0.11%)</title><rect x="53.5231%" y="197" width="0.1139%" height="15" fill="rgb(228,208,7)" fg:x="3760" fg:w="8"/><text x="53.7731%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.06%)</title><rect x="53.5801%" y="181" width="0.0569%" height="15" fill="rgb(244,45,10)" fg:x="3764" fg:w="4"/><text x="53.8301%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="53.5943%" y="165" width="0.0427%" height="15" fill="rgb(207,125,25)" fg:x="3765" fg:w="3"/><text x="53.8443%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2 samples, 0.03%)</title><rect x="53.6085%" y="149" width="0.0285%" height="15" fill="rgb(210,195,18)" fg:x="3766" fg:w="2"/><text x="53.8585%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.04%)</title><rect x="53.7794%" y="197" width="0.0427%" height="15" fill="rgb(249,80,12)" fg:x="3778" fg:w="3"/><text x="54.0294%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.03%)</title><rect x="53.7936%" y="181" width="0.0285%" height="15" fill="rgb(221,65,9)" fg:x="3779" fg:w="2"/><text x="54.0436%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_single_hair::PluginSingleHair as mwpf::plugin::PluginImpl&gt;::find_relaxers (2,692 samples, 38.32%)</title><rect x="15.5160%" y="245" width="38.3203%" height="15" fill="rgb(235,49,36)" fg:x="1090" fg:w="2692"/><text x="15.7660%" y="255.50">mwpf`&lt;mwpf::plugin_single_hair::PluginSingleHair as mwpf::plug..</text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (438 samples, 6.23%)</title><rect x="47.6014%" y="229" width="6.2349%" height="15" fill="rgb(225,32,20)" fg:x="3344" fg:w="438"/><text x="47.8514%" y="239.50">mwpf`mwp..</text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (14 samples, 0.20%)</title><rect x="53.6370%" y="213" width="0.1993%" height="15" fill="rgb(215,141,46)" fg:x="3768" fg:w="14"/><text x="53.8870%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="53.8221%" y="197" width="0.0142%" height="15" fill="rgb(250,160,47)" fg:x="3781" fg:w="1"/><text x="54.0721%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.01%)</title><rect x="53.8221%" y="181" width="0.0142%" height="15" fill="rgb(216,222,40)" fg:x="3781" fg:w="1"/><text x="54.0721%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.01%)</title><rect x="53.8221%" y="165" width="0.0142%" height="15" fill="rgb(234,217,39)" fg:x="3781" fg:w="1"/><text x="54.0721%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.01%)</title><rect x="53.8363%" y="213" width="0.0142%" height="15" fill="rgb(207,178,40)" fg:x="3782" fg:w="1"/><text x="54.0863%" y="223.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.01%)</title><rect x="53.8363%" y="197" width="0.0142%" height="15" fill="rgb(221,136,13)" fg:x="3782" fg:w="1"/><text x="54.0863%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.01%)</title><rect x="53.8505%" y="197" width="0.0142%" height="15" fill="rgb(249,199,10)" fg:x="3783" fg:w="1"/><text x="54.1005%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="53.9502%" y="181" width="0.0142%" height="15" fill="rgb(249,222,13)" fg:x="3790" fg:w="1"/><text x="54.2002%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="53.9644%" y="181" width="0.0142%" height="15" fill="rgb(244,185,38)" fg:x="3791" fg:w="1"/><text x="54.2144%" y="191.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete_ptr (10 samples, 0.14%)</title><rect x="53.8505%" y="213" width="0.1423%" height="15" fill="rgb(236,202,9)" fg:x="3783" fg:w="10"/><text x="54.1005%" y="223.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (9 samples, 0.13%)</title><rect x="53.8648%" y="197" width="0.1281%" height="15" fill="rgb(250,229,37)" fg:x="3784" fg:w="9"/><text x="54.1148%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.01%)</title><rect x="53.9786%" y="181" width="0.0142%" height="15" fill="rgb(206,174,23)" fg:x="3792" fg:w="1"/><text x="54.2286%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="53.9786%" y="165" width="0.0142%" height="15" fill="rgb(211,33,43)" fg:x="3792" fg:w="1"/><text x="54.2286%" y="175.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (5 samples, 0.07%)</title><rect x="53.9929%" y="213" width="0.0712%" height="15" fill="rgb(245,58,50)" fg:x="3793" fg:w="5"/><text x="54.2429%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (3 samples, 0.04%)</title><rect x="54.0214%" y="197" width="0.0427%" height="15" fill="rgb(244,68,36)" fg:x="3795" fg:w="3"/><text x="54.2714%" y="207.50"></text></g><g><title>mwpf`DYLD-STUB$$memcpy (1 samples, 0.01%)</title><rect x="54.1210%" y="197" width="0.0142%" height="15" fill="rgb(232,229,15)" fg:x="3802" fg:w="1"/><text x="54.3710%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (22 samples, 0.31%)</title><rect x="53.8363%" y="245" width="0.3132%" height="15" fill="rgb(254,30,23)" fg:x="3782" fg:w="22"/><text x="54.0863%" y="255.50"></text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (22 samples, 0.31%)</title><rect x="53.8363%" y="229" width="0.3132%" height="15" fill="rgb(235,160,14)" fg:x="3782" fg:w="22"/><text x="54.0863%" y="239.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (6 samples, 0.09%)</title><rect x="54.0641%" y="213" width="0.0854%" height="15" fill="rgb(212,155,44)" fg:x="3798" fg:w="6"/><text x="54.3141%" y="223.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.01%)</title><rect x="54.1352%" y="197" width="0.0142%" height="15" fill="rgb(226,2,50)" fg:x="3803" fg:w="1"/><text x="54.3852%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (1 samples, 0.01%)</title><rect x="54.1495%" y="245" width="0.0142%" height="15" fill="rgb(234,177,6)" fg:x="3804" fg:w="1"/><text x="54.3995%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="54.3630%" y="229" width="0.0285%" height="15" fill="rgb(217,24,9)" fg:x="3819" fg:w="2"/><text x="54.6130%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.01%)</title><rect x="54.3915%" y="229" width="0.0142%" height="15" fill="rgb(220,13,46)" fg:x="3821" fg:w="1"/><text x="54.6415%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.04%)</title><rect x="54.4057%" y="229" width="0.0427%" height="15" fill="rgb(239,221,27)" fg:x="3822" fg:w="3"/><text x="54.6557%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (5 samples, 0.07%)</title><rect x="54.4484%" y="197" width="0.0712%" height="15" fill="rgb(222,198,25)" fg:x="3825" fg:w="5"/><text x="54.6984%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="54.6050%" y="181" width="0.0142%" height="15" fill="rgb(211,99,13)" fg:x="3836" fg:w="1"/><text x="54.8550%" y="191.50"></text></g><g><title>mwpf`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="54.6192%" y="181" width="0.0142%" height="15" fill="rgb(232,111,31)" fg:x="3837" fg:w="1"/><text x="54.8692%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.01%)</title><rect x="54.8043%" y="165" width="0.0142%" height="15" fill="rgb(245,82,37)" fg:x="3850" fg:w="1"/><text x="55.0543%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.03%)</title><rect x="54.8185%" y="165" width="0.0285%" height="15" fill="rgb(227,149,46)" fg:x="3851" fg:w="2"/><text x="55.0685%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (10 samples, 0.14%)</title><rect x="54.8470%" y="165" width="0.1423%" height="15" fill="rgb(218,36,50)" fg:x="3853" fg:w="10"/><text x="55.0970%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (10 samples, 0.14%)</title><rect x="54.8470%" y="149" width="0.1423%" height="15" fill="rgb(226,80,48)" fg:x="3853" fg:w="10"/><text x="55.0970%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (10 samples, 0.14%)</title><rect x="54.8470%" y="133" width="0.1423%" height="15" fill="rgb(238,224,15)" fg:x="3853" fg:w="10"/><text x="55.0970%" y="143.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.57%)</title><rect x="54.4484%" y="213" width="0.5694%" height="15" fill="rgb(241,136,10)" fg:x="3825" fg:w="40"/><text x="54.6984%" y="223.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (35 samples, 0.50%)</title><rect x="54.5196%" y="197" width="0.4982%" height="15" fill="rgb(208,32,45)" fg:x="3830" fg:w="35"/><text x="54.7696%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (27 samples, 0.38%)</title><rect x="54.6335%" y="181" width="0.3843%" height="15" fill="rgb(207,135,9)" fg:x="3838" fg:w="27"/><text x="54.8835%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.03%)</title><rect x="54.9893%" y="165" width="0.0285%" height="15" fill="rgb(206,86,44)" fg:x="3863" fg:w="2"/><text x="55.2393%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="55.0320%" y="197" width="0.0142%" height="15" fill="rgb(245,177,15)" fg:x="3866" fg:w="1"/><text x="55.2820%" y="207.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::add (64 samples, 0.91%)</title><rect x="54.1637%" y="245" width="0.9110%" height="15" fill="rgb(206,64,50)" fg:x="3805" fg:w="64"/><text x="54.4137%" y="255.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (44 samples, 0.63%)</title><rect x="54.4484%" y="229" width="0.6263%" height="15" fill="rgb(234,36,40)" fg:x="3825" fg:w="44"/><text x="54.6984%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.06%)</title><rect x="55.0178%" y="213" width="0.0569%" height="15" fill="rgb(213,64,8)" fg:x="3865" fg:w="4"/><text x="55.2678%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.03%)</title><rect x="55.0463%" y="197" width="0.0285%" height="15" fill="rgb(210,75,36)" fg:x="3867" fg:w="2"/><text x="55.2963%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.03%)</title><rect x="55.0463%" y="181" width="0.0285%" height="15" fill="rgb(229,88,21)" fg:x="3867" fg:w="2"/><text x="55.2963%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.19%)</title><rect x="55.1601%" y="213" width="0.1851%" height="15" fill="rgb(252,204,47)" fg:x="3875" fg:w="13"/><text x="55.4101%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.11%)</title><rect x="55.2313%" y="197" width="0.1139%" height="15" fill="rgb(208,77,27)" fg:x="3880" fg:w="8"/><text x="55.4813%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.13%)</title><rect x="55.3452%" y="213" width="0.1281%" height="15" fill="rgb(221,76,26)" fg:x="3888" fg:w="9"/><text x="55.5952%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (27 samples, 0.38%)</title><rect x="55.4733%" y="213" width="0.3843%" height="15" fill="rgb(225,139,18)" fg:x="3897" fg:w="27"/><text x="55.7233%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.30%)</title><rect x="55.5587%" y="197" width="0.2989%" height="15" fill="rgb(230,137,11)" fg:x="3903" fg:w="21"/><text x="55.8087%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.07%)</title><rect x="55.8577%" y="197" width="0.0712%" height="15" fill="rgb(212,28,1)" fg:x="3924" fg:w="5"/><text x="56.1077%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (20 samples, 0.28%)</title><rect x="55.9288%" y="197" width="0.2847%" height="15" fill="rgb(248,164,17)" fg:x="3929" fg:w="20"/><text x="56.1788%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.26%)</title><rect x="55.9573%" y="181" width="0.2562%" height="15" fill="rgb(222,171,42)" fg:x="3931" fg:w="18"/><text x="56.2073%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="56.2135%" y="181" width="0.0142%" height="15" fill="rgb(243,84,45)" fg:x="3949" fg:w="1"/><text x="56.4635%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (27 samples, 0.38%)</title><rect x="55.8577%" y="213" width="0.3843%" height="15" fill="rgb(252,49,23)" fg:x="3924" fg:w="27"/><text x="56.1077%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.03%)</title><rect x="56.2135%" y="197" width="0.0285%" height="15" fill="rgb(215,19,7)" fg:x="3949" fg:w="2"/><text x="56.4635%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.01%)</title><rect x="56.2278%" y="181" width="0.0142%" height="15" fill="rgb(238,81,41)" fg:x="3950" fg:w="1"/><text x="56.4778%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.01%)</title><rect x="56.2420%" y="213" width="0.0142%" height="15" fill="rgb(210,199,37)" fg:x="3951" fg:w="1"/><text x="56.4920%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="56.2420%" y="197" width="0.0142%" height="15" fill="rgb(244,192,49)" fg:x="3951" fg:w="1"/><text x="56.4920%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.01%)</title><rect x="56.2562%" y="213" width="0.0142%" height="15" fill="rgb(226,211,11)" fg:x="3952" fg:w="1"/><text x="56.5062%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.04%)</title><rect x="56.2705%" y="197" width="0.0427%" height="15" fill="rgb(236,162,54)" fg:x="3953" fg:w="3"/><text x="56.5205%" y="207.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (27 samples, 0.38%)</title><rect x="56.2705%" y="213" width="0.3843%" height="15" fill="rgb(220,229,9)" fg:x="3953" fg:w="27"/><text x="56.5205%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (24 samples, 0.34%)</title><rect x="56.3132%" y="197" width="0.3416%" height="15" fill="rgb(250,87,22)" fg:x="3956" fg:w="24"/><text x="56.5632%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.28%)</title><rect x="56.3701%" y="181" width="0.2847%" height="15" fill="rgb(239,43,17)" fg:x="3960" fg:w="20"/><text x="56.6201%" y="191.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (19 samples, 0.27%)</title><rect x="56.6548%" y="213" width="0.2705%" height="15" fill="rgb(231,177,25)" fg:x="3980" fg:w="19"/><text x="56.9048%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.01%)</title><rect x="56.9110%" y="197" width="0.0142%" height="15" fill="rgb(219,179,1)" fg:x="3998" fg:w="1"/><text x="57.1610%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="56.9110%" y="181" width="0.0142%" height="15" fill="rgb(238,219,53)" fg:x="3998" fg:w="1"/><text x="57.1610%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.09%)</title><rect x="57.0819%" y="197" width="0.0854%" height="15" fill="rgb(232,167,36)" fg:x="4010" fg:w="6"/><text x="57.3319%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (9 samples, 0.13%)</title><rect x="57.1673%" y="181" width="0.1281%" height="15" fill="rgb(244,19,51)" fg:x="4016" fg:w="9"/><text x="57.4173%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.11%)</title><rect x="57.1815%" y="165" width="0.1139%" height="15" fill="rgb(224,6,22)" fg:x="4017" fg:w="8"/><text x="57.4315%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="57.2954%" y="181" width="0.0142%" height="15" fill="rgb(224,145,5)" fg:x="4025" fg:w="1"/><text x="57.5454%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.03%)</title><rect x="57.3096%" y="165" width="0.0285%" height="15" fill="rgb(234,130,49)" fg:x="4026" fg:w="2"/><text x="57.5596%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (44 samples, 0.63%)</title><rect x="57.1673%" y="197" width="0.6263%" height="15" fill="rgb(254,6,2)" fg:x="4016" fg:w="44"/><text x="57.4173%" y="207.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (34 samples, 0.48%)</title><rect x="57.3096%" y="181" width="0.4840%" height="15" fill="rgb(208,96,46)" fg:x="4026" fg:w="34"/><text x="57.5596%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (32 samples, 0.46%)</title><rect x="57.3381%" y="165" width="0.4555%" height="15" fill="rgb(239,3,39)" fg:x="4028" fg:w="32"/><text x="57.5881%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 0.38%)</title><rect x="57.4093%" y="149" width="0.3843%" height="15" fill="rgb(233,210,1)" fg:x="4033" fg:w="27"/><text x="57.6593%" y="159.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (9 samples, 0.13%)</title><rect x="57.7936%" y="165" width="0.1281%" height="15" fill="rgb(244,137,37)" fg:x="4060" fg:w="9"/><text x="58.0436%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.11%)</title><rect x="57.8078%" y="149" width="0.1139%" height="15" fill="rgb(240,136,2)" fg:x="4061" fg:w="8"/><text x="58.0578%" y="159.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.01%)</title><rect x="57.9217%" y="165" width="0.0142%" height="15" fill="rgb(239,18,37)" fg:x="4069" fg:w="1"/><text x="58.1717%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.09%)</title><rect x="57.9359%" y="149" width="0.0854%" height="15" fill="rgb(218,185,22)" fg:x="4070" fg:w="6"/><text x="58.1859%" y="159.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (40 samples, 0.57%)</title><rect x="57.7936%" y="197" width="0.5694%" height="15" fill="rgb(225,218,4)" fg:x="4060" fg:w="40"/><text x="58.0436%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (40 samples, 0.57%)</title><rect x="57.7936%" y="181" width="0.5694%" height="15" fill="rgb(230,182,32)" fg:x="4060" fg:w="40"/><text x="58.0436%" y="191.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (30 samples, 0.43%)</title><rect x="57.9359%" y="165" width="0.4270%" height="15" fill="rgb(242,56,43)" fg:x="4070" fg:w="30"/><text x="58.1859%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (24 samples, 0.34%)</title><rect x="58.0214%" y="149" width="0.3416%" height="15" fill="rgb(233,99,24)" fg:x="4076" fg:w="24"/><text x="58.2714%" y="159.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 0.30%)</title><rect x="58.0641%" y="133" width="0.2989%" height="15" fill="rgb(234,209,42)" fg:x="4079" fg:w="21"/><text x="58.3141%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="59.3737%" y="181" width="0.0142%" height="15" fill="rgb(227,7,12)" fg:x="4171" fg:w="1"/><text x="59.6237%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.03%)</title><rect x="59.3879%" y="181" width="0.0285%" height="15" fill="rgb(245,203,43)" fg:x="4172" fg:w="2"/><text x="59.6379%" y="191.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.01%)</title><rect x="59.4164%" y="165" width="0.0142%" height="15" fill="rgb(238,205,33)" fg:x="4174" fg:w="1"/><text x="59.6664%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (5 samples, 0.07%)</title><rect x="59.4164%" y="181" width="0.0712%" height="15" fill="rgb(231,56,7)" fg:x="4174" fg:w="5"/><text x="59.6664%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.06%)</title><rect x="59.4306%" y="165" width="0.0569%" height="15" fill="rgb(244,186,29)" fg:x="4175" fg:w="4"/><text x="59.6806%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.01%)</title><rect x="59.4733%" y="149" width="0.0142%" height="15" fill="rgb(234,111,31)" fg:x="4178" fg:w="1"/><text x="59.7233%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.01%)</title><rect x="59.4733%" y="133" width="0.0142%" height="15" fill="rgb(241,149,10)" fg:x="4178" fg:w="1"/><text x="59.7233%" y="143.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (3,195 samples, 45.48%)</title><rect x="14.0356%" y="277" width="45.4804%" height="15" fill="rgb(249,206,44)" fg:x="986" fg:w="3195"/><text x="14.2856%" y="287.50">mwpf`mwpf::plugin::PluginManager::find_relaxer</text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (3,101 samples, 44.14%)</title><rect x="15.3737%" y="261" width="44.1423%" height="15" fill="rgb(251,153,30)" fg:x="1080" fg:w="3101"/><text x="15.6237%" y="271.50">mwpf`mwpf::plugin::PluginEntry::execute</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (312 samples, 4.44%)</title><rect x="55.0747%" y="245" width="4.4413%" height="15" fill="rgb(239,152,38)" fg:x="3869" fg:w="312"/><text x="55.3247%" y="255.50">mwpf`..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (312 samples, 4.44%)</title><rect x="55.0747%" y="229" width="4.4413%" height="15" fill="rgb(249,139,47)" fg:x="3869" fg:w="312"/><text x="55.3247%" y="239.50">mwpf`..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (182 samples, 2.59%)</title><rect x="56.9253%" y="213" width="2.5907%" height="15" fill="rgb(244,64,35)" fg:x="3999" fg:w="182"/><text x="57.1753%" y="223.50">mw..</text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (81 samples, 1.15%)</title><rect x="58.3630%" y="197" width="1.1530%" height="15" fill="rgb(216,46,15)" fg:x="4100" fg:w="81"/><text x="58.6130%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.03%)</title><rect x="59.4875%" y="181" width="0.0285%" height="15" fill="rgb(250,74,19)" fg:x="4179" fg:w="2"/><text x="59.7375%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="60.7687%" y="261" width="0.0142%" height="15" fill="rgb(249,42,33)" fg:x="4269" fg:w="1"/><text x="61.0187%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="60.7829%" y="261" width="0.0142%" height="15" fill="rgb(242,149,17)" fg:x="4270" fg:w="1"/><text x="61.0329%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.04%)</title><rect x="60.7972%" y="261" width="0.0427%" height="15" fill="rgb(244,29,21)" fg:x="4271" fg:w="3"/><text x="61.0472%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.01%)</title><rect x="60.8256%" y="245" width="0.0142%" height="15" fill="rgb(220,130,37)" fg:x="4273" fg:w="1"/><text x="61.0756%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.01%)</title><rect x="60.8399%" y="261" width="0.0142%" height="15" fill="rgb(211,67,2)" fg:x="4274" fg:w="1"/><text x="61.0899%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (1 samples, 0.01%)</title><rect x="60.8399%" y="245" width="0.0142%" height="15" fill="rgb(235,68,52)" fg:x="4274" fg:w="1"/><text x="61.0899%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="60.8399%" y="229" width="0.0142%" height="15" fill="rgb(246,142,3)" fg:x="4274" fg:w="1"/><text x="61.0899%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.01%)</title><rect x="60.8399%" y="213" width="0.0142%" height="15" fill="rgb(241,25,7)" fg:x="4274" fg:w="1"/><text x="61.0899%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.01%)</title><rect x="60.8399%" y="197" width="0.0142%" height="15" fill="rgb(242,119,39)" fg:x="4274" fg:w="1"/><text x="61.0899%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.21%)</title><rect x="60.8541%" y="261" width="0.2135%" height="15" fill="rgb(241,98,45)" fg:x="4275" fg:w="15"/><text x="61.1041%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (63 samples, 0.90%)</title><rect x="61.0676%" y="261" width="0.8968%" height="15" fill="rgb(254,28,30)" fg:x="4290" fg:w="63"/><text x="61.3176%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 0.77%)</title><rect x="61.1957%" y="245" width="0.7687%" height="15" fill="rgb(241,142,54)" fg:x="4299" fg:w="54"/><text x="61.4457%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (4 samples, 0.06%)</title><rect x="61.9644%" y="213" width="0.0569%" height="15" fill="rgb(222,85,15)" fg:x="4353" fg:w="4"/><text x="62.2144%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.06%)</title><rect x="61.9644%" y="197" width="0.0569%" height="15" fill="rgb(210,85,47)" fg:x="4353" fg:w="4"/><text x="62.2144%" y="207.50"></text></g><g><title>mwpf`HEkk::~HEkk (29 samples, 0.41%)</title><rect x="61.9644%" y="229" width="0.4128%" height="15" fill="rgb(224,206,25)" fg:x="4353" fg:w="29"/><text x="62.2144%" y="239.50"></text></g><g><title>mwpf`HSimplexNla::~HSimplexNla (25 samples, 0.36%)</title><rect x="62.0214%" y="213" width="0.3559%" height="15" fill="rgb(243,201,19)" fg:x="4357" fg:w="25"/><text x="62.2714%" y="223.50"></text></g><g><title>mwpf`HFactor::~HFactor (25 samples, 0.36%)</title><rect x="62.0214%" y="197" width="0.3559%" height="15" fill="rgb(236,59,4)" fg:x="4357" fg:w="25"/><text x="62.2714%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (25 samples, 0.36%)</title><rect x="62.0214%" y="181" width="0.3559%" height="15" fill="rgb(254,179,45)" fg:x="4357" fg:w="25"/><text x="62.2714%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (25 samples, 0.36%)</title><rect x="62.0214%" y="165" width="0.3559%" height="15" fill="rgb(226,14,10)" fg:x="4357" fg:w="25"/><text x="62.2714%" y="175.50"></text></g><g><title>mwpf`Highs::~Highs (32 samples, 0.46%)</title><rect x="61.9644%" y="261" width="0.4555%" height="15" fill="rgb(244,27,41)" fg:x="4353" fg:w="32"/><text x="62.2144%" y="271.50"></text></g><g><title>mwpf`Highs::~Highs (32 samples, 0.46%)</title><rect x="61.9644%" y="245" width="0.4555%" height="15" fill="rgb(235,35,32)" fg:x="4353" fg:w="32"/><text x="62.2144%" y="255.50"></text></g><g><title>mwpf`HighsLp::~HighsLp (3 samples, 0.04%)</title><rect x="62.3772%" y="229" width="0.0427%" height="15" fill="rgb(218,68,31)" fg:x="4382" fg:w="3"/><text x="62.6272%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.04%)</title><rect x="62.3772%" y="213" width="0.0427%" height="15" fill="rgb(207,120,37)" fg:x="4382" fg:w="3"/><text x="62.6272%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.04%)</title><rect x="62.3772%" y="197" width="0.0427%" height="15" fill="rgb(227,98,0)" fg:x="4382" fg:w="3"/><text x="62.6272%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 0.31%)</title><rect x="62.4342%" y="245" width="0.3132%" height="15" fill="rgb(207,7,3)" fg:x="4386" fg:w="22"/><text x="62.6842%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (195 samples, 2.78%)</title><rect x="62.4199%" y="261" width="2.7758%" height="15" fill="rgb(206,98,19)" fg:x="4385" fg:w="195"/><text x="62.6699%" y="271.50">mw..</text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (172 samples, 2.45%)</title><rect x="62.7473%" y="245" width="2.4484%" height="15" fill="rgb(217,5,26)" fg:x="4408" fg:w="172"/><text x="62.9973%" y="255.50">mw..</text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (148 samples, 2.11%)</title><rect x="63.0890%" y="229" width="2.1068%" height="15" fill="rgb(235,190,38)" fg:x="4432" fg:w="148"/><text x="63.3390%" y="239.50">m..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="65.2669%" y="197" width="0.0142%" height="15" fill="rgb(247,86,24)" fg:x="4585" fg:w="1"/><text x="65.5169%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="65.2811%" y="197" width="0.0142%" height="15" fill="rgb(205,101,16)" fg:x="4586" fg:w="1"/><text x="65.5311%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.06%)</title><rect x="65.2954%" y="181" width="0.0569%" height="15" fill="rgb(246,168,33)" fg:x="4587" fg:w="4"/><text x="65.5454%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (6 samples, 0.09%)</title><rect x="65.2954%" y="197" width="0.0854%" height="15" fill="rgb(231,114,1)" fg:x="4587" fg:w="6"/><text x="65.5454%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.03%)</title><rect x="65.3523%" y="181" width="0.0285%" height="15" fill="rgb(207,184,53)" fg:x="4591" fg:w="2"/><text x="65.6023%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.01%)</title><rect x="65.3808%" y="181" width="0.0142%" height="15" fill="rgb(224,95,51)" fg:x="4593" fg:w="1"/><text x="65.6308%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="65.3950%" y="181" width="0.0142%" height="15" fill="rgb(212,188,45)" fg:x="4594" fg:w="1"/><text x="65.6450%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.01%)</title><rect x="65.3950%" y="165" width="0.0142%" height="15" fill="rgb(223,154,38)" fg:x="4594" fg:w="1"/><text x="65.6450%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.01%)</title><rect x="65.4093%" y="181" width="0.0142%" height="15" fill="rgb(251,22,52)" fg:x="4595" fg:w="1"/><text x="65.6593%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.01%)</title><rect x="65.4093%" y="165" width="0.0142%" height="15" fill="rgb(229,209,22)" fg:x="4595" fg:w="1"/><text x="65.6593%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (2 samples, 0.03%)</title><rect x="65.4235%" y="181" width="0.0285%" height="15" fill="rgb(234,138,34)" fg:x="4596" fg:w="2"/><text x="65.6735%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.04%)</title><rect x="65.4520%" y="181" width="0.0427%" height="15" fill="rgb(212,95,11)" fg:x="4598" fg:w="3"/><text x="65.7020%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.04%)</title><rect x="65.4520%" y="165" width="0.0427%" height="15" fill="rgb(240,179,47)" fg:x="4598" fg:w="3"/><text x="65.7020%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (3 samples, 0.04%)</title><rect x="65.4520%" y="149" width="0.0427%" height="15" fill="rgb(240,163,11)" fg:x="4598" fg:w="3"/><text x="65.7020%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.01%)</title><rect x="65.4804%" y="133" width="0.0142%" height="15" fill="rgb(236,37,12)" fg:x="4600" fg:w="1"/><text x="65.7304%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.01%)</title><rect x="65.4947%" y="181" width="0.0142%" height="15" fill="rgb(232,164,16)" fg:x="4601" fg:w="1"/><text x="65.7447%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.01%)</title><rect x="65.4947%" y="165" width="0.0142%" height="15" fill="rgb(244,205,15)" fg:x="4601" fg:w="1"/><text x="65.7447%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (10 samples, 0.14%)</title><rect x="65.3808%" y="197" width="0.1423%" height="15" fill="rgb(223,117,47)" fg:x="4593" fg:w="10"/><text x="65.6308%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.01%)</title><rect x="65.5089%" y="181" width="0.0142%" height="15" fill="rgb(244,107,35)" fg:x="4602" fg:w="1"/><text x="65.7589%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (24 samples, 0.34%)</title><rect x="65.2384%" y="213" width="0.3416%" height="15" fill="rgb(205,140,8)" fg:x="4583" fg:w="24"/><text x="65.4884%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.06%)</title><rect x="65.5231%" y="197" width="0.0569%" height="15" fill="rgb(228,84,46)" fg:x="4603" fg:w="4"/><text x="65.7731%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (26 samples, 0.37%)</title><rect x="65.2242%" y="229" width="0.3701%" height="15" fill="rgb(254,188,9)" fg:x="4582" fg:w="26"/><text x="65.4742%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.01%)</title><rect x="65.5801%" y="213" width="0.0142%" height="15" fill="rgb(206,112,54)" fg:x="4607" fg:w="1"/><text x="65.8301%" y="223.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (29 samples, 0.41%)</title><rect x="65.1957%" y="261" width="0.4128%" height="15" fill="rgb(216,84,49)" fg:x="4580" fg:w="29"/><text x="65.4457%" y="271.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (27 samples, 0.38%)</title><rect x="65.2242%" y="245" width="0.3843%" height="15" fill="rgb(214,194,35)" fg:x="4582" fg:w="27"/><text x="65.4742%" y="255.50"></text></g><g><title>mwpf`__rdl_realloc (1 samples, 0.01%)</title><rect x="65.5943%" y="229" width="0.0142%" height="15" fill="rgb(249,28,3)" fg:x="4608" fg:w="1"/><text x="65.8443%" y="239.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (3 samples, 0.04%)</title><rect x="65.6085%" y="261" width="0.0427%" height="15" fill="rgb(222,56,52)" fg:x="4609" fg:w="3"/><text x="65.8585%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="65.6512%" y="197" width="0.0142%" height="15" fill="rgb(245,217,50)" fg:x="4612" fg:w="1"/><text x="65.9012%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.03%)</title><rect x="65.6655%" y="197" width="0.0285%" height="15" fill="rgb(213,201,24)" fg:x="4613" fg:w="2"/><text x="65.9155%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (1 samples, 0.01%)</title><rect x="65.6940%" y="165" width="0.0142%" height="15" fill="rgb(248,116,28)" fg:x="4615" fg:w="1"/><text x="65.9440%" y="175.50"></text></g><g><title>mwpf`HighsLp::clear (1 samples, 0.01%)</title><rect x="65.7082%" y="165" width="0.0142%" height="15" fill="rgb(219,72,43)" fg:x="4616" fg:w="1"/><text x="65.9582%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (1 samples, 0.01%)</title><rect x="65.7082%" y="149" width="0.0142%" height="15" fill="rgb(209,138,14)" fg:x="4616" fg:w="1"/><text x="65.9582%" y="159.50"></text></g><g><title>mwpf`HEkk::addCols (3 samples, 0.04%)</title><rect x="65.6940%" y="197" width="0.0427%" height="15" fill="rgb(222,18,33)" fg:x="4615" fg:w="3"/><text x="65.9440%" y="207.50"></text></g><g><title>mwpf`HEkk::clear (3 samples, 0.04%)</title><rect x="65.6940%" y="181" width="0.0427%" height="15" fill="rgb(213,199,7)" fg:x="4615" fg:w="3"/><text x="65.9440%" y="191.50"></text></g><g><title>mwpf`HighsSparseMatrix::clear (1 samples, 0.01%)</title><rect x="65.7224%" y="165" width="0.0142%" height="15" fill="rgb(250,110,10)" fg:x="4617" fg:w="1"/><text x="65.9724%" y="175.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (1 samples, 0.01%)</title><rect x="65.7224%" y="149" width="0.0142%" height="15" fill="rgb(248,123,6)" fg:x="4617" fg:w="1"/><text x="65.9724%" y="159.50"></text></g><g><title>mwpf`HighsSparseMatrix::clear (1 samples, 0.01%)</title><rect x="65.7367%" y="197" width="0.0142%" height="15" fill="rgb(206,91,31)" fg:x="4618" fg:w="1"/><text x="65.9867%" y="207.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (1 samples, 0.01%)</title><rect x="65.7367%" y="181" width="0.0142%" height="15" fill="rgb(211,154,13)" fg:x="4618" fg:w="1"/><text x="65.9867%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="65.7367%" y="165" width="0.0142%" height="15" fill="rgb(225,148,7)" fg:x="4618" fg:w="1"/><text x="65.9867%" y="175.50"></text></g><g><title>mwpf`HighsSparseMatrix::~HighsSparseMatrix (1 samples, 0.01%)</title><rect x="65.7509%" y="197" width="0.0142%" height="15" fill="rgb(220,160,43)" fg:x="4619" fg:w="1"/><text x="66.0009%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="65.7509%" y="181" width="0.0142%" height="15" fill="rgb(213,52,39)" fg:x="4619" fg:w="1"/><text x="66.0009%" y="191.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="65.7651%" y="181" width="0.0142%" height="15" fill="rgb(243,137,7)" fg:x="4620" fg:w="1"/><text x="66.0151%" y="191.50"></text></g><g><title>mwpf`Highs::addColsInterface (10 samples, 0.14%)</title><rect x="65.6512%" y="213" width="0.1423%" height="15" fill="rgb(230,79,13)" fg:x="4612" fg:w="10"/><text x="65.9012%" y="223.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (2 samples, 0.03%)</title><rect x="65.7651%" y="197" width="0.0285%" height="15" fill="rgb(247,105,23)" fg:x="4620" fg:w="2"/><text x="66.0151%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="65.7794%" y="181" width="0.0142%" height="15" fill="rgb(223,179,41)" fg:x="4621" fg:w="1"/><text x="66.0294%" y="191.50"></text></g><g><title>mwpf`HighsHessian::clear (1 samples, 0.01%)</title><rect x="65.7936%" y="213" width="0.0142%" height="15" fill="rgb(218,9,34)" fg:x="4622" fg:w="1"/><text x="66.0436%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (1 samples, 0.01%)</title><rect x="65.8078%" y="181" width="0.0142%" height="15" fill="rgb(222,106,8)" fg:x="4623" fg:w="1"/><text x="66.0578%" y="191.50"></text></g><g><title>mwpf`highs::Model::add_col (13 samples, 0.19%)</title><rect x="65.6512%" y="261" width="0.1851%" height="15" fill="rgb(211,220,0)" fg:x="4612" fg:w="13"/><text x="65.9012%" y="271.50"></text></g><g><title>mwpf`Highs::addCol (13 samples, 0.19%)</title><rect x="65.6512%" y="245" width="0.1851%" height="15" fill="rgb(229,52,16)" fg:x="4612" fg:w="13"/><text x="65.9012%" y="255.50"></text></g><g><title>mwpf`Highs::addCols (13 samples, 0.19%)</title><rect x="65.6512%" y="229" width="0.1851%" height="15" fill="rgb(212,155,18)" fg:x="4612" fg:w="13"/><text x="65.9012%" y="239.50"></text></g><g><title>mwpf`PresolveComponentData::clear (2 samples, 0.03%)</title><rect x="65.8078%" y="213" width="0.0285%" height="15" fill="rgb(242,21,14)" fg:x="4623" fg:w="2"/><text x="66.0578%" y="223.50"></text></g><g><title>mwpf`HighsLp::clear (2 samples, 0.03%)</title><rect x="65.8078%" y="197" width="0.0285%" height="15" fill="rgb(222,19,48)" fg:x="4623" fg:w="2"/><text x="66.0578%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="65.8221%" y="181" width="0.0142%" height="15" fill="rgb(232,45,27)" fg:x="4624" fg:w="1"/><text x="66.0721%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="65.8363%" y="245" width="0.0142%" height="15" fill="rgb(249,103,42)" fg:x="4625" fg:w="1"/><text x="66.0863%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.01%)</title><rect x="65.8505%" y="245" width="0.0142%" height="15" fill="rgb(246,81,33)" fg:x="4626" fg:w="1"/><text x="66.1005%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.03%)</title><rect x="65.8648%" y="245" width="0.0285%" height="15" fill="rgb(252,33,42)" fg:x="4627" fg:w="2"/><text x="66.1148%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.01%)</title><rect x="65.8790%" y="229" width="0.0142%" height="15" fill="rgb(209,212,41)" fg:x="4628" fg:w="1"/><text x="66.1290%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="66.0356%" y="213" width="0.0142%" height="15" fill="rgb(207,154,6)" fg:x="4639" fg:w="1"/><text x="66.2856%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.03%)</title><rect x="66.0498%" y="213" width="0.0285%" height="15" fill="rgb(223,64,47)" fg:x="4640" fg:w="2"/><text x="66.2998%" y="223.50"></text></g><g><title>mwpf`&lt;(ExtendA,ExtendB) as core::iter::traits::collect::Extend&lt;(A,B)&gt;&gt;::extend (14 samples, 0.20%)</title><rect x="65.8932%" y="245" width="0.1993%" height="15" fill="rgb(211,161,38)" fg:x="4629" fg:w="14"/><text x="66.1432%" y="255.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.07%)</title><rect x="66.0214%" y="229" width="0.0712%" height="15" fill="rgb(219,138,40)" fg:x="4638" fg:w="5"/><text x="66.2714%" y="239.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.01%)</title><rect x="66.0783%" y="213" width="0.0142%" height="15" fill="rgb(241,228,46)" fg:x="4642" fg:w="1"/><text x="66.3283%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="66.0783%" y="197" width="0.0142%" height="15" fill="rgb(223,209,38)" fg:x="4642" fg:w="1"/><text x="66.3283%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.01%)</title><rect x="66.0783%" y="181" width="0.0142%" height="15" fill="rgb(236,164,45)" fg:x="4642" fg:w="1"/><text x="66.3283%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.01%)</title><rect x="66.0783%" y="165" width="0.0142%" height="15" fill="rgb(231,15,5)" fg:x="4642" fg:w="1"/><text x="66.3283%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.01%)</title><rect x="66.0783%" y="149" width="0.0142%" height="15" fill="rgb(252,35,15)" fg:x="4642" fg:w="1"/><text x="66.3283%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="66.0925%" y="213" width="0.0142%" height="15" fill="rgb(248,181,18)" fg:x="4643" fg:w="1"/><text x="66.3425%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.01%)</title><rect x="66.1068%" y="213" width="0.0142%" height="15" fill="rgb(233,39,42)" fg:x="4644" fg:w="1"/><text x="66.3568%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.03%)</title><rect x="66.1210%" y="213" width="0.0285%" height="15" fill="rgb(238,110,33)" fg:x="4645" fg:w="2"/><text x="66.3710%" y="223.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (3 samples, 0.04%)</title><rect x="66.1495%" y="197" width="0.0427%" height="15" fill="rgb(233,195,10)" fg:x="4647" fg:w="3"/><text x="66.3995%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="66.1637%" y="181" width="0.0285%" height="15" fill="rgb(254,105,3)" fg:x="4648" fg:w="2"/><text x="66.4137%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.01%)</title><rect x="66.1779%" y="165" width="0.0142%" height="15" fill="rgb(221,225,9)" fg:x="4649" fg:w="1"/><text x="66.4279%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.01%)</title><rect x="66.1779%" y="149" width="0.0142%" height="15" fill="rgb(224,227,45)" fg:x="4649" fg:w="1"/><text x="66.4279%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.01%)</title><rect x="66.1779%" y="133" width="0.0142%" height="15" fill="rgb(229,198,43)" fg:x="4649" fg:w="1"/><text x="66.4279%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="66.1922%" y="197" width="0.0142%" height="15" fill="rgb(206,209,35)" fg:x="4650" fg:w="1"/><text x="66.4422%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.06%)</title><rect x="66.2064%" y="197" width="0.0569%" height="15" fill="rgb(245,195,53)" fg:x="4651" fg:w="4"/><text x="66.4564%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="66.2633%" y="197" width="0.0142%" height="15" fill="rgb(240,92,26)" fg:x="4655" fg:w="1"/><text x="66.5133%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.01%)</title><rect x="66.2776%" y="197" width="0.0142%" height="15" fill="rgb(207,40,23)" fg:x="4656" fg:w="1"/><text x="66.5276%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.03%)</title><rect x="66.2918%" y="197" width="0.0285%" height="15" fill="rgb(223,111,35)" fg:x="4657" fg:w="2"/><text x="66.5418%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="66.3203%" y="197" width="0.0142%" height="15" fill="rgb(229,147,28)" fg:x="4659" fg:w="1"/><text x="66.5703%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (1 samples, 0.01%)</title><rect x="66.3345%" y="181" width="0.0142%" height="15" fill="rgb(211,29,28)" fg:x="4660" fg:w="1"/><text x="66.5845%" y="191.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$memmove (1 samples, 0.01%)</title><rect x="66.3488%" y="165" width="0.0142%" height="15" fill="rgb(228,72,33)" fg:x="4661" fg:w="1"/><text x="66.5988%" y="175.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$strlen (1 samples, 0.01%)</title><rect x="66.3630%" y="165" width="0.0142%" height="15" fill="rgb(205,214,31)" fg:x="4662" fg:w="1"/><text x="66.6130%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (1 samples, 0.01%)</title><rect x="66.3772%" y="165" width="0.0142%" height="15" fill="rgb(224,111,15)" fg:x="4663" fg:w="1"/><text x="66.6272%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="66.3915%" y="165" width="0.0142%" height="15" fill="rgb(253,21,26)" fg:x="4664" fg:w="1"/><text x="66.6415%" y="175.50"></text></g><g><title>mwpf`HEkk::clearEkkDataInfo (1 samples, 0.01%)</title><rect x="66.4057%" y="165" width="0.0142%" height="15" fill="rgb(245,139,43)" fg:x="4665" fg:w="1"/><text x="66.6557%" y="175.50"></text></g><g><title>mwpf`HSimplexNla::frozenBasisClearAllData (1 samples, 0.01%)</title><rect x="66.4199%" y="165" width="0.0142%" height="15" fill="rgb(252,170,7)" fg:x="4666" fg:w="1"/><text x="66.6699%" y="175.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (2 samples, 0.03%)</title><rect x="66.4342%" y="149" width="0.0285%" height="15" fill="rgb(231,118,14)" fg:x="4667" fg:w="2"/><text x="66.6842%" y="159.50"></text></g><g><title>mwpf`HighsLp::clear (3 samples, 0.04%)</title><rect x="66.4342%" y="165" width="0.0427%" height="15" fill="rgb(238,83,0)" fg:x="4667" fg:w="3"/><text x="66.6842%" y="175.50"></text></g><g><title>mwpf`HighsSparseMatrix::clear (1 samples, 0.01%)</title><rect x="66.4626%" y="149" width="0.0142%" height="15" fill="rgb(221,39,39)" fg:x="4669" fg:w="1"/><text x="66.7126%" y="159.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (1 samples, 0.01%)</title><rect x="66.4626%" y="133" width="0.0142%" height="15" fill="rgb(222,119,46)" fg:x="4669" fg:w="1"/><text x="66.7126%" y="143.50"></text></g><g><title>mwpf`HEkk::addRows (11 samples, 0.16%)</title><rect x="66.3345%" y="197" width="0.1566%" height="15" fill="rgb(222,165,49)" fg:x="4660" fg:w="11"/><text x="66.5845%" y="207.50"></text></g><g><title>mwpf`HEkk::clear (10 samples, 0.14%)</title><rect x="66.3488%" y="181" width="0.1423%" height="15" fill="rgb(219,113,52)" fg:x="4661" fg:w="10"/><text x="66.5988%" y="191.50"></text></g><g><title>mwpf`HighsSparseMatrix::clear (1 samples, 0.01%)</title><rect x="66.4769%" y="165" width="0.0142%" height="15" fill="rgb(214,7,15)" fg:x="4670" fg:w="1"/><text x="66.7269%" y="175.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (1 samples, 0.01%)</title><rect x="66.4769%" y="149" width="0.0142%" height="15" fill="rgb(235,32,4)" fg:x="4670" fg:w="1"/><text x="66.7269%" y="159.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.01%)</title><rect x="66.5338%" y="181" width="0.0142%" height="15" fill="rgb(238,90,54)" fg:x="4674" fg:w="1"/><text x="66.7838%" y="191.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (2 samples, 0.03%)</title><rect x="66.5480%" y="181" width="0.0285%" height="15" fill="rgb(213,208,19)" fg:x="4675" fg:w="2"/><text x="66.7980%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.03%)</title><rect x="66.5480%" y="165" width="0.0285%" height="15" fill="rgb(233,156,4)" fg:x="4675" fg:w="2"/><text x="66.7980%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.03%)</title><rect x="66.5480%" y="149" width="0.0285%" height="15" fill="rgb(207,194,5)" fg:x="4675" fg:w="2"/><text x="66.7980%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.01%)</title><rect x="66.5623%" y="133" width="0.0142%" height="15" fill="rgb(206,111,30)" fg:x="4676" fg:w="1"/><text x="66.8123%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.03%)</title><rect x="66.5765%" y="181" width="0.0285%" height="15" fill="rgb(243,70,54)" fg:x="4677" fg:w="2"/><text x="66.8265%" y="191.50"></text></g><g><title>mwpf`HighsSparseMatrix::HighsSparseMatrix (9 samples, 0.13%)</title><rect x="66.4911%" y="197" width="0.1281%" height="15" fill="rgb(242,28,8)" fg:x="4671" fg:w="9"/><text x="66.7411%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="66.6050%" y="181" width="0.0142%" height="15" fill="rgb(219,106,18)" fg:x="4679" fg:w="1"/><text x="66.8550%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.07%)</title><rect x="66.6619%" y="181" width="0.0712%" height="15" fill="rgb(244,222,10)" fg:x="4683" fg:w="5"/><text x="66.9119%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.07%)</title><rect x="66.6619%" y="165" width="0.0712%" height="15" fill="rgb(236,179,52)" fg:x="4683" fg:w="5"/><text x="66.9119%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.07%)</title><rect x="66.7331%" y="181" width="0.0712%" height="15" fill="rgb(213,23,39)" fg:x="4688" fg:w="5"/><text x="66.9831%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.04%)</title><rect x="66.8043%" y="181" width="0.0427%" height="15" fill="rgb(238,48,10)" fg:x="4693" fg:w="3"/><text x="67.0543%" y="191.50"></text></g><g><title>mwpf`HighsSparseMatrix::addRows (17 samples, 0.24%)</title><rect x="66.6192%" y="197" width="0.2420%" height="15" fill="rgb(251,196,23)" fg:x="4680" fg:w="17"/><text x="66.8692%" y="207.50"></text></g><g><title>mwpf`std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;::__append (1 samples, 0.01%)</title><rect x="66.8470%" y="181" width="0.0142%" height="15" fill="rgb(250,152,24)" fg:x="4696" fg:w="1"/><text x="67.0970%" y="191.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.01%)</title><rect x="66.8470%" y="165" width="0.0142%" height="15" fill="rgb(209,150,17)" fg:x="4696" fg:w="1"/><text x="67.0970%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="66.8470%" y="149" width="0.0142%" height="15" fill="rgb(234,202,34)" fg:x="4696" fg:w="1"/><text x="67.0970%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.01%)</title><rect x="66.8470%" y="133" width="0.0142%" height="15" fill="rgb(253,148,53)" fg:x="4696" fg:w="1"/><text x="67.0970%" y="143.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (1 samples, 0.01%)</title><rect x="66.8612%" y="181" width="0.0142%" height="15" fill="rgb(218,129,16)" fg:x="4697" fg:w="1"/><text x="67.1112%" y="191.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (3 samples, 0.04%)</title><rect x="67.3879%" y="165" width="0.0427%" height="15" fill="rgb(216,85,19)" fg:x="4734" fg:w="3"/><text x="67.6379%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.04%)</title><rect x="67.3879%" y="149" width="0.0427%" height="15" fill="rgb(235,228,7)" fg:x="4734" fg:w="3"/><text x="67.6379%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.04%)</title><rect x="67.3879%" y="133" width="0.0427%" height="15" fill="rgb(245,175,0)" fg:x="4734" fg:w="3"/><text x="67.6379%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.04%)</title><rect x="67.3879%" y="117" width="0.0427%" height="15" fill="rgb(208,168,36)" fg:x="4734" fg:w="3"/><text x="67.6379%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2 samples, 0.03%)</title><rect x="67.4021%" y="101" width="0.0285%" height="15" fill="rgb(246,171,24)" fg:x="4735" fg:w="2"/><text x="67.6521%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.03%)</title><rect x="67.4306%" y="165" width="0.0285%" height="15" fill="rgb(215,142,24)" fg:x="4737" fg:w="2"/><text x="67.6806%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="67.4591%" y="165" width="0.0142%" height="15" fill="rgb(250,187,7)" fg:x="4739" fg:w="1"/><text x="67.7091%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.03%)</title><rect x="67.4733%" y="165" width="0.0285%" height="15" fill="rgb(228,66,33)" fg:x="4740" fg:w="2"/><text x="67.7233%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.03%)</title><rect x="67.4733%" y="149" width="0.0285%" height="15" fill="rgb(234,215,21)" fg:x="4740" fg:w="2"/><text x="67.7233%" y="159.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.01%)</title><rect x="67.9858%" y="149" width="0.0142%" height="15" fill="rgb(222,191,20)" fg:x="4776" fg:w="1"/><text x="68.2358%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.03%)</title><rect x="68.0000%" y="149" width="0.0285%" height="15" fill="rgb(245,79,54)" fg:x="4777" fg:w="2"/><text x="68.2500%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.03%)</title><rect x="68.0000%" y="133" width="0.0285%" height="15" fill="rgb(240,10,37)" fg:x="4777" fg:w="2"/><text x="68.2500%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.01%)</title><rect x="68.0142%" y="117" width="0.0142%" height="15" fill="rgb(214,192,32)" fg:x="4778" fg:w="1"/><text x="68.2642%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="68.0285%" y="149" width="0.0142%" height="15" fill="rgb(209,36,54)" fg:x="4779" fg:w="1"/><text x="68.2785%" y="159.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.01%)</title><rect x="68.1423%" y="133" width="0.0142%" height="15" fill="rgb(220,10,11)" fg:x="4787" fg:w="1"/><text x="68.3923%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="68.1423%" y="117" width="0.0142%" height="15" fill="rgb(221,106,17)" fg:x="4787" fg:w="1"/><text x="68.3923%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="68.1566%" y="133" width="0.0142%" height="15" fill="rgb(251,142,44)" fg:x="4788" fg:w="1"/><text x="68.4066%" y="143.50"></text></g><g><title>mwpf`HighsHashTable&lt;int, void&gt;::growTable (30 samples, 0.43%)</title><rect x="68.0427%" y="149" width="0.4270%" height="15" fill="rgb(238,13,15)" fg:x="4780" fg:w="30"/><text x="68.2927%" y="159.50"></text></g><g><title>mwpf`bool HighsHashTable&lt;int, void&gt;::insert&lt;HighsHashTableEntry&lt;int, void&gt;&gt;(HighsHashTableEntry (21 samples, 0.30%)</title><rect x="68.1708%" y="133" width="0.2989%" height="15" fill="rgb(208,107,27)" fg:x="4789" fg:w="21"/><text x="68.4208%" y="143.50"></text></g><g><title>mwpf`assessMatrix(HighsLogOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, int, int, bool, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;double, std::__1::allocator (114 samples, 1.62%)</title><rect x="66.8754%" y="181" width="1.6228%" height="15" fill="rgb(205,136,37)" fg:x="4698" fg:w="114"/><text x="67.1254%" y="191.50"></text></g><g><title>mwpf`bool HighsHashTable&lt;int, void&gt;::insert&lt;int&gt; (70 samples, 1.00%)</title><rect x="67.5018%" y="165" width="0.9964%" height="15" fill="rgb(250,205,27)" fg:x="4742" fg:w="70"/><text x="67.7518%" y="175.50"></text></g><g><title>mwpf`bool HighsHashTable&lt;int, void&gt;::insert&lt;HighsHashTableEntry&lt;int, void&gt;&gt;(HighsHashTableEntry (2 samples, 0.03%)</title><rect x="68.4698%" y="149" width="0.0285%" height="15" fill="rgb(210,80,43)" fg:x="4810" fg:w="2"/><text x="68.7198%" y="159.50"></text></g><g><title>mwpf`assessMatrixDimensions(HighsLogOptions const&amp;, int, bool, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;double, std::__1::allocator (1 samples, 0.01%)</title><rect x="68.4982%" y="181" width="0.0142%" height="15" fill="rgb(247,160,36)" fg:x="4812" fg:w="1"/><text x="68.7482%" y="191.50"></text></g><g><title>mwpf`HighsSparseMatrix::assess(HighsLogOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (120 samples, 1.71%)</title><rect x="66.8612%" y="197" width="1.7082%" height="15" fill="rgb(234,13,49)" fg:x="4697" fg:w="120"/><text x="67.1112%" y="207.50"></text></g><g><title>mwpf`bool HighsHashTable&lt;int, void&gt;::insert&lt;int&gt; (4 samples, 0.06%)</title><rect x="68.5125%" y="181" width="0.0569%" height="15" fill="rgb(234,122,0)" fg:x="4813" fg:w="4"/><text x="68.7625%" y="191.50"></text></g><g><title>mwpf`HighsSparseMatrix::clear (1 samples, 0.01%)</title><rect x="68.5694%" y="197" width="0.0142%" height="15" fill="rgb(207,146,38)" fg:x="4817" fg:w="1"/><text x="68.8194%" y="207.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (1 samples, 0.01%)</title><rect x="68.5694%" y="181" width="0.0142%" height="15" fill="rgb(207,177,25)" fg:x="4817" fg:w="1"/><text x="68.8194%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="68.5694%" y="165" width="0.0142%" height="15" fill="rgb(211,178,42)" fg:x="4817" fg:w="1"/><text x="68.8194%" y="175.50"></text></g><g><title>mwpf`assessBounds(HighsOptions const&amp;, char const*, int, HighsIndexCollection const&amp;, std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, std::__1::vector&lt;double, std::__1::allocator (1 samples, 0.01%)</title><rect x="68.5836%" y="197" width="0.0142%" height="15" fill="rgb(230,69,54)" fg:x="4818" fg:w="1"/><text x="68.8336%" y="207.50"></text></g><g><title>mwpf`isMatrixDataNull(HighsLogOptions const&amp;, int const*, int const*, double const*) (1 samples, 0.01%)</title><rect x="68.5979%" y="197" width="0.0142%" height="15" fill="rgb(214,135,41)" fg:x="4819" fg:w="1"/><text x="68.8479%" y="207.50"></text></g><g><title>mwpf`std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;::__append (1 samples, 0.01%)</title><rect x="68.6121%" y="197" width="0.0142%" height="15" fill="rgb(237,67,25)" fg:x="4820" fg:w="1"/><text x="68.8621%" y="207.50"></text></g><g><title>mwpf`Highs::addRowsInterface (175 samples, 2.49%)</title><rect x="66.1495%" y="213" width="2.4911%" height="15" fill="rgb(222,189,50)" fg:x="4647" fg:w="175"/><text x="66.3995%" y="223.50">mw..</text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::__append (1 samples, 0.01%)</title><rect x="68.6263%" y="197" width="0.0142%" height="15" fill="rgb(245,148,34)" fg:x="4821" fg:w="1"/><text x="68.8763%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.01%)</title><rect x="68.6263%" y="181" width="0.0142%" height="15" fill="rgb(222,29,6)" fg:x="4821" fg:w="1"/><text x="68.8763%" y="191.50"></text></g><g><title>mwpf`HEkk::debugRetainedDataOk (1 samples, 0.01%)</title><rect x="68.6406%" y="197" width="0.0142%" height="15" fill="rgb(221,189,43)" fg:x="4822" fg:w="1"/><text x="68.8906%" y="207.50"></text></g><g><title>mwpf`Highs::returnFromHighs (2 samples, 0.03%)</title><rect x="68.6406%" y="213" width="0.0285%" height="15" fill="rgb(207,36,27)" fg:x="4822" fg:w="2"/><text x="68.8906%" y="223.50"></text></g><g><title>mwpf`Highs::forceHighsSolutionBasisSize (1 samples, 0.01%)</title><rect x="68.6548%" y="197" width="0.0142%" height="15" fill="rgb(217,90,24)" fg:x="4823" fg:w="1"/><text x="68.9048%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.01%)</title><rect x="68.6548%" y="181" width="0.0142%" height="15" fill="rgb(224,66,35)" fg:x="4823" fg:w="1"/><text x="68.9048%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.01%)</title><rect x="68.6548%" y="165" width="0.0142%" height="15" fill="rgb(221,13,50)" fg:x="4823" fg:w="1"/><text x="68.9048%" y="175.50"></text></g><g><title>mwpf`HighsBasis::clear (1 samples, 0.01%)</title><rect x="68.6690%" y="213" width="0.0142%" height="15" fill="rgb(236,68,49)" fg:x="4824" fg:w="1"/><text x="68.9190%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (1 samples, 0.01%)</title><rect x="68.6833%" y="181" width="0.0142%" height="15" fill="rgb(229,146,28)" fg:x="4825" fg:w="1"/><text x="68.9333%" y="191.50"></text></g><g><title>mwpf`HighsBasis::clear (2 samples, 0.03%)</title><rect x="68.6833%" y="197" width="0.0285%" height="15" fill="rgb(225,31,38)" fg:x="4825" fg:w="2"/><text x="68.9333%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="68.6975%" y="181" width="0.0142%" height="15" fill="rgb(250,208,3)" fg:x="4826" fg:w="1"/><text x="68.9475%" y="191.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$strlen (1 samples, 0.01%)</title><rect x="68.7260%" y="181" width="0.0142%" height="15" fill="rgb(246,54,23)" fg:x="4828" fg:w="1"/><text x="68.9760%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.01%)</title><rect x="68.7402%" y="181" width="0.0142%" height="15" fill="rgb(243,76,11)" fg:x="4829" fg:w="1"/><text x="68.9902%" y="191.50"></text></g><g><title>mwpf`HighsLp::clear (4 samples, 0.06%)</title><rect x="68.7117%" y="197" width="0.0569%" height="15" fill="rgb(245,21,50)" fg:x="4827" fg:w="4"/><text x="68.9617%" y="207.50"></text></g><g><title>mwpf`HighsSparseMatrix::clear (1 samples, 0.01%)</title><rect x="68.7544%" y="181" width="0.0142%" height="15" fill="rgb(228,9,43)" fg:x="4830" fg:w="1"/><text x="69.0044%" y="191.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (1 samples, 0.01%)</title><rect x="68.7544%" y="165" width="0.0142%" height="15" fill="rgb(208,100,47)" fg:x="4830" fg:w="1"/><text x="69.0044%" y="175.50"></text></g><g><title>mwpf`HighsSparseMatrix::clear (1 samples, 0.01%)</title><rect x="68.7687%" y="197" width="0.0142%" height="15" fill="rgb(232,26,8)" fg:x="4831" fg:w="1"/><text x="69.0187%" y="207.50"></text></g><g><title>mwpf`PresolveComponentData::clear (8 samples, 0.11%)</title><rect x="68.6833%" y="213" width="0.1139%" height="15" fill="rgb(216,166,38)" fg:x="4825" fg:w="8"/><text x="68.9333%" y="223.50"></text></g><g><title>mwpf`presolve::HighsPostsolveStack::operator= (1 samples, 0.01%)</title><rect x="68.7829%" y="197" width="0.0142%" height="15" fill="rgb(251,202,51)" fg:x="4832" fg:w="1"/><text x="69.0329%" y="207.50"></text></g><g><title>mwpf`Highs::addRow (191 samples, 2.72%)</title><rect x="66.0925%" y="245" width="2.7189%" height="15" fill="rgb(254,216,34)" fg:x="4643" fg:w="191"/><text x="66.3425%" y="255.50">mw..</text></g><g><title>mwpf`Highs::addRows (191 samples, 2.72%)</title><rect x="66.0925%" y="229" width="2.7189%" height="15" fill="rgb(251,32,27)" fg:x="4643" fg:w="191"/><text x="66.3425%" y="239.50">mw..</text></g><g><title>mwpf`isRowDataNull(HighsLogOptions const&amp;, double const*, double const*) (1 samples, 0.01%)</title><rect x="68.7972%" y="213" width="0.0142%" height="15" fill="rgb(208,127,28)" fg:x="4833" fg:w="1"/><text x="69.0472%" y="223.50"></text></g><g><title>mwpf`highs::Model::add_row (213 samples, 3.03%)</title><rect x="65.8363%" y="261" width="3.0320%" height="15" fill="rgb(224,137,22)" fg:x="4625" fg:w="213"/><text x="66.0863%" y="271.50">mwp..</text></g><g><title>mwpf`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.06%)</title><rect x="68.8114%" y="245" width="0.0569%" height="15" fill="rgb(254,70,32)" fg:x="4834" fg:w="4"/><text x="69.0614%" y="255.50"></text></g><g><title>mwpf`HEkk::initialiseSimplexLpRandomVectors (1 samples, 0.01%)</title><rect x="68.8683%" y="165" width="0.0142%" height="15" fill="rgb(229,75,37)" fg:x="4838" fg:w="1"/><text x="69.1183%" y="175.50"></text></g><g><title>mwpf`HEkk::moveLp (4 samples, 0.06%)</title><rect x="68.8683%" y="181" width="0.0569%" height="15" fill="rgb(252,64,23)" fg:x="4838" fg:w="4"/><text x="69.1183%" y="191.50"></text></g><g><title>mwpf`HighsRandom::drawUniform (3 samples, 0.04%)</title><rect x="68.8826%" y="165" width="0.0427%" height="15" fill="rgb(232,162,48)" fg:x="4839" fg:w="3"/><text x="69.1326%" y="175.50"></text></g><g><title>mwpf`HEkk::fullBtran(HVectorBase (1 samples, 0.01%)</title><rect x="68.9395%" y="133" width="0.0142%" height="15" fill="rgb(246,160,12)" fg:x="4843" fg:w="1"/><text x="69.1895%" y="143.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (1 samples, 0.01%)</title><rect x="68.9395%" y="117" width="0.0142%" height="15" fill="rgb(247,166,0)" fg:x="4843" fg:w="1"/><text x="69.1895%" y="127.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (1 samples, 0.01%)</title><rect x="68.9395%" y="101" width="0.0142%" height="15" fill="rgb(249,219,21)" fg:x="4843" fg:w="1"/><text x="69.1895%" y="111.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::tight (1 samples, 0.01%)</title><rect x="68.9395%" y="85" width="0.0142%" height="15" fill="rgb(205,209,3)" fg:x="4843" fg:w="1"/><text x="69.1895%" y="95.50"></text></g><g><title>mwpf`HEkk::computeDual (13 samples, 0.19%)</title><rect x="68.9395%" y="149" width="0.1851%" height="15" fill="rgb(243,44,1)" fg:x="4843" fg:w="13"/><text x="69.1895%" y="159.50"></text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (12 samples, 0.17%)</title><rect x="68.9537%" y="133" width="0.1708%" height="15" fill="rgb(206,159,16)" fg:x="4844" fg:w="12"/><text x="69.2037%" y="143.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (12 samples, 0.17%)</title><rect x="68.9537%" y="117" width="0.1708%" height="15" fill="rgb(244,77,30)" fg:x="4844" fg:w="12"/><text x="69.2037%" y="127.50"></text></g><g><title>mwpf`HEkk::computePrimalObjectiveValue (1 samples, 0.01%)</title><rect x="69.1246%" y="149" width="0.0142%" height="15" fill="rgb(218,69,12)" fg:x="4856" fg:w="1"/><text x="69.3746%" y="159.50"></text></g><g><title>mwpf`HEkk::computeSimplexPrimalInfeasible (1 samples, 0.01%)</title><rect x="69.1388%" y="149" width="0.0142%" height="15" fill="rgb(212,87,7)" fg:x="4857" fg:w="1"/><text x="69.3888%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="69.1530%" y="117" width="0.0142%" height="15" fill="rgb(245,114,25)" fg:x="4858" fg:w="1"/><text x="69.4030%" y="127.50"></text></g><g><title>mwpf`HFactor::buildFinish (13 samples, 0.19%)</title><rect x="69.1673%" y="85" width="0.1851%" height="15" fill="rgb(210,61,42)" fg:x="4859" fg:w="13"/><text x="69.4173%" y="95.50"></text></g><g><title>libsystem_platform.dylib`__bzero (4 samples, 0.06%)</title><rect x="69.2954%" y="69" width="0.0569%" height="15" fill="rgb(211,52,33)" fg:x="4868" fg:w="4"/><text x="69.5454%" y="79.50"></text></g><g><title>mwpf`HFactor::buildKernel (36 samples, 0.51%)</title><rect x="69.3523%" y="85" width="0.5125%" height="15" fill="rgb(234,58,33)" fg:x="4872" fg:w="36"/><text x="69.6023%" y="95.50"></text></g><g><title>mwpf`HEkk::computeFactor (67 samples, 0.95%)</title><rect x="69.1530%" y="133" width="0.9537%" height="15" fill="rgb(220,115,36)" fg:x="4858" fg:w="67"/><text x="69.4030%" y="143.50"></text></g><g><title>mwpf`HSimplexNla::invert (66 samples, 0.94%)</title><rect x="69.1673%" y="117" width="0.9395%" height="15" fill="rgb(243,153,54)" fg:x="4859" fg:w="66"/><text x="69.4173%" y="127.50"></text></g><g><title>mwpf`HFactor::build (66 samples, 0.94%)</title><rect x="69.1673%" y="101" width="0.9395%" height="15" fill="rgb(251,47,18)" fg:x="4859" fg:w="66"/><text x="69.4173%" y="111.50"></text></g><g><title>mwpf`HFactor::buildSimple (17 samples, 0.24%)</title><rect x="69.8648%" y="85" width="0.2420%" height="15" fill="rgb(242,102,42)" fg:x="4908" fg:w="17"/><text x="70.1148%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="70.1068%" y="117" width="0.0142%" height="15" fill="rgb(234,31,38)" fg:x="4925" fg:w="1"/><text x="70.3568%" y="127.50"></text></g><g><title>libsystem_platform.dylib`__bzero (16 samples, 0.23%)</title><rect x="70.1352%" y="101" width="0.2278%" height="15" fill="rgb(221,117,51)" fg:x="4927" fg:w="16"/><text x="70.3852%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.04%)</title><rect x="70.3630%" y="101" width="0.0427%" height="15" fill="rgb(212,20,18)" fg:x="4943" fg:w="3"/><text x="70.6130%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::setup (22 samples, 0.31%)</title><rect x="70.1068%" y="133" width="0.3132%" height="15" fill="rgb(245,133,36)" fg:x="4925" fg:w="22"/><text x="70.3568%" y="143.50"></text></g><g><title>mwpf`HFactor::setupGeneral (21 samples, 0.30%)</title><rect x="70.1210%" y="117" width="0.2989%" height="15" fill="rgb(212,6,19)" fg:x="4926" fg:w="21"/><text x="70.3710%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="70.4057%" y="101" width="0.0142%" height="15" fill="rgb(218,1,36)" fg:x="4946" fg:w="1"/><text x="70.6557%" y="111.50"></text></g><g><title>mwpf`HEkk::initialiseSimplexLpBasisAndFactor (90 samples, 1.28%)</title><rect x="69.1530%" y="149" width="1.2811%" height="15" fill="rgb(246,84,54)" fg:x="4858" fg:w="90"/><text x="69.4030%" y="159.50"></text></g><g><title>mwpf`HighsHashHelpers::sparse_combine (1 samples, 0.01%)</title><rect x="70.4199%" y="133" width="0.0142%" height="15" fill="rgb(242,110,6)" fg:x="4947" fg:w="1"/><text x="70.6699%" y="143.50"></text></g><g><title>mwpf`HighsSparseMatrix::collectAj(HVectorBase (1 samples, 0.01%)</title><rect x="70.4342%" y="149" width="0.0142%" height="15" fill="rgb(214,47,5)" fg:x="4948" fg:w="1"/><text x="70.6842%" y="159.50"></text></g><g><title>mwpf`HEkk::initialiseForSolve (132 samples, 1.88%)</title><rect x="68.9395%" y="165" width="1.8790%" height="15" fill="rgb(218,159,25)" fg:x="4843" fg:w="132"/><text x="69.1895%" y="175.50">m..</text></g><g><title>mwpf`HighsSparseMatrix::createRowwisePartitioned (26 samples, 0.37%)</title><rect x="70.4484%" y="149" width="0.3701%" height="15" fill="rgb(215,211,28)" fg:x="4949" fg:w="26"/><text x="70.6984%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.09%)</title><rect x="70.7331%" y="133" width="0.0854%" height="15" fill="rgb(238,59,32)" fg:x="4969" fg:w="6"/><text x="70.9831%" y="143.50"></text></g><g><title>mwpf`HEkk::computeDual (3 samples, 0.04%)</title><rect x="70.8185%" y="149" width="0.0427%" height="15" fill="rgb(226,82,3)" fg:x="4975" fg:w="3"/><text x="71.0685%" y="159.50"></text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (3 samples, 0.04%)</title><rect x="70.8185%" y="133" width="0.0427%" height="15" fill="rgb(240,164,32)" fg:x="4975" fg:w="3"/><text x="71.0685%" y="143.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (3 samples, 0.04%)</title><rect x="70.8185%" y="117" width="0.0427%" height="15" fill="rgb(232,46,7)" fg:x="4975" fg:w="3"/><text x="71.0685%" y="127.50"></text></g><g><title>mwpf`HEkk::initialiseBound (1 samples, 0.01%)</title><rect x="70.8612%" y="149" width="0.0142%" height="15" fill="rgb(229,129,53)" fg:x="4978" fg:w="1"/><text x="71.1112%" y="159.50"></text></g><g><title>mwpf`HEkk::rebuildRefactor (1 samples, 0.01%)</title><rect x="70.8754%" y="133" width="0.0142%" height="15" fill="rgb(234,188,29)" fg:x="4979" fg:w="1"/><text x="71.1254%" y="143.50"></text></g><g><title>mwpf`HEkk::factorSolveError (1 samples, 0.01%)</title><rect x="70.8754%" y="117" width="0.0142%" height="15" fill="rgb(246,141,4)" fg:x="4979" fg:w="1"/><text x="71.1254%" y="127.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::setup (1 samples, 0.01%)</title><rect x="70.8754%" y="101" width="0.0142%" height="15" fill="rgb(229,23,39)" fg:x="4979" fg:w="1"/><text x="71.1254%" y="111.50"></text></g><g><title>mwpf`std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;::assign (1 samples, 0.01%)</title><rect x="70.8754%" y="85" width="0.0142%" height="15" fill="rgb(206,12,3)" fg:x="4979" fg:w="1"/><text x="71.1254%" y="95.50"></text></g><g><title>mwpf`HEkk::getValueScale(int, std::__1::vector&lt;double, std::__1::allocator (1 samples, 0.01%)</title><rect x="70.8897%" y="117" width="0.0142%" height="15" fill="rgb(252,226,20)" fg:x="4980" fg:w="1"/><text x="71.1397%" y="127.50"></text></g><g><title>mwpf`HEkkDualRow::chooseFinal (2 samples, 0.03%)</title><rect x="70.9039%" y="101" width="0.0285%" height="15" fill="rgb(216,123,35)" fg:x="4981" fg:w="2"/><text x="71.1539%" y="111.50"></text></g><g><title>mwpf`HEkkDualRow::chooseFinalWorkGroupQuad (1 samples, 0.01%)</title><rect x="70.9181%" y="85" width="0.0142%" height="15" fill="rgb(212,68,40)" fg:x="4982" fg:w="1"/><text x="71.1681%" y="95.50"></text></g><g><title>mwpf`HEkkDual::chooseColumn(HVectorBase (3 samples, 0.04%)</title><rect x="70.9039%" y="117" width="0.0427%" height="15" fill="rgb(254,125,32)" fg:x="4981" fg:w="3"/><text x="71.1539%" y="127.50"></text></g><g><title>mwpf`HighsSimplexAnalysis::simplexTimerStart (1 samples, 0.01%)</title><rect x="70.9324%" y="101" width="0.0142%" height="15" fill="rgb(253,97,22)" fg:x="4983" fg:w="1"/><text x="71.1824%" y="111.50"></text></g><g><title>mwpf`HEkkDual::chooseRow (2 samples, 0.03%)</title><rect x="70.9466%" y="117" width="0.0285%" height="15" fill="rgb(241,101,14)" fg:x="4984" fg:w="2"/><text x="71.1966%" y="127.50"></text></g><g><title>mwpf`HEkkDualRHS::chooseNormal (2 samples, 0.03%)</title><rect x="70.9466%" y="101" width="0.0285%" height="15" fill="rgb(238,103,29)" fg:x="4984" fg:w="2"/><text x="71.1966%" y="111.50"></text></g><g><title>mwpf`HEkkDual::updateDual (1 samples, 0.01%)</title><rect x="70.9751%" y="117" width="0.0142%" height="15" fill="rgb(233,195,47)" fg:x="4986" fg:w="1"/><text x="71.2251%" y="127.50"></text></g><g><title>mwpf`HEkkDual::updateFtranBFRT (2 samples, 0.03%)</title><rect x="70.9893%" y="117" width="0.0285%" height="15" fill="rgb(246,218,30)" fg:x="4987" fg:w="2"/><text x="71.2393%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (2 samples, 0.03%)</title><rect x="70.9893%" y="101" width="0.0285%" height="15" fill="rgb(219,145,47)" fg:x="4987" fg:w="2"/><text x="71.2393%" y="111.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (2 samples, 0.03%)</title><rect x="70.9893%" y="85" width="0.0285%" height="15" fill="rgb(243,12,26)" fg:x="4987" fg:w="2"/><text x="71.2393%" y="95.50"></text></g><g><title>mwpf`HFactor::ftranU(HVectorBase (2 samples, 0.03%)</title><rect x="70.9893%" y="69" width="0.0285%" height="15" fill="rgb(214,87,16)" fg:x="4987" fg:w="2"/><text x="71.2393%" y="79.50"></text></g><g><title>mwpf`HEkkDual::updateFtranDSE(HVectorBase (1 samples, 0.01%)</title><rect x="71.0178%" y="117" width="0.0142%" height="15" fill="rgb(208,99,42)" fg:x="4989" fg:w="1"/><text x="71.2678%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::ftranInScaledSpace(HVectorBase (1 samples, 0.01%)</title><rect x="71.0178%" y="101" width="0.0142%" height="15" fill="rgb(253,99,2)" fg:x="4989" fg:w="1"/><text x="71.2678%" y="111.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (1 samples, 0.01%)</title><rect x="71.0178%" y="85" width="0.0142%" height="15" fill="rgb(220,168,23)" fg:x="4989" fg:w="1"/><text x="71.2678%" y="95.50"></text></g><g><title>mwpf`solveHyper(int, int const*, int const*, double const*, int const*, int const*, int const*, double const*, HVectorBase&lt;double&gt;*) (1 samples, 0.01%)</title><rect x="71.0178%" y="69" width="0.0142%" height="15" fill="rgb(242,38,24)" fg:x="4989" fg:w="1"/><text x="71.2678%" y="79.50"></text></g><g><title>mwpf`HEkk::updateFactor(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.01%)</title><rect x="71.0320%" y="101" width="0.0142%" height="15" fill="rgb(225,182,9)" fg:x="4990" fg:w="1"/><text x="71.2820%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::update(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.01%)</title><rect x="71.0320%" y="85" width="0.0142%" height="15" fill="rgb(243,178,37)" fg:x="4990" fg:w="1"/><text x="71.2820%" y="95.50"></text></g><g><title>mwpf`HFactor::update(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.01%)</title><rect x="71.0320%" y="69" width="0.0142%" height="15" fill="rgb(232,139,19)" fg:x="4990" fg:w="1"/><text x="71.2820%" y="79.50"></text></g><g><title>mwpf`HFactor::updateFT(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.01%)</title><rect x="71.0320%" y="53" width="0.0142%" height="15" fill="rgb(225,201,24)" fg:x="4990" fg:w="1"/><text x="71.2820%" y="63.50"></text></g><g><title>mwpf`HEkkDual::updatePivots (4 samples, 0.06%)</title><rect x="71.0320%" y="117" width="0.0569%" height="15" fill="rgb(221,47,46)" fg:x="4990" fg:w="4"/><text x="71.2820%" y="127.50"></text></g><g><title>mwpf`HighsSparseMatrix::update (3 samples, 0.04%)</title><rect x="71.0463%" y="101" width="0.0427%" height="15" fill="rgb(249,23,13)" fg:x="4991" fg:w="3"/><text x="71.2963%" y="111.50"></text></g><g><title>mwpf`HEkk::updateDualSteepestEdgeWeights(int, int, HVectorBase (1 samples, 0.01%)</title><rect x="71.0890%" y="101" width="0.0142%" height="15" fill="rgb(219,9,5)" fg:x="4994" fg:w="1"/><text x="71.3390%" y="111.50"></text></g><g><title>mwpf`HEkkDualRHS::updatePrimal(HVectorBase (1 samples, 0.01%)</title><rect x="71.1032%" y="101" width="0.0142%" height="15" fill="rgb(254,171,16)" fg:x="4995" fg:w="1"/><text x="71.3532%" y="111.50"></text></g><g><title>mwpf`HEkkDual::updatePrimal(HVectorBase (3 samples, 0.04%)</title><rect x="71.0890%" y="117" width="0.0427%" height="15" fill="rgb(230,171,20)" fg:x="4994" fg:w="3"/><text x="71.3390%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::variableScaleFactor (1 samples, 0.01%)</title><rect x="71.1174%" y="101" width="0.0142%" height="15" fill="rgb(210,71,41)" fg:x="4996" fg:w="1"/><text x="71.3674%" y="111.50"></text></g><g><title>mwpf`HEkkDualRow::chooseMakepack(HVectorBase (1 samples, 0.01%)</title><rect x="71.1317%" y="117" width="0.0142%" height="15" fill="rgb(206,173,20)" fg:x="4997" fg:w="1"/><text x="71.3817%" y="127.50"></text></g><g><title>mwpf`HEkkDual::iterate (19 samples, 0.27%)</title><rect x="70.8897%" y="133" width="0.2705%" height="15" fill="rgb(233,88,34)" fg:x="4980" fg:w="19"/><text x="71.1397%" y="143.50"></text></g><g><title>mwpf`HighsSparseMatrix::collectAj(HVectorBase (1 samples, 0.01%)</title><rect x="71.1459%" y="117" width="0.0142%" height="15" fill="rgb(223,209,46)" fg:x="4998" fg:w="1"/><text x="71.3959%" y="127.50"></text></g><g><title>mwpf`HEkk::fullBtran(HVectorBase (1 samples, 0.01%)</title><rect x="71.1601%" y="101" width="0.0142%" height="15" fill="rgb(250,43,18)" fg:x="4999" fg:w="1"/><text x="71.4101%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (1 samples, 0.01%)</title><rect x="71.1601%" y="85" width="0.0142%" height="15" fill="rgb(208,13,10)" fg:x="4999" fg:w="1"/><text x="71.4101%" y="95.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (1 samples, 0.01%)</title><rect x="71.1601%" y="69" width="0.0142%" height="15" fill="rgb(212,200,36)" fg:x="4999" fg:w="1"/><text x="71.4101%" y="79.50"></text></g><g><title>mwpf`HFactor::btranU(HVectorBase (1 samples, 0.01%)</title><rect x="71.1601%" y="53" width="0.0142%" height="15" fill="rgb(225,90,30)" fg:x="4999" fg:w="1"/><text x="71.4101%" y="63.50"></text></g><g><title>mwpf`HEkk::computeDual (2 samples, 0.03%)</title><rect x="71.1601%" y="117" width="0.0285%" height="15" fill="rgb(236,182,39)" fg:x="4999" fg:w="2"/><text x="71.4101%" y="127.50"></text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (1 samples, 0.01%)</title><rect x="71.1744%" y="101" width="0.0142%" height="15" fill="rgb(212,144,35)" fg:x="5000" fg:w="1"/><text x="71.4244%" y="111.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (1 samples, 0.01%)</title><rect x="71.1744%" y="85" width="0.0142%" height="15" fill="rgb(228,63,44)" fg:x="5000" fg:w="1"/><text x="71.4244%" y="95.50"></text></g><g><title>mwpf`HEkk::computeSimplexLpDualInfeasible (1 samples, 0.01%)</title><rect x="71.1886%" y="117" width="0.0142%" height="15" fill="rgb(228,109,6)" fg:x="5001" fg:w="1"/><text x="71.4386%" y="127.50"></text></g><g><title>mwpf`HEkk::getNonsingularInverse (1 samples, 0.01%)</title><rect x="71.2028%" y="117" width="0.0142%" height="15" fill="rgb(238,117,24)" fg:x="5002" fg:w="1"/><text x="71.4528%" y="127.50"></text></g><g><title>mwpf`HEkk::computeFactor (1 samples, 0.01%)</title><rect x="71.2028%" y="101" width="0.0142%" height="15" fill="rgb(242,26,26)" fg:x="5002" fg:w="1"/><text x="71.4528%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::invert (1 samples, 0.01%)</title><rect x="71.2028%" y="85" width="0.0142%" height="15" fill="rgb(221,92,48)" fg:x="5002" fg:w="1"/><text x="71.4528%" y="95.50"></text></g><g><title>mwpf`HFactor::build (1 samples, 0.01%)</title><rect x="71.2028%" y="69" width="0.0142%" height="15" fill="rgb(209,209,32)" fg:x="5002" fg:w="1"/><text x="71.4528%" y="79.50"></text></g><g><title>mwpf`HFactor::buildSimple (1 samples, 0.01%)</title><rect x="71.2028%" y="53" width="0.0142%" height="15" fill="rgb(221,70,22)" fg:x="5002" fg:w="1"/><text x="71.4528%" y="63.50"></text></g><g><title>mwpf`HEkkDual::solvePhase1 (25 samples, 0.36%)</title><rect x="70.8754%" y="149" width="0.3559%" height="15" fill="rgb(248,145,5)" fg:x="4979" fg:w="25"/><text x="71.1254%" y="159.50"></text></g><g><title>mwpf`HEkkDual::rebuild (5 samples, 0.07%)</title><rect x="71.1601%" y="133" width="0.0712%" height="15" fill="rgb(226,116,26)" fg:x="4999" fg:w="5"/><text x="71.4101%" y="143.50"></text></g><g><title>mwpf`HighsSparseMatrix::collectAj(HVectorBase (1 samples, 0.01%)</title><rect x="71.2171%" y="117" width="0.0142%" height="15" fill="rgb(244,5,17)" fg:x="5003" fg:w="1"/><text x="71.4671%" y="127.50"></text></g><g><title>mwpf`HEkk::bailout (1 samples, 0.01%)</title><rect x="71.2313%" y="133" width="0.0142%" height="15" fill="rgb(252,159,33)" fg:x="5004" fg:w="1"/><text x="71.4813%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::chrono::steady_clock::now (1 samples, 0.01%)</title><rect x="71.2313%" y="117" width="0.0142%" height="15" fill="rgb(206,71,0)" fg:x="5004" fg:w="1"/><text x="71.4813%" y="127.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (1 samples, 0.01%)</title><rect x="71.2313%" y="101" width="0.0142%" height="15" fill="rgb(233,118,54)" fg:x="5004" fg:w="1"/><text x="71.4813%" y="111.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (1 samples, 0.01%)</title><rect x="71.2313%" y="85" width="0.0142%" height="15" fill="rgb(234,83,48)" fg:x="5004" fg:w="1"/><text x="71.4813%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_continuous_time (1 samples, 0.01%)</title><rect x="71.2313%" y="69" width="0.0142%" height="15" fill="rgb(228,3,54)" fg:x="5004" fg:w="1"/><text x="71.4813%" y="79.50"></text></g><g><title>mwpf`HEkk::debugSimplex(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.01%)</title><rect x="71.2456%" y="133" width="0.0142%" height="15" fill="rgb(226,155,13)" fg:x="5005" fg:w="1"/><text x="71.4956%" y="143.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (1 samples, 0.01%)</title><rect x="71.2598%" y="101" width="0.0142%" height="15" fill="rgb(241,28,37)" fg:x="5006" fg:w="1"/><text x="71.5098%" y="111.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (1 samples, 0.01%)</title><rect x="71.2598%" y="85" width="0.0142%" height="15" fill="rgb(233,93,10)" fg:x="5006" fg:w="1"/><text x="71.5098%" y="95.50"></text></g><g><title>mwpf`HFactor::btranU(HVectorBase (1 samples, 0.01%)</title><rect x="71.2598%" y="69" width="0.0142%" height="15" fill="rgb(225,113,19)" fg:x="5006" fg:w="1"/><text x="71.5098%" y="79.50"></text></g><g><title>mwpf`HEkk::rebuildRefactor (2 samples, 0.03%)</title><rect x="71.2598%" y="133" width="0.0285%" height="15" fill="rgb(241,2,18)" fg:x="5006" fg:w="2"/><text x="71.5098%" y="143.50"></text></g><g><title>mwpf`HEkk::factorSolveError (2 samples, 0.03%)</title><rect x="71.2598%" y="117" width="0.0285%" height="15" fill="rgb(228,207,21)" fg:x="5006" fg:w="2"/><text x="71.5098%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (1 samples, 0.01%)</title><rect x="71.2740%" y="101" width="0.0142%" height="15" fill="rgb(213,211,35)" fg:x="5007" fg:w="1"/><text x="71.5240%" y="111.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (1 samples, 0.01%)</title><rect x="71.2740%" y="85" width="0.0142%" height="15" fill="rgb(209,83,10)" fg:x="5007" fg:w="1"/><text x="71.5240%" y="95.50"></text></g><g><title>mwpf`HFactor::ftranFT(HVectorBase (1 samples, 0.01%)</title><rect x="71.2740%" y="69" width="0.0142%" height="15" fill="rgb(209,164,1)" fg:x="5007" fg:w="1"/><text x="71.5240%" y="79.50"></text></g><g><title>mwpf`HEkkDual::cleanup (1 samples, 0.01%)</title><rect x="71.2883%" y="133" width="0.0142%" height="15" fill="rgb(213,184,43)" fg:x="5008" fg:w="1"/><text x="71.5383%" y="143.50"></text></g><g><title>mwpf`HEkk::computeDual (1 samples, 0.01%)</title><rect x="71.2883%" y="117" width="0.0142%" height="15" fill="rgb(231,61,34)" fg:x="5008" fg:w="1"/><text x="71.5383%" y="127.50"></text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (1 samples, 0.01%)</title><rect x="71.2883%" y="101" width="0.0142%" height="15" fill="rgb(235,75,3)" fg:x="5008" fg:w="1"/><text x="71.5383%" y="111.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (1 samples, 0.01%)</title><rect x="71.2883%" y="85" width="0.0142%" height="15" fill="rgb(220,106,47)" fg:x="5008" fg:w="1"/><text x="71.5383%" y="95.50"></text></g><g><title>mwpf`HEkk::getValueScale(int, std::__1::vector&lt;double, std::__1::allocator (8 samples, 0.11%)</title><rect x="71.3025%" y="117" width="0.1139%" height="15" fill="rgb(210,196,33)" fg:x="5009" fg:w="8"/><text x="71.5525%" y="127.50"></text></g><g><title>mwpf`HEkk::isBadBasisChange (3 samples, 0.04%)</title><rect x="71.4164%" y="117" width="0.0427%" height="15" fill="rgb(229,154,42)" fg:x="5017" fg:w="3"/><text x="71.6664%" y="127.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::clear (1 samples, 0.01%)</title><rect x="71.4591%" y="85" width="0.0142%" height="15" fill="rgb(228,114,26)" fg:x="5020" fg:w="1"/><text x="71.7091%" y="95.50"></text></g><g><title>mwpf`std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;::assign (1 samples, 0.01%)</title><rect x="71.4591%" y="69" width="0.0142%" height="15" fill="rgb(208,144,1)" fg:x="5020" fg:w="1"/><text x="71.7091%" y="79.50"></text></g><g><title>mwpf`HEkk::tableauRowPrice(bool, HVectorBase&lt;double&gt; const&amp;, HVectorBase (84 samples, 1.20%)</title><rect x="71.4591%" y="101" width="1.1957%" height="15" fill="rgb(239,112,37)" fg:x="5020" fg:w="84"/><text x="71.7091%" y="111.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByRowWithSwitch(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (83 samples, 1.18%)</title><rect x="71.4733%" y="85" width="1.1815%" height="15" fill="rgb(210,96,50)" fg:x="5021" fg:w="83"/><text x="71.7233%" y="95.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByRowDenseResult(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, HVectorBase (72 samples, 1.02%)</title><rect x="71.6299%" y="69" width="1.0249%" height="15" fill="rgb(222,178,2)" fg:x="5032" fg:w="72"/><text x="71.8799%" y="79.50"></text></g><g><title>mwpf`HEkkDualRow::chooseFinalWorkGroupQuad (1 samples, 0.01%)</title><rect x="72.7544%" y="85" width="0.0142%" height="15" fill="rgb(226,74,18)" fg:x="5111" fg:w="1"/><text x="73.0044%" y="95.50"></text></g><g><title>mwpf`HEkkDualRow::chooseFinal (9 samples, 0.13%)</title><rect x="72.6548%" y="101" width="0.1281%" height="15" fill="rgb(225,67,54)" fg:x="5104" fg:w="9"/><text x="72.9048%" y="111.50"></text></g><g><title>mwpf`HighsSimplexAnalysis::simplexTimerStop (1 samples, 0.01%)</title><rect x="72.7687%" y="85" width="0.0142%" height="15" fill="rgb(251,92,32)" fg:x="5112" fg:w="1"/><text x="73.0187%" y="95.50"></text></g><g><title>mwpf`HighsSimplexAnalysis::simplexTimerStop (1 samples, 0.01%)</title><rect x="72.7829%" y="101" width="0.0142%" height="15" fill="rgb(228,149,22)" fg:x="5113" fg:w="1"/><text x="73.0329%" y="111.50"></text></g><g><title>mwpf`HEkkDual::chooseColumn(HVectorBase (95 samples, 1.35%)</title><rect x="71.4591%" y="117" width="1.3523%" height="15" fill="rgb(243,54,13)" fg:x="5020" fg:w="95"/><text x="71.7091%" y="127.50"></text></g><g><title>mwpf`nearestPowerOfTwoScale(double) (1 samples, 0.01%)</title><rect x="72.7972%" y="101" width="0.0142%" height="15" fill="rgb(243,180,28)" fg:x="5114" fg:w="1"/><text x="73.0472%" y="111.50"></text></g><g><title>mwpf`HEkkDualRHS::chooseNormal (23 samples, 0.33%)</title><rect x="72.8114%" y="101" width="0.3274%" height="15" fill="rgb(208,167,24)" fg:x="5115" fg:w="23"/><text x="73.0614%" y="111.50"></text></g><g><title>mwpf`HFactor::btranL(HVectorBase (23 samples, 0.33%)</title><rect x="73.1388%" y="69" width="0.3274%" height="15" fill="rgb(245,73,45)" fg:x="5138" fg:w="23"/><text x="73.3888%" y="79.50"></text></g><g><title>mwpf`HFactor::btranU(HVectorBase (29 samples, 0.41%)</title><rect x="73.4662%" y="69" width="0.4128%" height="15" fill="rgb(237,203,48)" fg:x="5161" fg:w="29"/><text x="73.7162%" y="79.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::tight (1 samples, 0.01%)</title><rect x="73.8790%" y="69" width="0.0142%" height="15" fill="rgb(211,197,16)" fg:x="5190" fg:w="1"/><text x="74.1290%" y="79.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (57 samples, 0.81%)</title><rect x="73.1388%" y="85" width="0.8114%" height="15" fill="rgb(243,99,51)" fg:x="5138" fg:w="57"/><text x="73.3888%" y="95.50"></text></g><g><title>mwpf`solveHyper(int, int const*, int const*, double const*, int const*, int const*, int const*, double const*, HVectorBase&lt;double&gt;*) (4 samples, 0.06%)</title><rect x="73.8932%" y="69" width="0.0569%" height="15" fill="rgb(215,123,29)" fg:x="5191" fg:w="4"/><text x="74.1432%" y="79.50"></text></g><g><title>mwpf`HFactor::btranU(HVectorBase (1 samples, 0.01%)</title><rect x="73.9502%" y="85" width="0.0142%" height="15" fill="rgb(239,186,37)" fg:x="5195" fg:w="1"/><text x="74.2002%" y="95.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (61 samples, 0.87%)</title><rect x="73.1388%" y="101" width="0.8683%" height="15" fill="rgb(252,136,39)" fg:x="5138" fg:w="61"/><text x="73.3888%" y="111.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (3 samples, 0.04%)</title><rect x="73.9644%" y="85" width="0.0427%" height="15" fill="rgb(223,213,32)" fg:x="5196" fg:w="3"/><text x="74.2144%" y="95.50"></text></g><g><title>mwpf`HEkkDual::chooseRow (85 samples, 1.21%)</title><rect x="72.8114%" y="117" width="1.2100%" height="15" fill="rgb(233,115,5)" fg:x="5115" fg:w="85"/><text x="73.0614%" y="127.50"></text></g><g><title>mwpf`HighsSimplexAnalysis::dualSteepestEdgeWeightError (1 samples, 0.01%)</title><rect x="74.0071%" y="101" width="0.0142%" height="15" fill="rgb(207,226,44)" fg:x="5199" fg:w="1"/><text x="74.2571%" y="111.50"></text></g><g><title>libsystem_m.dylib`log (1 samples, 0.01%)</title><rect x="74.0071%" y="85" width="0.0142%" height="15" fill="rgb(208,126,0)" fg:x="5199" fg:w="1"/><text x="74.2571%" y="95.50"></text></g><g><title>mwpf`HEkkDual::updateDual (8 samples, 0.11%)</title><rect x="74.0214%" y="117" width="0.1139%" height="15" fill="rgb(244,66,21)" fg:x="5200" fg:w="8"/><text x="74.2714%" y="127.50"></text></g><g><title>mwpf`HEkkDualRow::updateDual (8 samples, 0.11%)</title><rect x="74.0214%" y="101" width="0.1139%" height="15" fill="rgb(222,97,12)" fg:x="5200" fg:w="8"/><text x="74.2714%" y="111.50"></text></g><g><title>mwpf`HFactor::ftranFT(HVectorBase (24 samples, 0.34%)</title><rect x="74.1495%" y="69" width="0.3416%" height="15" fill="rgb(219,213,19)" fg:x="5209" fg:w="24"/><text x="74.3995%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranL(HVectorBase (8 samples, 0.11%)</title><rect x="74.4911%" y="69" width="0.1139%" height="15" fill="rgb(252,169,30)" fg:x="5233" fg:w="8"/><text x="74.7411%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranU(HVectorBase (61 samples, 0.87%)</title><rect x="74.6050%" y="69" width="0.8683%" height="15" fill="rgb(206,32,51)" fg:x="5241" fg:w="61"/><text x="74.8550%" y="79.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::pack (6 samples, 0.09%)</title><rect x="75.4733%" y="69" width="0.0854%" height="15" fill="rgb(250,172,42)" fg:x="5302" fg:w="6"/><text x="75.7233%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (100 samples, 1.42%)</title><rect x="74.1495%" y="85" width="1.4235%" height="15" fill="rgb(209,34,43)" fg:x="5209" fg:w="100"/><text x="74.3995%" y="95.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::tight (1 samples, 0.01%)</title><rect x="75.5587%" y="69" width="0.0142%" height="15" fill="rgb(223,11,35)" fg:x="5308" fg:w="1"/><text x="75.8087%" y="79.50"></text></g><g><title>mwpf`HEkkDual::updateFtran (113 samples, 1.61%)</title><rect x="74.1352%" y="117" width="1.6085%" height="15" fill="rgb(251,219,26)" fg:x="5208" fg:w="113"/><text x="74.3852%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (112 samples, 1.59%)</title><rect x="74.1495%" y="101" width="1.5943%" height="15" fill="rgb(231,119,3)" fg:x="5209" fg:w="112"/><text x="74.3995%" y="111.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (12 samples, 0.17%)</title><rect x="75.5730%" y="85" width="0.1708%" height="15" fill="rgb(216,97,11)" fg:x="5309" fg:w="12"/><text x="75.8230%" y="95.50"></text></g><g><title>mwpf`HEkkDual::updateFtranBFRT (1 samples, 0.01%)</title><rect x="75.7438%" y="117" width="0.0142%" height="15" fill="rgb(223,59,9)" fg:x="5321" fg:w="1"/><text x="75.9938%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (1 samples, 0.01%)</title><rect x="75.7438%" y="101" width="0.0142%" height="15" fill="rgb(233,93,31)" fg:x="5321" fg:w="1"/><text x="75.9938%" y="111.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (1 samples, 0.01%)</title><rect x="75.7438%" y="85" width="0.0142%" height="15" fill="rgb(239,81,33)" fg:x="5321" fg:w="1"/><text x="75.9938%" y="95.50"></text></g><g><title>mwpf`HFactor::ftranU(HVectorBase (1 samples, 0.01%)</title><rect x="75.7438%" y="69" width="0.0142%" height="15" fill="rgb(213,120,34)" fg:x="5321" fg:w="1"/><text x="75.9938%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranFT(HVectorBase (10 samples, 0.14%)</title><rect x="75.7580%" y="69" width="0.1423%" height="15" fill="rgb(243,49,53)" fg:x="5322" fg:w="10"/><text x="76.0080%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranL(HVectorBase (23 samples, 0.33%)</title><rect x="75.9004%" y="69" width="0.3274%" height="15" fill="rgb(247,216,33)" fg:x="5332" fg:w="23"/><text x="76.1504%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranU(HVectorBase (65 samples, 0.93%)</title><rect x="76.2278%" y="69" width="0.9253%" height="15" fill="rgb(226,26,14)" fg:x="5355" fg:w="65"/><text x="76.4778%" y="79.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::tight (2 samples, 0.03%)</title><rect x="77.1530%" y="69" width="0.0285%" height="15" fill="rgb(215,49,53)" fg:x="5420" fg:w="2"/><text x="77.4030%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (101 samples, 1.44%)</title><rect x="75.7580%" y="85" width="1.4377%" height="15" fill="rgb(245,162,40)" fg:x="5322" fg:w="101"/><text x="76.0080%" y="95.50"></text></g><g><title>mwpf`solveHyper(int, int const*, int const*, double const*, int const*, int const*, int const*, double const*, HVectorBase&lt;double&gt;*) (1 samples, 0.01%)</title><rect x="77.1815%" y="69" width="0.0142%" height="15" fill="rgb(229,68,17)" fg:x="5422" fg:w="1"/><text x="77.4315%" y="79.50"></text></g><g><title>mwpf`HEkkDual::updateFtranDSE(HVectorBase (110 samples, 1.57%)</title><rect x="75.7580%" y="117" width="1.5658%" height="15" fill="rgb(213,182,10)" fg:x="5322" fg:w="110"/><text x="76.0080%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::ftranInScaledSpace(HVectorBase (110 samples, 1.57%)</title><rect x="75.7580%" y="101" width="1.5658%" height="15" fill="rgb(245,125,30)" fg:x="5322" fg:w="110"/><text x="76.0080%" y="111.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (9 samples, 0.13%)</title><rect x="77.1957%" y="85" width="0.1281%" height="15" fill="rgb(232,202,2)" fg:x="5423" fg:w="9"/><text x="77.4457%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.04%)</title><rect x="77.3238%" y="53" width="0.0427%" height="15" fill="rgb(237,140,51)" fg:x="5432" fg:w="3"/><text x="77.5738%" y="63.50"></text></g><g><title>mwpf`HEkk::updateFactor(HVectorBase&lt;double&gt;*, HVectorBase (42 samples, 0.60%)</title><rect x="77.3238%" y="101" width="0.5979%" height="15" fill="rgb(236,157,25)" fg:x="5432" fg:w="42"/><text x="77.5738%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::update(HVectorBase&lt;double&gt;*, HVectorBase (42 samples, 0.60%)</title><rect x="77.3238%" y="85" width="0.5979%" height="15" fill="rgb(219,209,0)" fg:x="5432" fg:w="42"/><text x="77.5738%" y="95.50"></text></g><g><title>mwpf`HFactor::update(HVectorBase&lt;double&gt;*, HVectorBase (42 samples, 0.60%)</title><rect x="77.3238%" y="69" width="0.5979%" height="15" fill="rgb(240,116,54)" fg:x="5432" fg:w="42"/><text x="77.5738%" y="79.50"></text></g><g><title>mwpf`HFactor::updateFT(HVectorBase&lt;double&gt;*, HVectorBase (39 samples, 0.56%)</title><rect x="77.3665%" y="53" width="0.5552%" height="15" fill="rgb(216,10,36)" fg:x="5435" fg:w="39"/><text x="77.6165%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="77.9075%" y="37" width="0.0142%" height="15" fill="rgb(222,72,44)" fg:x="5473" fg:w="1"/><text x="78.1575%" y="47.50"></text></g><g><title>mwpf`HEkkDual::updatePivots (79 samples, 1.12%)</title><rect x="77.3238%" y="117" width="1.1246%" height="15" fill="rgb(232,159,9)" fg:x="5432" fg:w="79"/><text x="77.5738%" y="127.50"></text></g><g><title>mwpf`HighsSparseMatrix::update (37 samples, 0.53%)</title><rect x="77.9217%" y="101" width="0.5267%" height="15" fill="rgb(210,39,32)" fg:x="5474" fg:w="37"/><text x="78.1717%" y="111.50"></text></g><g><title>mwpf`HEkk::updateDualSteepestEdgeWeights(int, int, HVectorBase (12 samples, 0.17%)</title><rect x="78.4626%" y="101" width="0.1708%" height="15" fill="rgb(216,194,45)" fg:x="5512" fg:w="12"/><text x="78.7126%" y="111.50"></text></g><g><title>mwpf`HEkkDualRHS::updateInfeasList(HVectorBase (3 samples, 0.04%)</title><rect x="78.6335%" y="101" width="0.0427%" height="15" fill="rgb(218,18,35)" fg:x="5524" fg:w="3"/><text x="78.8835%" y="111.50"></text></g><g><title>mwpf`HEkkDualRHS::updatePrimal(HVectorBase (4 samples, 0.06%)</title><rect x="78.6762%" y="101" width="0.0569%" height="15" fill="rgb(207,83,51)" fg:x="5527" fg:w="4"/><text x="78.9262%" y="111.50"></text></g><g><title>mwpf`HEkkDual::updatePrimal(HVectorBase (24 samples, 0.34%)</title><rect x="78.4484%" y="117" width="0.3416%" height="15" fill="rgb(225,63,43)" fg:x="5511" fg:w="24"/><text x="78.6984%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::basicColScaleFactor (4 samples, 0.06%)</title><rect x="78.7331%" y="101" width="0.0569%" height="15" fill="rgb(207,57,36)" fg:x="5531" fg:w="4"/><text x="78.9831%" y="111.50"></text></g><g><title>mwpf`HEkkDualRow::chooseMakepack(HVectorBase (14 samples, 0.20%)</title><rect x="78.7900%" y="117" width="0.1993%" height="15" fill="rgb(216,99,33)" fg:x="5535" fg:w="14"/><text x="79.0400%" y="127.50"></text></g><g><title>mwpf`HEkkDualRow::choosePossible (24 samples, 0.34%)</title><rect x="78.9893%" y="117" width="0.3416%" height="15" fill="rgb(225,42,16)" fg:x="5549" fg:w="24"/><text x="79.2393%" y="127.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::norm2 (1 samples, 0.01%)</title><rect x="79.3310%" y="117" width="0.0142%" height="15" fill="rgb(220,201,45)" fg:x="5573" fg:w="1"/><text x="79.5810%" y="127.50"></text></g><g><title>mwpf`HighsSimplexAnalysis::simplexTimerStop (1 samples, 0.01%)</title><rect x="79.3452%" y="117" width="0.0142%" height="15" fill="rgb(225,33,4)" fg:x="5574" fg:w="1"/><text x="79.5952%" y="127.50"></text></g><g><title>mwpf`HEkkDual::iterate (572 samples, 8.14%)</title><rect x="71.3025%" y="133" width="8.1423%" height="15" fill="rgb(224,33,50)" fg:x="5009" fg:w="572"/><text x="71.5525%" y="143.50">mwpf`HEkkDu..</text></g><g><title>mwpf`HighsSparseMatrix::collectAj(HVectorBase (6 samples, 0.09%)</title><rect x="79.3594%" y="117" width="0.0854%" height="15" fill="rgb(246,198,51)" fg:x="5575" fg:w="6"/><text x="79.6094%" y="127.50"></text></g><g><title>mwpf`HEkk::fullBtran(HVectorBase (2 samples, 0.03%)</title><rect x="79.4591%" y="101" width="0.0285%" height="15" fill="rgb(205,22,4)" fg:x="5582" fg:w="2"/><text x="79.7091%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (2 samples, 0.03%)</title><rect x="79.4591%" y="85" width="0.0285%" height="15" fill="rgb(206,3,8)" fg:x="5582" fg:w="2"/><text x="79.7091%" y="95.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (2 samples, 0.03%)</title><rect x="79.4591%" y="69" width="0.0285%" height="15" fill="rgb(251,23,15)" fg:x="5582" fg:w="2"/><text x="79.7091%" y="79.50"></text></g><g><title>mwpf`HFactor::btranU(HVectorBase (2 samples, 0.03%)</title><rect x="79.4591%" y="53" width="0.0285%" height="15" fill="rgb(252,88,28)" fg:x="5582" fg:w="2"/><text x="79.7091%" y="63.50"></text></g><g><title>mwpf`HEkk::computeDual (11 samples, 0.16%)</title><rect x="79.4448%" y="117" width="0.1566%" height="15" fill="rgb(212,127,14)" fg:x="5581" fg:w="11"/><text x="79.6948%" y="127.50"></text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (8 samples, 0.11%)</title><rect x="79.4875%" y="101" width="0.1139%" height="15" fill="rgb(247,145,37)" fg:x="5584" fg:w="8"/><text x="79.7375%" y="111.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (8 samples, 0.11%)</title><rect x="79.4875%" y="85" width="0.1139%" height="15" fill="rgb(209,117,53)" fg:x="5584" fg:w="8"/><text x="79.7375%" y="95.50"></text></g><g><title>mwpf`HFactor::ftranL(HVectorBase (1 samples, 0.01%)</title><rect x="79.6299%" y="69" width="0.0142%" height="15" fill="rgb(212,90,42)" fg:x="5594" fg:w="1"/><text x="79.8799%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (4 samples, 0.06%)</title><rect x="79.6299%" y="85" width="0.0569%" height="15" fill="rgb(218,164,37)" fg:x="5594" fg:w="4"/><text x="79.8799%" y="95.50"></text></g><g><title>mwpf`HFactor::ftranU(HVectorBase (3 samples, 0.04%)</title><rect x="79.6441%" y="69" width="0.0427%" height="15" fill="rgb(246,65,34)" fg:x="5595" fg:w="3"/><text x="79.8941%" y="79.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (5 samples, 0.07%)</title><rect x="79.6299%" y="101" width="0.0712%" height="15" fill="rgb(231,100,33)" fg:x="5594" fg:w="5"/><text x="79.8799%" y="111.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (1 samples, 0.01%)</title><rect x="79.6868%" y="85" width="0.0142%" height="15" fill="rgb(228,126,14)" fg:x="5598" fg:w="1"/><text x="79.9368%" y="95.50"></text></g><g><title>mwpf`HEkk::computePrimal (8 samples, 0.11%)</title><rect x="79.6014%" y="117" width="0.1139%" height="15" fill="rgb(215,173,21)" fg:x="5592" fg:w="8"/><text x="79.8514%" y="127.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::setup (1 samples, 0.01%)</title><rect x="79.7011%" y="101" width="0.0142%" height="15" fill="rgb(210,6,40)" fg:x="5599" fg:w="1"/><text x="79.9511%" y="111.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (1 samples, 0.01%)</title><rect x="79.7011%" y="85" width="0.0142%" height="15" fill="rgb(212,48,18)" fg:x="5599" fg:w="1"/><text x="79.9511%" y="95.50"></text></g><g><title>mwpf`HEkk::computeSimplexDualInfeasible (2 samples, 0.03%)</title><rect x="79.7153%" y="117" width="0.0285%" height="15" fill="rgb(230,214,11)" fg:x="5600" fg:w="2"/><text x="79.9653%" y="127.50"></text></g><g><title>mwpf`HFactor::buildFinish (4 samples, 0.06%)</title><rect x="79.7438%" y="53" width="0.0569%" height="15" fill="rgb(254,105,39)" fg:x="5602" fg:w="4"/><text x="79.9938%" y="63.50"></text></g><g><title>mwpf`HFactor::buildKernel (89 samples, 1.27%)</title><rect x="79.8007%" y="53" width="1.2669%" height="15" fill="rgb(245,158,5)" fg:x="5606" fg:w="89"/><text x="80.0507%" y="63.50"></text></g><g><title>mwpf`HEkk::getNonsingularInverse (111 samples, 1.58%)</title><rect x="79.7438%" y="117" width="1.5801%" height="15" fill="rgb(249,208,11)" fg:x="5602" fg:w="111"/><text x="79.9938%" y="127.50"></text></g><g><title>mwpf`HEkk::computeFactor (111 samples, 1.58%)</title><rect x="79.7438%" y="101" width="1.5801%" height="15" fill="rgb(210,39,28)" fg:x="5602" fg:w="111"/><text x="79.9938%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::invert (111 samples, 1.58%)</title><rect x="79.7438%" y="85" width="1.5801%" height="15" fill="rgb(211,56,53)" fg:x="5602" fg:w="111"/><text x="79.9938%" y="95.50"></text></g><g><title>mwpf`HFactor::build (111 samples, 1.58%)</title><rect x="79.7438%" y="69" width="1.5801%" height="15" fill="rgb(226,201,30)" fg:x="5602" fg:w="111"/><text x="79.9938%" y="79.50"></text></g><g><title>mwpf`HFactor::buildSimple (18 samples, 0.26%)</title><rect x="81.0676%" y="53" width="0.2562%" height="15" fill="rgb(239,101,34)" fg:x="5695" fg:w="18"/><text x="81.3176%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.01%)</title><rect x="81.3096%" y="37" width="0.0142%" height="15" fill="rgb(226,209,5)" fg:x="5712" fg:w="1"/><text x="81.5596%" y="47.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (1 samples, 0.01%)</title><rect x="81.3238%" y="85" width="0.0142%" height="15" fill="rgb(250,105,47)" fg:x="5713" fg:w="1"/><text x="81.5738%" y="95.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (1 samples, 0.01%)</title><rect x="81.3238%" y="69" width="0.0142%" height="15" fill="rgb(230,72,3)" fg:x="5713" fg:w="1"/><text x="81.5738%" y="79.50"></text></g><g><title>mwpf`HFactor::btranU(HVectorBase (1 samples, 0.01%)</title><rect x="81.3238%" y="53" width="0.0142%" height="15" fill="rgb(232,218,39)" fg:x="5713" fg:w="1"/><text x="81.5738%" y="63.50"></text></g><g><title>mwpf`HEkk::factorSolveError (2 samples, 0.03%)</title><rect x="81.3238%" y="101" width="0.0285%" height="15" fill="rgb(248,166,6)" fg:x="5713" fg:w="2"/><text x="81.5738%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (1 samples, 0.01%)</title><rect x="81.3381%" y="85" width="0.0142%" height="15" fill="rgb(247,89,20)" fg:x="5714" fg:w="1"/><text x="81.5881%" y="95.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (1 samples, 0.01%)</title><rect x="81.3381%" y="69" width="0.0142%" height="15" fill="rgb(248,130,54)" fg:x="5714" fg:w="1"/><text x="81.5881%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranU(HVectorBase (1 samples, 0.01%)</title><rect x="81.3381%" y="53" width="0.0142%" height="15" fill="rgb(234,196,4)" fg:x="5714" fg:w="1"/><text x="81.5881%" y="63.50"></text></g><g><title>mwpf`HEkk::rebuildRefactor (3 samples, 0.04%)</title><rect x="81.3238%" y="117" width="0.0427%" height="15" fill="rgb(250,143,31)" fg:x="5713" fg:w="3"/><text x="81.5738%" y="127.50"></text></g><g><title>mwpf`HighsSparseMatrix::collectAj(HVectorBase (1 samples, 0.01%)</title><rect x="81.3523%" y="101" width="0.0142%" height="15" fill="rgb(211,110,34)" fg:x="5715" fg:w="1"/><text x="81.6023%" y="111.50"></text></g><g><title>mwpf`HEkkDual::solve (742 samples, 10.56%)</title><rect x="70.8185%" y="165" width="10.5623%" height="15" fill="rgb(215,124,48)" fg:x="4975" fg:w="742"/><text x="71.0685%" y="175.50">mwpf`HEkkDual::..</text></g><g><title>mwpf`HEkkDual::solvePhase2 (713 samples, 10.15%)</title><rect x="71.2313%" y="149" width="10.1495%" height="15" fill="rgb(216,46,13)" fg:x="5004" fg:w="713"/><text x="71.4813%" y="159.50">mwpf`HEkkDual::..</text></g><g><title>mwpf`HEkkDual::rebuild (136 samples, 1.94%)</title><rect x="79.4448%" y="133" width="1.9359%" height="15" fill="rgb(205,184,25)" fg:x="5581" fg:w="136"/><text x="79.6948%" y="143.50">m..</text></g><g><title>mwpf`HEkkDual::correctDualInfeasibilities (1 samples, 0.01%)</title><rect x="81.3665%" y="117" width="0.0142%" height="15" fill="rgb(228,1,10)" fg:x="5716" fg:w="1"/><text x="81.6165%" y="127.50"></text></g><g><title>mwpf`HEkk::computeDual (2 samples, 0.03%)</title><rect x="81.3808%" y="117" width="0.0285%" height="15" fill="rgb(213,116,27)" fg:x="5717" fg:w="2"/><text x="81.6308%" y="127.50"></text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (1 samples, 0.01%)</title><rect x="81.3950%" y="101" width="0.0142%" height="15" fill="rgb(241,95,50)" fg:x="5718" fg:w="1"/><text x="81.6450%" y="111.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (1 samples, 0.01%)</title><rect x="81.3950%" y="85" width="0.0142%" height="15" fill="rgb(238,48,32)" fg:x="5718" fg:w="1"/><text x="81.6450%" y="95.50"></text></g><g><title>mwpf`HEkk::computePrimal (1 samples, 0.01%)</title><rect x="81.4093%" y="117" width="0.0142%" height="15" fill="rgb(235,113,49)" fg:x="5719" fg:w="1"/><text x="81.6593%" y="127.50"></text></g><g><title>mwpf`HEkkPrimal::solve (4 samples, 0.06%)</title><rect x="81.3808%" y="165" width="0.0569%" height="15" fill="rgb(205,127,43)" fg:x="5717" fg:w="4"/><text x="81.6308%" y="175.50"></text></g><g><title>mwpf`HEkkPrimal::solvePhase2 (4 samples, 0.06%)</title><rect x="81.3808%" y="149" width="0.0569%" height="15" fill="rgb(250,162,2)" fg:x="5717" fg:w="4"/><text x="81.6308%" y="159.50"></text></g><g><title>mwpf`HEkkPrimal::rebuild (4 samples, 0.06%)</title><rect x="81.3808%" y="133" width="0.0569%" height="15" fill="rgb(220,13,41)" fg:x="5717" fg:w="4"/><text x="81.6308%" y="143.50"></text></g><g><title>mwpf`HEkkPrimal::correctPrimal (1 samples, 0.01%)</title><rect x="81.4235%" y="117" width="0.0142%" height="15" fill="rgb(249,221,25)" fg:x="5720" fg:w="1"/><text x="81.6735%" y="127.50"></text></g><g><title>mwpf`HighsLp::HighsLp (14 samples, 0.20%)</title><rect x="81.5374%" y="149" width="0.1993%" height="15" fill="rgb(215,208,19)" fg:x="5728" fg:w="14"/><text x="81.7874%" y="159.50"></text></g><g><title>mwpf`HighsSparseMatrix::HighsSparseMatrix (13 samples, 0.19%)</title><rect x="81.5516%" y="133" width="0.1851%" height="15" fill="rgb(236,175,2)" fg:x="5729" fg:w="13"/><text x="81.8016%" y="143.50"></text></g><g><title>mwpf`HSimplexNla::debugCheckData(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (23 samples, 0.33%)</title><rect x="81.4377%" y="165" width="0.3274%" height="15" fill="rgb(241,52,2)" fg:x="5721" fg:w="23"/><text x="81.6877%" y="175.50"></text></g><g><title>mwpf`HighsLp::~HighsLp (2 samples, 0.03%)</title><rect x="81.7367%" y="149" width="0.0285%" height="15" fill="rgb(248,140,14)" fg:x="5742" fg:w="2"/><text x="81.9867%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.03%)</title><rect x="81.7367%" y="133" width="0.0285%" height="15" fill="rgb(253,22,42)" fg:x="5742" fg:w="2"/><text x="81.9867%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.03%)</title><rect x="81.7367%" y="117" width="0.0285%" height="15" fill="rgb(234,61,47)" fg:x="5742" fg:w="2"/><text x="81.9867%" y="127.50"></text></g><g><title>mwpf`HEkk::solve (903 samples, 12.85%)</title><rect x="68.9253%" y="181" width="12.8541%" height="15" fill="rgb(208,226,15)" fg:x="4842" fg:w="903"/><text x="69.1753%" y="191.50">mwpf`HEkk::solve</text></g><g><title>mwpf`HighsSimplexAnalysis::setup(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.01%)</title><rect x="81.7651%" y="165" width="0.0142%" height="15" fill="rgb(217,221,4)" fg:x="5744" fg:w="1"/><text x="82.0151%" y="175.50"></text></g><g><title>mwpf`initialiseScatterData(int, HighsScatterData&amp;) (1 samples, 0.01%)</title><rect x="81.7651%" y="149" width="0.0142%" height="15" fill="rgb(212,174,34)" fg:x="5744" fg:w="1"/><text x="82.0151%" y="159.50"></text></g><g><title>mwpf`std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;::__append (1 samples, 0.01%)</title><rect x="81.7651%" y="133" width="0.0142%" height="15" fill="rgb(253,83,4)" fg:x="5744" fg:w="1"/><text x="82.0151%" y="143.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.01%)</title><rect x="81.7651%" y="117" width="0.0142%" height="15" fill="rgb(250,195,49)" fg:x="5744" fg:w="1"/><text x="82.0151%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.01%)</title><rect x="81.7651%" y="101" width="0.0142%" height="15" fill="rgb(241,192,25)" fg:x="5744" fg:w="1"/><text x="82.0151%" y="111.50"></text></g><g><title>mwpf`HighsHashHelpers::sparse_combine (2 samples, 0.03%)</title><rect x="81.7794%" y="181" width="0.0285%" height="15" fill="rgb(208,124,10)" fg:x="5745" fg:w="2"/><text x="82.0294%" y="191.50"></text></g><g><title>mwpf`Highs::callSolveLp(HighsLp&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (965 samples, 13.74%)</title><rect x="68.8683%" y="229" width="13.7367%" height="15" fill="rgb(222,33,0)" fg:x="4838" fg:w="965"/><text x="69.1183%" y="239.50">mwpf`Highs::callSolve..</text></g><g><title>mwpf`solveLp(HighsLpSolverObject&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (965 samples, 13.74%)</title><rect x="68.8683%" y="213" width="13.7367%" height="15" fill="rgb(234,209,28)" fg:x="4838" fg:w="965"/><text x="69.1183%" y="223.50">mwpf`solveLp(HighsLpS..</text></g><g><title>mwpf`solveLpSimplex(HighsLpSolverObject&amp;) (965 samples, 13.74%)</title><rect x="68.8683%" y="197" width="13.7367%" height="15" fill="rgb(224,11,23)" fg:x="4838" fg:w="965"/><text x="69.1183%" y="207.50">mwpf`solveLpSimplex(H..</text></g><g><title>mwpf`considerScaling(HighsOptions const&amp;, HighsLp&amp;) (56 samples, 0.80%)</title><rect x="81.8078%" y="181" width="0.7972%" height="15" fill="rgb(232,99,1)" fg:x="5747" fg:w="56"/><text x="82.0578%" y="191.50"></text></g><g><title>mwpf`HighsSparseMatrix::range (56 samples, 0.80%)</title><rect x="81.8078%" y="165" width="0.7972%" height="15" fill="rgb(237,95,45)" fg:x="5747" fg:w="56"/><text x="82.0578%" y="175.50"></text></g><g><title>mwpf`Highs::runPostsolve (10 samples, 0.14%)</title><rect x="82.6050%" y="229" width="0.1423%" height="15" fill="rgb(208,109,11)" fg:x="5803" fg:w="10"/><text x="82.8550%" y="239.50"></text></g><g><title>mwpf`calculateRowValuesQuad(HighsLp const&amp;, HighsSolution&amp;, int) (10 samples, 0.14%)</title><rect x="82.6050%" y="213" width="0.1423%" height="15" fill="rgb(216,190,48)" fg:x="5803" fg:w="10"/><text x="82.8550%" y="223.50"></text></g><g><title>mwpf`PresolveComponent::init (1 samples, 0.01%)</title><rect x="82.7473%" y="213" width="0.0142%" height="15" fill="rgb(251,171,36)" fg:x="5813" fg:w="1"/><text x="82.9973%" y="223.50"></text></g><g><title>mwpf`HighsLp::operator= (1 samples, 0.01%)</title><rect x="82.7473%" y="197" width="0.0142%" height="15" fill="rgb(230,62,22)" fg:x="5813" fg:w="1"/><text x="82.9973%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="82.7473%" y="181" width="0.0142%" height="15" fill="rgb(225,114,35)" fg:x="5813" fg:w="1"/><text x="82.9973%" y="191.50"></text></g><g><title>libsystem_m.dylib`frexp (17 samples, 0.24%)</title><rect x="82.7616%" y="165" width="0.2420%" height="15" fill="rgb(215,118,42)" fg:x="5814" fg:w="17"/><text x="83.0116%" y="175.50"></text></g><g><title>libsystem_m.dylib`ldexp (6 samples, 0.09%)</title><rect x="83.0036%" y="165" width="0.0854%" height="15" fill="rgb(243,119,21)" fg:x="5831" fg:w="6"/><text x="83.2536%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="83.0890%" y="165" width="0.0142%" height="15" fill="rgb(252,177,53)" fg:x="5837" fg:w="1"/><text x="83.3390%" y="175.50"></text></g><g><title>mwpf`DYLD-STUB$$frexp (14 samples, 0.20%)</title><rect x="83.1032%" y="165" width="0.1993%" height="15" fill="rgb(237,209,29)" fg:x="5838" fg:w="14"/><text x="83.3532%" y="175.50"></text></g><g><title>mwpf`DYLD-STUB$$ldexp (7 samples, 0.10%)</title><rect x="83.3025%" y="165" width="0.0996%" height="15" fill="rgb(212,65,23)" fg:x="5852" fg:w="7"/><text x="83.5525%" y="175.50"></text></g><g><title>mwpf`HighsHashHelpers::sparse_combine (193 samples, 2.75%)</title><rect x="83.4021%" y="165" width="2.7473%" height="15" fill="rgb(230,222,46)" fg:x="5859" fg:w="193"/><text x="83.6521%" y="175.50">mw..</text></g><g><title>mwpf`HighsLinearSumBounds::remove (34 samples, 0.48%)</title><rect x="89.4377%" y="149" width="0.4840%" height="15" fill="rgb(215,135,32)" fg:x="6283" fg:w="34"/><text x="89.6877%" y="159.50"></text></g><g><title>mwpf`HighsLinearSumBounds::updatedImplVarLower (10 samples, 0.14%)</title><rect x="89.9217%" y="149" width="0.1423%" height="15" fill="rgb(246,101,22)" fg:x="6317" fg:w="10"/><text x="90.1717%" y="159.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSliceInOrder&gt;::iterator::operator++ (9 samples, 0.13%)</title><rect x="90.0641%" y="149" width="0.1281%" height="15" fill="rgb(206,107,13)" fg:x="6327" fg:w="9"/><text x="90.3141%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::changeImplColLower (2 samples, 0.03%)</title><rect x="90.1922%" y="149" width="0.0285%" height="15" fill="rgb(250,100,44)" fg:x="6336" fg:w="2"/><text x="90.4422%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (1 samples, 0.01%)</title><rect x="90.2064%" y="133" width="0.0142%" height="15" fill="rgb(231,147,38)" fg:x="6337" fg:w="1"/><text x="90.4564%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedCol (3 samples, 0.04%)</title><rect x="90.2206%" y="149" width="0.0427%" height="15" fill="rgb(229,8,40)" fg:x="6338" fg:w="3"/><text x="90.4706%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (8 samples, 0.11%)</title><rect x="90.2633%" y="149" width="0.1139%" height="15" fill="rgb(221,135,30)" fg:x="6341" fg:w="8"/><text x="90.5133%" y="159.50"></text></g><g><title>mwpf`HighsLinearSumBounds::updatedVarLower (8 samples, 0.11%)</title><rect x="90.3772%" y="133" width="0.1139%" height="15" fill="rgb(249,193,18)" fg:x="6349" fg:w="8"/><text x="90.6272%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (3 samples, 0.04%)</title><rect x="90.4911%" y="133" width="0.0427%" height="15" fill="rgb(209,133,39)" fg:x="6357" fg:w="3"/><text x="90.7411%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::removeRowSingletons (14 samples, 0.20%)</title><rect x="90.3772%" y="149" width="0.1993%" height="15" fill="rgb(232,100,14)" fg:x="6349" fg:w="14"/><text x="90.6272%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::singletonRow (3 samples, 0.04%)</title><rect x="90.5338%" y="133" width="0.0427%" height="15" fill="rgb(224,185,1)" fg:x="6360" fg:w="3"/><text x="90.7838%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (2 samples, 0.03%)</title><rect x="90.5480%" y="117" width="0.0285%" height="15" fill="rgb(223,139,8)" fg:x="6361" fg:w="2"/><text x="90.7980%" y="127.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSliceInOrder&gt;::iterator::iterator (7 samples, 0.10%)</title><rect x="90.6050%" y="133" width="0.0996%" height="15" fill="rgb(232,213,38)" fg:x="6365" fg:w="7"/><text x="90.8550%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.01%)</title><rect x="90.6904%" y="117" width="0.0142%" height="15" fill="rgb(207,94,22)" fg:x="6371" fg:w="1"/><text x="90.9404%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::storeRow (11 samples, 0.16%)</title><rect x="90.5765%" y="149" width="0.1566%" height="15" fill="rgb(219,183,54)" fg:x="6363" fg:w="11"/><text x="90.8265%" y="159.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSliceInOrder&gt;::iterator::operator++ (2 samples, 0.03%)</title><rect x="90.7046%" y="133" width="0.0285%" height="15" fill="rgb(216,185,54)" fg:x="6372" fg:w="2"/><text x="90.9546%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedCol (1 samples, 0.01%)</title><rect x="92.4555%" y="133" width="0.0142%" height="15" fill="rgb(254,217,39)" fg:x="6495" fg:w="1"/><text x="92.7055%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::unlink (124 samples, 1.77%)</title><rect x="90.7331%" y="149" width="1.7651%" height="15" fill="rgb(240,178,23)" fg:x="6374" fg:w="124"/><text x="90.9831%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (2 samples, 0.03%)</title><rect x="92.4698%" y="133" width="0.0285%" height="15" fill="rgb(218,11,47)" fg:x="6496" fg:w="2"/><text x="92.7198%" y="143.50"></text></g><g><title>mwpf`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;&gt;&gt;::__node_insert_multi(std::__1::__hash_node&lt;std::__1::__hash_value_type (1 samples, 0.01%)</title><rect x="92.4982%" y="133" width="0.0142%" height="15" fill="rgb(218,51,51)" fg:x="6498" fg:w="1"/><text x="92.7482%" y="143.50"></text></g><g><title>mwpf`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;&gt;&gt;::__node_insert_multi_prepare(unsigned long, std::__1::__hash_value_type (1 samples, 0.01%)</title><rect x="92.4982%" y="117" width="0.0142%" height="15" fill="rgb(238,126,27)" fg:x="6498" fg:w="1"/><text x="92.7482%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::detectParallelRowsAndCols (448 samples, 6.38%)</title><rect x="86.1495%" y="165" width="6.3772%" height="15" fill="rgb(249,202,22)" fg:x="6052" fg:w="448"/><text x="86.3995%" y="175.50">mwpf`pre..</text></g><g><title>mwpf`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;&gt;&gt;::__node_insert_multi(std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, void*&gt;*&gt;, std::__1::__hash_node&lt;std::__1::__hash_value_type (2 samples, 0.03%)</title><rect x="92.4982%" y="149" width="0.0285%" height="15" fill="rgb(254,195,49)" fg:x="6498" fg:w="2"/><text x="92.7482%" y="159.50"></text></g><g><title>mwpf`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;&gt;&gt;::__node_insert_multi_prepare(unsigned long, std::__1::__hash_value_type (1 samples, 0.01%)</title><rect x="92.5125%" y="133" width="0.0142%" height="15" fill="rgb(208,123,14)" fg:x="6499" fg:w="1"/><text x="92.7625%" y="143.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSlicePreOrder&gt;::iterator::operator++ (4 samples, 0.06%)</title><rect x="92.5267%" y="133" width="0.0569%" height="15" fill="rgb(224,200,8)" fg:x="6500" fg:w="4"/><text x="92.7767%" y="143.50"></text></g><g><title>mwpf`HighsLinearSumBounds::getResidualSumLowerOrig (6 samples, 0.09%)</title><rect x="92.6121%" y="117" width="0.0854%" height="15" fill="rgb(217,61,36)" fg:x="6506" fg:w="6"/><text x="92.8621%" y="127.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSlicePreOrder&gt;::iterator::operator++ (4 samples, 0.06%)</title><rect x="92.6975%" y="117" width="0.0569%" height="15" fill="rgb(206,35,45)" fg:x="6512" fg:w="4"/><text x="92.9475%" y="127.50"></text></g><g><title>mwpf`HighsLinearSumBounds::updatedImplVarUpper (6 samples, 0.09%)</title><rect x="93.0249%" y="101" width="0.0854%" height="15" fill="rgb(217,65,33)" fg:x="6535" fg:w="6"/><text x="93.2749%" y="111.50"></text></g><g><title>mwpf`presolve::HPresolve::changeImplColUpper (5 samples, 0.07%)</title><rect x="93.1103%" y="101" width="0.0712%" height="15" fill="rgb(222,158,48)" fg:x="6541" fg:w="5"/><text x="93.3603%" y="111.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (1 samples, 0.01%)</title><rect x="93.1673%" y="85" width="0.0142%" height="15" fill="rgb(254,2,54)" fg:x="6545" fg:w="1"/><text x="93.4173%" y="95.50"></text></g><g><title>mwpf`presolve::HPresolve::rowPresolve (44 samples, 0.63%)</title><rect x="92.5836%" y="133" width="0.6263%" height="15" fill="rgb(250,143,38)" fg:x="6504" fg:w="44"/><text x="92.8336%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::updateColImpliedBounds (32 samples, 0.46%)</title><rect x="92.7544%" y="117" width="0.4555%" height="15" fill="rgb(248,25,0)" fg:x="6516" fg:w="32"/><text x="93.0044%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (2 samples, 0.03%)</title><rect x="93.1815%" y="101" width="0.0285%" height="15" fill="rgb(206,152,27)" fg:x="6546" fg:w="2"/><text x="93.4315%" y="111.50"></text></g><g><title>mwpf`presolve::HPresolve::fastPresolveLoop (49 samples, 0.70%)</title><rect x="92.5267%" y="165" width="0.6975%" height="15" fill="rgb(240,77,30)" fg:x="6500" fg:w="49"/><text x="92.7767%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::presolveChangedRows (49 samples, 0.70%)</title><rect x="92.5267%" y="149" width="0.6975%" height="15" fill="rgb(231,5,3)" fg:x="6500" fg:w="49"/><text x="92.7767%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::updateColImpliedBounds (1 samples, 0.01%)</title><rect x="93.2100%" y="133" width="0.0142%" height="15" fill="rgb(207,226,32)" fg:x="6548" fg:w="1"/><text x="93.4600%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::findNonzero (50 samples, 0.71%)</title><rect x="93.2242%" y="165" width="0.7117%" height="15" fill="rgb(222,207,47)" fg:x="6549" fg:w="50"/><text x="93.4742%" y="175.50"></text></g><g><title>mwpf`HighsLinearSumBounds::add (20 samples, 0.28%)</title><rect x="93.9359%" y="149" width="0.2847%" height="15" fill="rgb(229,115,45)" fg:x="6599" fg:w="20"/><text x="94.1859%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::fromCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (35 samples, 0.50%)</title><rect x="93.9359%" y="165" width="0.4982%" height="15" fill="rgb(224,191,6)" fg:x="6599" fg:w="35"/><text x="94.1859%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::link (15 samples, 0.21%)</title><rect x="94.2206%" y="149" width="0.2135%" height="15" fill="rgb(230,227,24)" fg:x="6619" fg:w="15"/><text x="94.4706%" y="159.50"></text></g><g><title>mwpf`HighsLinearSumBounds::getResidualSumLowerOrig (8 samples, 0.11%)</title><rect x="94.5053%" y="133" width="0.1139%" height="15" fill="rgb(228,80,19)" fg:x="6639" fg:w="8"/><text x="94.7553%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::colPresolve (24 samples, 0.34%)</title><rect x="94.4342%" y="149" width="0.3416%" height="15" fill="rgb(247,229,0)" fg:x="6634" fg:w="24"/><text x="94.6842%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::updateRowDualImpliedBounds (11 samples, 0.16%)</title><rect x="94.6192%" y="133" width="0.1566%" height="15" fill="rgb(237,194,15)" fg:x="6647" fg:w="11"/><text x="94.8692%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::chrono::steady_clock::now (2 samples, 0.03%)</title><rect x="94.7758%" y="133" width="0.0285%" height="15" fill="rgb(219,203,20)" fg:x="6658" fg:w="2"/><text x="95.0258%" y="143.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (2 samples, 0.03%)</title><rect x="94.7758%" y="117" width="0.0285%" height="15" fill="rgb(234,128,8)" fg:x="6658" fg:w="2"/><text x="95.0258%" y="127.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (2 samples, 0.03%)</title><rect x="94.7758%" y="101" width="0.0285%" height="15" fill="rgb(248,202,8)" fg:x="6658" fg:w="2"/><text x="95.0258%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`mach_continuous_time (2 samples, 0.03%)</title><rect x="94.7758%" y="85" width="0.0285%" height="15" fill="rgb(206,104,37)" fg:x="6658" fg:w="2"/><text x="95.0258%" y="95.50"></text></g><g><title>mwpf`HighsLinearSumBounds::updatedImplVarLower (4 samples, 0.06%)</title><rect x="94.8043%" y="117" width="0.0569%" height="15" fill="rgb(223,8,27)" fg:x="6660" fg:w="4"/><text x="95.0543%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::changeImplColLower (5 samples, 0.07%)</title><rect x="94.8612%" y="117" width="0.0712%" height="15" fill="rgb(216,217,28)" fg:x="6664" fg:w="5"/><text x="95.1112%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::rowPresolve (15 samples, 0.21%)</title><rect x="94.7758%" y="149" width="0.2135%" height="15" fill="rgb(249,199,1)" fg:x="6658" fg:w="15"/><text x="95.0258%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::updateColImpliedBounds (13 samples, 0.19%)</title><rect x="94.8043%" y="133" width="0.1851%" height="15" fill="rgb(240,85,17)" fg:x="6660" fg:w="13"/><text x="95.0543%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (4 samples, 0.06%)</title><rect x="94.9324%" y="117" width="0.0569%" height="15" fill="rgb(206,108,45)" fg:x="6669" fg:w="4"/><text x="95.1824%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::initialRowAndColPresolve (47 samples, 0.67%)</title><rect x="94.4342%" y="165" width="0.6690%" height="15" fill="rgb(245,210,41)" fg:x="6634" fg:w="47"/><text x="94.6842%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::updateRowDualImpliedBounds (8 samples, 0.11%)</title><rect x="94.9893%" y="149" width="0.1139%" height="15" fill="rgb(206,13,37)" fg:x="6673" fg:w="8"/><text x="95.2393%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::link (2 samples, 0.03%)</title><rect x="95.1032%" y="165" width="0.0285%" height="15" fill="rgb(250,61,18)" fg:x="6681" fg:w="2"/><text x="95.3532%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::shrinkProblem (11 samples, 0.16%)</title><rect x="95.1317%" y="165" width="0.1566%" height="15" fill="rgb(235,172,48)" fg:x="6683" fg:w="11"/><text x="95.3817%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::toCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator (12 samples, 0.17%)</title><rect x="95.2883%" y="165" width="0.1708%" height="15" fill="rgb(249,201,17)" fg:x="6694" fg:w="12"/><text x="95.5383%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::presolve (900 samples, 12.81%)</title><rect x="82.7616%" y="181" width="12.8114%" height="15" fill="rgb(219,208,6)" fg:x="5814" fg:w="900"/><text x="83.0116%" y="191.50">mwpf`presolve::HPre..</text></g><g><title>mwpf`presolve::HPresolve::unlink (8 samples, 0.11%)</title><rect x="95.4591%" y="165" width="0.1139%" height="15" fill="rgb(248,31,23)" fg:x="6706" fg:w="8"/><text x="95.7091%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::shrinkProblem (1 samples, 0.01%)</title><rect x="95.5730%" y="181" width="0.0142%" height="15" fill="rgb(245,15,42)" fg:x="6714" fg:w="1"/><text x="95.8230%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::run (907 samples, 12.91%)</title><rect x="82.7616%" y="197" width="12.9110%" height="15" fill="rgb(222,217,39)" fg:x="5814" fg:w="907"/><text x="83.0116%" y="207.50">mwpf`presolve::HPre..</text></g><g><title>mwpf`presolve::HPresolve::toCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator (6 samples, 0.09%)</title><rect x="95.5872%" y="181" width="0.0854%" height="15" fill="rgb(210,219,27)" fg:x="6715" fg:w="6"/><text x="95.8372%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (7 samples, 0.10%)</title><rect x="95.6868%" y="165" width="0.0996%" height="15" fill="rgb(252,166,36)" fg:x="6722" fg:w="7"/><text x="95.9368%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.06%)</title><rect x="95.7865%" y="165" width="0.0569%" height="15" fill="rgb(245,132,34)" fg:x="6729" fg:w="4"/><text x="96.0365%" y="175.50"></text></g><g><title>mwpf`HighsLinearSumBounds::add (95 samples, 1.35%)</title><rect x="95.8434%" y="165" width="1.3523%" height="15" fill="rgb(236,54,3)" fg:x="6733" fg:w="95"/><text x="96.0934%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::link (46 samples, 0.65%)</title><rect x="97.1957%" y="165" width="0.6548%" height="15" fill="rgb(241,173,43)" fg:x="6828" fg:w="46"/><text x="97.4457%" y="175.50"></text></g><g><title>mwpf`std::__1::enable_if&lt;__is_cpp17_forward_iterator&lt;std::__1::__wrap_iter&lt;int*&gt;&gt;::value &amp;&amp; is_constructible&lt;int, std::__1::iterator_traits&lt;std::__1::__wrap_iter&lt;int*&gt;&gt;::reference&gt;::value, std::__1::__wrap_iter&lt;int*&gt;&gt;::type std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::insert&lt;std::__1::__wrap_iter&lt;int*&gt;&gt;(std::__1::__wrap_iter&lt;int const*&gt;, std::__1::__wrap_iter&lt;int*&gt;, std::__1::__wrap_iter (1 samples, 0.01%)</title><rect x="97.8505%" y="165" width="0.0142%" height="15" fill="rgb(215,190,9)" fg:x="6874" fg:w="1"/><text x="98.1005%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::fromCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (157 samples, 2.23%)</title><rect x="95.6726%" y="181" width="2.2349%" height="15" fill="rgb(242,101,16)" fg:x="6721" fg:w="157"/><text x="95.9226%" y="191.50">m..</text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::insert(std::__1::__wrap_iter (3 samples, 0.04%)</title><rect x="97.8648%" y="165" width="0.0427%" height="15" fill="rgb(223,190,21)" fg:x="6875" fg:w="3"/><text x="98.1148%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::setInput (160 samples, 2.28%)</title><rect x="95.6726%" y="197" width="2.2776%" height="15" fill="rgb(215,228,25)" fg:x="6721" fg:w="160"/><text x="95.9226%" y="207.50">m..</text></g><g><title>mwpf`presolve::HPresolve::link (3 samples, 0.04%)</title><rect x="97.9075%" y="181" width="0.0427%" height="15" fill="rgb(225,36,22)" fg:x="6878" fg:w="3"/><text x="98.1575%" y="191.50"></text></g><g><title>mwpf`Highs::runPresolve (1,077 samples, 15.33%)</title><rect x="82.7473%" y="229" width="15.3310%" height="15" fill="rgb(251,106,46)" fg:x="5813" fg:w="1077"/><text x="82.9973%" y="239.50">mwpf`Highs::runPresolve</text></g><g><title>mwpf`PresolveComponent::run (1,076 samples, 15.32%)</title><rect x="82.7616%" y="213" width="15.3167%" height="15" fill="rgb(208,90,1)" fg:x="5814" fg:w="1076"/><text x="83.0116%" y="223.50">mwpf`PresolveComponent:..</text></g><g><title>mwpf`presolve::HPresolve::~HPresolve (9 samples, 0.13%)</title><rect x="97.9502%" y="197" width="0.1281%" height="15" fill="rgb(243,10,4)" fg:x="6881" fg:w="9"/><text x="98.2002%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.13%)</title><rect x="97.9502%" y="181" width="0.1281%" height="15" fill="rgb(212,137,27)" fg:x="6881" fg:w="9"/><text x="98.2002%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.13%)</title><rect x="97.9502%" y="165" width="0.1281%" height="15" fill="rgb(231,220,49)" fg:x="6881" fg:w="9"/><text x="98.2002%" y="175.50"></text></g><g><title>mwpf`HighsOptions::HighsOptions (1 samples, 0.01%)</title><rect x="98.0783%" y="229" width="0.0142%" height="15" fill="rgb(237,96,20)" fg:x="6890" fg:w="1"/><text x="98.3283%" y="239.50"></text></g><g><title>mwpf`HighsOptions::initRecords (1 samples, 0.01%)</title><rect x="98.0783%" y="213" width="0.0142%" height="15" fill="rgb(239,229,30)" fg:x="6890" fg:w="1"/><text x="98.3283%" y="223.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.01%)</title><rect x="98.0783%" y="197" width="0.0142%" height="15" fill="rgb(219,65,33)" fg:x="6890" fg:w="1"/><text x="98.3283%" y="207.50"></text></g><g><title>mwpf`HighsOptions::~HighsOptions (1 samples, 0.01%)</title><rect x="98.0925%" y="229" width="0.0142%" height="15" fill="rgb(243,134,7)" fg:x="6891" fg:w="1"/><text x="98.3425%" y="239.50"></text></g><g><title>mwpf`OptionRecordBool::~OptionRecordBool (1 samples, 0.01%)</title><rect x="98.0925%" y="213" width="0.0142%" height="15" fill="rgb(216,177,54)" fg:x="6891" fg:w="1"/><text x="98.3425%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="98.0925%" y="197" width="0.0142%" height="15" fill="rgb(211,160,20)" fg:x="6891" fg:w="1"/><text x="98.3425%" y="207.50"></text></g><g><title>mwpf`HighsSparseMatrix::assessSmallValues (1 samples, 0.01%)</title><rect x="98.1068%" y="229" width="0.0142%" height="15" fill="rgb(239,85,39)" fg:x="6892" fg:w="1"/><text x="98.3568%" y="239.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.01%)</title><rect x="98.3772%" y="213" width="0.0142%" height="15" fill="rgb(232,125,22)" fg:x="6911" fg:w="1"/><text x="98.6272%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.01%)</title><rect x="98.3772%" y="197" width="0.0142%" height="15" fill="rgb(244,57,34)" fg:x="6911" fg:w="1"/><text x="98.6272%" y="207.50"></text></g><g><title>mwpf`HighsSparseMatrix::ensureColwise (20 samples, 0.28%)</title><rect x="98.1210%" y="229" width="0.2847%" height="15" fill="rgb(214,203,32)" fg:x="6893" fg:w="20"/><text x="98.3710%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.01%)</title><rect x="98.3915%" y="213" width="0.0142%" height="15" fill="rgb(207,58,43)" fg:x="6912" fg:w="1"/><text x="98.6415%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.01%)</title><rect x="98.3915%" y="197" width="0.0142%" height="15" fill="rgb(215,193,15)" fg:x="6912" fg:w="1"/><text x="98.6415%" y="207.50"></text></g><g><title>mwpf`Highs::run (2,076 samples, 29.55%)</title><rect x="68.8683%" y="245" width="29.5516%" height="15" fill="rgb(232,15,44)" fg:x="4838" fg:w="2076"/><text x="69.1183%" y="255.50">mwpf`Highs::run</text></g><g><title>mwpf`OptionRecordString::~OptionRecordString (1 samples, 0.01%)</title><rect x="98.4057%" y="229" width="0.0142%" height="15" fill="rgb(212,3,48)" fg:x="6913" fg:w="1"/><text x="98.6557%" y="239.50"></text></g><g><title>mwpf`highs::Model::solve (2,079 samples, 29.59%)</title><rect x="68.8683%" y="261" width="29.5943%" height="15" fill="rgb(218,128,7)" fg:x="4838" fg:w="2079"/><text x="69.1183%" y="271.50">mwpf`highs::Model::solve</text></g><g><title>mwpf`HighsSparseMatrix::hasLargeValue (3 samples, 0.04%)</title><rect x="98.4199%" y="245" width="0.0427%" height="15" fill="rgb(226,216,39)" fg:x="6914" fg:w="3"/><text x="98.6699%" y="255.50"></text></g><g><title>libsystem_c.dylib`signal__ (1 samples, 0.01%)</title><rect x="98.4626%" y="213" width="0.0142%" height="15" fill="rgb(243,47,51)" fg:x="6917" fg:w="1"/><text x="98.7126%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__sigaction (1 samples, 0.01%)</title><rect x="98.4626%" y="197" width="0.0142%" height="15" fill="rgb(241,183,40)" fg:x="6917" fg:w="1"/><text x="98.7126%" y="207.50"></text></g><g><title>mwpf`HighsInfo::initRecords (1 samples, 0.01%)</title><rect x="98.4769%" y="213" width="0.0142%" height="15" fill="rgb(231,217,32)" fg:x="6918" fg:w="1"/><text x="98.7269%" y="223.50"></text></g><g><title>mwpf`InfoRecordInt::InfoRecordInt(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.01%)</title><rect x="98.4769%" y="197" width="0.0142%" height="15" fill="rgb(229,61,38)" fg:x="6918" fg:w="1"/><text x="98.7269%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.01%)</title><rect x="98.4769%" y="181" width="0.0142%" height="15" fill="rgb(225,210,5)" fg:x="6918" fg:w="1"/><text x="98.7269%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;true&gt; (1 samples, 0.01%)</title><rect x="98.4911%" y="197" width="0.0142%" height="15" fill="rgb(231,79,45)" fg:x="6919" fg:w="1"/><text x="98.7411%" y="207.50"></text></g><g><title>mwpf`highs::Problem&lt;MATRIX&gt;::try_optimise (4 samples, 0.06%)</title><rect x="98.4626%" y="261" width="0.0569%" height="15" fill="rgb(224,100,7)" fg:x="6917" fg:w="4"/><text x="98.7126%" y="271.50"></text></g><g><title>mwpf`Highs_create (4 samples, 0.06%)</title><rect x="98.4626%" y="245" width="0.0569%" height="15" fill="rgb(241,198,18)" fg:x="6917" fg:w="4"/><text x="98.7126%" y="255.50"></text></g><g><title>mwpf`Highs::Highs (4 samples, 0.06%)</title><rect x="98.4626%" y="229" width="0.0569%" height="15" fill="rgb(252,97,53)" fg:x="6917" fg:w="4"/><text x="98.7126%" y="239.50"></text></g><g><title>mwpf`HighsOptions::initRecords (2 samples, 0.03%)</title><rect x="98.4911%" y="213" width="0.0285%" height="15" fill="rgb(220,88,7)" fg:x="6919" fg:w="2"/><text x="98.7411%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="98.5053%" y="197" width="0.0142%" height="15" fill="rgb(213,176,14)" fg:x="6920" fg:w="1"/><text x="98.7553%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune (6,941 samples, 98.80%)</title><rect x="0.4270%" y="293" width="98.8043%" height="15" fill="rgb(246,73,7)" fg:x="30" fg:w="6941"/><text x="0.6770%" y="303.50">mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune</text></g><g><title>mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize (2,790 samples, 39.72%)</title><rect x="59.5160%" y="277" width="39.7153%" height="15" fill="rgb(245,64,36)" fg:x="4181" fg:w="2790"/><text x="59.7660%" y="287.50">mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize</text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (50 samples, 0.71%)</title><rect x="98.5196%" y="261" width="0.7117%" height="15" fill="rgb(245,80,10)" fg:x="6921" fg:w="50"/><text x="98.7696%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.01%)</title><rect x="99.7295%" y="277" width="0.0142%" height="15" fill="rgb(232,107,50)" fg:x="7006" fg:w="1"/><text x="99.9795%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.01%)</title><rect x="99.7438%" y="277" width="0.0142%" height="15" fill="rgb(253,3,0)" fg:x="7007" fg:w="1"/><text x="99.9938%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.01%)</title><rect x="99.7438%" y="261" width="0.0142%" height="15" fill="rgb(212,99,53)" fg:x="7007" fg:w="1"/><text x="99.9938%" y="271.50"></text></g><g><title>mwpf`mwpf::dual_module::DualModuleImpl::get_conflicts_tune (39 samples, 0.56%)</title><rect x="99.2313%" y="293" width="0.5552%" height="15" fill="rgb(249,111,54)" fg:x="6971" fg:w="39"/><text x="99.4813%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.03%)</title><rect x="99.7580%" y="277" width="0.0285%" height="15" fill="rgb(249,55,30)" fg:x="7008" fg:w="2"/><text x="100.0080%" y="287.50"></text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::union (9 samples, 0.13%)</title><rect x="99.7865%" y="293" width="0.1281%" height="15" fill="rgb(237,47,42)" fg:x="7010" fg:w="9"/><text x="100.0365%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (1 samples, 0.01%)</title><rect x="99.9004%" y="277" width="0.0142%" height="15" fill="rgb(211,20,18)" fg:x="7018" fg:w="1"/><text x="100.1504%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_tune (6,996 samples, 99.59%)</title><rect x="0.3416%" y="309" width="99.5872%" height="15" fill="rgb(231,203,46)" fg:x="24" fg:w="6996"/><text x="0.5916%" y="319.50">mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_tune</text></g><g><title>mwpf`std::time::Instant::elapsed (1 samples, 0.01%)</title><rect x="99.9146%" y="293" width="0.0142%" height="15" fill="rgb(237,142,3)" fg:x="7019" fg:w="1"/><text x="100.1646%" y="303.50"></text></g><g><title>mwpf`std::sys::unix::time::Timespec::now (1 samples, 0.01%)</title><rect x="99.9146%" y="277" width="0.0142%" height="15" fill="rgb(241,107,1)" fg:x="7019" fg:w="1"/><text x="100.1646%" y="287.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (1 samples, 0.01%)</title><rect x="99.9146%" y="261" width="0.0142%" height="15" fill="rgb(229,83,13)" fg:x="7019" fg:w="1"/><text x="100.1646%" y="271.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (1 samples, 0.01%)</title><rect x="99.9146%" y="245" width="0.0142%" height="15" fill="rgb(241,91,40)" fg:x="7019" fg:w="1"/><text x="100.1646%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::mwpf_solver::SolverSerialPlugins as mwpf::mwpf_solver::PrimalDualSolver&gt;::solve_visualizer (7,001 samples, 99.66%)</title><rect x="0.2847%" y="341" width="99.6584%" height="15" fill="rgb(225,3,45)" fg:x="20" fg:w="7001"/><text x="0.5347%" y="351.50">mwpf`&lt;mwpf::mwpf_solver::SolverSerialPlugins as mwpf::mwpf_solver::PrimalDualSolver&gt;::solve_visualizer</text></g><g><title>mwpf`mwpf::primal_module::PrimalModuleImpl::solve_visualizer (7,001 samples, 99.66%)</title><rect x="0.2847%" y="325" width="99.6584%" height="15" fill="rgb(244,223,14)" fg:x="20" fg:w="7001"/><text x="0.5347%" y="335.50">mwpf`mwpf::primal_module::PrimalModuleImpl::solve_visualizer</text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::union (1 samples, 0.01%)</title><rect x="99.9288%" y="309" width="0.0142%" height="15" fill="rgb(224,124,37)" fg:x="7020" fg:w="1"/><text x="100.1788%" y="319.50"></text></g><g><title>dyld`start (7,023 samples, 99.97%)</title><rect x="0.0000%" y="469" width="99.9715%" height="15" fill="rgb(251,171,30)" fg:x="0" fg:w="7023"/><text x="0.2500%" y="479.50">dyld`start</text></g><g><title>mwpf`main (7,022 samples, 99.96%)</title><rect x="0.0142%" y="453" width="99.9573%" height="15" fill="rgb(236,46,54)" fg:x="1" fg:w="7022"/><text x="0.2642%" y="463.50">mwpf`main</text></g><g><title>mwpf`std::rt::lang_start (7,022 samples, 99.96%)</title><rect x="0.0142%" y="437" width="99.9573%" height="15" fill="rgb(245,213,5)" fg:x="1" fg:w="7022"/><text x="0.2642%" y="447.50">mwpf`std::rt::lang_start</text></g><g><title>mwpf`std::rt::lang_start_internal (7,022 samples, 99.96%)</title><rect x="0.0142%" y="421" width="99.9573%" height="15" fill="rgb(230,144,27)" fg:x="1" fg:w="7022"/><text x="0.2642%" y="431.50">mwpf`std::rt::lang_start_internal</text></g><g><title>mwpf`std::rt::lang_start::_{{closure}} (7,022 samples, 99.96%)</title><rect x="0.0142%" y="405" width="99.9573%" height="15" fill="rgb(220,86,6)" fg:x="1" fg:w="7022"/><text x="0.2642%" y="415.50">mwpf`std::rt::lang_start::_{{closure}}</text></g><g><title>mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace (7,022 samples, 99.96%)</title><rect x="0.0142%" y="389" width="99.9573%" height="15" fill="rgb(240,20,13)" fg:x="1" fg:w="7022"/><text x="0.2642%" y="399.50">mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mwpf`mwpf::main (7,022 samples, 99.96%)</title><rect x="0.0142%" y="373" width="99.9573%" height="15" fill="rgb(217,89,34)" fg:x="1" fg:w="7022"/><text x="0.2642%" y="383.50">mwpf`mwpf::main</text></g><g><title>mwpf`mwpf::cli::Cli::run (7,022 samples, 99.96%)</title><rect x="0.0142%" y="357" width="99.9573%" height="15" fill="rgb(229,13,5)" fg:x="1" fg:w="7022"/><text x="0.2642%" y="367.50">mwpf`mwpf::cli::Cli::run</text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::clear (2 samples, 0.03%)</title><rect x="99.9431%" y="341" width="0.0285%" height="15" fill="rgb(244,67,35)" fg:x="7021" fg:w="2"/><text x="100.1931%" y="351.50"></text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::clear (2 samples, 0.03%)</title><rect x="99.9431%" y="325" width="0.0285%" height="15" fill="rgb(221,40,2)" fg:x="7021" fg:w="2"/><text x="100.1931%" y="335.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.03%)</title><rect x="99.9431%" y="309" width="0.0285%" height="15" fill="rgb(237,157,21)" fg:x="7021" fg:w="2"/><text x="100.1931%" y="319.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.03%)</title><rect x="99.9431%" y="293" width="0.0285%" height="15" fill="rgb(222,94,11)" fg:x="7021" fg:w="2"/><text x="100.1931%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.03%)</title><rect x="99.9431%" y="277" width="0.0285%" height="15" fill="rgb(249,113,6)" fg:x="7021" fg:w="2"/><text x="100.1931%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (2 samples, 0.03%)</title><rect x="99.9431%" y="261" width="0.0285%" height="15" fill="rgb(238,137,36)" fg:x="7021" fg:w="2"/><text x="100.1931%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.03%)</title><rect x="99.9431%" y="245" width="0.0285%" height="15" fill="rgb(210,102,26)" fg:x="7021" fg:w="2"/><text x="100.1931%" y="255.50"></text></g><g><title>all (7,025 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(218,30,30)" fg:x="0" fg:w="7025"/><text x="0.2500%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.03%)</title><rect x="99.9715%" y="469" width="0.0285%" height="15" fill="rgb(214,67,26)" fg:x="7023" fg:w="2"/><text x="100.2215%" y="479.50"></text></g></svg></svg>