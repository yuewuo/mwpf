<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="501.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="700"><g><title>mwpf`clap_builder::builder::command::Command::get_matches_from (1 samples, 0.14%)</title><rect x="0.0000%" y="341" width="0.1429%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>mwpf`clap_builder::builder::command::Command::_do_parse (1 samples, 0.14%)</title><rect x="0.0000%" y="325" width="0.1429%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>mwpf`clap_builder::parser::parser::Parser::get_matches_with (1 samples, 0.14%)</title><rect x="0.0000%" y="309" width="0.1429%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>mwpf`clap_builder::builder::command::Command::_build_subcommand (1 samples, 0.14%)</title><rect x="0.0000%" y="293" width="0.1429%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>mwpf`clap_builder::builder::command::Command::_build_self (1 samples, 0.14%)</title><rect x="0.0000%" y="277" width="0.1429%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>mwpf`&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="0.0000%" y="261" width="0.1429%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.14%)</title><rect x="0.1429%" y="325" width="0.1429%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.3929%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.14%)</title><rect x="0.4286%" y="293" width="0.1429%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="0.6786%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.14%)</title><rect x="0.5714%" y="293" width="0.1429%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="1"/><text x="0.8214%" y="303.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="0.5714%" y="277" width="0.1429%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="0.8214%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="0.7143%" y="277" width="0.1429%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="1"/><text x="0.9643%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::cli::VerifierActualError as mwpf::cli::ResultVerifier&gt;::verify (5 samples, 0.71%)</title><rect x="0.2857%" y="325" width="0.7143%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="5"/><text x="0.5357%" y="335.50"></text></g><g><title>mwpf`mwpf::util::SolverInitializer::matches_subgraph_syndrome (4 samples, 0.57%)</title><rect x="0.4286%" y="309" width="0.5714%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="4"/><text x="0.6786%" y="319.50"></text></g><g><title>mwpf`mwpf::util::SolverInitializer::get_subgraph_syndrome (2 samples, 0.29%)</title><rect x="0.7143%" y="293" width="0.2857%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="2"/><text x="0.9643%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.14%)</title><rect x="0.8571%" y="277" width="0.1429%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="1"/><text x="1.1071%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.14%)</title><rect x="0.8571%" y="261" width="0.1429%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="1"/><text x="1.1071%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.14%)</title><rect x="1.0000%" y="309" width="0.1429%" height="15" fill="rgb(225,20,46)" fg:x="7" fg:w="1"/><text x="1.2500%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.14%)</title><rect x="1.1429%" y="293" width="0.1429%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="1"/><text x="1.3929%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.14%)</title><rect x="1.2857%" y="293" width="0.1429%" height="15" fill="rgb(221,200,47)" fg:x="9" fg:w="1"/><text x="1.5357%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.14%)</title><rect x="2.0000%" y="277" width="0.1429%" height="15" fill="rgb(226,26,5)" fg:x="14" fg:w="1"/><text x="2.2500%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.14%)</title><rect x="2.1429%" y="261" width="0.1429%" height="15" fill="rgb(249,33,26)" fg:x="15" fg:w="1"/><text x="2.3929%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.14%)</title><rect x="2.1429%" y="245" width="0.1429%" height="15" fill="rgb(235,183,28)" fg:x="15" fg:w="1"/><text x="2.3929%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.14%)</title><rect x="2.1429%" y="229" width="0.1429%" height="15" fill="rgb(221,5,38)" fg:x="15" fg:w="1"/><text x="2.3929%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.29%)</title><rect x="2.1429%" y="277" width="0.2857%" height="15" fill="rgb(247,18,42)" fg:x="15" fg:w="2"/><text x="2.3929%" y="287.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer::Relaxer&gt; (1 samples, 0.14%)</title><rect x="2.2857%" y="261" width="0.1429%" height="15" fill="rgb(241,131,45)" fg:x="16" fg:w="1"/><text x="2.5357%" y="271.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.14%)</title><rect x="2.4286%" y="277" width="0.1429%" height="15" fill="rgb(249,31,29)" fg:x="17" fg:w="1"/><text x="2.6786%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="2.5714%" y="261" width="0.1429%" height="15" fill="rgb(225,111,53)" fg:x="18" fg:w="1"/><text x="2.8214%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::mwpf_solver::SolverSerialJointSingleHair as mwpf::mwpf_solver::PrimalDualSolver&gt;::clear (17 samples, 2.43%)</title><rect x="1.0000%" y="325" width="2.4286%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="17"/><text x="1.2500%" y="335.50">mw..</text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::clear (16 samples, 2.29%)</title><rect x="1.1429%" y="309" width="2.2857%" height="15" fill="rgb(214,148,48)" fg:x="8" fg:w="16"/><text x="1.3929%" y="319.50">m..</text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (14 samples, 2.00%)</title><rect x="1.4286%" y="293" width="2.0000%" height="15" fill="rgb(232,36,49)" fg:x="10" fg:w="14"/><text x="1.6786%" y="303.50">m..</text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::matrix::echelon::Echelon&lt;mwpf::matrix::tail::Tail&lt;mwpf::matrix::tight::Tight&lt;mwpf::matrix::basic::BasicMatrix&gt;&gt;&gt;&gt; (6 samples, 0.86%)</title><rect x="2.5714%" y="277" width="0.8571%" height="15" fill="rgb(209,103,24)" fg:x="18" fg:w="6"/><text x="2.8214%" y="287.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::matrix::tight::Tight&lt;mwpf::matrix::basic::BasicMatrix&gt;&gt; (5 samples, 0.71%)</title><rect x="2.7143%" y="261" width="0.7143%" height="15" fill="rgb(229,88,8)" fg:x="19" fg:w="5"/><text x="2.9643%" y="271.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::matrix::basic::BasicMatrix&gt; (5 samples, 0.71%)</title><rect x="2.7143%" y="245" width="0.7143%" height="15" fill="rgb(213,181,19)" fg:x="19" fg:w="5"/><text x="2.9643%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.29%)</title><rect x="3.1429%" y="229" width="0.2857%" height="15" fill="rgb(254,191,54)" fg:x="22" fg:w="2"/><text x="3.3929%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="3.4286%" y="293" width="0.1429%" height="15" fill="rgb(241,83,37)" fg:x="24" fg:w="1"/><text x="3.6786%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.14%)</title><rect x="3.5714%" y="293" width="0.1429%" height="15" fill="rgb(233,36,39)" fg:x="25" fg:w="1"/><text x="3.8214%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::advance_mode (5 samples, 0.71%)</title><rect x="3.7143%" y="293" width="0.7143%" height="15" fill="rgb(226,3,54)" fg:x="26" fg:w="5"/><text x="3.9643%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (2 samples, 0.29%)</title><rect x="4.1429%" y="277" width="0.2857%" height="15" fill="rgb(245,192,40)" fg:x="29" fg:w="2"/><text x="4.3929%" y="287.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.14%)</title><rect x="4.2857%" y="261" width="0.1429%" height="15" fill="rgb(238,167,29)" fg:x="30" fg:w="1"/><text x="4.5357%" y="271.50"></text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (21 samples, 3.00%)</title><rect x="4.4286%" y="261" width="3.0000%" height="15" fill="rgb(232,182,51)" fg:x="31" fg:w="21"/><text x="4.6786%" y="271.50">mwp..</text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::pop_event (23 samples, 3.29%)</title><rect x="4.4286%" y="277" width="3.2857%" height="15" fill="rgb(231,60,39)" fg:x="31" fg:w="23"/><text x="4.6786%" y="287.50">mwp..</text></g><g><title>mwpf`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (2 samples, 0.29%)</title><rect x="7.4286%" y="261" width="0.2857%" height="15" fill="rgb(208,69,12)" fg:x="52" fg:w="2"/><text x="7.6786%" y="271.50"></text></g><g><title>mwpf`mwpf::dual_module::GroupMaxUpdateLength::add (1 samples, 0.14%)</title><rect x="7.7143%" y="277" width="0.1429%" height="15" fill="rgb(235,93,37)" fg:x="54" fg:w="1"/><text x="7.9643%" y="287.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.14%)</title><rect x="7.7143%" y="261" width="0.1429%" height="15" fill="rgb(213,116,39)" fg:x="54" fg:w="1"/><text x="7.9643%" y="271.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.14%)</title><rect x="7.7143%" y="245" width="0.1429%" height="15" fill="rgb(222,207,29)" fg:x="54" fg:w="1"/><text x="7.9643%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.14%)</title><rect x="7.7143%" y="229" width="0.1429%" height="15" fill="rgb(206,96,30)" fg:x="54" fg:w="1"/><text x="7.9643%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.14%)</title><rect x="7.7143%" y="213" width="0.1429%" height="15" fill="rgb(218,138,4)" fg:x="54" fg:w="1"/><text x="7.9643%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.14%)</title><rect x="7.7143%" y="197" width="0.1429%" height="15" fill="rgb(250,191,14)" fg:x="54" fg:w="1"/><text x="7.9643%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::compute_maximum_update_length (25 samples, 3.57%)</title><rect x="4.4286%" y="293" width="3.5714%" height="15" fill="rgb(239,60,40)" fg:x="31" fg:w="25"/><text x="4.6786%" y="303.50">mwpf..</text></g><g><title>mwpf`mwpf::dual_module_pq::Obstacle::is_valid (1 samples, 0.14%)</title><rect x="7.8571%" y="277" width="0.1429%" height="15" fill="rgb(206,27,48)" fg:x="55" fg:w="1"/><text x="8.1071%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.57%)</title><rect x="8.0000%" y="277" width="0.5714%" height="15" fill="rgb(225,35,8)" fg:x="56" fg:w="4"/><text x="8.2500%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (1 samples, 0.14%)</title><rect x="8.5714%" y="277" width="0.1429%" height="15" fill="rgb(250,213,24)" fg:x="60" fg:w="1"/><text x="8.8214%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (4 samples, 0.57%)</title><rect x="9.2857%" y="245" width="0.5714%" height="15" fill="rgb(247,123,22)" fg:x="65" fg:w="4"/><text x="9.5357%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (3 samples, 0.43%)</title><rect x="9.4286%" y="229" width="0.4286%" height="15" fill="rgb(231,138,38)" fg:x="66" fg:w="3"/><text x="9.6786%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (6 samples, 0.86%)</title><rect x="9.1429%" y="261" width="0.8571%" height="15" fill="rgb(231,145,46)" fg:x="64" fg:w="6"/><text x="9.3929%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.14%)</title><rect x="9.8571%" y="245" width="0.1429%" height="15" fill="rgb(251,118,11)" fg:x="69" fg:w="1"/><text x="10.1071%" y="255.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.14%)</title><rect x="9.8571%" y="229" width="0.1429%" height="15" fill="rgb(217,147,25)" fg:x="69" fg:w="1"/><text x="10.1071%" y="239.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.14%)</title><rect x="10.1429%" y="245" width="0.1429%" height="15" fill="rgb(247,81,37)" fg:x="71" fg:w="1"/><text x="10.3929%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (3 samples, 0.43%)</title><rect x="10.0000%" y="261" width="0.4286%" height="15" fill="rgb(209,12,38)" fg:x="70" fg:w="3"/><text x="10.2500%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="10.2857%" y="245" width="0.1429%" height="15" fill="rgb(227,1,9)" fg:x="72" fg:w="1"/><text x="10.5357%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::load (18 samples, 2.57%)</title><rect x="8.0000%" y="293" width="2.5714%" height="15" fill="rgb(248,47,43)" fg:x="56" fg:w="18"/><text x="8.2500%" y="303.50">mw..</text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::generate_matrix (13 samples, 1.86%)</title><rect x="8.7143%" y="277" width="1.8571%" height="15" fill="rgb(221,10,30)" fg:x="61" fg:w="13"/><text x="8.9643%" y="287.50">m..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.14%)</title><rect x="10.4286%" y="261" width="0.1429%" height="15" fill="rgb(210,229,1)" fg:x="73" fg:w="1"/><text x="10.6786%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="10.7143%" y="277" width="0.1429%" height="15" fill="rgb(222,148,37)" fg:x="75" fg:w="1"/><text x="10.9643%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.14%)</title><rect x="10.8571%" y="277" width="0.1429%" height="15" fill="rgb(234,67,33)" fg:x="76" fg:w="1"/><text x="11.1071%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.29%)</title><rect x="11.0000%" y="277" width="0.2857%" height="15" fill="rgb(247,98,35)" fg:x="77" fg:w="2"/><text x="11.2500%" y="287.50"></text></g><g><title>mwpf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.29%)</title><rect x="11.0000%" y="261" width="0.2857%" height="15" fill="rgb(247,138,52)" fg:x="77" fg:w="2"/><text x="11.2500%" y="271.50"></text></g><g><title>mwpf`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.14%)</title><rect x="11.1429%" y="245" width="0.1429%" height="15" fill="rgb(213,79,30)" fg:x="78" fg:w="1"/><text x="11.3929%" y="255.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="11.7143%" y="229" width="0.1429%" height="15" fill="rgb(246,177,23)" fg:x="82" fg:w="1"/><text x="11.9643%" y="239.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (5 samples, 0.71%)</title><rect x="11.7143%" y="245" width="0.7143%" height="15" fill="rgb(230,62,27)" fg:x="82" fg:w="5"/><text x="11.9643%" y="255.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (4 samples, 0.57%)</title><rect x="11.8571%" y="229" width="0.5714%" height="15" fill="rgb(216,154,8)" fg:x="83" fg:w="4"/><text x="12.1071%" y="239.50"></text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_unique (2 samples, 0.29%)</title><rect x="12.4286%" y="245" width="0.2857%" height="15" fill="rgb(244,35,45)" fg:x="87" fg:w="2"/><text x="12.6786%" y="255.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (8 samples, 1.14%)</title><rect x="11.7143%" y="261" width="1.1429%" height="15" fill="rgb(251,115,12)" fg:x="82" fg:w="8"/><text x="11.9643%" y="271.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (1 samples, 0.14%)</title><rect x="12.7143%" y="245" width="0.1429%" height="15" fill="rgb(240,54,50)" fg:x="89" fg:w="1"/><text x="12.9643%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::set_grow_rate (12 samples, 1.71%)</title><rect x="11.2857%" y="277" width="1.7143%" height="15" fill="rgb(233,84,52)" fg:x="79" fg:w="12"/><text x="11.5357%" y="287.50"></text></g><g><title>mwpf`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (1 samples, 0.14%)</title><rect x="12.8571%" y="261" width="0.1429%" height="15" fill="rgb(207,117,47)" fg:x="90" fg:w="1"/><text x="13.1071%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="13.2857%" y="245" width="0.1429%" height="15" fill="rgb(249,43,39)" fg:x="93" fg:w="1"/><text x="13.5357%" y="255.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.43%)</title><rect x="13.4286%" y="229" width="0.4286%" height="15" fill="rgb(209,38,44)" fg:x="94" fg:w="3"/><text x="13.6786%" y="239.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (1 samples, 0.14%)</title><rect x="13.8571%" y="229" width="0.1429%" height="15" fill="rgb(236,212,23)" fg:x="97" fg:w="1"/><text x="14.1071%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="13.8571%" y="213" width="0.1429%" height="15" fill="rgb(242,79,21)" fg:x="97" fg:w="1"/><text x="14.1071%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.14%)</title><rect x="13.8571%" y="197" width="0.1429%" height="15" fill="rgb(211,96,35)" fg:x="97" fg:w="1"/><text x="14.1071%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.14%)</title><rect x="13.8571%" y="181" width="0.1429%" height="15" fill="rgb(253,215,40)" fg:x="97" fg:w="1"/><text x="14.1071%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.29%)</title><rect x="14.0000%" y="229" width="0.2857%" height="15" fill="rgb(211,81,21)" fg:x="98" fg:w="2"/><text x="14.2500%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (10 samples, 1.43%)</title><rect x="13.2857%" y="261" width="1.4286%" height="15" fill="rgb(208,190,38)" fg:x="93" fg:w="10"/><text x="13.5357%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (9 samples, 1.29%)</title><rect x="13.4286%" y="245" width="1.2857%" height="15" fill="rgb(235,213,38)" fg:x="94" fg:w="9"/><text x="13.6786%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (3 samples, 0.43%)</title><rect x="14.2857%" y="229" width="0.4286%" height="15" fill="rgb(237,122,38)" fg:x="100" fg:w="3"/><text x="14.5357%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (3 samples, 0.43%)</title><rect x="14.2857%" y="213" width="0.4286%" height="15" fill="rgb(244,218,35)" fg:x="100" fg:w="3"/><text x="14.5357%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (3 samples, 0.43%)</title><rect x="14.7143%" y="261" width="0.4286%" height="15" fill="rgb(240,68,47)" fg:x="103" fg:w="3"/><text x="14.9643%" y="271.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.14%)</title><rect x="15.2857%" y="245" width="0.1429%" height="15" fill="rgb(210,16,53)" fg:x="107" fg:w="1"/><text x="15.5357%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (3 samples, 0.43%)</title><rect x="15.1429%" y="261" width="0.4286%" height="15" fill="rgb(235,124,12)" fg:x="106" fg:w="3"/><text x="15.3929%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="15.4286%" y="245" width="0.1429%" height="15" fill="rgb(224,169,11)" fg:x="108" fg:w="1"/><text x="15.6786%" y="255.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="15.5714%" y="245" width="0.1429%" height="15" fill="rgb(250,166,2)" fg:x="109" fg:w="1"/><text x="15.8214%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (21 samples, 3.00%)</title><rect x="13.0000%" y="277" width="3.0000%" height="15" fill="rgb(242,216,29)" fg:x="91" fg:w="21"/><text x="13.2500%" y="287.50">mwp..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (3 samples, 0.43%)</title><rect x="15.5714%" y="261" width="0.4286%" height="15" fill="rgb(230,116,27)" fg:x="109" fg:w="3"/><text x="15.8214%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (2 samples, 0.29%)</title><rect x="15.7143%" y="245" width="0.2857%" height="15" fill="rgb(228,99,48)" fg:x="110" fg:w="2"/><text x="15.9643%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.14%)</title><rect x="15.8571%" y="229" width="0.1429%" height="15" fill="rgb(253,11,6)" fg:x="111" fg:w="1"/><text x="16.1071%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="16.1429%" y="245" width="0.1429%" height="15" fill="rgb(247,143,39)" fg:x="113" fg:w="1"/><text x="16.3929%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.14%)</title><rect x="16.2857%" y="245" width="0.1429%" height="15" fill="rgb(236,97,10)" fg:x="114" fg:w="1"/><text x="16.5357%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.14%)</title><rect x="16.2857%" y="229" width="0.1429%" height="15" fill="rgb(233,208,19)" fg:x="114" fg:w="1"/><text x="16.5357%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (5 samples, 0.71%)</title><rect x="16.0000%" y="277" width="0.7143%" height="15" fill="rgb(216,164,2)" fg:x="112" fg:w="5"/><text x="16.2500%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (5 samples, 0.71%)</title><rect x="16.0000%" y="261" width="0.7143%" height="15" fill="rgb(220,129,5)" fg:x="112" fg:w="5"/><text x="16.2500%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (2 samples, 0.29%)</title><rect x="16.4286%" y="245" width="0.2857%" height="15" fill="rgb(242,17,10)" fg:x="115" fg:w="2"/><text x="16.6786%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.29%)</title><rect x="16.4286%" y="229" width="0.2857%" height="15" fill="rgb(242,107,0)" fg:x="115" fg:w="2"/><text x="16.6786%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (1 samples, 0.14%)</title><rect x="16.7143%" y="277" width="0.1429%" height="15" fill="rgb(251,28,31)" fg:x="117" fg:w="1"/><text x="16.9643%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node (11 samples, 1.57%)</title><rect x="16.8571%" y="261" width="1.5714%" height="15" fill="rgb(233,223,10)" fg:x="118" fg:w="11"/><text x="17.1071%" y="271.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (11 samples, 1.57%)</title><rect x="16.8571%" y="245" width="1.5714%" height="15" fill="rgb(215,21,27)" fg:x="118" fg:w="11"/><text x="17.1071%" y="255.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (11 samples, 1.57%)</title><rect x="16.8571%" y="229" width="1.5714%" height="15" fill="rgb(232,23,21)" fg:x="118" fg:w="11"/><text x="17.1071%" y="239.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (11 samples, 1.57%)</title><rect x="16.8571%" y="213" width="1.5714%" height="15" fill="rgb(244,5,23)" fg:x="118" fg:w="11"/><text x="17.1071%" y="223.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.14%)</title><rect x="18.4286%" y="213" width="0.1429%" height="15" fill="rgb(226,81,46)" fg:x="129" fg:w="1"/><text x="18.6786%" y="223.50"></text></g><g><title>mwpf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.43%)</title><rect x="18.4286%" y="261" width="0.4286%" height="15" fill="rgb(247,70,30)" fg:x="129" fg:w="3"/><text x="18.6786%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (3 samples, 0.43%)</title><rect x="18.4286%" y="245" width="0.4286%" height="15" fill="rgb(212,68,19)" fg:x="129" fg:w="3"/><text x="18.6786%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (3 samples, 0.43%)</title><rect x="18.4286%" y="229" width="0.4286%" height="15" fill="rgb(240,187,13)" fg:x="129" fg:w="3"/><text x="18.6786%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.29%)</title><rect x="18.5714%" y="213" width="0.2857%" height="15" fill="rgb(223,113,26)" fg:x="130" fg:w="2"/><text x="18.8214%" y="223.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_node (4 samples, 0.57%)</title><rect x="18.8571%" y="261" width="0.5714%" height="15" fill="rgb(206,192,2)" fg:x="132" fg:w="4"/><text x="19.1071%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (4 samples, 0.57%)</title><rect x="18.8571%" y="245" width="0.5714%" height="15" fill="rgb(241,108,4)" fg:x="132" fg:w="4"/><text x="19.1071%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (3 samples, 0.43%)</title><rect x="19.0000%" y="229" width="0.4286%" height="15" fill="rgb(247,173,49)" fg:x="133" fg:w="3"/><text x="19.2500%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (3 samples, 0.43%)</title><rect x="19.0000%" y="213" width="0.4286%" height="15" fill="rgb(224,114,35)" fg:x="133" fg:w="3"/><text x="19.2500%" y="223.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_or_create_node (19 samples, 2.71%)</title><rect x="16.8571%" y="277" width="2.7143%" height="15" fill="rgb(245,159,27)" fg:x="118" fg:w="19"/><text x="17.1071%" y="287.50">mw..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.14%)</title><rect x="19.4286%" y="261" width="0.1429%" height="15" fill="rgb(245,172,44)" fg:x="136" fg:w="1"/><text x="19.6786%" y="271.50"></text></g><g><title>mwpf`mwpf::matrix::interface::MatrixEchelon::get_solution_local_minimum (1 samples, 0.14%)</title><rect x="19.5714%" y="277" width="0.1429%" height="15" fill="rgb(236,23,11)" fg:x="137" fg:w="1"/><text x="19.8214%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.14%)</title><rect x="19.5714%" y="261" width="0.1429%" height="15" fill="rgb(205,117,38)" fg:x="137" fg:w="1"/><text x="19.8214%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.14%)</title><rect x="19.7143%" y="261" width="0.1429%" height="15" fill="rgb(237,72,25)" fg:x="138" fg:w="1"/><text x="19.9643%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.14%)</title><rect x="19.8571%" y="245" width="0.1429%" height="15" fill="rgb(244,70,9)" fg:x="139" fg:w="1"/><text x="20.1071%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.14%)</title><rect x="19.8571%" y="229" width="0.1429%" height="15" fill="rgb(217,125,39)" fg:x="139" fg:w="1"/><text x="20.1071%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.14%)</title><rect x="19.8571%" y="213" width="0.1429%" height="15" fill="rgb(235,36,10)" fg:x="139" fg:w="1"/><text x="20.1071%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.29%)</title><rect x="19.8571%" y="261" width="0.2857%" height="15" fill="rgb(251,123,47)" fg:x="139" fg:w="2"/><text x="20.1071%" y="271.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.14%)</title><rect x="20.0000%" y="245" width="0.1429%" height="15" fill="rgb(221,13,13)" fg:x="140" fg:w="1"/><text x="20.2500%" y="255.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer::Relaxer&gt; (1 samples, 0.14%)</title><rect x="20.0000%" y="229" width="0.1429%" height="15" fill="rgb(238,131,9)" fg:x="140" fg:w="1"/><text x="20.2500%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (3 samples, 0.43%)</title><rect x="20.1429%" y="245" width="0.4286%" height="15" fill="rgb(211,50,8)" fg:x="141" fg:w="3"/><text x="20.3929%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.43%)</title><rect x="20.1429%" y="229" width="0.4286%" height="15" fill="rgb(245,182,24)" fg:x="141" fg:w="3"/><text x="20.3929%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (2 samples, 0.29%)</title><rect x="20.2857%" y="213" width="0.2857%" height="15" fill="rgb(242,14,37)" fg:x="142" fg:w="2"/><text x="20.5357%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.14%)</title><rect x="20.4286%" y="197" width="0.1429%" height="15" fill="rgb(246,228,12)" fg:x="143" fg:w="1"/><text x="20.6786%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="20.4286%" y="181" width="0.1429%" height="15" fill="rgb(213,55,15)" fg:x="143" fg:w="1"/><text x="20.6786%" y="191.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (2 samples, 0.29%)</title><rect x="20.5714%" y="213" width="0.2857%" height="15" fill="rgb(209,9,3)" fg:x="144" fg:w="2"/><text x="20.8214%" y="223.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (3 samples, 0.43%)</title><rect x="20.5714%" y="245" width="0.4286%" height="15" fill="rgb(230,59,30)" fg:x="144" fg:w="3"/><text x="20.8214%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (3 samples, 0.43%)</title><rect x="20.5714%" y="229" width="0.4286%" height="15" fill="rgb(209,121,21)" fg:x="144" fg:w="3"/><text x="20.8214%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.14%)</title><rect x="20.8571%" y="213" width="0.1429%" height="15" fill="rgb(220,109,13)" fg:x="146" fg:w="1"/><text x="21.1071%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (7 samples, 1.00%)</title><rect x="20.1429%" y="261" width="1.0000%" height="15" fill="rgb(232,18,1)" fg:x="141" fg:w="7"/><text x="20.3929%" y="271.50"></text></g><g><title>mwpf`core::slice::sort::merge_sort (1 samples, 0.14%)</title><rect x="21.0000%" y="245" width="0.1429%" height="15" fill="rgb(215,41,42)" fg:x="147" fg:w="1"/><text x="21.2500%" y="255.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (1 samples, 0.14%)</title><rect x="21.0000%" y="229" width="0.1429%" height="15" fill="rgb(224,123,36)" fg:x="147" fg:w="1"/><text x="21.2500%" y="239.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.14%)</title><rect x="21.7143%" y="229" width="0.1429%" height="15" fill="rgb(240,125,3)" fg:x="152" fg:w="1"/><text x="21.9643%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (13 samples, 1.86%)</title><rect x="21.4286%" y="245" width="1.8571%" height="15" fill="rgb(205,98,50)" fg:x="150" fg:w="13"/><text x="21.6786%" y="255.50">m..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (10 samples, 1.43%)</title><rect x="21.8571%" y="229" width="1.4286%" height="15" fill="rgb(205,185,37)" fg:x="153" fg:w="10"/><text x="22.1071%" y="239.50"></text></g><g><title>mwpf`mwpf::matrix::row::ParityRow::xor_two_rows (2 samples, 0.29%)</title><rect x="23.2857%" y="245" width="0.2857%" height="15" fill="rgb(238,207,15)" fg:x="163" fg:w="2"/><text x="23.5357%" y="255.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (18 samples, 2.57%)</title><rect x="21.1429%" y="261" width="2.5714%" height="15" fill="rgb(213,199,42)" fg:x="148" fg:w="18"/><text x="21.3929%" y="271.50">mw..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="23.5714%" y="245" width="0.1429%" height="15" fill="rgb(235,201,11)" fg:x="165" fg:w="1"/><text x="23.8214%" y="255.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.14%)</title><rect x="24.0000%" y="197" width="0.1429%" height="15" fill="rgb(207,46,11)" fg:x="168" fg:w="1"/><text x="24.2500%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (4 samples, 0.57%)</title><rect x="24.1429%" y="197" width="0.5714%" height="15" fill="rgb(241,35,35)" fg:x="169" fg:w="4"/><text x="24.3929%" y="207.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="24.7143%" y="181" width="0.1429%" height="15" fill="rgb(243,32,47)" fg:x="173" fg:w="1"/><text x="24.9643%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.14%)</title><rect x="24.8571%" y="181" width="0.1429%" height="15" fill="rgb(247,202,23)" fg:x="174" fg:w="1"/><text x="25.1071%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.14%)</title><rect x="24.8571%" y="165" width="0.1429%" height="15" fill="rgb(219,102,11)" fg:x="174" fg:w="1"/><text x="25.1071%" y="175.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (10 samples, 1.43%)</title><rect x="23.8571%" y="213" width="1.4286%" height="15" fill="rgb(243,110,44)" fg:x="167" fg:w="10"/><text x="24.1071%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (4 samples, 0.57%)</title><rect x="24.7143%" y="197" width="0.5714%" height="15" fill="rgb(222,74,54)" fg:x="173" fg:w="4"/><text x="24.9643%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (2 samples, 0.29%)</title><rect x="25.0000%" y="181" width="0.2857%" height="15" fill="rgb(216,99,12)" fg:x="175" fg:w="2"/><text x="25.2500%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.14%)</title><rect x="25.5714%" y="197" width="0.1429%" height="15" fill="rgb(226,22,26)" fg:x="179" fg:w="1"/><text x="25.8214%" y="207.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="25.7143%" y="181" width="0.1429%" height="15" fill="rgb(217,163,10)" fg:x="180" fg:w="1"/><text x="25.9643%" y="191.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (5 samples, 0.71%)</title><rect x="25.2857%" y="213" width="0.7143%" height="15" fill="rgb(213,25,53)" fg:x="177" fg:w="5"/><text x="25.5357%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (2 samples, 0.29%)</title><rect x="25.7143%" y="197" width="0.2857%" height="15" fill="rgb(252,105,26)" fg:x="180" fg:w="2"/><text x="25.9643%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.14%)</title><rect x="25.8571%" y="181" width="0.1429%" height="15" fill="rgb(220,39,43)" fg:x="181" fg:w="1"/><text x="26.1071%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (18 samples, 2.57%)</title><rect x="23.7143%" y="245" width="2.5714%" height="15" fill="rgb(229,68,48)" fg:x="166" fg:w="18"/><text x="23.9643%" y="255.50">mw..</text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (18 samples, 2.57%)</title><rect x="23.7143%" y="229" width="2.5714%" height="15" fill="rgb(252,8,32)" fg:x="166" fg:w="18"/><text x="23.9643%" y="239.50">mw..</text></g><g><title>mwpf`weak_table::ptr_weak_hash_set::_&lt;impl core::iter::traits::collect::FromIterator&lt;&lt;T as weak_table::traits::WeakElement&gt;::Strong&gt; for weak_table::PtrWeakHashSet&lt;T,S&gt;&gt;::from_iter (2 samples, 0.29%)</title><rect x="26.0000%" y="213" width="0.2857%" height="15" fill="rgb(223,20,43)" fg:x="182" fg:w="2"/><text x="26.2500%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (2 samples, 0.29%)</title><rect x="26.0000%" y="197" width="0.2857%" height="15" fill="rgb(229,81,49)" fg:x="182" fg:w="2"/><text x="26.2500%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.14%)</title><rect x="26.1429%" y="181" width="0.1429%" height="15" fill="rgb(236,28,36)" fg:x="183" fg:w="1"/><text x="26.3929%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.14%)</title><rect x="26.1429%" y="165" width="0.1429%" height="15" fill="rgb(249,185,26)" fg:x="183" fg:w="1"/><text x="26.3929%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (1 samples, 0.14%)</title><rect x="26.2857%" y="229" width="0.1429%" height="15" fill="rgb(249,174,33)" fg:x="184" fg:w="1"/><text x="26.5357%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.14%)</title><rect x="26.2857%" y="213" width="0.1429%" height="15" fill="rgb(233,201,37)" fg:x="184" fg:w="1"/><text x="26.5357%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.14%)</title><rect x="26.2857%" y="197" width="0.1429%" height="15" fill="rgb(221,78,26)" fg:x="184" fg:w="1"/><text x="26.5357%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="26.2857%" y="181" width="0.1429%" height="15" fill="rgb(250,127,30)" fg:x="184" fg:w="1"/><text x="26.5357%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="26.4286%" y="213" width="0.1429%" height="15" fill="rgb(230,49,44)" fg:x="185" fg:w="1"/><text x="26.6786%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.14%)</title><rect x="26.5714%" y="197" width="0.1429%" height="15" fill="rgb(229,67,23)" fg:x="186" fg:w="1"/><text x="26.8214%" y="207.50"></text></g><g><title>mwpf`DYLD-STUB$$memmove (1 samples, 0.14%)</title><rect x="26.7143%" y="197" width="0.1429%" height="15" fill="rgb(249,83,47)" fg:x="187" fg:w="1"/><text x="26.9643%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.14%)</title><rect x="26.8571%" y="197" width="0.1429%" height="15" fill="rgb(215,43,3)" fg:x="188" fg:w="1"/><text x="27.1071%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.14%)</title><rect x="26.8571%" y="181" width="0.1429%" height="15" fill="rgb(238,154,13)" fg:x="188" fg:w="1"/><text x="27.1071%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.14%)</title><rect x="27.0000%" y="181" width="0.1429%" height="15" fill="rgb(219,56,2)" fg:x="189" fg:w="1"/><text x="27.2500%" y="191.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (6 samples, 0.86%)</title><rect x="26.5714%" y="213" width="0.8571%" height="15" fill="rgb(233,0,4)" fg:x="186" fg:w="6"/><text x="26.8214%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (3 samples, 0.43%)</title><rect x="27.0000%" y="197" width="0.4286%" height="15" fill="rgb(235,30,7)" fg:x="189" fg:w="3"/><text x="27.2500%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (2 samples, 0.29%)</title><rect x="27.1429%" y="181" width="0.2857%" height="15" fill="rgb(250,79,13)" fg:x="190" fg:w="2"/><text x="27.3929%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.29%)</title><rect x="27.1429%" y="165" width="0.2857%" height="15" fill="rgb(211,146,34)" fg:x="190" fg:w="2"/><text x="27.3929%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="27.4286%" y="213" width="0.1429%" height="15" fill="rgb(228,22,38)" fg:x="192" fg:w="1"/><text x="27.6786%" y="223.50"></text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (28 samples, 4.00%)</title><rect x="23.7143%" y="261" width="4.0000%" height="15" fill="rgb(235,168,5)" fg:x="166" fg:w="28"/><text x="23.9643%" y="271.50">mwpf..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (10 samples, 1.43%)</title><rect x="26.2857%" y="245" width="1.4286%" height="15" fill="rgb(221,155,16)" fg:x="184" fg:w="10"/><text x="26.5357%" y="255.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (9 samples, 1.29%)</title><rect x="26.4286%" y="229" width="1.2857%" height="15" fill="rgb(215,215,53)" fg:x="185" fg:w="9"/><text x="26.6786%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.14%)</title><rect x="27.5714%" y="213" width="0.1429%" height="15" fill="rgb(223,4,10)" fg:x="193" fg:w="1"/><text x="27.8214%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.29%)</title><rect x="27.7143%" y="229" width="0.2857%" height="15" fill="rgb(234,103,6)" fg:x="194" fg:w="2"/><text x="27.9643%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (2 samples, 0.29%)</title><rect x="27.7143%" y="213" width="0.2857%" height="15" fill="rgb(227,97,0)" fg:x="194" fg:w="2"/><text x="27.9643%" y="223.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (59 samples, 8.43%)</title><rect x="19.7143%" y="277" width="8.4286%" height="15" fill="rgb(234,150,53)" fg:x="138" fg:w="59"/><text x="19.9643%" y="287.50">mwpf`mwpf::p..</text></g><g><title>mwpf`weak_table::ptr_weak_hash_set::_&lt;impl core::iter::traits::collect::FromIterator&lt;&lt;T as weak_table::traits::WeakElement&gt;::Strong&gt; for weak_table::PtrWeakHashSet&lt;T,S&gt;&gt;::from_iter (3 samples, 0.43%)</title><rect x="27.7143%" y="261" width="0.4286%" height="15" fill="rgb(228,201,54)" fg:x="194" fg:w="3"/><text x="27.9643%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (3 samples, 0.43%)</title><rect x="27.7143%" y="245" width="0.4286%" height="15" fill="rgb(222,22,37)" fg:x="194" fg:w="3"/><text x="27.9643%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.14%)</title><rect x="28.0000%" y="229" width="0.1429%" height="15" fill="rgb(237,53,32)" fg:x="196" fg:w="1"/><text x="28.2500%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.14%)</title><rect x="28.0000%" y="213" width="0.1429%" height="15" fill="rgb(233,25,53)" fg:x="196" fg:w="1"/><text x="28.2500%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="28.4286%" y="261" width="0.1429%" height="15" fill="rgb(210,40,34)" fg:x="199" fg:w="1"/><text x="28.6786%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.43%)</title><rect x="28.5714%" y="261" width="0.4286%" height="15" fill="rgb(241,220,44)" fg:x="200" fg:w="3"/><text x="28.8214%" y="271.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.14%)</title><rect x="29.1429%" y="229" width="0.1429%" height="15" fill="rgb(235,28,35)" fg:x="204" fg:w="1"/><text x="29.3929%" y="239.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.14%)</title><rect x="29.1429%" y="213" width="0.1429%" height="15" fill="rgb(210,56,17)" fg:x="204" fg:w="1"/><text x="29.3929%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.14%)</title><rect x="29.1429%" y="197" width="0.1429%" height="15" fill="rgb(224,130,29)" fg:x="204" fg:w="1"/><text x="29.3929%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.14%)</title><rect x="29.1429%" y="181" width="0.1429%" height="15" fill="rgb(235,212,8)" fg:x="204" fg:w="1"/><text x="29.3929%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.14%)</title><rect x="29.1429%" y="165" width="0.1429%" height="15" fill="rgb(223,33,50)" fg:x="204" fg:w="1"/><text x="29.3929%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="29.1429%" y="149" width="0.1429%" height="15" fill="rgb(219,149,13)" fg:x="204" fg:w="1"/><text x="29.3929%" y="159.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (6 samples, 0.86%)</title><rect x="29.2857%" y="229" width="0.8571%" height="15" fill="rgb(250,156,29)" fg:x="205" fg:w="6"/><text x="29.5357%" y="239.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="30.2857%" y="213" width="0.1429%" height="15" fill="rgb(216,193,19)" fg:x="212" fg:w="1"/><text x="30.5357%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.14%)</title><rect x="30.4286%" y="213" width="0.1429%" height="15" fill="rgb(216,135,14)" fg:x="213" fg:w="1"/><text x="30.6786%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.14%)</title><rect x="30.4286%" y="197" width="0.1429%" height="15" fill="rgb(241,47,5)" fg:x="213" fg:w="1"/><text x="30.6786%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.14%)</title><rect x="30.5714%" y="213" width="0.1429%" height="15" fill="rgb(233,42,35)" fg:x="214" fg:w="1"/><text x="30.8214%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.14%)</title><rect x="30.7143%" y="213" width="0.1429%" height="15" fill="rgb(231,13,6)" fg:x="215" fg:w="1"/><text x="30.9643%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.14%)</title><rect x="30.7143%" y="197" width="0.1429%" height="15" fill="rgb(207,181,40)" fg:x="215" fg:w="1"/><text x="30.9643%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (15 samples, 2.14%)</title><rect x="29.0000%" y="245" width="2.1429%" height="15" fill="rgb(254,173,49)" fg:x="203" fg:w="15"/><text x="29.2500%" y="255.50">m..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (7 samples, 1.00%)</title><rect x="30.1429%" y="229" width="1.0000%" height="15" fill="rgb(221,1,38)" fg:x="211" fg:w="7"/><text x="30.3929%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (2 samples, 0.29%)</title><rect x="30.8571%" y="213" width="0.2857%" height="15" fill="rgb(206,124,46)" fg:x="216" fg:w="2"/><text x="31.1071%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.14%)</title><rect x="31.0000%" y="197" width="0.1429%" height="15" fill="rgb(249,21,11)" fg:x="217" fg:w="1"/><text x="31.2500%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.29%)</title><rect x="31.1429%" y="245" width="0.2857%" height="15" fill="rgb(222,201,40)" fg:x="218" fg:w="2"/><text x="31.3929%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (24 samples, 3.43%)</title><rect x="29.0000%" y="261" width="3.4286%" height="15" fill="rgb(235,61,29)" fg:x="203" fg:w="24"/><text x="29.2500%" y="271.50">mwp..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (7 samples, 1.00%)</title><rect x="31.4286%" y="245" width="1.0000%" height="15" fill="rgb(219,207,3)" fg:x="220" fg:w="7"/><text x="31.6786%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (7 samples, 1.00%)</title><rect x="31.4286%" y="229" width="1.0000%" height="15" fill="rgb(222,56,46)" fg:x="220" fg:w="7"/><text x="31.6786%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (1 samples, 0.14%)</title><rect x="32.4286%" y="261" width="0.1429%" height="15" fill="rgb(239,76,54)" fg:x="227" fg:w="1"/><text x="32.6786%" y="271.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.43%)</title><rect x="32.5714%" y="261" width="0.4286%" height="15" fill="rgb(231,124,27)" fg:x="228" fg:w="3"/><text x="32.8214%" y="271.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.14%)</title><rect x="33.0000%" y="261" width="0.1429%" height="15" fill="rgb(249,195,6)" fg:x="231" fg:w="1"/><text x="33.2500%" y="271.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.14%)</title><rect x="33.0000%" y="245" width="0.1429%" height="15" fill="rgb(237,174,47)" fg:x="231" fg:w="1"/><text x="33.2500%" y="255.50"></text></g><g><title>mwpf`__rdl_realloc (1 samples, 0.14%)</title><rect x="33.0000%" y="229" width="0.1429%" height="15" fill="rgb(206,201,31)" fg:x="231" fg:w="1"/><text x="33.2500%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.29%)</title><rect x="33.1429%" y="261" width="0.2857%" height="15" fill="rgb(231,57,52)" fg:x="232" fg:w="2"/><text x="33.3929%" y="271.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.29%)</title><rect x="33.7143%" y="245" width="0.2857%" height="15" fill="rgb(248,177,22)" fg:x="236" fg:w="2"/><text x="33.9643%" y="255.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (1 samples, 0.14%)</title><rect x="34.0000%" y="245" width="0.1429%" height="15" fill="rgb(215,211,37)" fg:x="238" fg:w="1"/><text x="34.2500%" y="255.50"></text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::union (49 samples, 7.00%)</title><rect x="28.1429%" y="277" width="7.0000%" height="15" fill="rgb(241,128,51)" fg:x="197" fg:w="49"/><text x="28.3929%" y="287.50">mwpf`mwpf..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (12 samples, 1.71%)</title><rect x="33.4286%" y="261" width="1.7143%" height="15" fill="rgb(227,165,31)" fg:x="234" fg:w="12"/><text x="33.6786%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (7 samples, 1.00%)</title><rect x="34.1429%" y="245" width="1.0000%" height="15" fill="rgb(228,167,24)" fg:x="239" fg:w="7"/><text x="34.3929%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (4 samples, 0.57%)</title><rect x="34.5714%" y="229" width="0.5714%" height="15" fill="rgb(228,143,12)" fg:x="242" fg:w="4"/><text x="34.8214%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (4 samples, 0.57%)</title><rect x="35.1429%" y="277" width="0.5714%" height="15" fill="rgb(249,149,8)" fg:x="246" fg:w="4"/><text x="35.3929%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve (178 samples, 25.43%)</title><rect x="10.5714%" y="293" width="25.4286%" height="15" fill="rgb(243,35,44)" fg:x="74" fg:w="178"/><text x="10.8214%" y="303.50">mwpf`&lt;mwpf::primal_module_serial::PrimalM..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (2 samples, 0.29%)</title><rect x="35.7143%" y="277" width="0.2857%" height="15" fill="rgb(246,89,9)" fg:x="250" fg:w="2"/><text x="35.9643%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.14%)</title><rect x="35.8571%" y="261" width="0.1429%" height="15" fill="rgb(233,213,13)" fg:x="251" fg:w="1"/><text x="36.1071%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.14%)</title><rect x="35.8571%" y="245" width="0.1429%" height="15" fill="rgb(233,141,41)" fg:x="251" fg:w="1"/><text x="36.1071%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.14%)</title><rect x="36.0000%" y="277" width="0.1429%" height="15" fill="rgb(239,167,4)" fg:x="252" fg:w="1"/><text x="36.2500%" y="287.50"></text></g><g><title>mwpf`core::slice::sort::merge_sort (1 samples, 0.14%)</title><rect x="36.0000%" y="261" width="0.1429%" height="15" fill="rgb(209,217,16)" fg:x="252" fg:w="1"/><text x="36.2500%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 0.14%)</title><rect x="36.0000%" y="245" width="0.1429%" height="15" fill="rgb(219,88,35)" fg:x="252" fg:w="1"/><text x="36.2500%" y="255.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.14%)</title><rect x="36.0000%" y="229" width="0.1429%" height="15" fill="rgb(220,193,23)" fg:x="252" fg:w="1"/><text x="36.2500%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.29%)</title><rect x="36.1429%" y="261" width="0.2857%" height="15" fill="rgb(230,90,52)" fg:x="253" fg:w="2"/><text x="36.3929%" y="271.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="36.5714%" y="245" width="0.1429%" height="15" fill="rgb(252,106,19)" fg:x="256" fg:w="1"/><text x="36.8214%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::OccupiedEntry&lt;K,V&gt;::insert (1 samples, 0.14%)</title><rect x="36.7143%" y="245" width="0.1429%" height="15" fill="rgb(206,74,20)" fg:x="257" fg:w="1"/><text x="36.9643%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (7 samples, 1.00%)</title><rect x="36.1429%" y="277" width="1.0000%" height="15" fill="rgb(230,138,44)" fg:x="253" fg:w="7"/><text x="36.3929%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (5 samples, 0.71%)</title><rect x="36.4286%" y="261" width="0.7143%" height="15" fill="rgb(235,182,43)" fg:x="255" fg:w="5"/><text x="36.6786%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (2 samples, 0.29%)</title><rect x="36.8571%" y="245" width="0.2857%" height="15" fill="rgb(242,16,51)" fg:x="258" fg:w="2"/><text x="37.1071%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.29%)</title><rect x="36.8571%" y="229" width="0.2857%" height="15" fill="rgb(248,9,4)" fg:x="258" fg:w="2"/><text x="37.1071%" y="239.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_or_create_node_tune (1 samples, 0.14%)</title><rect x="37.1429%" y="277" width="0.1429%" height="15" fill="rgb(210,31,22)" fg:x="260" fg:w="1"/><text x="37.3929%" y="287.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_node (1 samples, 0.14%)</title><rect x="37.1429%" y="261" width="0.1429%" height="15" fill="rgb(239,54,39)" fg:x="260" fg:w="1"/><text x="37.3929%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.14%)</title><rect x="37.1429%" y="245" width="0.1429%" height="15" fill="rgb(230,99,41)" fg:x="260" fg:w="1"/><text x="37.3929%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.14%)</title><rect x="37.1429%" y="229" width="0.1429%" height="15" fill="rgb(253,106,12)" fg:x="260" fg:w="1"/><text x="37.3929%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="37.1429%" y="213" width="0.1429%" height="15" fill="rgb(213,46,41)" fg:x="260" fg:w="1"/><text x="37.3929%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.14%)</title><rect x="37.4286%" y="261" width="0.1429%" height="15" fill="rgb(215,133,35)" fg:x="262" fg:w="1"/><text x="37.6786%" y="271.50"></text></g><g><title>mwpf`mwpf::matrix::interface::MatrixEchelon::get_solution_local_minimum (3 samples, 0.43%)</title><rect x="37.2857%" y="277" width="0.4286%" height="15" fill="rgb(213,28,5)" fg:x="261" fg:w="3"/><text x="37.5357%" y="287.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.14%)</title><rect x="37.5714%" y="261" width="0.1429%" height="15" fill="rgb(215,77,49)" fg:x="263" fg:w="1"/><text x="37.8214%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.14%)</title><rect x="37.7143%" y="261" width="0.1429%" height="15" fill="rgb(248,100,22)" fg:x="264" fg:w="1"/><text x="37.9643%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.14%)</title><rect x="37.8571%" y="261" width="0.1429%" height="15" fill="rgb(208,67,9)" fg:x="265" fg:w="1"/><text x="38.1071%" y="271.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (1 samples, 0.14%)</title><rect x="37.8571%" y="245" width="0.1429%" height="15" fill="rgb(219,133,21)" fg:x="265" fg:w="1"/><text x="38.1071%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 0.14%)</title><rect x="37.8571%" y="229" width="0.1429%" height="15" fill="rgb(246,46,29)" fg:x="265" fg:w="1"/><text x="38.1071%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.14%)</title><rect x="37.8571%" y="213" width="0.1429%" height="15" fill="rgb(246,185,52)" fg:x="265" fg:w="1"/><text x="38.1071%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.14%)</title><rect x="38.0000%" y="261" width="0.1429%" height="15" fill="rgb(252,136,11)" fg:x="266" fg:w="1"/><text x="38.2500%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="38.1429%" y="245" width="0.1429%" height="15" fill="rgb(219,138,53)" fg:x="267" fg:w="1"/><text x="38.3929%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="38.2857%" y="213" width="0.1429%" height="15" fill="rgb(211,51,23)" fg:x="268" fg:w="1"/><text x="38.5357%" y="223.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer_forest::RelaxerForest&gt; (3 samples, 0.43%)</title><rect x="38.1429%" y="261" width="0.4286%" height="15" fill="rgb(247,221,28)" fg:x="267" fg:w="3"/><text x="38.3929%" y="271.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.29%)</title><rect x="38.2857%" y="245" width="0.2857%" height="15" fill="rgb(251,222,45)" fg:x="268" fg:w="2"/><text x="38.5357%" y="255.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer::Relaxer&gt; (2 samples, 0.29%)</title><rect x="38.2857%" y="229" width="0.2857%" height="15" fill="rgb(217,162,53)" fg:x="268" fg:w="2"/><text x="38.5357%" y="239.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.14%)</title><rect x="38.4286%" y="213" width="0.1429%" height="15" fill="rgb(229,93,14)" fg:x="269" fg:w="1"/><text x="38.6786%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.14%)</title><rect x="38.4286%" y="197" width="0.1429%" height="15" fill="rgb(209,67,49)" fg:x="269" fg:w="1"/><text x="38.6786%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.14%)</title><rect x="38.4286%" y="181" width="0.1429%" height="15" fill="rgb(213,87,29)" fg:x="269" fg:w="1"/><text x="38.6786%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.14%)</title><rect x="38.4286%" y="165" width="0.1429%" height="15" fill="rgb(205,151,52)" fg:x="269" fg:w="1"/><text x="38.6786%" y="175.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.14%)</title><rect x="39.0000%" y="229" width="0.1429%" height="15" fill="rgb(253,215,39)" fg:x="273" fg:w="1"/><text x="39.2500%" y="239.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (10 samples, 1.43%)</title><rect x="38.5714%" y="261" width="1.4286%" height="15" fill="rgb(221,220,41)" fg:x="270" fg:w="10"/><text x="38.8214%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (9 samples, 1.29%)</title><rect x="38.7143%" y="245" width="1.2857%" height="15" fill="rgb(218,133,21)" fg:x="271" fg:w="9"/><text x="38.9643%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (6 samples, 0.86%)</title><rect x="39.1429%" y="229" width="0.8571%" height="15" fill="rgb(221,193,43)" fg:x="274" fg:w="6"/><text x="39.3929%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::OccupiedEntry&lt;K,V&gt;::remove_entry (2 samples, 0.29%)</title><rect x="40.0000%" y="229" width="0.2857%" height="15" fill="rgb(240,128,52)" fg:x="280" fg:w="2"/><text x="40.2500%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::remove_index (2 samples, 0.29%)</title><rect x="40.0000%" y="213" width="0.2857%" height="15" fill="rgb(253,114,12)" fg:x="280" fg:w="2"/><text x="40.2500%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (3 samples, 0.43%)</title><rect x="40.0000%" y="245" width="0.4286%" height="15" fill="rgb(215,223,47)" fg:x="280" fg:w="3"/><text x="40.2500%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="40.2857%" y="229" width="0.1429%" height="15" fill="rgb(248,225,23)" fg:x="282" fg:w="1"/><text x="40.5357%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.14%)</title><rect x="40.7143%" y="229" width="0.1429%" height="15" fill="rgb(250,108,0)" fg:x="285" fg:w="1"/><text x="40.9643%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.14%)</title><rect x="40.8571%" y="229" width="0.1429%" height="15" fill="rgb(228,208,7)" fg:x="286" fg:w="1"/><text x="41.1071%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="40.8571%" y="213" width="0.1429%" height="15" fill="rgb(244,45,10)" fg:x="286" fg:w="1"/><text x="41.1071%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.14%)</title><rect x="40.8571%" y="197" width="0.1429%" height="15" fill="rgb(207,125,25)" fg:x="286" fg:w="1"/><text x="41.1071%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.14%)</title><rect x="40.8571%" y="181" width="0.1429%" height="15" fill="rgb(210,195,18)" fg:x="286" fg:w="1"/><text x="41.1071%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.14%)</title><rect x="40.8571%" y="165" width="0.1429%" height="15" fill="rgb(249,80,12)" fg:x="286" fg:w="1"/><text x="41.1071%" y="175.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.14%)</title><rect x="41.0000%" y="165" width="0.1429%" height="15" fill="rgb(221,65,9)" fg:x="287" fg:w="1"/><text x="41.2500%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::convert::From&lt;[(K,V) (2 samples, 0.29%)</title><rect x="41.0000%" y="229" width="0.2857%" height="15" fill="rgb(235,49,36)" fg:x="287" fg:w="2"/><text x="41.2500%" y="239.50"></text></g><g><title> N]&gt;&gt;::from (2 samples, 0.29%)</title><rect x="41.0000%" y="213" width="0.2857%" height="15" fill="rgb(225,32,20)" fg:x="287" fg:w="2"/><text x="41.2500%" y="223.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (2 samples, 0.29%)</title><rect x="41.0000%" y="197" width="0.2857%" height="15" fill="rgb(215,141,46)" fg:x="287" fg:w="2"/><text x="41.2500%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (2 samples, 0.29%)</title><rect x="41.0000%" y="181" width="0.2857%" height="15" fill="rgb(250,160,47)" fg:x="287" fg:w="2"/><text x="41.2500%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.14%)</title><rect x="41.1429%" y="165" width="0.1429%" height="15" fill="rgb(216,222,40)" fg:x="288" fg:w="1"/><text x="41.3929%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.14%)</title><rect x="41.1429%" y="149" width="0.1429%" height="15" fill="rgb(234,217,39)" fg:x="288" fg:w="1"/><text x="41.3929%" y="159.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="41.1429%" y="133" width="0.1429%" height="15" fill="rgb(207,178,40)" fg:x="288" fg:w="1"/><text x="41.3929%" y="143.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.14%)</title><rect x="41.2857%" y="229" width="0.1429%" height="15" fill="rgb(221,136,13)" fg:x="289" fg:w="1"/><text x="41.5357%" y="239.50"></text></g><g><title>mwpf`__rdl_realloc (1 samples, 0.14%)</title><rect x="41.2857%" y="213" width="0.1429%" height="15" fill="rgb(249,199,10)" fg:x="289" fg:w="1"/><text x="41.5357%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.14%)</title><rect x="42.5714%" y="165" width="0.1429%" height="15" fill="rgb(249,222,13)" fg:x="298" fg:w="1"/><text x="42.8214%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.14%)</title><rect x="42.5714%" y="149" width="0.1429%" height="15" fill="rgb(244,185,38)" fg:x="298" fg:w="1"/><text x="42.8214%" y="159.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_raw (5 samples, 0.71%)</title><rect x="42.1429%" y="213" width="0.7143%" height="15" fill="rgb(236,202,9)" fg:x="295" fg:w="5"/><text x="42.3929%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.71%)</title><rect x="42.1429%" y="197" width="0.7143%" height="15" fill="rgb(250,229,37)" fg:x="295" fg:w="5"/><text x="42.3929%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.29%)</title><rect x="42.5714%" y="181" width="0.2857%" height="15" fill="rgb(206,174,23)" fg:x="298" fg:w="2"/><text x="42.8214%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.14%)</title><rect x="42.7143%" y="165" width="0.1429%" height="15" fill="rgb(211,33,43)" fg:x="299" fg:w="1"/><text x="42.9643%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (24 samples, 3.43%)</title><rect x="42.8571%" y="213" width="3.4286%" height="15" fill="rgb(245,58,50)" fg:x="300" fg:w="24"/><text x="43.1071%" y="223.50">mwp..</text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.14%)</title><rect x="46.5714%" y="197" width="0.1429%" height="15" fill="rgb(244,68,36)" fg:x="326" fg:w="1"/><text x="46.8214%" y="207.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="46.7143%" y="197" width="0.1429%" height="15" fill="rgb(232,229,15)" fg:x="327" fg:w="1"/><text x="46.9643%" y="207.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.29%)</title><rect x="46.8571%" y="197" width="0.2857%" height="15" fill="rgb(254,30,23)" fg:x="328" fg:w="2"/><text x="47.1071%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.14%)</title><rect x="47.2857%" y="181" width="0.1429%" height="15" fill="rgb(235,160,14)" fg:x="331" fg:w="1"/><text x="47.5357%" y="191.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (3 samples, 0.43%)</title><rect x="47.1429%" y="197" width="0.4286%" height="15" fill="rgb(212,155,44)" fg:x="330" fg:w="3"/><text x="47.3929%" y="207.50"></text></g><g><title>mwpf`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.14%)</title><rect x="47.4286%" y="181" width="0.1429%" height="15" fill="rgb(226,2,50)" fg:x="332" fg:w="1"/><text x="47.6786%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (2 samples, 0.29%)</title><rect x="47.5714%" y="197" width="0.2857%" height="15" fill="rgb(234,177,6)" fg:x="333" fg:w="2"/><text x="47.8214%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.29%)</title><rect x="47.5714%" y="181" width="0.2857%" height="15" fill="rgb(217,24,9)" fg:x="333" fg:w="2"/><text x="47.8214%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.14%)</title><rect x="47.7143%" y="165" width="0.1429%" height="15" fill="rgb(220,13,46)" fg:x="334" fg:w="1"/><text x="47.9643%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::OccupiedEntry&lt;K,V&gt;::insert (1 samples, 0.14%)</title><rect x="47.8571%" y="197" width="0.1429%" height="15" fill="rgb(239,221,27)" fg:x="335" fg:w="1"/><text x="48.1071%" y="207.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (60 samples, 8.57%)</title><rect x="41.4286%" y="229" width="8.5714%" height="15" fill="rgb(222,198,25)" fg:x="290" fg:w="60"/><text x="41.6786%" y="239.50">mwpf`mwpf::i..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (26 samples, 3.71%)</title><rect x="46.2857%" y="213" width="3.7143%" height="15" fill="rgb(211,99,13)" fg:x="324" fg:w="26"/><text x="46.5357%" y="223.50">mwpf..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (14 samples, 2.00%)</title><rect x="48.0000%" y="197" width="2.0000%" height="15" fill="rgb(232,111,31)" fg:x="336" fg:w="14"/><text x="48.2500%" y="207.50">m..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (14 samples, 2.00%)</title><rect x="48.0000%" y="181" width="2.0000%" height="15" fill="rgb(245,82,37)" fg:x="336" fg:w="14"/><text x="48.2500%" y="191.50">m..</text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.14%)</title><rect x="52.2857%" y="181" width="0.1429%" height="15" fill="rgb(227,149,46)" fg:x="366" fg:w="1"/><text x="52.5357%" y="191.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (20 samples, 2.86%)</title><rect x="50.0000%" y="213" width="2.8571%" height="15" fill="rgb(218,36,50)" fg:x="350" fg:w="20"/><text x="50.2500%" y="223.50">mw..</text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (5 samples, 0.71%)</title><rect x="52.1429%" y="197" width="0.7143%" height="15" fill="rgb(226,80,48)" fg:x="365" fg:w="5"/><text x="52.3929%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (3 samples, 0.43%)</title><rect x="52.4286%" y="181" width="0.4286%" height="15" fill="rgb(238,224,15)" fg:x="367" fg:w="3"/><text x="52.6786%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.14%)</title><rect x="53.0000%" y="197" width="0.1429%" height="15" fill="rgb(241,136,10)" fg:x="371" fg:w="1"/><text x="53.2500%" y="207.50"></text></g><g><title>mwpf`mwpf::matrix::hair::HairView&lt;M&gt;::new (23 samples, 3.29%)</title><rect x="50.0000%" y="229" width="3.2857%" height="15" fill="rgb(208,32,45)" fg:x="350" fg:w="23"/><text x="50.2500%" y="239.50">mwp..</text></g><g><title>mwpf`mwpf::matrix::interface::MatrixTail::set_tail_edges (3 samples, 0.43%)</title><rect x="52.8571%" y="213" width="0.4286%" height="15" fill="rgb(207,135,9)" fg:x="370" fg:w="3"/><text x="53.1071%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.14%)</title><rect x="53.1429%" y="197" width="0.1429%" height="15" fill="rgb(206,86,44)" fg:x="372" fg:w="1"/><text x="53.3929%" y="207.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="53.1429%" y="181" width="0.1429%" height="15" fill="rgb(245,177,15)" fg:x="372" fg:w="1"/><text x="53.3929%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.14%)</title><rect x="53.7143%" y="213" width="0.1429%" height="15" fill="rgb(206,64,50)" fg:x="376" fg:w="1"/><text x="53.9643%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.29%)</title><rect x="53.8571%" y="213" width="0.2857%" height="15" fill="rgb(234,36,40)" fg:x="377" fg:w="2"/><text x="54.1071%" y="223.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.29%)</title><rect x="54.1429%" y="213" width="0.2857%" height="15" fill="rgb(213,64,8)" fg:x="379" fg:w="2"/><text x="54.3929%" y="223.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="54.4286%" y="213" width="0.1429%" height="15" fill="rgb(210,75,36)" fg:x="381" fg:w="1"/><text x="54.6786%" y="223.50"></text></g><g><title>mwpf`DYLD-STUB$$memmove (1 samples, 0.14%)</title><rect x="54.5714%" y="213" width="0.1429%" height="15" fill="rgb(229,88,21)" fg:x="382" fg:w="1"/><text x="54.8214%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.14%)</title><rect x="54.7143%" y="213" width="0.1429%" height="15" fill="rgb(252,204,47)" fg:x="383" fg:w="1"/><text x="54.9643%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.14%)</title><rect x="54.8571%" y="197" width="0.1429%" height="15" fill="rgb(208,77,27)" fg:x="384" fg:w="1"/><text x="55.1071%" y="207.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.57%)</title><rect x="55.0000%" y="197" width="0.5714%" height="15" fill="rgb(221,76,26)" fg:x="385" fg:w="4"/><text x="55.2500%" y="207.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="55.5714%" y="197" width="0.1429%" height="15" fill="rgb(225,139,18)" fg:x="389" fg:w="1"/><text x="55.8214%" y="207.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (2 samples, 0.29%)</title><rect x="55.7143%" y="197" width="0.2857%" height="15" fill="rgb(230,137,11)" fg:x="390" fg:w="2"/><text x="55.9643%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.29%)</title><rect x="56.0000%" y="197" width="0.2857%" height="15" fill="rgb(212,28,1)" fg:x="392" fg:w="2"/><text x="56.2500%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.43%)</title><rect x="56.2857%" y="197" width="0.4286%" height="15" fill="rgb(248,164,17)" fg:x="394" fg:w="3"/><text x="56.5357%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (3 samples, 0.43%)</title><rect x="56.2857%" y="181" width="0.4286%" height="15" fill="rgb(222,171,42)" fg:x="394" fg:w="3"/><text x="56.5357%" y="191.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (32 samples, 4.57%)</title><rect x="53.2857%" y="229" width="4.5714%" height="15" fill="rgb(243,84,45)" fg:x="373" fg:w="32"/><text x="53.5357%" y="239.50">mwpf`..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (21 samples, 3.00%)</title><rect x="54.8571%" y="213" width="3.0000%" height="15" fill="rgb(252,49,23)" fg:x="384" fg:w="21"/><text x="55.1071%" y="223.50">mwp..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (8 samples, 1.14%)</title><rect x="56.7143%" y="197" width="1.1429%" height="15" fill="rgb(215,19,7)" fg:x="397" fg:w="8"/><text x="56.9643%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (6 samples, 0.86%)</title><rect x="57.0000%" y="181" width="0.8571%" height="15" fill="rgb(238,81,41)" fg:x="399" fg:w="6"/><text x="57.2500%" y="191.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.14%)</title><rect x="58.0000%" y="213" width="0.1429%" height="15" fill="rgb(210,199,37)" fg:x="406" fg:w="1"/><text x="58.2500%" y="223.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.29%)</title><rect x="58.4286%" y="197" width="0.2857%" height="15" fill="rgb(244,192,49)" fg:x="409" fg:w="2"/><text x="58.6786%" y="207.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="58.7143%" y="197" width="0.1429%" height="15" fill="rgb(226,211,11)" fg:x="411" fg:w="1"/><text x="58.9643%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.14%)</title><rect x="58.8571%" y="197" width="0.1429%" height="15" fill="rgb(236,162,54)" fg:x="412" fg:w="1"/><text x="59.1071%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.14%)</title><rect x="58.8571%" y="181" width="0.1429%" height="15" fill="rgb(220,229,9)" fg:x="412" fg:w="1"/><text x="59.1071%" y="191.50"></text></g><g><title>mwpf`weak_table::ptr_weak_hash_set::_&lt;impl core::iter::traits::collect::FromIterator&lt;&lt;T as weak_table::traits::WeakElement&gt;::Strong&gt; for weak_table::PtrWeakHashSet&lt;T,S&gt;&gt;::from_iter (11 samples, 1.57%)</title><rect x="57.8571%" y="229" width="1.5714%" height="15" fill="rgb(250,87,22)" fg:x="405" fg:w="11"/><text x="58.1071%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (9 samples, 1.29%)</title><rect x="58.1429%" y="213" width="1.2857%" height="15" fill="rgb(239,43,17)" fg:x="407" fg:w="9"/><text x="58.3929%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (3 samples, 0.43%)</title><rect x="59.0000%" y="197" width="0.4286%" height="15" fill="rgb(231,177,25)" fg:x="413" fg:w="3"/><text x="59.2500%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.29%)</title><rect x="59.1429%" y="181" width="0.2857%" height="15" fill="rgb(219,179,1)" fg:x="414" fg:w="2"/><text x="59.3929%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="59.4286%" y="229" width="0.1429%" height="15" fill="rgb(238,219,53)" fg:x="416" fg:w="1"/><text x="59.6786%" y="239.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.14%)</title><rect x="59.7143%" y="213" width="0.1429%" height="15" fill="rgb(232,167,36)" fg:x="418" fg:w="1"/><text x="59.9643%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_single_hair::PluginSingleHair as mwpf::plugin::PluginImpl&gt;::find_relaxers (138 samples, 19.71%)</title><rect x="40.4286%" y="245" width="19.7143%" height="15" fill="rgb(244,19,51)" fg:x="283" fg:w="138"/><text x="40.6786%" y="255.50">mwpf`&lt;mwpf::plugin_single_hair:..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (4 samples, 0.57%)</title><rect x="59.5714%" y="229" width="0.5714%" height="15" fill="rgb(224,6,22)" fg:x="417" fg:w="4"/><text x="59.8214%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (2 samples, 0.29%)</title><rect x="59.8571%" y="213" width="0.2857%" height="15" fill="rgb(224,145,5)" fg:x="419" fg:w="2"/><text x="60.1071%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.29%)</title><rect x="59.8571%" y="197" width="0.2857%" height="15" fill="rgb(234,130,49)" fg:x="419" fg:w="2"/><text x="60.1071%" y="207.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.14%)</title><rect x="60.1429%" y="181" width="0.1429%" height="15" fill="rgb(254,6,2)" fg:x="421" fg:w="1"/><text x="60.3929%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (2 samples, 0.29%)</title><rect x="60.1429%" y="245" width="0.2857%" height="15" fill="rgb(208,96,46)" fg:x="421" fg:w="2"/><text x="60.3929%" y="255.50"></text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (2 samples, 0.29%)</title><rect x="60.1429%" y="229" width="0.2857%" height="15" fill="rgb(239,3,39)" fg:x="421" fg:w="2"/><text x="60.3929%" y="239.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (2 samples, 0.29%)</title><rect x="60.1429%" y="213" width="0.2857%" height="15" fill="rgb(233,210,1)" fg:x="421" fg:w="2"/><text x="60.3929%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (2 samples, 0.29%)</title><rect x="60.1429%" y="197" width="0.2857%" height="15" fill="rgb(244,137,37)" fg:x="421" fg:w="2"/><text x="60.3929%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="60.2857%" y="181" width="0.1429%" height="15" fill="rgb(240,136,2)" fg:x="422" fg:w="1"/><text x="60.5357%" y="191.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.14%)</title><rect x="60.5714%" y="229" width="0.1429%" height="15" fill="rgb(239,18,37)" fg:x="424" fg:w="1"/><text x="60.8214%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.14%)</title><rect x="60.5714%" y="213" width="0.1429%" height="15" fill="rgb(218,185,22)" fg:x="424" fg:w="1"/><text x="60.8214%" y="223.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::add (3 samples, 0.43%)</title><rect x="60.4286%" y="245" width="0.4286%" height="15" fill="rgb(225,218,4)" fg:x="423" fg:w="3"/><text x="60.6786%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="60.7143%" y="229" width="0.1429%" height="15" fill="rgb(230,182,32)" fg:x="425" fg:w="1"/><text x="60.9643%" y="239.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.14%)</title><rect x="60.8571%" y="197" width="0.1429%" height="15" fill="rgb(242,56,43)" fg:x="426" fg:w="1"/><text x="61.1071%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (2 samples, 0.29%)</title><rect x="60.8571%" y="213" width="0.2857%" height="15" fill="rgb(233,99,24)" fg:x="426" fg:w="2"/><text x="61.1071%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.14%)</title><rect x="61.0000%" y="197" width="0.1429%" height="15" fill="rgb(234,209,42)" fg:x="427" fg:w="1"/><text x="61.2500%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.14%)</title><rect x="61.0000%" y="181" width="0.1429%" height="15" fill="rgb(227,7,12)" fg:x="427" fg:w="1"/><text x="61.2500%" y="191.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.14%)</title><rect x="61.0000%" y="165" width="0.1429%" height="15" fill="rgb(245,203,43)" fg:x="427" fg:w="1"/><text x="61.2500%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.14%)</title><rect x="61.1429%" y="213" width="0.1429%" height="15" fill="rgb(238,205,33)" fg:x="428" fg:w="1"/><text x="61.3929%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 0.14%)</title><rect x="61.1429%" y="197" width="0.1429%" height="15" fill="rgb(231,56,7)" fg:x="428" fg:w="1"/><text x="61.3929%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.14%)</title><rect x="61.1429%" y="181" width="0.1429%" height="15" fill="rgb(244,186,29)" fg:x="428" fg:w="1"/><text x="61.3929%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.14%)</title><rect x="61.1429%" y="165" width="0.1429%" height="15" fill="rgb(234,111,31)" fg:x="428" fg:w="1"/><text x="61.3929%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="61.1429%" y="149" width="0.1429%" height="15" fill="rgb(241,149,10)" fg:x="428" fg:w="1"/><text x="61.3929%" y="159.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (1 samples, 0.14%)</title><rect x="61.2857%" y="213" width="0.1429%" height="15" fill="rgb(249,206,44)" fg:x="429" fg:w="1"/><text x="61.5357%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.14%)</title><rect x="61.2857%" y="197" width="0.1429%" height="15" fill="rgb(251,153,30)" fg:x="429" fg:w="1"/><text x="61.5357%" y="207.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (1 samples, 0.14%)</title><rect x="61.2857%" y="181" width="0.1429%" height="15" fill="rgb(239,152,38)" fg:x="429" fg:w="1"/><text x="61.5357%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="61.2857%" y="165" width="0.1429%" height="15" fill="rgb(249,139,47)" fg:x="429" fg:w="1"/><text x="61.5357%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.14%)</title><rect x="61.2857%" y="149" width="0.1429%" height="15" fill="rgb(244,64,35)" fg:x="429" fg:w="1"/><text x="61.5357%" y="159.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (1 samples, 0.14%)</title><rect x="61.4286%" y="197" width="0.1429%" height="15" fill="rgb(216,46,15)" fg:x="430" fg:w="1"/><text x="61.6786%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.14%)</title><rect x="61.4286%" y="181" width="0.1429%" height="15" fill="rgb(250,74,19)" fg:x="430" fg:w="1"/><text x="61.6786%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.14%)</title><rect x="61.4286%" y="165" width="0.1429%" height="15" fill="rgb(249,42,33)" fg:x="430" fg:w="1"/><text x="61.6786%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="61.4286%" y="149" width="0.1429%" height="15" fill="rgb(242,149,17)" fg:x="430" fg:w="1"/><text x="61.6786%" y="159.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (1 samples, 0.14%)</title><rect x="61.5714%" y="165" width="0.1429%" height="15" fill="rgb(244,29,21)" fg:x="431" fg:w="1"/><text x="61.8214%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="61.5714%" y="149" width="0.1429%" height="15" fill="rgb(220,130,37)" fg:x="431" fg:w="1"/><text x="61.8214%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.14%)</title><rect x="61.5714%" y="133" width="0.1429%" height="15" fill="rgb(211,67,2)" fg:x="431" fg:w="1"/><text x="61.8214%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.14%)</title><rect x="61.5714%" y="117" width="0.1429%" height="15" fill="rgb(235,68,52)" fg:x="431" fg:w="1"/><text x="61.8214%" y="127.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.14%)</title><rect x="61.7143%" y="165" width="0.1429%" height="15" fill="rgb(246,142,3)" fg:x="432" fg:w="1"/><text x="61.9643%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.14%)</title><rect x="61.7143%" y="149" width="0.1429%" height="15" fill="rgb(241,25,7)" fg:x="432" fg:w="1"/><text x="61.9643%" y="159.50"></text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (154 samples, 22.00%)</title><rect x="40.0000%" y="261" width="22.0000%" height="15" fill="rgb(242,119,39)" fg:x="280" fg:w="154"/><text x="40.2500%" y="271.50">mwpf`mwpf::plugin::PluginEntry::exe..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (8 samples, 1.14%)</title><rect x="60.8571%" y="245" width="1.1429%" height="15" fill="rgb(241,98,45)" fg:x="426" fg:w="8"/><text x="61.1071%" y="255.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (8 samples, 1.14%)</title><rect x="60.8571%" y="229" width="1.1429%" height="15" fill="rgb(254,28,30)" fg:x="426" fg:w="8"/><text x="61.1071%" y="239.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (4 samples, 0.57%)</title><rect x="61.4286%" y="213" width="0.5714%" height="15" fill="rgb(241,142,54)" fg:x="430" fg:w="4"/><text x="61.6786%" y="223.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (3 samples, 0.43%)</title><rect x="61.5714%" y="197" width="0.4286%" height="15" fill="rgb(222,85,15)" fg:x="431" fg:w="3"/><text x="61.8214%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (3 samples, 0.43%)</title><rect x="61.5714%" y="181" width="0.4286%" height="15" fill="rgb(210,85,47)" fg:x="431" fg:w="3"/><text x="61.8214%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.14%)</title><rect x="61.8571%" y="165" width="0.1429%" height="15" fill="rgb(224,206,25)" fg:x="433" fg:w="1"/><text x="62.1071%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.14%)</title><rect x="61.8571%" y="149" width="0.1429%" height="15" fill="rgb(243,201,19)" fg:x="433" fg:w="1"/><text x="62.1071%" y="159.50"></text></g><g><title>mwpf`weak_table::ptr_weak_hash_set::_&lt;impl core::iter::traits::collect::FromIterator&lt;&lt;T as weak_table::traits::WeakElement&gt;::Strong&gt; for weak_table::PtrWeakHashSet&lt;T,S&gt;&gt;::from_iter (3 samples, 0.43%)</title><rect x="62.0000%" y="261" width="0.4286%" height="15" fill="rgb(236,59,4)" fg:x="434" fg:w="3"/><text x="62.2500%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (2 samples, 0.29%)</title><rect x="62.1429%" y="245" width="0.2857%" height="15" fill="rgb(254,179,45)" fg:x="435" fg:w="2"/><text x="62.3929%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.14%)</title><rect x="62.2857%" y="229" width="0.1429%" height="15" fill="rgb(226,14,10)" fg:x="436" fg:w="1"/><text x="62.5357%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.14%)</title><rect x="62.2857%" y="213" width="0.1429%" height="15" fill="rgb(244,27,41)" fg:x="436" fg:w="1"/><text x="62.5357%" y="223.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (174 samples, 24.86%)</title><rect x="37.7143%" y="277" width="24.8571%" height="15" fill="rgb(235,35,32)" fg:x="264" fg:w="174"/><text x="37.9643%" y="287.50">mwpf`mwpf::plugin::PluginManager::find_r..</text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (1 samples, 0.14%)</title><rect x="62.4286%" y="261" width="0.1429%" height="15" fill="rgb(218,68,31)" fg:x="437" fg:w="1"/><text x="62.6786%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.14%)</title><rect x="62.5714%" y="261" width="0.1429%" height="15" fill="rgb(207,120,37)" fg:x="438" fg:w="1"/><text x="62.8214%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (4 samples, 0.57%)</title><rect x="62.7143%" y="261" width="0.5714%" height="15" fill="rgb(227,98,0)" fg:x="439" fg:w="4"/><text x="62.9643%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (4 samples, 0.57%)</title><rect x="62.7143%" y="245" width="0.5714%" height="15" fill="rgb(207,7,3)" fg:x="439" fg:w="4"/><text x="62.9643%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (2 samples, 0.29%)</title><rect x="63.0000%" y="229" width="0.2857%" height="15" fill="rgb(206,98,19)" fg:x="441" fg:w="2"/><text x="63.2500%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.29%)</title><rect x="63.0000%" y="213" width="0.2857%" height="15" fill="rgb(217,5,26)" fg:x="441" fg:w="2"/><text x="63.2500%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.14%)</title><rect x="63.2857%" y="213" width="0.1429%" height="15" fill="rgb(235,190,38)" fg:x="443" fg:w="1"/><text x="63.5357%" y="223.50"></text></g><g><title>mwpf`HEkk::~HEkk (2 samples, 0.29%)</title><rect x="63.2857%" y="229" width="0.2857%" height="15" fill="rgb(247,86,24)" fg:x="443" fg:w="2"/><text x="63.5357%" y="239.50"></text></g><g><title>mwpf`HSimplexNla::~HSimplexNla (1 samples, 0.14%)</title><rect x="63.4286%" y="213" width="0.1429%" height="15" fill="rgb(205,101,16)" fg:x="444" fg:w="1"/><text x="63.6786%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.14%)</title><rect x="63.4286%" y="197" width="0.1429%" height="15" fill="rgb(246,168,33)" fg:x="444" fg:w="1"/><text x="63.6786%" y="207.50"></text></g><g><title>mwpf`Highs::~Highs (3 samples, 0.43%)</title><rect x="63.2857%" y="261" width="0.4286%" height="15" fill="rgb(231,114,1)" fg:x="443" fg:w="3"/><text x="63.5357%" y="271.50"></text></g><g><title>mwpf`Highs::~Highs (3 samples, 0.43%)</title><rect x="63.2857%" y="245" width="0.4286%" height="15" fill="rgb(207,184,53)" fg:x="443" fg:w="3"/><text x="63.5357%" y="255.50"></text></g><g><title>mwpf`PresolveComponentData::~PresolveComponentData (1 samples, 0.14%)</title><rect x="63.5714%" y="229" width="0.1429%" height="15" fill="rgb(224,95,51)" fg:x="445" fg:w="1"/><text x="63.8214%" y="239.50"></text></g><g><title>mwpf`HighsLp::~HighsLp (1 samples, 0.14%)</title><rect x="63.5714%" y="213" width="0.1429%" height="15" fill="rgb(212,188,45)" fg:x="445" fg:w="1"/><text x="63.8214%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.14%)</title><rect x="63.5714%" y="197" width="0.1429%" height="15" fill="rgb(223,154,38)" fg:x="445" fg:w="1"/><text x="63.8214%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.14%)</title><rect x="63.7143%" y="261" width="0.1429%" height="15" fill="rgb(251,22,52)" fg:x="446" fg:w="1"/><text x="63.9643%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 0.14%)</title><rect x="63.7143%" y="245" width="0.1429%" height="15" fill="rgb(229,209,22)" fg:x="446" fg:w="1"/><text x="63.9643%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.14%)</title><rect x="63.7143%" y="229" width="0.1429%" height="15" fill="rgb(234,138,34)" fg:x="446" fg:w="1"/><text x="63.9643%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.14%)</title><rect x="63.7143%" y="213" width="0.1429%" height="15" fill="rgb(212,95,11)" fg:x="446" fg:w="1"/><text x="63.9643%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="63.7143%" y="197" width="0.1429%" height="15" fill="rgb(240,179,47)" fg:x="446" fg:w="1"/><text x="63.9643%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.14%)</title><rect x="63.8571%" y="213" width="0.1429%" height="15" fill="rgb(240,163,11)" fg:x="447" fg:w="1"/><text x="64.1071%" y="223.50"></text></g><g><title>mwpf`DYLD-STUB$$operator new(unsigned long) (1 samples, 0.14%)</title><rect x="64.0000%" y="213" width="0.1429%" height="15" fill="rgb(236,37,12)" fg:x="448" fg:w="1"/><text x="64.2500%" y="223.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.14%)</title><rect x="64.1429%" y="197" width="0.1429%" height="15" fill="rgb(232,164,16)" fg:x="449" fg:w="1"/><text x="64.3929%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="64.2857%" y="197" width="0.1429%" height="15" fill="rgb(244,205,15)" fg:x="450" fg:w="1"/><text x="64.5357%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.14%)</title><rect x="64.4286%" y="197" width="0.1429%" height="15" fill="rgb(223,117,47)" fg:x="451" fg:w="1"/><text x="64.6786%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.14%)</title><rect x="64.5714%" y="197" width="0.1429%" height="15" fill="rgb(244,107,35)" fg:x="452" fg:w="1"/><text x="64.8214%" y="207.50"></text></g><g><title>mwpf`highs::Model::add_row (7 samples, 1.00%)</title><rect x="63.8571%" y="261" width="1.0000%" height="15" fill="rgb(205,140,8)" fg:x="447" fg:w="7"/><text x="64.1071%" y="271.50"></text></g><g><title>mwpf`Highs::addRow (7 samples, 1.00%)</title><rect x="63.8571%" y="245" width="1.0000%" height="15" fill="rgb(228,84,46)" fg:x="447" fg:w="7"/><text x="64.1071%" y="255.50"></text></g><g><title>mwpf`Highs::addRows (7 samples, 1.00%)</title><rect x="63.8571%" y="229" width="1.0000%" height="15" fill="rgb(254,188,9)" fg:x="447" fg:w="7"/><text x="64.1071%" y="239.50"></text></g><g><title>mwpf`Highs::addRowsInterface (5 samples, 0.71%)</title><rect x="64.1429%" y="213" width="0.7143%" height="15" fill="rgb(206,112,54)" fg:x="449" fg:w="5"/><text x="64.3929%" y="223.50"></text></g><g><title>mwpf`HighsSparseMatrix::HighsSparseMatrix (1 samples, 0.14%)</title><rect x="64.7143%" y="197" width="0.1429%" height="15" fill="rgb(216,84,49)" fg:x="453" fg:w="1"/><text x="64.9643%" y="207.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.14%)</title><rect x="64.7143%" y="181" width="0.1429%" height="15" fill="rgb(214,194,35)" fg:x="453" fg:w="1"/><text x="64.9643%" y="191.50"></text></g><g><title>mwpf`HEkk::computeDual (1 samples, 0.14%)</title><rect x="64.8571%" y="149" width="0.1429%" height="15" fill="rgb(249,28,3)" fg:x="454" fg:w="1"/><text x="65.1071%" y="159.50"></text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (1 samples, 0.14%)</title><rect x="64.8571%" y="133" width="0.1429%" height="15" fill="rgb(222,56,52)" fg:x="454" fg:w="1"/><text x="65.1071%" y="143.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (1 samples, 0.14%)</title><rect x="64.8571%" y="117" width="0.1429%" height="15" fill="rgb(245,217,50)" fg:x="454" fg:w="1"/><text x="65.1071%" y="127.50"></text></g><g><title>mwpf`HEkk::computeFactor (2 samples, 0.29%)</title><rect x="65.0000%" y="133" width="0.2857%" height="15" fill="rgb(213,201,24)" fg:x="455" fg:w="2"/><text x="65.2500%" y="143.50"></text></g><g><title>mwpf`HSimplexNla::invert (2 samples, 0.29%)</title><rect x="65.0000%" y="117" width="0.2857%" height="15" fill="rgb(248,116,28)" fg:x="455" fg:w="2"/><text x="65.2500%" y="127.50"></text></g><g><title>mwpf`HFactor::build (2 samples, 0.29%)</title><rect x="65.0000%" y="101" width="0.2857%" height="15" fill="rgb(219,72,43)" fg:x="455" fg:w="2"/><text x="65.2500%" y="111.50"></text></g><g><title>mwpf`HFactor::buildFinish (2 samples, 0.29%)</title><rect x="65.0000%" y="85" width="0.2857%" height="15" fill="rgb(209,138,14)" fg:x="455" fg:w="2"/><text x="65.2500%" y="95.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (1 samples, 0.14%)</title><rect x="65.1429%" y="69" width="0.1429%" height="15" fill="rgb(222,18,33)" fg:x="456" fg:w="1"/><text x="65.3929%" y="79.50"></text></g><g><title>mwpf`HEkk::initialiseForSolve (4 samples, 0.57%)</title><rect x="64.8571%" y="165" width="0.5714%" height="15" fill="rgb(213,199,7)" fg:x="454" fg:w="4"/><text x="65.1071%" y="175.50"></text></g><g><title>mwpf`HEkk::initialiseSimplexLpBasisAndFactor (3 samples, 0.43%)</title><rect x="65.0000%" y="149" width="0.4286%" height="15" fill="rgb(250,110,10)" fg:x="455" fg:w="3"/><text x="65.2500%" y="159.50"></text></g><g><title>mwpf`HSimplexNla::setup (1 samples, 0.14%)</title><rect x="65.2857%" y="133" width="0.1429%" height="15" fill="rgb(248,123,6)" fg:x="457" fg:w="1"/><text x="65.5357%" y="143.50"></text></g><g><title>mwpf`HFactor::setupGeneral (1 samples, 0.14%)</title><rect x="65.2857%" y="117" width="0.1429%" height="15" fill="rgb(206,91,31)" fg:x="457" fg:w="1"/><text x="65.5357%" y="127.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.14%)</title><rect x="65.2857%" y="101" width="0.1429%" height="15" fill="rgb(211,154,13)" fg:x="457" fg:w="1"/><text x="65.5357%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="65.2857%" y="85" width="0.1429%" height="15" fill="rgb(225,148,7)" fg:x="457" fg:w="1"/><text x="65.5357%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.14%)</title><rect x="65.2857%" y="69" width="0.1429%" height="15" fill="rgb(220,160,43)" fg:x="457" fg:w="1"/><text x="65.5357%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.14%)</title><rect x="65.2857%" y="53" width="0.1429%" height="15" fill="rgb(213,52,39)" fg:x="457" fg:w="1"/><text x="65.5357%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 0.14%)</title><rect x="65.2857%" y="37" width="0.1429%" height="15" fill="rgb(243,137,7)" fg:x="457" fg:w="1"/><text x="65.5357%" y="47.50"></text></g><g><title>mwpf`HEkk::computeDual (1 samples, 0.14%)</title><rect x="65.4286%" y="149" width="0.1429%" height="15" fill="rgb(230,79,13)" fg:x="458" fg:w="1"/><text x="65.6786%" y="159.50"></text></g><g><title>mwpf`HEkkDual::iterate (1 samples, 0.14%)</title><rect x="65.7143%" y="133" width="0.1429%" height="15" fill="rgb(247,105,23)" fg:x="460" fg:w="1"/><text x="65.9643%" y="143.50"></text></g><g><title>mwpf`HEkkDual::chooseColumn(HVectorBase (1 samples, 0.14%)</title><rect x="65.7143%" y="117" width="0.1429%" height="15" fill="rgb(223,179,41)" fg:x="460" fg:w="1"/><text x="65.9643%" y="127.50"></text></g><g><title>mwpf`HEkk::tableauRowPrice(bool, HVectorBase&lt;double&gt; const&amp;, HVectorBase (1 samples, 0.14%)</title><rect x="65.7143%" y="101" width="0.1429%" height="15" fill="rgb(218,9,34)" fg:x="460" fg:w="1"/><text x="65.9643%" y="111.50"></text></g><g><title>mwpf`HEkk::computeInfeasibilitiesForReporting (1 samples, 0.14%)</title><rect x="65.8571%" y="117" width="0.1429%" height="15" fill="rgb(222,106,8)" fg:x="461" fg:w="1"/><text x="66.1071%" y="127.50"></text></g><g><title>mwpf`HEkk::computeSimplexPrimalInfeasible (1 samples, 0.14%)</title><rect x="65.8571%" y="101" width="0.1429%" height="15" fill="rgb(211,220,0)" fg:x="461" fg:w="1"/><text x="66.1071%" y="111.50"></text></g><g><title>mwpf`Highs::callSolveLp(HighsLp&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (9 samples, 1.29%)</title><rect x="64.8571%" y="229" width="1.2857%" height="15" fill="rgb(229,52,16)" fg:x="454" fg:w="9"/><text x="65.1071%" y="239.50"></text></g><g><title>mwpf`solveLp(HighsLpSolverObject&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (9 samples, 1.29%)</title><rect x="64.8571%" y="213" width="1.2857%" height="15" fill="rgb(212,155,18)" fg:x="454" fg:w="9"/><text x="65.1071%" y="223.50"></text></g><g><title>mwpf`solveLpSimplex(HighsLpSolverObject&amp;) (9 samples, 1.29%)</title><rect x="64.8571%" y="197" width="1.2857%" height="15" fill="rgb(242,21,14)" fg:x="454" fg:w="9"/><text x="65.1071%" y="207.50"></text></g><g><title>mwpf`HEkk::solve (9 samples, 1.29%)</title><rect x="64.8571%" y="181" width="1.2857%" height="15" fill="rgb(222,19,48)" fg:x="454" fg:w="9"/><text x="65.1071%" y="191.50"></text></g><g><title>mwpf`HEkkDual::solve (5 samples, 0.71%)</title><rect x="65.4286%" y="165" width="0.7143%" height="15" fill="rgb(232,45,27)" fg:x="458" fg:w="5"/><text x="65.6786%" y="175.50"></text></g><g><title>mwpf`HEkkDual::solvePhase1 (4 samples, 0.57%)</title><rect x="65.5714%" y="149" width="0.5714%" height="15" fill="rgb(249,103,42)" fg:x="459" fg:w="4"/><text x="65.8214%" y="159.50"></text></g><g><title>mwpf`HEkkDual::rebuild (2 samples, 0.29%)</title><rect x="65.8571%" y="133" width="0.2857%" height="15" fill="rgb(246,81,33)" fg:x="461" fg:w="2"/><text x="66.1071%" y="143.50"></text></g><g><title>mwpf`HEkk::rebuildRefactor (1 samples, 0.14%)</title><rect x="66.0000%" y="117" width="0.1429%" height="15" fill="rgb(252,33,42)" fg:x="462" fg:w="1"/><text x="66.2500%" y="127.50"></text></g><g><title>mwpf`HEkk::factorSolveError (1 samples, 0.14%)</title><rect x="66.0000%" y="101" width="0.1429%" height="15" fill="rgb(209,212,41)" fg:x="462" fg:w="1"/><text x="66.2500%" y="111.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::setup (1 samples, 0.14%)</title><rect x="66.0000%" y="85" width="0.1429%" height="15" fill="rgb(207,154,6)" fg:x="462" fg:w="1"/><text x="66.2500%" y="95.50"></text></g><g><title>mwpf`std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;::__append (1 samples, 0.14%)</title><rect x="66.0000%" y="69" width="0.1429%" height="15" fill="rgb(223,64,47)" fg:x="462" fg:w="1"/><text x="66.2500%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.14%)</title><rect x="66.0000%" y="53" width="0.1429%" height="15" fill="rgb(211,161,38)" fg:x="462" fg:w="1"/><text x="66.2500%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.14%)</title><rect x="66.4286%" y="149" width="0.1429%" height="15" fill="rgb(219,138,40)" fg:x="465" fg:w="1"/><text x="66.6786%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::detectParallelRowsAndCols (4 samples, 0.57%)</title><rect x="66.1429%" y="165" width="0.5714%" height="15" fill="rgb(241,228,46)" fg:x="463" fg:w="4"/><text x="66.3929%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::storeRow (1 samples, 0.14%)</title><rect x="66.5714%" y="149" width="0.1429%" height="15" fill="rgb(223,209,38)" fg:x="466" fg:w="1"/><text x="66.8214%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="66.5714%" y="133" width="0.1429%" height="15" fill="rgb(236,164,45)" fg:x="466" fg:w="1"/><text x="66.8214%" y="143.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSlicePreOrder&gt;::iterator::operator++ (1 samples, 0.14%)</title><rect x="66.7143%" y="133" width="0.1429%" height="15" fill="rgb(231,15,5)" fg:x="467" fg:w="1"/><text x="66.9643%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::fastPresolveLoop (2 samples, 0.29%)</title><rect x="66.7143%" y="165" width="0.2857%" height="15" fill="rgb(252,35,15)" fg:x="467" fg:w="2"/><text x="66.9643%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::presolveChangedRows (2 samples, 0.29%)</title><rect x="66.7143%" y="149" width="0.2857%" height="15" fill="rgb(248,181,18)" fg:x="467" fg:w="2"/><text x="66.9643%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::rowPresolve (1 samples, 0.14%)</title><rect x="66.8571%" y="133" width="0.1429%" height="15" fill="rgb(233,39,42)" fg:x="468" fg:w="1"/><text x="67.1071%" y="143.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSlicePreOrder&gt;::iterator::operator++ (1 samples, 0.14%)</title><rect x="66.8571%" y="117" width="0.1429%" height="15" fill="rgb(238,110,33)" fg:x="468" fg:w="1"/><text x="67.1071%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::fromCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (1 samples, 0.14%)</title><rect x="67.0000%" y="165" width="0.1429%" height="15" fill="rgb(233,195,10)" fg:x="469" fg:w="1"/><text x="67.2500%" y="175.50"></text></g><g><title>mwpf`std::__1::enable_if&lt;__is_cpp17_forward_iterator&lt;std::__1::__wrap_iter&lt;int*&gt;&gt;::value &amp;&amp; is_constructible&lt;int, std::__1::iterator_traits&lt;std::__1::__wrap_iter&lt;int*&gt;&gt;::reference&gt;::value, std::__1::__wrap_iter&lt;int*&gt;&gt;::type std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::insert&lt;std::__1::__wrap_iter&lt;int*&gt;&gt;(std::__1::__wrap_iter&lt;int const*&gt;, std::__1::__wrap_iter&lt;int*&gt;, std::__1::__wrap_iter (1 samples, 0.14%)</title><rect x="67.0000%" y="149" width="0.1429%" height="15" fill="rgb(254,105,3)" fg:x="469" fg:w="1"/><text x="67.2500%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::shrinkProblem (1 samples, 0.14%)</title><rect x="67.1429%" y="165" width="0.1429%" height="15" fill="rgb(221,225,9)" fg:x="470" fg:w="1"/><text x="67.3929%" y="175.50"></text></g><g><title>mwpf`presolve::HighsPostsolveStack::compressIndexMaps(std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (1 samples, 0.14%)</title><rect x="67.1429%" y="149" width="0.1429%" height="15" fill="rgb(224,227,45)" fg:x="470" fg:w="1"/><text x="67.3929%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::run (9 samples, 1.29%)</title><rect x="66.1429%" y="197" width="1.2857%" height="15" fill="rgb(229,198,43)" fg:x="463" fg:w="9"/><text x="66.3929%" y="207.50"></text></g><g><title>mwpf`presolve::HPresolve::presolve (9 samples, 1.29%)</title><rect x="66.1429%" y="181" width="1.2857%" height="15" fill="rgb(206,209,35)" fg:x="463" fg:w="9"/><text x="66.3929%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::storeRow (1 samples, 0.14%)</title><rect x="67.2857%" y="165" width="0.1429%" height="15" fill="rgb(245,195,53)" fg:x="471" fg:w="1"/><text x="67.5357%" y="175.50"></text></g><g><title>mwpf`Highs::runPresolve (10 samples, 1.43%)</title><rect x="66.1429%" y="229" width="1.4286%" height="15" fill="rgb(240,92,26)" fg:x="463" fg:w="10"/><text x="66.3929%" y="239.50"></text></g><g><title>mwpf`PresolveComponent::run (10 samples, 1.43%)</title><rect x="66.1429%" y="213" width="1.4286%" height="15" fill="rgb(207,40,23)" fg:x="463" fg:w="10"/><text x="66.3929%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::~HPresolve (1 samples, 0.14%)</title><rect x="67.4286%" y="197" width="0.1429%" height="15" fill="rgb(223,111,35)" fg:x="472" fg:w="1"/><text x="67.6786%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.14%)</title><rect x="67.4286%" y="181" width="0.1429%" height="15" fill="rgb(229,147,28)" fg:x="472" fg:w="1"/><text x="67.6786%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.14%)</title><rect x="67.4286%" y="165" width="0.1429%" height="15" fill="rgb(211,29,28)" fg:x="472" fg:w="1"/><text x="67.6786%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.14%)</title><rect x="67.4286%" y="149" width="0.1429%" height="15" fill="rgb(228,72,33)" fg:x="472" fg:w="1"/><text x="67.6786%" y="159.50"></text></g><g><title>mwpf`HighsOptions::HighsOptions (1 samples, 0.14%)</title><rect x="67.5714%" y="229" width="0.1429%" height="15" fill="rgb(205,214,31)" fg:x="473" fg:w="1"/><text x="67.8214%" y="239.50"></text></g><g><title>mwpf`HighsOptions::initRecords (1 samples, 0.14%)</title><rect x="67.5714%" y="213" width="0.1429%" height="15" fill="rgb(224,111,15)" fg:x="473" fg:w="1"/><text x="67.8214%" y="223.50"></text></g><g><title>mwpf`OptionRecordString::OptionRecordString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.14%)</title><rect x="67.5714%" y="197" width="0.1429%" height="15" fill="rgb(253,21,26)" fg:x="473" fg:w="1"/><text x="67.8214%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;true&gt; (1 samples, 0.14%)</title><rect x="67.5714%" y="181" width="0.1429%" height="15" fill="rgb(245,139,43)" fg:x="473" fg:w="1"/><text x="67.8214%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.14%)</title><rect x="67.5714%" y="165" width="0.1429%" height="15" fill="rgb(252,170,7)" fg:x="473" fg:w="1"/><text x="67.8214%" y="175.50"></text></g><g><title>mwpf`highs::Model::solve (21 samples, 3.00%)</title><rect x="64.8571%" y="261" width="3.0000%" height="15" fill="rgb(231,118,14)" fg:x="454" fg:w="21"/><text x="65.1071%" y="271.50">mwp..</text></g><g><title>mwpf`Highs::run (21 samples, 3.00%)</title><rect x="64.8571%" y="245" width="3.0000%" height="15" fill="rgb(238,83,0)" fg:x="454" fg:w="21"/><text x="65.1071%" y="255.50">mwp..</text></g><g><title>mwpf`HighsOptions::~HighsOptions (1 samples, 0.14%)</title><rect x="67.7143%" y="229" width="0.1429%" height="15" fill="rgb(221,39,39)" fg:x="474" fg:w="1"/><text x="67.9643%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="67.7143%" y="213" width="0.1429%" height="15" fill="rgb(222,119,46)" fg:x="474" fg:w="1"/><text x="67.9643%" y="223.50"></text></g><g><title>mwpf`highs::Problem&lt;MATRIX&gt;::try_optimise (1 samples, 0.14%)</title><rect x="67.8571%" y="261" width="0.1429%" height="15" fill="rgb(222,165,49)" fg:x="475" fg:w="1"/><text x="68.1071%" y="271.50"></text></g><g><title>mwpf`Highs_create (1 samples, 0.14%)</title><rect x="67.8571%" y="245" width="0.1429%" height="15" fill="rgb(219,113,52)" fg:x="475" fg:w="1"/><text x="68.1071%" y="255.50"></text></g><g><title>mwpf`Highs::Highs (1 samples, 0.14%)</title><rect x="67.8571%" y="229" width="0.1429%" height="15" fill="rgb(214,7,15)" fg:x="475" fg:w="1"/><text x="68.1071%" y="239.50"></text></g><g><title>mwpf`HighsInfo::initRecords (1 samples, 0.14%)</title><rect x="67.8571%" y="213" width="0.1429%" height="15" fill="rgb(235,32,4)" fg:x="475" fg:w="1"/><text x="68.1071%" y="223.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.14%)</title><rect x="67.8571%" y="197" width="0.1429%" height="15" fill="rgb(238,90,54)" fg:x="475" fg:w="1"/><text x="68.1071%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune (225 samples, 32.14%)</title><rect x="36.0000%" y="293" width="32.1429%" height="15" fill="rgb(213,208,19)" fg:x="252" fg:w="225"/><text x="36.2500%" y="303.50">mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial..</text></g><g><title>mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize (39 samples, 5.57%)</title><rect x="62.5714%" y="277" width="5.5714%" height="15" fill="rgb(233,156,4)" fg:x="438" fg:w="39"/><text x="62.8214%" y="287.50">mwpf`mw..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::iter::traits::collect::FromIterator&lt;(&lt;K as weak_table::traits::WeakElement&gt;::Strong,V)&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::from_iter (1 samples, 0.14%)</title><rect x="68.0000%" y="261" width="0.1429%" height="15" fill="rgb(207,194,5)" fg:x="476" fg:w="1"/><text x="68.2500%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.14%)</title><rect x="68.0000%" y="245" width="0.1429%" height="15" fill="rgb(206,111,30)" fg:x="476" fg:w="1"/><text x="68.2500%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.14%)</title><rect x="68.0000%" y="229" width="0.1429%" height="15" fill="rgb(243,70,54)" fg:x="476" fg:w="1"/><text x="68.2500%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (1 samples, 0.14%)</title><rect x="68.1429%" y="261" width="0.1429%" height="15" fill="rgb(242,28,8)" fg:x="477" fg:w="1"/><text x="68.3929%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.14%)</title><rect x="68.1429%" y="245" width="0.1429%" height="15" fill="rgb(219,106,18)" fg:x="477" fg:w="1"/><text x="68.3929%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.14%)</title><rect x="68.1429%" y="229" width="0.1429%" height="15" fill="rgb(244,222,10)" fg:x="477" fg:w="1"/><text x="68.3929%" y="239.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_or_create_node_tune (1 samples, 0.14%)</title><rect x="68.2857%" y="261" width="0.1429%" height="15" fill="rgb(236,179,52)" fg:x="478" fg:w="1"/><text x="68.5357%" y="271.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_node (1 samples, 0.14%)</title><rect x="68.2857%" y="245" width="0.1429%" height="15" fill="rgb(213,23,39)" fg:x="478" fg:w="1"/><text x="68.5357%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.14%)</title><rect x="68.2857%" y="229" width="0.1429%" height="15" fill="rgb(238,48,10)" fg:x="478" fg:w="1"/><text x="68.5357%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.14%)</title><rect x="68.2857%" y="213" width="0.1429%" height="15" fill="rgb(251,196,23)" fg:x="478" fg:w="1"/><text x="68.5357%" y="223.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.14%)</title><rect x="68.2857%" y="197" width="0.1429%" height="15" fill="rgb(250,152,24)" fg:x="478" fg:w="1"/><text x="68.5357%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.14%)</title><rect x="68.4286%" y="245" width="0.1429%" height="15" fill="rgb(209,150,17)" fg:x="479" fg:w="1"/><text x="68.6786%" y="255.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (1 samples, 0.14%)</title><rect x="68.4286%" y="229" width="0.1429%" height="15" fill="rgb(234,202,34)" fg:x="479" fg:w="1"/><text x="68.6786%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 0.14%)</title><rect x="68.4286%" y="213" width="0.1429%" height="15" fill="rgb(253,148,53)" fg:x="479" fg:w="1"/><text x="68.6786%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.14%)</title><rect x="68.4286%" y="197" width="0.1429%" height="15" fill="rgb(218,129,16)" fg:x="479" fg:w="1"/><text x="68.6786%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.14%)</title><rect x="68.4286%" y="181" width="0.1429%" height="15" fill="rgb(216,85,19)" fg:x="479" fg:w="1"/><text x="68.6786%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="68.4286%" y="165" width="0.1429%" height="15" fill="rgb(235,228,7)" fg:x="479" fg:w="1"/><text x="68.6786%" y="175.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (2 samples, 0.29%)</title><rect x="68.5714%" y="245" width="0.2857%" height="15" fill="rgb(245,175,0)" fg:x="480" fg:w="2"/><text x="68.8214%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::convert::From&lt;[(K,V) (1 samples, 0.14%)</title><rect x="68.8571%" y="213" width="0.1429%" height="15" fill="rgb(208,168,36)" fg:x="482" fg:w="1"/><text x="69.1071%" y="223.50"></text></g><g><title> N]&gt;&gt;::from (1 samples, 0.14%)</title><rect x="68.8571%" y="197" width="0.1429%" height="15" fill="rgb(246,171,24)" fg:x="482" fg:w="1"/><text x="69.1071%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (1 samples, 0.14%)</title><rect x="68.8571%" y="181" width="0.1429%" height="15" fill="rgb(215,142,24)" fg:x="482" fg:w="1"/><text x="69.1071%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.14%)</title><rect x="68.8571%" y="165" width="0.1429%" height="15" fill="rgb(250,187,7)" fg:x="482" fg:w="1"/><text x="69.1071%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.14%)</title><rect x="68.8571%" y="149" width="0.1429%" height="15" fill="rgb(228,66,33)" fg:x="482" fg:w="1"/><text x="69.1071%" y="159.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.14%)</title><rect x="68.8571%" y="133" width="0.1429%" height="15" fill="rgb(234,215,21)" fg:x="482" fg:w="1"/><text x="69.1071%" y="143.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="68.8571%" y="117" width="0.1429%" height="15" fill="rgb(222,191,20)" fg:x="482" fg:w="1"/><text x="69.1071%" y="127.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.14%)</title><rect x="69.0000%" y="213" width="0.1429%" height="15" fill="rgb(245,79,54)" fg:x="483" fg:w="1"/><text x="69.2500%" y="223.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (2 samples, 0.29%)</title><rect x="69.1429%" y="197" width="0.2857%" height="15" fill="rgb(240,10,37)" fg:x="484" fg:w="2"/><text x="69.3929%" y="207.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_raw (1 samples, 0.14%)</title><rect x="69.4286%" y="197" width="0.1429%" height="15" fill="rgb(214,192,32)" fg:x="486" fg:w="1"/><text x="69.6786%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.14%)</title><rect x="69.4286%" y="181" width="0.1429%" height="15" fill="rgb(209,36,54)" fg:x="486" fg:w="1"/><text x="69.6786%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.14%)</title><rect x="69.5714%" y="197" width="0.1429%" height="15" fill="rgb(220,10,11)" fg:x="487" fg:w="1"/><text x="69.8214%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (6 samples, 0.86%)</title><rect x="69.7143%" y="197" width="0.8571%" height="15" fill="rgb(221,106,17)" fg:x="488" fg:w="6"/><text x="69.9643%" y="207.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.29%)</title><rect x="70.8571%" y="181" width="0.2857%" height="15" fill="rgb(251,142,44)" fg:x="496" fg:w="2"/><text x="71.1071%" y="191.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.29%)</title><rect x="71.1429%" y="181" width="0.2857%" height="15" fill="rgb(238,13,15)" fg:x="498" fg:w="2"/><text x="71.3929%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.14%)</title><rect x="71.4286%" y="181" width="0.1429%" height="15" fill="rgb(208,107,27)" fg:x="500" fg:w="1"/><text x="71.6786%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::OccupiedEntry&lt;K,V&gt;::insert (1 samples, 0.14%)</title><rect x="71.5714%" y="181" width="0.1429%" height="15" fill="rgb(205,136,37)" fg:x="501" fg:w="1"/><text x="71.8214%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.29%)</title><rect x="71.7143%" y="181" width="0.2857%" height="15" fill="rgb(250,205,27)" fg:x="502" fg:w="2"/><text x="71.9643%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (2 samples, 0.29%)</title><rect x="71.7143%" y="165" width="0.2857%" height="15" fill="rgb(210,80,43)" fg:x="502" fg:w="2"/><text x="71.9643%" y="175.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (25 samples, 3.57%)</title><rect x="69.1429%" y="213" width="3.5714%" height="15" fill="rgb(247,160,36)" fg:x="484" fg:w="25"/><text x="69.3929%" y="223.50">mwpf..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (15 samples, 2.14%)</title><rect x="70.5714%" y="197" width="2.1429%" height="15" fill="rgb(234,13,49)" fg:x="494" fg:w="15"/><text x="70.8214%" y="207.50">m..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (5 samples, 0.71%)</title><rect x="72.0000%" y="181" width="0.7143%" height="15" fill="rgb(234,122,0)" fg:x="504" fg:w="5"/><text x="72.2500%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.29%)</title><rect x="72.4286%" y="165" width="0.2857%" height="15" fill="rgb(207,146,38)" fg:x="507" fg:w="2"/><text x="72.6786%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (2 samples, 0.29%)</title><rect x="75.5714%" y="181" width="0.2857%" height="15" fill="rgb(207,177,25)" fg:x="529" fg:w="2"/><text x="75.8214%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.29%)</title><rect x="75.5714%" y="165" width="0.2857%" height="15" fill="rgb(211,178,42)" fg:x="529" fg:w="2"/><text x="75.8214%" y="175.50"></text></g><g><title>mwpf`mwpf::matrix::hair::HairView&lt;M&gt;::new (24 samples, 3.43%)</title><rect x="72.7143%" y="213" width="3.4286%" height="15" fill="rgb(230,69,54)" fg:x="509" fg:w="24"/><text x="72.9643%" y="223.50">mwp..</text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (24 samples, 3.43%)</title><rect x="72.7143%" y="197" width="3.4286%" height="15" fill="rgb(214,135,41)" fg:x="509" fg:w="24"/><text x="72.9643%" y="207.50">mwp..</text></g><g><title>mwpf`mwpf::matrix::row::ParityRow::xor_two_rows (2 samples, 0.29%)</title><rect x="75.8571%" y="181" width="0.2857%" height="15" fill="rgb(237,67,25)" fg:x="531" fg:w="2"/><text x="76.1071%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.14%)</title><rect x="76.2857%" y="197" width="0.1429%" height="15" fill="rgb(222,189,50)" fg:x="534" fg:w="1"/><text x="76.5357%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.14%)</title><rect x="76.4286%" y="197" width="0.1429%" height="15" fill="rgb(245,148,34)" fg:x="535" fg:w="1"/><text x="76.6786%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.14%)</title><rect x="76.4286%" y="181" width="0.1429%" height="15" fill="rgb(222,29,6)" fg:x="535" fg:w="1"/><text x="76.6786%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.14%)</title><rect x="76.4286%" y="165" width="0.1429%" height="15" fill="rgb(221,189,43)" fg:x="535" fg:w="1"/><text x="76.6786%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.14%)</title><rect x="76.4286%" y="149" width="0.1429%" height="15" fill="rgb(207,36,27)" fg:x="535" fg:w="1"/><text x="76.6786%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.14%)</title><rect x="76.4286%" y="133" width="0.1429%" height="15" fill="rgb(217,90,24)" fg:x="535" fg:w="1"/><text x="76.6786%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.14%)</title><rect x="76.7143%" y="181" width="0.1429%" height="15" fill="rgb(224,66,35)" fg:x="537" fg:w="1"/><text x="76.9643%" y="191.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (2 samples, 0.29%)</title><rect x="76.8571%" y="181" width="0.2857%" height="15" fill="rgb(221,13,50)" fg:x="538" fg:w="2"/><text x="77.1071%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.29%)</title><rect x="76.8571%" y="165" width="0.2857%" height="15" fill="rgb(236,68,49)" fg:x="538" fg:w="2"/><text x="77.1071%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.14%)</title><rect x="77.0000%" y="149" width="0.1429%" height="15" fill="rgb(229,146,28)" fg:x="539" fg:w="1"/><text x="77.2500%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.14%)</title><rect x="77.0000%" y="133" width="0.1429%" height="15" fill="rgb(225,31,38)" fg:x="539" fg:w="1"/><text x="77.2500%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.14%)</title><rect x="77.0000%" y="117" width="0.1429%" height="15" fill="rgb(250,208,3)" fg:x="539" fg:w="1"/><text x="77.2500%" y="127.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.29%)</title><rect x="77.1429%" y="181" width="0.2857%" height="15" fill="rgb(246,54,23)" fg:x="540" fg:w="2"/><text x="77.3929%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (2 samples, 0.29%)</title><rect x="77.1429%" y="165" width="0.2857%" height="15" fill="rgb(243,76,11)" fg:x="540" fg:w="2"/><text x="77.3929%" y="175.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (14 samples, 2.00%)</title><rect x="76.1429%" y="213" width="2.0000%" height="15" fill="rgb(245,21,50)" fg:x="533" fg:w="14"/><text x="76.3929%" y="223.50">m..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (11 samples, 1.57%)</title><rect x="76.5714%" y="197" width="1.5714%" height="15" fill="rgb(228,9,43)" fg:x="536" fg:w="11"/><text x="76.8214%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (5 samples, 0.71%)</title><rect x="77.4286%" y="181" width="0.7143%" height="15" fill="rgb(208,100,47)" fg:x="542" fg:w="5"/><text x="77.6786%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (3 samples, 0.43%)</title><rect x="77.7143%" y="165" width="0.4286%" height="15" fill="rgb(232,26,8)" fg:x="544" fg:w="3"/><text x="77.9643%" y="175.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.29%)</title><rect x="78.2857%" y="181" width="0.2857%" height="15" fill="rgb(216,166,38)" fg:x="548" fg:w="2"/><text x="78.5357%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.14%)</title><rect x="78.5714%" y="181" width="0.1429%" height="15" fill="rgb(251,202,51)" fg:x="550" fg:w="1"/><text x="78.8214%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.14%)</title><rect x="78.7143%" y="181" width="0.1429%" height="15" fill="rgb(254,216,34)" fg:x="551" fg:w="1"/><text x="78.9643%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.14%)</title><rect x="78.7143%" y="165" width="0.1429%" height="15" fill="rgb(251,32,27)" fg:x="551" fg:w="1"/><text x="78.9643%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_single_hair::PluginSingleHair as mwpf::plugin::PluginImpl&gt;::find_relaxers (75 samples, 10.71%)</title><rect x="68.8571%" y="229" width="10.7143%" height="15" fill="rgb(208,127,28)" fg:x="482" fg:w="75"/><text x="69.1071%" y="239.50">mwpf`&lt;mwpf::plug..</text></g><g><title>mwpf`weak_table::ptr_weak_hash_set::_&lt;impl core::iter::traits::collect::FromIterator&lt;&lt;T as weak_table::traits::WeakElement&gt;::Strong&gt; for weak_table::PtrWeakHashSet&lt;T,S&gt;&gt;::from_iter (10 samples, 1.43%)</title><rect x="78.1429%" y="213" width="1.4286%" height="15" fill="rgb(224,137,22)" fg:x="547" fg:w="10"/><text x="78.3929%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (10 samples, 1.43%)</title><rect x="78.1429%" y="197" width="1.4286%" height="15" fill="rgb(254,70,32)" fg:x="547" fg:w="10"/><text x="78.3929%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (5 samples, 0.71%)</title><rect x="78.8571%" y="181" width="0.7143%" height="15" fill="rgb(229,75,37)" fg:x="552" fg:w="5"/><text x="79.1071%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (3 samples, 0.43%)</title><rect x="79.1429%" y="165" width="0.4286%" height="15" fill="rgb(252,64,23)" fg:x="554" fg:w="3"/><text x="79.3929%" y="175.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (1 samples, 0.14%)</title><rect x="79.5714%" y="197" width="0.1429%" height="15" fill="rgb(232,162,48)" fg:x="557" fg:w="1"/><text x="79.8214%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="79.5714%" y="181" width="0.1429%" height="15" fill="rgb(246,160,12)" fg:x="557" fg:w="1"/><text x="79.8214%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (3 samples, 0.43%)</title><rect x="79.5714%" y="229" width="0.4286%" height="15" fill="rgb(247,166,0)" fg:x="557" fg:w="3"/><text x="79.8214%" y="239.50"></text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (3 samples, 0.43%)</title><rect x="79.5714%" y="213" width="0.4286%" height="15" fill="rgb(249,219,21)" fg:x="557" fg:w="3"/><text x="79.8214%" y="223.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (2 samples, 0.29%)</title><rect x="79.7143%" y="197" width="0.2857%" height="15" fill="rgb(205,209,3)" fg:x="558" fg:w="2"/><text x="79.9643%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (3 samples, 0.43%)</title><rect x="80.0000%" y="197" width="0.4286%" height="15" fill="rgb(243,44,1)" fg:x="560" fg:w="3"/><text x="80.2500%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (3 samples, 0.43%)</title><rect x="80.0000%" y="181" width="0.4286%" height="15" fill="rgb(206,159,16)" fg:x="560" fg:w="3"/><text x="80.2500%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (2 samples, 0.29%)</title><rect x="80.1429%" y="165" width="0.2857%" height="15" fill="rgb(244,77,30)" fg:x="561" fg:w="2"/><text x="80.3929%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.29%)</title><rect x="80.1429%" y="149" width="0.2857%" height="15" fill="rgb(218,69,12)" fg:x="561" fg:w="2"/><text x="80.3929%" y="159.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (4 samples, 0.57%)</title><rect x="80.4286%" y="181" width="0.5714%" height="15" fill="rgb(212,87,7)" fg:x="563" fg:w="4"/><text x="80.6786%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (4 samples, 0.57%)</title><rect x="80.4286%" y="165" width="0.5714%" height="15" fill="rgb(245,114,25)" fg:x="563" fg:w="4"/><text x="80.6786%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (4 samples, 0.57%)</title><rect x="80.4286%" y="149" width="0.5714%" height="15" fill="rgb(210,61,42)" fg:x="563" fg:w="4"/><text x="80.6786%" y="159.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (4 samples, 0.57%)</title><rect x="80.4286%" y="133" width="0.5714%" height="15" fill="rgb(211,52,33)" fg:x="563" fg:w="4"/><text x="80.6786%" y="143.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.14%)</title><rect x="81.0000%" y="149" width="0.1429%" height="15" fill="rgb(234,58,33)" fg:x="567" fg:w="1"/><text x="81.2500%" y="159.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (7 samples, 1.00%)</title><rect x="80.4286%" y="197" width="1.0000%" height="15" fill="rgb(220,115,36)" fg:x="563" fg:w="7"/><text x="80.6786%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (3 samples, 0.43%)</title><rect x="81.0000%" y="181" width="0.4286%" height="15" fill="rgb(243,153,54)" fg:x="567" fg:w="3"/><text x="81.2500%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (3 samples, 0.43%)</title><rect x="81.0000%" y="165" width="0.4286%" height="15" fill="rgb(251,47,18)" fg:x="567" fg:w="3"/><text x="81.2500%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.29%)</title><rect x="81.1429%" y="149" width="0.2857%" height="15" fill="rgb(242,102,42)" fg:x="568" fg:w="2"/><text x="81.3929%" y="159.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.14%)</title><rect x="81.4286%" y="197" width="0.1429%" height="15" fill="rgb(234,31,38)" fg:x="570" fg:w="1"/><text x="81.6786%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 0.14%)</title><rect x="81.4286%" y="181" width="0.1429%" height="15" fill="rgb(221,117,51)" fg:x="570" fg:w="1"/><text x="81.6786%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.14%)</title><rect x="81.4286%" y="165" width="0.1429%" height="15" fill="rgb(212,20,18)" fg:x="570" fg:w="1"/><text x="81.6786%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.14%)</title><rect x="81.4286%" y="149" width="0.1429%" height="15" fill="rgb(245,133,36)" fg:x="570" fg:w="1"/><text x="81.6786%" y="159.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="81.4286%" y="133" width="0.1429%" height="15" fill="rgb(212,6,19)" fg:x="570" fg:w="1"/><text x="81.6786%" y="143.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (3 samples, 0.43%)</title><rect x="81.5714%" y="197" width="0.4286%" height="15" fill="rgb(218,1,36)" fg:x="571" fg:w="3"/><text x="81.8214%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.14%)</title><rect x="81.8571%" y="181" width="0.1429%" height="15" fill="rgb(246,84,54)" fg:x="573" fg:w="1"/><text x="82.1071%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (4 samples, 0.57%)</title><rect x="82.0000%" y="165" width="0.5714%" height="15" fill="rgb(242,110,6)" fg:x="574" fg:w="4"/><text x="82.2500%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (4 samples, 0.57%)</title><rect x="82.0000%" y="149" width="0.5714%" height="15" fill="rgb(214,47,5)" fg:x="574" fg:w="4"/><text x="82.2500%" y="159.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (4 samples, 0.57%)</title><rect x="82.0000%" y="133" width="0.5714%" height="15" fill="rgb(218,159,25)" fg:x="574" fg:w="4"/><text x="82.2500%" y="143.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (3 samples, 0.43%)</title><rect x="82.1429%" y="117" width="0.4286%" height="15" fill="rgb(215,211,28)" fg:x="575" fg:w="3"/><text x="82.3929%" y="127.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.14%)</title><rect x="82.7143%" y="133" width="0.1429%" height="15" fill="rgb(238,59,32)" fg:x="579" fg:w="1"/><text x="82.9643%" y="143.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (8 samples, 1.14%)</title><rect x="82.0000%" y="181" width="1.1429%" height="15" fill="rgb(226,82,3)" fg:x="574" fg:w="8"/><text x="82.2500%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (4 samples, 0.57%)</title><rect x="82.5714%" y="165" width="0.5714%" height="15" fill="rgb(240,164,32)" fg:x="578" fg:w="4"/><text x="82.8214%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (3 samples, 0.43%)</title><rect x="82.7143%" y="149" width="0.4286%" height="15" fill="rgb(232,46,7)" fg:x="579" fg:w="3"/><text x="82.9643%" y="159.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.29%)</title><rect x="82.8571%" y="133" width="0.2857%" height="15" fill="rgb(229,129,53)" fg:x="580" fg:w="2"/><text x="83.1071%" y="143.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.29%)</title><rect x="83.1429%" y="181" width="0.2857%" height="15" fill="rgb(234,188,29)" fg:x="582" fg:w="2"/><text x="83.3929%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (2 samples, 0.29%)</title><rect x="83.1429%" y="165" width="0.2857%" height="15" fill="rgb(246,141,4)" fg:x="582" fg:w="2"/><text x="83.3929%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (2 samples, 0.29%)</title><rect x="83.1429%" y="149" width="0.2857%" height="15" fill="rgb(229,23,39)" fg:x="582" fg:w="2"/><text x="83.3929%" y="159.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (2 samples, 0.29%)</title><rect x="83.1429%" y="133" width="0.2857%" height="15" fill="rgb(206,12,3)" fg:x="582" fg:w="2"/><text x="83.3929%" y="143.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (11 samples, 1.57%)</title><rect x="82.0000%" y="197" width="1.5714%" height="15" fill="rgb(252,226,20)" fg:x="574" fg:w="11"/><text x="82.2500%" y="207.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (1 samples, 0.14%)</title><rect x="83.4286%" y="181" width="0.1429%" height="15" fill="rgb(216,123,35)" fg:x="584" fg:w="1"/><text x="83.6786%" y="191.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (107 samples, 15.29%)</title><rect x="68.4286%" y="261" width="15.2857%" height="15" fill="rgb(212,68,40)" fg:x="479" fg:w="107"/><text x="68.6786%" y="271.50">mwpf`mwpf::plugin::Plug..</text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (104 samples, 14.86%)</title><rect x="68.8571%" y="245" width="14.8571%" height="15" fill="rgb(254,125,32)" fg:x="482" fg:w="104"/><text x="69.1071%" y="255.50">mwpf`mwpf::plugin::Plug..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (26 samples, 3.71%)</title><rect x="80.0000%" y="229" width="3.7143%" height="15" fill="rgb(253,97,22)" fg:x="560" fg:w="26"/><text x="80.2500%" y="239.50">mwpf..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (26 samples, 3.71%)</title><rect x="80.0000%" y="213" width="3.7143%" height="15" fill="rgb(241,101,14)" fg:x="560" fg:w="26"/><text x="80.2500%" y="223.50">mwpf..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="83.5714%" y="197" width="0.1429%" height="15" fill="rgb(238,103,29)" fg:x="585" fg:w="1"/><text x="83.8214%" y="207.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.14%)</title><rect x="83.7143%" y="229" width="0.1429%" height="15" fill="rgb(233,195,47)" fg:x="586" fg:w="1"/><text x="83.9643%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (2 samples, 0.29%)</title><rect x="83.8571%" y="229" width="0.2857%" height="15" fill="rgb(246,218,30)" fg:x="587" fg:w="2"/><text x="84.1071%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (2 samples, 0.29%)</title><rect x="83.8571%" y="213" width="0.2857%" height="15" fill="rgb(219,145,47)" fg:x="587" fg:w="2"/><text x="84.1071%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.29%)</title><rect x="83.8571%" y="197" width="0.2857%" height="15" fill="rgb(243,12,26)" fg:x="587" fg:w="2"/><text x="84.1071%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (4 samples, 0.57%)</title><rect x="83.7143%" y="245" width="0.5714%" height="15" fill="rgb(214,87,16)" fg:x="586" fg:w="4"/><text x="83.9643%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.14%)</title><rect x="84.1429%" y="229" width="0.1429%" height="15" fill="rgb(208,99,42)" fg:x="589" fg:w="1"/><text x="84.3929%" y="239.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (3 samples, 0.43%)</title><rect x="84.2857%" y="213" width="0.4286%" height="15" fill="rgb(253,99,2)" fg:x="590" fg:w="3"/><text x="84.5357%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="84.7143%" y="197" width="0.1429%" height="15" fill="rgb(220,168,23)" fg:x="593" fg:w="1"/><text x="84.9643%" y="207.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (2 samples, 0.29%)</title><rect x="85.0000%" y="181" width="0.2857%" height="15" fill="rgb(242,38,24)" fg:x="595" fg:w="2"/><text x="85.2500%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (9 samples, 1.29%)</title><rect x="84.2857%" y="245" width="1.2857%" height="15" fill="rgb(225,182,9)" fg:x="590" fg:w="9"/><text x="84.5357%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (9 samples, 1.29%)</title><rect x="84.2857%" y="229" width="1.2857%" height="15" fill="rgb(243,178,37)" fg:x="590" fg:w="9"/><text x="84.5357%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (6 samples, 0.86%)</title><rect x="84.7143%" y="213" width="0.8571%" height="15" fill="rgb(232,139,19)" fg:x="593" fg:w="6"/><text x="84.9643%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (5 samples, 0.71%)</title><rect x="84.8571%" y="197" width="0.7143%" height="15" fill="rgb(225,201,24)" fg:x="594" fg:w="5"/><text x="85.1071%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.29%)</title><rect x="85.2857%" y="181" width="0.2857%" height="15" fill="rgb(221,47,46)" fg:x="597" fg:w="2"/><text x="85.5357%" y="191.50"></text></g><g><title>mwpf`highs::Model::add_col (1 samples, 0.14%)</title><rect x="85.5714%" y="245" width="0.1429%" height="15" fill="rgb(249,23,13)" fg:x="599" fg:w="1"/><text x="85.8214%" y="255.50"></text></g><g><title>mwpf`Highs::addCol (1 samples, 0.14%)</title><rect x="85.5714%" y="229" width="0.1429%" height="15" fill="rgb(219,9,5)" fg:x="599" fg:w="1"/><text x="85.8214%" y="239.50"></text></g><g><title>mwpf`Highs::addCols (1 samples, 0.14%)</title><rect x="85.5714%" y="213" width="0.1429%" height="15" fill="rgb(254,171,16)" fg:x="599" fg:w="1"/><text x="85.8214%" y="223.50"></text></g><g><title>mwpf`Highs::addColsInterface (1 samples, 0.14%)</title><rect x="85.5714%" y="197" width="0.1429%" height="15" fill="rgb(230,171,20)" fg:x="599" fg:w="1"/><text x="85.8214%" y="207.50"></text></g><g><title>mwpf`HEkk::addCols (1 samples, 0.14%)</title><rect x="85.5714%" y="181" width="0.1429%" height="15" fill="rgb(210,71,41)" fg:x="599" fg:w="1"/><text x="85.8214%" y="191.50"></text></g><g><title>mwpf`HEkk::clear (1 samples, 0.14%)</title><rect x="85.5714%" y="165" width="0.1429%" height="15" fill="rgb(206,173,20)" fg:x="599" fg:w="1"/><text x="85.8214%" y="175.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$strlen (1 samples, 0.14%)</title><rect x="85.5714%" y="149" width="0.1429%" height="15" fill="rgb(233,88,34)" fg:x="599" fg:w="1"/><text x="85.8214%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.14%)</title><rect x="85.7143%" y="197" width="0.1429%" height="15" fill="rgb(223,209,46)" fg:x="600" fg:w="1"/><text x="85.9643%" y="207.50"></text></g><g><title>mwpf`highs::Model::add_row (2 samples, 0.29%)</title><rect x="85.7143%" y="245" width="0.2857%" height="15" fill="rgb(250,43,18)" fg:x="600" fg:w="2"/><text x="85.9643%" y="255.50"></text></g><g><title>mwpf`Highs::addRow (2 samples, 0.29%)</title><rect x="85.7143%" y="229" width="0.2857%" height="15" fill="rgb(208,13,10)" fg:x="600" fg:w="2"/><text x="85.9643%" y="239.50"></text></g><g><title>mwpf`Highs::addRows (2 samples, 0.29%)</title><rect x="85.7143%" y="213" width="0.2857%" height="15" fill="rgb(212,200,36)" fg:x="600" fg:w="2"/><text x="85.9643%" y="223.50"></text></g><g><title>mwpf`Highs::addRowsInterface (1 samples, 0.14%)</title><rect x="85.8571%" y="197" width="0.1429%" height="15" fill="rgb(225,90,30)" fg:x="601" fg:w="1"/><text x="86.1071%" y="207.50"></text></g><g><title>mwpf`HighsSparseMatrix::assess(HighsLogOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.14%)</title><rect x="85.8571%" y="181" width="0.1429%" height="15" fill="rgb(236,182,39)" fg:x="601" fg:w="1"/><text x="86.1071%" y="191.50"></text></g><g><title>mwpf`assessMatrix(HighsLogOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, int, int, bool, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;double, std::__1::allocator (1 samples, 0.14%)</title><rect x="85.8571%" y="165" width="0.1429%" height="15" fill="rgb(212,144,35)" fg:x="601" fg:w="1"/><text x="86.1071%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.14%)</title><rect x="86.0000%" y="101" width="0.1429%" height="15" fill="rgb(228,63,44)" fg:x="602" fg:w="1"/><text x="86.2500%" y="111.50"></text></g><g><title>mwpf`HEkk::initialiseForSolve (2 samples, 0.29%)</title><rect x="86.0000%" y="149" width="0.2857%" height="15" fill="rgb(228,109,6)" fg:x="602" fg:w="2"/><text x="86.2500%" y="159.50"></text></g><g><title>mwpf`HEkk::initialiseSimplexLpBasisAndFactor (2 samples, 0.29%)</title><rect x="86.0000%" y="133" width="0.2857%" height="15" fill="rgb(238,117,24)" fg:x="602" fg:w="2"/><text x="86.2500%" y="143.50"></text></g><g><title>mwpf`HSimplexNla::setup (2 samples, 0.29%)</title><rect x="86.0000%" y="117" width="0.2857%" height="15" fill="rgb(242,26,26)" fg:x="602" fg:w="2"/><text x="86.2500%" y="127.50"></text></g><g><title>mwpf`HFactor::setupGeneral (1 samples, 0.14%)</title><rect x="86.1429%" y="101" width="0.1429%" height="15" fill="rgb(221,92,48)" fg:x="603" fg:w="1"/><text x="86.3929%" y="111.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.14%)</title><rect x="86.1429%" y="85" width="0.1429%" height="15" fill="rgb(209,209,32)" fg:x="603" fg:w="1"/><text x="86.3929%" y="95.50"></text></g><g><title>mwpf`HEkkDual::solve (1 samples, 0.14%)</title><rect x="86.2857%" y="149" width="0.1429%" height="15" fill="rgb(221,70,22)" fg:x="604" fg:w="1"/><text x="86.5357%" y="159.50"></text></g><g><title>mwpf`HEkkDual::solvePhase2 (1 samples, 0.14%)</title><rect x="86.2857%" y="133" width="0.1429%" height="15" fill="rgb(248,145,5)" fg:x="604" fg:w="1"/><text x="86.5357%" y="143.50"></text></g><g><title>mwpf`HEkkDual::iterate (1 samples, 0.14%)</title><rect x="86.2857%" y="117" width="0.1429%" height="15" fill="rgb(226,116,26)" fg:x="604" fg:w="1"/><text x="86.5357%" y="127.50"></text></g><g><title>mwpf`HEkkDual::updateFtranDSE(HVectorBase (1 samples, 0.14%)</title><rect x="86.2857%" y="101" width="0.1429%" height="15" fill="rgb(244,5,17)" fg:x="604" fg:w="1"/><text x="86.5357%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::ftranInScaledSpace(HVectorBase (1 samples, 0.14%)</title><rect x="86.2857%" y="85" width="0.1429%" height="15" fill="rgb(252,159,33)" fg:x="604" fg:w="1"/><text x="86.5357%" y="95.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (1 samples, 0.14%)</title><rect x="86.2857%" y="69" width="0.1429%" height="15" fill="rgb(206,71,0)" fg:x="604" fg:w="1"/><text x="86.5357%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranFT(HVectorBase (1 samples, 0.14%)</title><rect x="86.2857%" y="53" width="0.1429%" height="15" fill="rgb(233,118,54)" fg:x="604" fg:w="1"/><text x="86.5357%" y="63.50"></text></g><g><title>mwpf`HEkk::solve (4 samples, 0.57%)</title><rect x="86.0000%" y="165" width="0.5714%" height="15" fill="rgb(234,83,48)" fg:x="602" fg:w="4"/><text x="86.2500%" y="175.50"></text></g><g><title>mwpf`HEkkDual::~HEkkDual (1 samples, 0.14%)</title><rect x="86.4286%" y="149" width="0.1429%" height="15" fill="rgb(228,3,54)" fg:x="605" fg:w="1"/><text x="86.6786%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.14%)</title><rect x="86.4286%" y="133" width="0.1429%" height="15" fill="rgb(226,155,13)" fg:x="605" fg:w="1"/><text x="86.6786%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.14%)</title><rect x="86.4286%" y="117" width="0.1429%" height="15" fill="rgb(241,28,37)" fg:x="605" fg:w="1"/><text x="86.6786%" y="127.50"></text></g><g><title>mwpf`Highs::callSolveLp(HighsLp&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.71%)</title><rect x="86.0000%" y="213" width="0.7143%" height="15" fill="rgb(233,93,10)" fg:x="602" fg:w="5"/><text x="86.2500%" y="223.50"></text></g><g><title>mwpf`solveLp(HighsLpSolverObject&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (5 samples, 0.71%)</title><rect x="86.0000%" y="197" width="0.7143%" height="15" fill="rgb(225,113,19)" fg:x="602" fg:w="5"/><text x="86.2500%" y="207.50"></text></g><g><title>mwpf`solveLpSimplex(HighsLpSolverObject&amp;) (5 samples, 0.71%)</title><rect x="86.0000%" y="181" width="0.7143%" height="15" fill="rgb(241,2,18)" fg:x="602" fg:w="5"/><text x="86.2500%" y="191.50"></text></g><g><title>mwpf`considerScaling(HighsOptions const&amp;, HighsLp&amp;) (1 samples, 0.14%)</title><rect x="86.5714%" y="165" width="0.1429%" height="15" fill="rgb(228,207,21)" fg:x="606" fg:w="1"/><text x="86.8214%" y="175.50"></text></g><g><title>mwpf`HighsSparseMatrix::range (1 samples, 0.14%)</title><rect x="86.5714%" y="149" width="0.1429%" height="15" fill="rgb(213,211,35)" fg:x="606" fg:w="1"/><text x="86.8214%" y="159.50"></text></g><g><title>mwpf`HighsHashHelpers::sparse_combine (2 samples, 0.29%)</title><rect x="86.7143%" y="149" width="0.2857%" height="15" fill="rgb(209,83,10)" fg:x="607" fg:w="2"/><text x="86.9643%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="87.2857%" y="133" width="0.1429%" height="15" fill="rgb(209,164,1)" fg:x="611" fg:w="1"/><text x="87.5357%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::run (6 samples, 0.86%)</title><rect x="86.7143%" y="181" width="0.8571%" height="15" fill="rgb(213,184,43)" fg:x="607" fg:w="6"/><text x="86.9643%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::presolve (6 samples, 0.86%)</title><rect x="86.7143%" y="165" width="0.8571%" height="15" fill="rgb(231,61,34)" fg:x="607" fg:w="6"/><text x="86.9643%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::detectParallelRowsAndCols (4 samples, 0.57%)</title><rect x="87.0000%" y="149" width="0.5714%" height="15" fill="rgb(235,75,3)" fg:x="609" fg:w="4"/><text x="87.2500%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (1 samples, 0.14%)</title><rect x="87.4286%" y="133" width="0.1429%" height="15" fill="rgb(220,106,47)" fg:x="612" fg:w="1"/><text x="87.6786%" y="143.50"></text></g><g><title>mwpf`highs::Model::solve (12 samples, 1.71%)</title><rect x="86.0000%" y="245" width="1.7143%" height="15" fill="rgb(210,196,33)" fg:x="602" fg:w="12"/><text x="86.2500%" y="255.50"></text></g><g><title>mwpf`Highs::run (12 samples, 1.71%)</title><rect x="86.0000%" y="229" width="1.7143%" height="15" fill="rgb(229,154,42)" fg:x="602" fg:w="12"/><text x="86.2500%" y="239.50"></text></g><g><title>mwpf`Highs::runPresolve (7 samples, 1.00%)</title><rect x="86.7143%" y="213" width="1.0000%" height="15" fill="rgb(228,114,26)" fg:x="607" fg:w="7"/><text x="86.9643%" y="223.50"></text></g><g><title>mwpf`PresolveComponent::run (7 samples, 1.00%)</title><rect x="86.7143%" y="197" width="1.0000%" height="15" fill="rgb(208,144,1)" fg:x="607" fg:w="7"/><text x="86.9643%" y="207.50"></text></g><g><title>mwpf`presolve::HPresolve::setInput (1 samples, 0.14%)</title><rect x="87.5714%" y="181" width="0.1429%" height="15" fill="rgb(239,112,37)" fg:x="613" fg:w="1"/><text x="87.8214%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::fromCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (1 samples, 0.14%)</title><rect x="87.5714%" y="165" width="0.1429%" height="15" fill="rgb(210,96,50)" fg:x="613" fg:w="1"/><text x="87.8214%" y="175.50"></text></g><g><title>mwpf`HighsLinearSumBounds::add (1 samples, 0.14%)</title><rect x="87.5714%" y="149" width="0.1429%" height="15" fill="rgb(222,178,2)" fg:x="613" fg:w="1"/><text x="87.8214%" y="159.50"></text></g><g><title>mwpf`highs::Problem&lt;MATRIX&gt;::try_optimise (1 samples, 0.14%)</title><rect x="87.7143%" y="245" width="0.1429%" height="15" fill="rgb(226,74,18)" fg:x="614" fg:w="1"/><text x="87.9643%" y="255.50"></text></g><g><title>mwpf`Highs_create (1 samples, 0.14%)</title><rect x="87.7143%" y="229" width="0.1429%" height="15" fill="rgb(225,67,54)" fg:x="614" fg:w="1"/><text x="87.9643%" y="239.50"></text></g><g><title>mwpf`Highs::Highs (1 samples, 0.14%)</title><rect x="87.7143%" y="213" width="0.1429%" height="15" fill="rgb(251,92,32)" fg:x="614" fg:w="1"/><text x="87.9643%" y="223.50"></text></g><g><title>mwpf`HighsOptions::initRecords (1 samples, 0.14%)</title><rect x="87.7143%" y="197" width="0.1429%" height="15" fill="rgb(228,149,22)" fg:x="614" fg:w="1"/><text x="87.9643%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.14%)</title><rect x="87.7143%" y="181" width="0.1429%" height="15" fill="rgb(243,54,13)" fg:x="614" fg:w="1"/><text x="87.9643%" y="191.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (2 samples, 0.29%)</title><rect x="87.8571%" y="245" width="0.2857%" height="15" fill="rgb(243,180,28)" fg:x="615" fg:w="2"/><text x="88.1071%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.14%)</title><rect x="88.0000%" y="229" width="0.1429%" height="15" fill="rgb(208,167,24)" fg:x="616" fg:w="1"/><text x="88.2500%" y="239.50"></text></g><g><title>mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize (32 samples, 4.57%)</title><rect x="83.7143%" y="261" width="4.5714%" height="15" fill="rgb(245,73,45)" fg:x="586" fg:w="32"/><text x="83.9643%" y="271.50">mwpf`..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="88.1429%" y="245" width="0.1429%" height="15" fill="rgb(237,203,48)" fg:x="617" fg:w="1"/><text x="88.3929%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune (148 samples, 21.14%)</title><rect x="68.1429%" y="277" width="21.1429%" height="15" fill="rgb(211,197,16)" fg:x="477" fg:w="148"/><text x="68.3929%" y="287.50">mwpf`&lt;mwpf::primal_module_serial:..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::iter::traits::collect::FromIterator&lt;(&lt;K as weak_table::traits::WeakElement&gt;::Strong,V)&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::from_iter (7 samples, 1.00%)</title><rect x="88.2857%" y="261" width="1.0000%" height="15" fill="rgb(243,99,51)" fg:x="618" fg:w="7"/><text x="88.5357%" y="271.50"></text></g><g><title>mwpf`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 1.00%)</title><rect x="88.2857%" y="245" width="1.0000%" height="15" fill="rgb(215,123,29)" fg:x="618" fg:w="7"/><text x="88.5357%" y="255.50"></text></g><g><title>mwpf`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (7 samples, 1.00%)</title><rect x="88.2857%" y="229" width="1.0000%" height="15" fill="rgb(239,186,37)" fg:x="618" fg:w="7"/><text x="88.5357%" y="239.50"></text></g><g><title>mwpf`mwpf::dual_module::DualModuleImpl::get_conflicts_tune (1 samples, 0.14%)</title><rect x="89.2857%" y="277" width="0.1429%" height="15" fill="rgb(252,136,39)" fg:x="625" fg:w="1"/><text x="89.5357%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.14%)</title><rect x="89.5714%" y="245" width="0.1429%" height="15" fill="rgb(223,213,32)" fg:x="627" fg:w="1"/><text x="89.8214%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="89.5714%" y="229" width="0.1429%" height="15" fill="rgb(233,115,5)" fg:x="627" fg:w="1"/><text x="89.8214%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (2 samples, 0.29%)</title><rect x="89.5714%" y="261" width="0.2857%" height="15" fill="rgb(207,226,44)" fg:x="627" fg:w="2"/><text x="89.8214%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.14%)</title><rect x="89.7143%" y="245" width="0.1429%" height="15" fill="rgb(208,126,0)" fg:x="628" fg:w="1"/><text x="89.9643%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.14%)</title><rect x="89.7143%" y="229" width="0.1429%" height="15" fill="rgb(244,66,21)" fg:x="628" fg:w="1"/><text x="89.9643%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.14%)</title><rect x="89.7143%" y="213" width="0.1429%" height="15" fill="rgb(222,97,12)" fg:x="628" fg:w="1"/><text x="89.9643%" y="223.50"></text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::union (4 samples, 0.57%)</title><rect x="89.4286%" y="277" width="0.5714%" height="15" fill="rgb(219,213,19)" fg:x="626" fg:w="4"/><text x="89.6786%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.14%)</title><rect x="89.8571%" y="261" width="0.1429%" height="15" fill="rgb(252,169,30)" fg:x="629" fg:w="1"/><text x="90.1071%" y="271.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (1 samples, 0.14%)</title><rect x="89.8571%" y="245" width="0.1429%" height="15" fill="rgb(206,32,51)" fg:x="629" fg:w="1"/><text x="90.1071%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_tune (154 samples, 22.00%)</title><rect x="68.1429%" y="293" width="22.0000%" height="15" fill="rgb(250,172,42)" fg:x="477" fg:w="154"/><text x="68.3929%" y="303.50">mwpf`&lt;mwpf::primal_module_serial::P..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.14%)</title><rect x="90.0000%" y="277" width="0.1429%" height="15" fill="rgb(209,34,43)" fg:x="630" fg:w="1"/><text x="90.2500%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.14%)</title><rect x="90.0000%" y="261" width="0.1429%" height="15" fill="rgb(223,11,35)" fg:x="630" fg:w="1"/><text x="90.2500%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.14%)</title><rect x="90.0000%" y="245" width="0.1429%" height="15" fill="rgb(251,219,26)" fg:x="630" fg:w="1"/><text x="90.2500%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::calculate_cluster_affinity (3 samples, 0.43%)</title><rect x="90.2857%" y="277" width="0.4286%" height="15" fill="rgb(231,119,3)" fg:x="632" fg:w="3"/><text x="90.5357%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::update_sorted_clusters_aff (6 samples, 0.86%)</title><rect x="90.1429%" y="293" width="0.8571%" height="15" fill="rgb(216,97,11)" fg:x="631" fg:w="6"/><text x="90.3929%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (2 samples, 0.29%)</title><rect x="90.7143%" y="277" width="0.2857%" height="15" fill="rgb(223,59,9)" fg:x="635" fg:w="2"/><text x="90.9643%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.14%)</title><rect x="90.8571%" y="261" width="0.1429%" height="15" fill="rgb(233,93,31)" fg:x="636" fg:w="1"/><text x="91.1071%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::Obstacle as core::hash::Hash&gt;::hash (1 samples, 0.14%)</title><rect x="91.2857%" y="229" width="0.1429%" height="15" fill="rgb(239,81,33)" fg:x="639" fg:w="1"/><text x="91.5357%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node (20 samples, 2.86%)</title><rect x="91.1429%" y="277" width="2.8571%" height="15" fill="rgb(213,120,34)" fg:x="638" fg:w="20"/><text x="91.3929%" y="287.50">mw..</text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (19 samples, 2.71%)</title><rect x="91.2857%" y="261" width="2.7143%" height="15" fill="rgb(243,49,53)" fg:x="639" fg:w="19"/><text x="91.5357%" y="271.50">mw..</text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (19 samples, 2.71%)</title><rect x="91.2857%" y="245" width="2.7143%" height="15" fill="rgb(247,216,33)" fg:x="639" fg:w="19"/><text x="91.5357%" y="255.50">mw..</text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (18 samples, 2.57%)</title><rect x="91.4286%" y="229" width="2.5714%" height="15" fill="rgb(226,26,14)" fg:x="640" fg:w="18"/><text x="91.6786%" y="239.50">mw..</text></g><g><title>mwpf`&lt;alloc::sync::Arc&lt;T,A&gt; as core::hash::Hash&gt;::hash (1 samples, 0.14%)</title><rect x="94.5714%" y="261" width="0.1429%" height="15" fill="rgb(215,49,53)" fg:x="662" fg:w="1"/><text x="94.8214%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="95.5714%" y="245" width="0.1429%" height="15" fill="rgb(245,162,40)" fg:x="669" fg:w="1"/><text x="95.8214%" y="255.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (3 samples, 0.43%)</title><rect x="95.7143%" y="229" width="0.4286%" height="15" fill="rgb(229,68,17)" fg:x="670" fg:w="3"/><text x="95.9643%" y="239.50"></text></g><g><title>mwpf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (23 samples, 3.29%)</title><rect x="94.0000%" y="277" width="3.2857%" height="15" fill="rgb(213,182,10)" fg:x="658" fg:w="23"/><text x="94.2500%" y="287.50">mwp..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (18 samples, 2.57%)</title><rect x="94.7143%" y="261" width="2.5714%" height="15" fill="rgb(245,125,30)" fg:x="663" fg:w="18"/><text x="94.9643%" y="271.50">mw..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (11 samples, 1.57%)</title><rect x="95.7143%" y="245" width="1.5714%" height="15" fill="rgb(232,202,2)" fg:x="670" fg:w="11"/><text x="95.9643%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (8 samples, 1.14%)</title><rect x="96.1429%" y="229" width="1.1429%" height="15" fill="rgb(237,140,51)" fg:x="673" fg:w="8"/><text x="96.3929%" y="239.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_raw (2 samples, 0.29%)</title><rect x="97.7143%" y="261" width="0.2857%" height="15" fill="rgb(236,157,25)" fg:x="684" fg:w="2"/><text x="97.9643%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.29%)</title><rect x="97.7143%" y="245" width="0.2857%" height="15" fill="rgb(219,209,0)" fg:x="684" fg:w="2"/><text x="97.9643%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.14%)</title><rect x="98.0000%" y="261" width="0.1429%" height="15" fill="rgb(240,116,54)" fg:x="686" fg:w="1"/><text x="98.2500%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::mwpf_solver::SolverSerialPlugins as mwpf::mwpf_solver::PrimalDualSolver&gt;::solve_visualizer (664 samples, 94.86%)</title><rect x="3.4286%" y="325" width="94.8571%" height="15" fill="rgb(216,10,36)" fg:x="24" fg:w="664"/><text x="3.6786%" y="335.50">mwpf`&lt;mwpf::mwpf_solver::SolverSerialPlugins as mwpf::mwpf_solver::PrimalDualSolver&gt;::solve_visualizer</text></g><g><title>mwpf`mwpf::primal_module::PrimalModuleImpl::solve_visualizer (664 samples, 94.86%)</title><rect x="3.4286%" y="309" width="94.8571%" height="15" fill="rgb(222,72,44)" fg:x="24" fg:w="664"/><text x="3.6786%" y="319.50">mwpf`mwpf::primal_module::PrimalModuleImpl::solve_visualizer</text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::load (51 samples, 7.29%)</title><rect x="91.0000%" y="293" width="7.2857%" height="15" fill="rgb(232,159,9)" fg:x="637" fg:w="51"/><text x="91.2500%" y="303.50">mwpf`mwpf:..</text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (7 samples, 1.00%)</title><rect x="97.2857%" y="277" width="1.0000%" height="15" fill="rgb(210,39,32)" fg:x="681" fg:w="7"/><text x="97.5357%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.14%)</title><rect x="98.1429%" y="261" width="0.1429%" height="15" fill="rgb(216,194,45)" fg:x="687" fg:w="1"/><text x="98.3929%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.14%)</title><rect x="98.1429%" y="245" width="0.1429%" height="15" fill="rgb(218,18,35)" fg:x="687" fg:w="1"/><text x="98.3929%" y="255.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn mwpf::mwpf_solver::PrimalDualSolver&gt;&gt; (1 samples, 0.14%)</title><rect x="98.2857%" y="325" width="0.1429%" height="15" fill="rgb(207,83,51)" fg:x="688" fg:w="1"/><text x="98.5357%" y="335.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::mwpf_solver::SolverSerialPlugins&gt; (1 samples, 0.14%)</title><rect x="98.2857%" y="309" width="0.1429%" height="15" fill="rgb(225,63,43)" fg:x="688" fg:w="1"/><text x="98.5357%" y="319.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::primal_module_serial::PrimalModuleSerial&gt; (1 samples, 0.14%)</title><rect x="98.2857%" y="293" width="0.1429%" height="15" fill="rgb(207,57,36)" fg:x="688" fg:w="1"/><text x="98.5357%" y="303.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.14%)</title><rect x="98.2857%" y="277" width="0.1429%" height="15" fill="rgb(216,99,33)" fg:x="688" fg:w="1"/><text x="98.5357%" y="287.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::matrix::echelon::Echelon&lt;mwpf::matrix::tail::Tail&lt;mwpf::matrix::tight::Tight&lt;mwpf::matrix::basic::BasicMatrix&gt;&gt;&gt;&gt; (1 samples, 0.14%)</title><rect x="98.2857%" y="261" width="0.1429%" height="15" fill="rgb(225,42,16)" fg:x="688" fg:w="1"/><text x="98.5357%" y="271.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::matrix::tight::Tight&lt;mwpf::matrix::basic::BasicMatrix&gt;&gt; (1 samples, 0.14%)</title><rect x="98.2857%" y="245" width="0.1429%" height="15" fill="rgb(220,201,45)" fg:x="688" fg:w="1"/><text x="98.5357%" y="255.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::matrix::basic::BasicMatrix&gt; (1 samples, 0.14%)</title><rect x="98.2857%" y="229" width="0.1429%" height="15" fill="rgb(225,33,4)" fg:x="688" fg:w="1"/><text x="98.5357%" y="239.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.43%)</title><rect x="98.4286%" y="293" width="0.4286%" height="15" fill="rgb(224,33,50)" fg:x="689" fg:w="3"/><text x="98.6786%" y="303.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::invalid_subgraph::InvalidSubgraph&gt; (3 samples, 0.43%)</title><rect x="98.4286%" y="277" width="0.4286%" height="15" fill="rgb(246,198,51)" fg:x="689" fg:w="3"/><text x="98.6786%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.29%)</title><rect x="98.5714%" y="261" width="0.2857%" height="15" fill="rgb(205,22,4)" fg:x="690" fg:w="2"/><text x="98.8214%" y="271.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::clear (4 samples, 0.57%)</title><rect x="98.4286%" y="325" width="0.5714%" height="15" fill="rgb(206,3,8)" fg:x="689" fg:w="4"/><text x="98.6786%" y="335.50"></text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::clear (4 samples, 0.57%)</title><rect x="98.4286%" y="309" width="0.5714%" height="15" fill="rgb(251,23,15)" fg:x="689" fg:w="4"/><text x="98.6786%" y="319.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::invalid_subgraph::InvalidSubgraph&gt; (1 samples, 0.14%)</title><rect x="98.8571%" y="293" width="0.1429%" height="15" fill="rgb(252,88,28)" fg:x="692" fg:w="1"/><text x="99.1071%" y="303.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.14%)</title><rect x="99.2857%" y="309" width="0.1429%" height="15" fill="rgb(212,127,14)" fg:x="695" fg:w="1"/><text x="99.5357%" y="319.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.14%)</title><rect x="99.2857%" y="293" width="0.1429%" height="15" fill="rgb(247,145,37)" fg:x="695" fg:w="1"/><text x="99.5357%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.14%)</title><rect x="99.2857%" y="277" width="0.1429%" height="15" fill="rgb(209,117,53)" fg:x="695" fg:w="1"/><text x="99.5357%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.14%)</title><rect x="99.2857%" y="261" width="0.1429%" height="15" fill="rgb(212,90,42)" fg:x="695" fg:w="1"/><text x="99.5357%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.14%)</title><rect x="99.2857%" y="245" width="0.1429%" height="15" fill="rgb(218,164,37)" fg:x="695" fg:w="1"/><text x="99.5357%" y="255.50"></text></g><g><title>mwpf`mwpf::example_codes::ExampleCode::generate_random_errors (4 samples, 0.57%)</title><rect x="99.0000%" y="325" width="0.5714%" height="15" fill="rgb(246,65,34)" fg:x="693" fg:w="4"/><text x="99.2500%" y="335.50"></text></g><g><title>mwpf`mwpf::example_codes::ExampleCode::get_syndrome (1 samples, 0.14%)</title><rect x="99.4286%" y="309" width="0.1429%" height="15" fill="rgb(231,100,33)" fg:x="696" fg:w="1"/><text x="99.6786%" y="319.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.14%)</title><rect x="99.4286%" y="293" width="0.1429%" height="15" fill="rgb(228,126,14)" fg:x="696" fg:w="1"/><text x="99.6786%" y="303.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.14%)</title><rect x="99.4286%" y="277" width="0.1429%" height="15" fill="rgb(215,173,21)" fg:x="696" fg:w="1"/><text x="99.6786%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.14%)</title><rect x="99.4286%" y="261" width="0.1429%" height="15" fill="rgb(210,6,40)" fg:x="696" fg:w="1"/><text x="99.6786%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.14%)</title><rect x="99.4286%" y="245" width="0.1429%" height="15" fill="rgb(212,48,18)" fg:x="696" fg:w="1"/><text x="99.6786%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.14%)</title><rect x="99.4286%" y="229" width="0.1429%" height="15" fill="rgb(230,214,11)" fg:x="696" fg:w="1"/><text x="99.6786%" y="239.50"></text></g><g><title>mwpf`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_all (1 samples, 0.14%)</title><rect x="99.5714%" y="309" width="0.1429%" height="15" fill="rgb(254,105,39)" fg:x="697" fg:w="1"/><text x="99.8214%" y="319.50"></text></g><g><title>mwpf`&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_all (1 samples, 0.14%)</title><rect x="99.5714%" y="293" width="0.1429%" height="15" fill="rgb(245,158,5)" fg:x="697" fg:w="1"/><text x="99.8214%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.14%)</title><rect x="99.5714%" y="277" width="0.1429%" height="15" fill="rgb(249,208,11)" fg:x="697" fg:w="1"/><text x="99.8214%" y="287.50"></text></g><g><title>mwpf`alloc::fmt::format::format_inner (1 samples, 0.14%)</title><rect x="99.7143%" y="309" width="0.1429%" height="15" fill="rgb(210,39,28)" fg:x="698" fg:w="1"/><text x="99.9643%" y="319.50"></text></g><g><title>mwpf`core::fmt::write (1 samples, 0.14%)</title><rect x="99.7143%" y="293" width="0.1429%" height="15" fill="rgb(211,56,53)" fg:x="698" fg:w="1"/><text x="99.9643%" y="303.50"></text></g><g><title>mwpf`core::fmt::float::float_to_decimal_common_shortest (1 samples, 0.14%)</title><rect x="99.7143%" y="277" width="0.1429%" height="15" fill="rgb(226,201,30)" fg:x="698" fg:w="1"/><text x="99.9643%" y="287.50"></text></g><g><title>mwpf`core::fmt::Formatter::write_formatted_parts (1 samples, 0.14%)</title><rect x="99.7143%" y="261" width="0.1429%" height="15" fill="rgb(239,101,34)" fg:x="698" fg:w="1"/><text x="99.9643%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.14%)</title><rect x="99.7143%" y="245" width="0.1429%" height="15" fill="rgb(226,209,5)" fg:x="698" fg:w="1"/><text x="99.9643%" y="255.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.14%)</title><rect x="99.7143%" y="229" width="0.1429%" height="15" fill="rgb(250,105,47)" fg:x="698" fg:w="1"/><text x="99.9643%" y="239.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.14%)</title><rect x="99.7143%" y="213" width="0.1429%" height="15" fill="rgb(230,72,3)" fg:x="698" fg:w="1"/><text x="99.9643%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.14%)</title><rect x="99.7143%" y="197" width="0.1429%" height="15" fill="rgb(232,218,39)" fg:x="698" fg:w="1"/><text x="99.9643%" y="207.50"></text></g><g><title>all (700 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(248,166,6)" fg:x="0" fg:w="700"/><text x="0.2500%" y="479.50"></text></g><g><title>dyld`start (700 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(247,89,20)" fg:x="0" fg:w="700"/><text x="0.2500%" y="463.50">dyld`start</text></g><g><title>mwpf`main (700 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(248,130,54)" fg:x="0" fg:w="700"/><text x="0.2500%" y="447.50">mwpf`main</text></g><g><title>mwpf`std::rt::lang_start (700 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(234,196,4)" fg:x="0" fg:w="700"/><text x="0.2500%" y="431.50">mwpf`std::rt::lang_start</text></g><g><title>mwpf`std::rt::lang_start_internal (700 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(250,143,31)" fg:x="0" fg:w="700"/><text x="0.2500%" y="415.50">mwpf`std::rt::lang_start_internal</text></g><g><title>mwpf`std::rt::lang_start::_{{closure}} (700 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(211,110,34)" fg:x="0" fg:w="700"/><text x="0.2500%" y="399.50">mwpf`std::rt::lang_start::_{{closure}}</text></g><g><title>mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace (700 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(215,124,48)" fg:x="0" fg:w="700"/><text x="0.2500%" y="383.50">mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mwpf`mwpf::main (700 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(216,46,13)" fg:x="0" fg:w="700"/><text x="0.2500%" y="367.50">mwpf`mwpf::main</text></g><g><title>mwpf`mwpf::cli::Cli::run (699 samples, 99.86%)</title><rect x="0.1429%" y="341" width="99.8571%" height="15" fill="rgb(205,184,25)" fg:x="1" fg:w="699"/><text x="0.3929%" y="351.50">mwpf`mwpf::cli::Cli::run</text></g><g><title>mwpf`pbr::pb::ProgressBar&lt;T&gt;::draw (3 samples, 0.43%)</title><rect x="99.5714%" y="325" width="0.4286%" height="15" fill="rgb(228,1,10)" fg:x="697" fg:w="3"/><text x="99.8214%" y="335.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.14%)</title><rect x="99.8571%" y="309" width="0.1429%" height="15" fill="rgb(213,116,27)" fg:x="699" fg:w="1"/><text x="100.1071%" y="319.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.14%)</title><rect x="99.8571%" y="293" width="0.1429%" height="15" fill="rgb(241,95,50)" fg:x="699" fg:w="1"/><text x="100.1071%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.14%)</title><rect x="99.8571%" y="277" width="0.1429%" height="15" fill="rgb(238,48,32)" fg:x="699" fg:w="1"/><text x="100.1071%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.14%)</title><rect x="99.8571%" y="261" width="0.1429%" height="15" fill="rgb(235,113,49)" fg:x="699" fg:w="1"/><text x="100.1071%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.14%)</title><rect x="99.8571%" y="245" width="0.1429%" height="15" fill="rgb(205,127,43)" fg:x="699" fg:w="1"/><text x="100.1071%" y="255.50"></text></g></svg></svg>