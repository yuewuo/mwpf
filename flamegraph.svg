<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="550" onload="init(evt)" viewBox="0 0 1200 550" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="550" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="533.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="533.00"> </text><svg id="frames" x="10" width="1180" total_samples="878"><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.11%)</title><rect x="0.0000%" y="357" width="0.1139%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.11%)</title><rect x="0.0000%" y="341" width="0.1139%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>mwpf`&lt;mwpf::mwpf_solver::SolverSerialPlugins as mwpf::mwpf_solver::PrimalDualSolver&gt;::subgraph_range_visualizer (3 samples, 0.34%)</title><rect x="0.1139%" y="341" width="0.3417%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="3"/><text x="0.3639%" y="351.50"></text></g><g><title>mwpf`mwpf::primal_module::PrimalModuleImpl::subgraph_range (3 samples, 0.34%)</title><rect x="0.1139%" y="325" width="0.3417%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="3"/><text x="0.3639%" y="335.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::sum_dual_variables (1 samples, 0.11%)</title><rect x="0.3417%" y="309" width="0.1139%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.5917%" y="319.50"></text></g><g><title>mwpf`&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.11%)</title><rect x="0.5695%" y="325" width="0.1139%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="1"/><text x="0.8195%" y="335.50"></text></g><g><title>mwpf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.11%)</title><rect x="0.5695%" y="309" width="0.1139%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="0.8195%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.11%)</title><rect x="1.2528%" y="309" width="0.1139%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="1"/><text x="1.5028%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::cli::VerifierActualError as mwpf::cli::ResultVerifier&gt;::verify (12 samples, 1.37%)</title><rect x="0.1139%" y="357" width="1.3667%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="12"/><text x="0.3639%" y="367.50"></text></g><g><title>mwpf`mwpf::util::SolverInitializer::matches_subgraph_syndrome (9 samples, 1.03%)</title><rect x="0.4556%" y="341" width="1.0251%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="9"/><text x="0.7056%" y="351.50"></text></g><g><title>mwpf`mwpf::util::SolverInitializer::get_subgraph_syndrome (7 samples, 0.80%)</title><rect x="0.6834%" y="325" width="0.7973%" height="15" fill="rgb(250,228,42)" fg:x="6" fg:w="7"/><text x="0.9334%" y="335.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.11%)</title><rect x="1.3667%" y="309" width="0.1139%" height="15" fill="rgb(240,193,28)" fg:x="12" fg:w="1"/><text x="1.6167%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::clear (1 samples, 0.11%)</title><rect x="1.4806%" y="357" width="0.1139%" height="15" fill="rgb(216,20,37)" fg:x="13" fg:w="1"/><text x="1.7306%" y="367.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::clear (4 samples, 0.46%)</title><rect x="1.5945%" y="341" width="0.4556%" height="15" fill="rgb(206,188,39)" fg:x="14" fg:w="4"/><text x="1.8445%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.11%)</title><rect x="2.0501%" y="325" width="0.1139%" height="15" fill="rgb(217,207,13)" fg:x="18" fg:w="1"/><text x="2.3001%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.11%)</title><rect x="2.1640%" y="325" width="0.1139%" height="15" fill="rgb(231,73,38)" fg:x="19" fg:w="1"/><text x="2.4140%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.11%)</title><rect x="2.1640%" y="309" width="0.1139%" height="15" fill="rgb(225,20,46)" fg:x="19" fg:w="1"/><text x="2.4140%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.11%)</title><rect x="2.1640%" y="293" width="0.1139%" height="15" fill="rgb(210,31,41)" fg:x="19" fg:w="1"/><text x="2.4140%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.23%)</title><rect x="2.5057%" y="309" width="0.2278%" height="15" fill="rgb(221,200,47)" fg:x="22" fg:w="2"/><text x="2.7557%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.23%)</title><rect x="2.7335%" y="293" width="0.2278%" height="15" fill="rgb(226,26,5)" fg:x="24" fg:w="2"/><text x="2.9835%" y="303.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.23%)</title><rect x="2.7335%" y="277" width="0.2278%" height="15" fill="rgb(249,33,26)" fg:x="24" fg:w="2"/><text x="2.9835%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="2.8474%" y="261" width="0.1139%" height="15" fill="rgb(235,183,28)" fg:x="25" fg:w="1"/><text x="3.0974%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.11%)</title><rect x="2.8474%" y="245" width="0.1139%" height="15" fill="rgb(221,5,38)" fg:x="25" fg:w="1"/><text x="3.0974%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.11%)</title><rect x="2.8474%" y="229" width="0.1139%" height="15" fill="rgb(247,18,42)" fg:x="25" fg:w="1"/><text x="3.0974%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.11%)</title><rect x="2.8474%" y="213" width="0.1139%" height="15" fill="rgb(241,131,45)" fg:x="25" fg:w="1"/><text x="3.0974%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.34%)</title><rect x="2.7335%" y="309" width="0.3417%" height="15" fill="rgb(249,31,29)" fg:x="24" fg:w="3"/><text x="2.9835%" y="319.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="2.9613%" y="293" width="0.1139%" height="15" fill="rgb(225,111,53)" fg:x="26" fg:w="1"/><text x="3.2113%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (6 samples, 0.68%)</title><rect x="3.0752%" y="309" width="0.6834%" height="15" fill="rgb(238,160,17)" fg:x="27" fg:w="6"/><text x="3.3252%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.23%)</title><rect x="4.1002%" y="293" width="0.2278%" height="15" fill="rgb(214,148,48)" fg:x="36" fg:w="2"/><text x="4.3502%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.23%)</title><rect x="4.3280%" y="293" width="0.2278%" height="15" fill="rgb(232,36,49)" fg:x="38" fg:w="2"/><text x="4.5780%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.11%)</title><rect x="4.5558%" y="293" width="0.1139%" height="15" fill="rgb(209,103,24)" fg:x="40" fg:w="1"/><text x="4.8058%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::mwpf_solver::SolverSerialJointSingleHair as mwpf::mwpf_solver::PrimalDualSolver&gt;::clear (29 samples, 3.30%)</title><rect x="1.5945%" y="357" width="3.3030%" height="15" fill="rgb(229,88,8)" fg:x="14" fg:w="29"/><text x="1.8445%" y="367.50">mwp..</text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::clear (25 samples, 2.85%)</title><rect x="2.0501%" y="341" width="2.8474%" height="15" fill="rgb(213,181,19)" fg:x="18" fg:w="25"/><text x="2.3001%" y="351.50">mw..</text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (23 samples, 2.62%)</title><rect x="2.2779%" y="325" width="2.6196%" height="15" fill="rgb(254,191,54)" fg:x="20" fg:w="23"/><text x="2.5279%" y="335.50">mw..</text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::matrix::echelon::Echelon&lt;mwpf::matrix::tail::Tail&lt;mwpf::matrix::tight::Tight&lt;mwpf::matrix::basic::BasicMatrix&gt;&gt;&gt;&gt; (10 samples, 1.14%)</title><rect x="3.7585%" y="309" width="1.1390%" height="15" fill="rgb(241,83,37)" fg:x="33" fg:w="10"/><text x="4.0085%" y="319.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.23%)</title><rect x="4.6697%" y="293" width="0.2278%" height="15" fill="rgb(233,36,39)" fg:x="41" fg:w="2"/><text x="4.9197%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="4.7836%" y="277" width="0.1139%" height="15" fill="rgb(226,3,54)" fg:x="42" fg:w="1"/><text x="5.0336%" y="287.50"></text></g><g><title>mwpf`mwpf::dual_module::DualModuleImpl::get_conflicts_tune (1 samples, 0.11%)</title><rect x="4.8975%" y="341" width="0.1139%" height="15" fill="rgb(245,192,40)" fg:x="43" fg:w="1"/><text x="5.1475%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="5.0114%" y="325" width="0.1139%" height="15" fill="rgb(238,167,29)" fg:x="44" fg:w="1"/><text x="5.2614%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.11%)</title><rect x="5.1253%" y="325" width="0.1139%" height="15" fill="rgb(232,182,51)" fg:x="45" fg:w="1"/><text x="5.3753%" y="335.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.11%)</title><rect x="5.2392%" y="325" width="0.1139%" height="15" fill="rgb(231,60,39)" fg:x="46" fg:w="1"/><text x="5.4892%" y="335.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::advance_mode (14 samples, 1.59%)</title><rect x="5.3531%" y="325" width="1.5945%" height="15" fill="rgb(208,69,12)" fg:x="47" fg:w="14"/><text x="5.6031%" y="335.50"></text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (71 samples, 8.09%)</title><rect x="6.9476%" y="293" width="8.0866%" height="15" fill="rgb(235,93,37)" fg:x="61" fg:w="71"/><text x="7.1976%" y="303.50">mwpf`indexm..</text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::pop_event (82 samples, 9.34%)</title><rect x="6.9476%" y="309" width="9.3394%" height="15" fill="rgb(213,116,39)" fg:x="61" fg:w="82"/><text x="7.1976%" y="319.50">mwpf`&lt;priorit..</text></g><g><title>mwpf`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (11 samples, 1.25%)</title><rect x="15.0342%" y="293" width="1.2528%" height="15" fill="rgb(222,207,29)" fg:x="132" fg:w="11"/><text x="15.2842%" y="303.50"></text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (1 samples, 0.11%)</title><rect x="16.2870%" y="309" width="0.1139%" height="15" fill="rgb(206,96,30)" fg:x="143" fg:w="1"/><text x="16.5370%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_good_size (1 samples, 0.11%)</title><rect x="16.5148%" y="229" width="0.1139%" height="15" fill="rgb(218,138,4)" fg:x="145" fg:w="1"/><text x="16.7648%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.23%)</title><rect x="16.5148%" y="245" width="0.2278%" height="15" fill="rgb(250,191,14)" fg:x="145" fg:w="2"/><text x="16.7648%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.11%)</title><rect x="16.6287%" y="229" width="0.1139%" height="15" fill="rgb(239,60,40)" fg:x="146" fg:w="1"/><text x="16.8787%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.11%)</title><rect x="16.6287%" y="213" width="0.1139%" height="15" fill="rgb(206,27,48)" fg:x="146" fg:w="1"/><text x="16.8787%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.11%)</title><rect x="16.6287%" y="197" width="0.1139%" height="15" fill="rgb(225,35,8)" fg:x="146" fg:w="1"/><text x="16.8787%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::compute_maximum_update_length (87 samples, 9.91%)</title><rect x="6.9476%" y="325" width="9.9089%" height="15" fill="rgb(250,213,24)" fg:x="61" fg:w="87"/><text x="7.1976%" y="335.50">mwpf`&lt;mwpf::du..</text></g><g><title>mwpf`mwpf::dual_module::GroupMaxUpdateLength::add (4 samples, 0.46%)</title><rect x="16.4009%" y="309" width="0.4556%" height="15" fill="rgb(247,123,22)" fg:x="144" fg:w="4"/><text x="16.6509%" y="319.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.34%)</title><rect x="16.5148%" y="293" width="0.3417%" height="15" fill="rgb(231,138,38)" fg:x="145" fg:w="3"/><text x="16.7648%" y="303.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (3 samples, 0.34%)</title><rect x="16.5148%" y="277" width="0.3417%" height="15" fill="rgb(231,145,46)" fg:x="145" fg:w="3"/><text x="16.7648%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.34%)</title><rect x="16.5148%" y="261" width="0.3417%" height="15" fill="rgb(251,118,11)" fg:x="145" fg:w="3"/><text x="16.7648%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.11%)</title><rect x="16.7426%" y="245" width="0.1139%" height="15" fill="rgb(217,147,25)" fg:x="147" fg:w="1"/><text x="16.9926%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::get_edge_nodes (1 samples, 0.11%)</title><rect x="16.8565%" y="325" width="0.1139%" height="15" fill="rgb(247,81,37)" fg:x="148" fg:w="1"/><text x="17.1065%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.11%)</title><rect x="17.0843%" y="309" width="0.1139%" height="15" fill="rgb(209,12,38)" fg:x="150" fg:w="1"/><text x="17.3343%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.11%)</title><rect x="17.1982%" y="309" width="0.1139%" height="15" fill="rgb(227,1,9)" fg:x="151" fg:w="1"/><text x="17.4482%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.11%)</title><rect x="17.1982%" y="293" width="0.1139%" height="15" fill="rgb(248,47,43)" fg:x="151" fg:w="1"/><text x="17.4482%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.11%)</title><rect x="17.1982%" y="277" width="0.1139%" height="15" fill="rgb(221,10,30)" fg:x="151" fg:w="1"/><text x="17.4482%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="17.3121%" y="309" width="0.1139%" height="15" fill="rgb(210,229,1)" fg:x="152" fg:w="1"/><text x="17.5621%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (1 samples, 0.11%)</title><rect x="17.4260%" y="309" width="0.1139%" height="15" fill="rgb(222,148,37)" fg:x="153" fg:w="1"/><text x="17.6760%" y="319.50"></text></g><g><title>mwpf`DYLD-STUB$$malloc (1 samples, 0.11%)</title><rect x="17.5399%" y="309" width="0.1139%" height="15" fill="rgb(234,67,33)" fg:x="154" fg:w="1"/><text x="17.7899%" y="319.50"></text></g><g><title>mwpf`DYLD-STUB$$memcpy (1 samples, 0.11%)</title><rect x="17.6538%" y="309" width="0.1139%" height="15" fill="rgb(247,98,35)" fg:x="155" fg:w="1"/><text x="17.9038%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.34%)</title><rect x="17.9954%" y="293" width="0.3417%" height="15" fill="rgb(247,138,52)" fg:x="158" fg:w="3"/><text x="18.2454%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (2 samples, 0.23%)</title><rect x="18.7927%" y="277" width="0.2278%" height="15" fill="rgb(213,79,30)" fg:x="165" fg:w="2"/><text x="19.0427%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.11%)</title><rect x="19.0205%" y="261" width="0.1139%" height="15" fill="rgb(246,177,23)" fg:x="167" fg:w="1"/><text x="19.2705%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (8 samples, 0.91%)</title><rect x="18.3371%" y="293" width="0.9112%" height="15" fill="rgb(230,62,27)" fg:x="161" fg:w="8"/><text x="18.5871%" y="303.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.23%)</title><rect x="19.0205%" y="277" width="0.2278%" height="15" fill="rgb(216,154,8)" fg:x="167" fg:w="2"/><text x="19.2705%" y="287.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="19.1344%" y="261" width="0.1139%" height="15" fill="rgb(244,35,45)" fg:x="168" fg:w="1"/><text x="19.3844%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::load (22 samples, 2.51%)</title><rect x="16.9704%" y="325" width="2.5057%" height="15" fill="rgb(251,115,12)" fg:x="149" fg:w="22"/><text x="17.2204%" y="335.50">mw..</text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::generate_matrix (15 samples, 1.71%)</title><rect x="17.7677%" y="309" width="1.7084%" height="15" fill="rgb(240,54,50)" fg:x="156" fg:w="15"/><text x="18.0177%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (2 samples, 0.23%)</title><rect x="19.2483%" y="293" width="0.2278%" height="15" fill="rgb(233,84,52)" fg:x="169" fg:w="2"/><text x="19.4983%" y="303.50"></text></g><g><title>mwpf`DYLD-STUB$$malloc (1 samples, 0.11%)</title><rect x="19.3622%" y="277" width="0.1139%" height="15" fill="rgb(207,117,47)" fg:x="170" fg:w="1"/><text x="19.6122%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="21.0706%" y="309" width="0.1139%" height="15" fill="rgb(249,43,39)" fg:x="185" fg:w="1"/><text x="21.3206%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.11%)</title><rect x="21.1845%" y="309" width="0.1139%" height="15" fill="rgb(209,38,44)" fg:x="186" fg:w="1"/><text x="21.4345%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::is_edge_tight (2 samples, 0.23%)</title><rect x="21.2984%" y="309" width="0.2278%" height="15" fill="rgb(236,212,23)" fg:x="187" fg:w="2"/><text x="21.5484%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.23%)</title><rect x="21.9818%" y="293" width="0.2278%" height="15" fill="rgb(242,79,21)" fg:x="193" fg:w="2"/><text x="22.2318%" y="303.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.34%)</title><rect x="22.3235%" y="277" width="0.3417%" height="15" fill="rgb(211,96,35)" fg:x="196" fg:w="3"/><text x="22.5735%" y="287.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (25 samples, 2.85%)</title><rect x="22.6651%" y="277" width="2.8474%" height="15" fill="rgb(253,215,40)" fg:x="199" fg:w="25"/><text x="22.9151%" y="287.50">mw..</text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (25 samples, 2.85%)</title><rect x="22.6651%" y="261" width="2.8474%" height="15" fill="rgb(211,81,21)" fg:x="199" fg:w="25"/><text x="22.9151%" y="271.50">mw..</text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::set_grow_rate (38 samples, 4.33%)</title><rect x="21.5262%" y="309" width="4.3280%" height="15" fill="rgb(208,190,38)" fg:x="189" fg:w="38"/><text x="21.7762%" y="319.50">mwpf`..</text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (32 samples, 3.64%)</title><rect x="22.2096%" y="293" width="3.6446%" height="15" fill="rgb(235,213,38)" fg:x="195" fg:w="32"/><text x="22.4596%" y="303.50">mwpf..</text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_unique (3 samples, 0.34%)</title><rect x="25.5125%" y="277" width="0.3417%" height="15" fill="rgb(237,122,38)" fg:x="224" fg:w="3"/><text x="25.7625%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (7 samples, 0.80%)</title><rect x="26.3098%" y="293" width="0.7973%" height="15" fill="rgb(244,218,35)" fg:x="231" fg:w="7"/><text x="26.5598%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.11%)</title><rect x="26.9932%" y="277" width="0.1139%" height="15" fill="rgb(240,68,47)" fg:x="237" fg:w="1"/><text x="27.2432%" y="287.50"></text></g><g><title>mwpf`DYLD-STUB$$memmove (1 samples, 0.11%)</title><rect x="26.9932%" y="261" width="0.1139%" height="15" fill="rgb(210,16,53)" fg:x="237" fg:w="1"/><text x="27.2432%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (12 samples, 1.37%)</title><rect x="25.8542%" y="309" width="1.3667%" height="15" fill="rgb(235,124,12)" fg:x="227" fg:w="12"/><text x="26.1042%" y="319.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.11%)</title><rect x="27.1071%" y="293" width="0.1139%" height="15" fill="rgb(224,169,11)" fg:x="238" fg:w="1"/><text x="27.3571%" y="303.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.11%)</title><rect x="27.1071%" y="277" width="0.1139%" height="15" fill="rgb(250,166,2)" fg:x="238" fg:w="1"/><text x="27.3571%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.11%)</title><rect x="27.3349%" y="293" width="0.1139%" height="15" fill="rgb(242,216,29)" fg:x="240" fg:w="1"/><text x="27.5849%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (3 samples, 0.34%)</title><rect x="27.2210%" y="309" width="0.3417%" height="15" fill="rgb(230,116,27)" fg:x="239" fg:w="3"/><text x="27.4710%" y="319.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.11%)</title><rect x="27.4487%" y="293" width="0.1139%" height="15" fill="rgb(228,99,48)" fg:x="241" fg:w="1"/><text x="27.6987%" y="303.50"></text></g><g><title>mwpf`DYLD-STUB$$malloc (1 samples, 0.11%)</title><rect x="27.5626%" y="309" width="0.1139%" height="15" fill="rgb(253,11,6)" fg:x="242" fg:w="1"/><text x="27.8126%" y="319.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.11%)</title><rect x="28.0182%" y="293" width="0.1139%" height="15" fill="rgb(247,143,39)" fg:x="246" fg:w="1"/><text x="28.2682%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.11%)</title><rect x="28.0182%" y="277" width="0.1139%" height="15" fill="rgb(236,97,10)" fg:x="246" fg:w="1"/><text x="28.2682%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.11%)</title><rect x="28.0182%" y="261" width="0.1139%" height="15" fill="rgb(233,208,19)" fg:x="246" fg:w="1"/><text x="28.2682%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.11%)</title><rect x="28.0182%" y="245" width="0.1139%" height="15" fill="rgb(216,164,2)" fg:x="246" fg:w="1"/><text x="28.2682%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (5 samples, 0.57%)</title><rect x="27.6765%" y="309" width="0.5695%" height="15" fill="rgb(220,129,5)" fg:x="243" fg:w="5"/><text x="27.9265%" y="319.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.11%)</title><rect x="28.1321%" y="293" width="0.1139%" height="15" fill="rgb(242,17,10)" fg:x="247" fg:w="1"/><text x="28.3821%" y="303.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.11%)</title><rect x="28.3599%" y="261" width="0.1139%" height="15" fill="rgb(242,107,0)" fg:x="249" fg:w="1"/><text x="28.6099%" y="271.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (9 samples, 1.03%)</title><rect x="28.4738%" y="261" width="1.0251%" height="15" fill="rgb(251,28,31)" fg:x="250" fg:w="9"/><text x="28.7238%" y="271.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (9 samples, 1.03%)</title><rect x="28.4738%" y="245" width="1.0251%" height="15" fill="rgb(233,223,10)" fg:x="250" fg:w="9"/><text x="28.7238%" y="255.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (11 samples, 1.25%)</title><rect x="28.3599%" y="277" width="1.2528%" height="15" fill="rgb(215,21,27)" fg:x="249" fg:w="11"/><text x="28.6099%" y="287.50"></text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_unique (1 samples, 0.11%)</title><rect x="29.4989%" y="261" width="0.1139%" height="15" fill="rgb(232,23,21)" fg:x="259" fg:w="1"/><text x="29.7489%" y="271.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (1 samples, 0.11%)</title><rect x="29.6128%" y="277" width="0.1139%" height="15" fill="rgb(244,5,23)" fg:x="260" fg:w="1"/><text x="29.8628%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node (14 samples, 1.59%)</title><rect x="28.2460%" y="293" width="1.5945%" height="15" fill="rgb(226,81,46)" fg:x="248" fg:w="14"/><text x="28.4960%" y="303.50"></text></g><g><title>mwpf`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (1 samples, 0.11%)</title><rect x="29.7267%" y="277" width="0.1139%" height="15" fill="rgb(247,70,30)" fg:x="261" fg:w="1"/><text x="29.9767%" y="287.50"></text></g><g><title>mwpf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.34%)</title><rect x="29.8405%" y="293" width="0.3417%" height="15" fill="rgb(212,68,19)" fg:x="262" fg:w="3"/><text x="30.0905%" y="303.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.11%)</title><rect x="30.0683%" y="277" width="0.1139%" height="15" fill="rgb(240,187,13)" fg:x="264" fg:w="1"/><text x="30.3183%" y="287.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_or_create_node (18 samples, 2.05%)</title><rect x="28.2460%" y="309" width="2.0501%" height="15" fill="rgb(223,113,26)" fg:x="248" fg:w="18"/><text x="28.4960%" y="319.50">m..</text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_node (1 samples, 0.11%)</title><rect x="30.1822%" y="293" width="0.1139%" height="15" fill="rgb(206,192,2)" fg:x="265" fg:w="1"/><text x="30.4322%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="30.6378%" y="293" width="0.1139%" height="15" fill="rgb(241,108,4)" fg:x="269" fg:w="1"/><text x="30.8878%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="30.7517%" y="277" width="0.1139%" height="15" fill="rgb(247,173,49)" fg:x="270" fg:w="1"/><text x="31.0017%" y="287.50"></text></g><g><title>mwpf`mwpf::matrix::interface::MatrixEchelon::get_solution_local_minimum (6 samples, 0.68%)</title><rect x="30.2961%" y="309" width="0.6834%" height="15" fill="rgb(224,114,35)" fg:x="266" fg:w="6"/><text x="30.5461%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.23%)</title><rect x="30.7517%" y="293" width="0.2278%" height="15" fill="rgb(245,159,27)" fg:x="270" fg:w="2"/><text x="31.0017%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="30.8656%" y="277" width="0.1139%" height="15" fill="rgb(245,172,44)" fg:x="271" fg:w="1"/><text x="31.1156%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.11%)</title><rect x="31.0934%" y="293" width="0.1139%" height="15" fill="rgb(236,23,11)" fg:x="273" fg:w="1"/><text x="31.3434%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.11%)</title><rect x="31.2073%" y="293" width="0.1139%" height="15" fill="rgb(205,117,38)" fg:x="274" fg:w="1"/><text x="31.4573%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.11%)</title><rect x="31.4351%" y="277" width="0.1139%" height="15" fill="rgb(237,72,25)" fg:x="276" fg:w="1"/><text x="31.6851%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="31.5490%" y="277" width="0.1139%" height="15" fill="rgb(244,70,9)" fg:x="277" fg:w="1"/><text x="31.7990%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="31.5490%" y="261" width="0.1139%" height="15" fill="rgb(217,125,39)" fg:x="277" fg:w="1"/><text x="31.7990%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="31.5490%" y="245" width="0.1139%" height="15" fill="rgb(235,36,10)" fg:x="277" fg:w="1"/><text x="31.7990%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.46%)</title><rect x="31.3212%" y="293" width="0.4556%" height="15" fill="rgb(251,123,47)" fg:x="275" fg:w="4"/><text x="31.5712%" y="303.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="31.6629%" y="277" width="0.1139%" height="15" fill="rgb(221,13,13)" fg:x="278" fg:w="1"/><text x="31.9129%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="31.6629%" y="261" width="0.1139%" height="15" fill="rgb(238,131,9)" fg:x="278" fg:w="1"/><text x="31.9129%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.11%)</title><rect x="31.6629%" y="245" width="0.1139%" height="15" fill="rgb(211,50,8)" fg:x="278" fg:w="1"/><text x="31.9129%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="31.8907%" y="261" width="0.1139%" height="15" fill="rgb(245,182,24)" fg:x="280" fg:w="1"/><text x="32.1407%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="31.8907%" y="245" width="0.1139%" height="15" fill="rgb(242,14,37)" fg:x="280" fg:w="1"/><text x="32.1407%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (3 samples, 0.34%)</title><rect x="31.7768%" y="277" width="0.3417%" height="15" fill="rgb(246,228,12)" fg:x="279" fg:w="3"/><text x="32.0268%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="32.0046%" y="261" width="0.1139%" height="15" fill="rgb(213,55,15)" fg:x="281" fg:w="1"/><text x="32.2546%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.57%)</title><rect x="31.7768%" y="293" width="0.5695%" height="15" fill="rgb(209,9,3)" fg:x="279" fg:w="5"/><text x="32.0268%" y="303.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (2 samples, 0.23%)</title><rect x="32.1185%" y="277" width="0.2278%" height="15" fill="rgb(230,59,30)" fg:x="282" fg:w="2"/><text x="32.3685%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (2 samples, 0.23%)</title><rect x="32.1185%" y="261" width="0.2278%" height="15" fill="rgb(209,121,21)" fg:x="282" fg:w="2"/><text x="32.3685%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.23%)</title><rect x="32.1185%" y="245" width="0.2278%" height="15" fill="rgb(220,109,13)" fg:x="282" fg:w="2"/><text x="32.3685%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="32.3462%" y="277" width="0.1139%" height="15" fill="rgb(232,18,1)" fg:x="284" fg:w="1"/><text x="32.5962%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="32.3462%" y="261" width="0.1139%" height="15" fill="rgb(215,41,42)" fg:x="284" fg:w="1"/><text x="32.5962%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="32.3462%" y="245" width="0.1139%" height="15" fill="rgb(224,123,36)" fg:x="284" fg:w="1"/><text x="32.5962%" y="255.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer_forest::RelaxerForest&gt; (2 samples, 0.23%)</title><rect x="32.3462%" y="293" width="0.2278%" height="15" fill="rgb(240,125,3)" fg:x="284" fg:w="2"/><text x="32.5962%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="32.4601%" y="277" width="0.1139%" height="15" fill="rgb(205,98,50)" fg:x="285" fg:w="1"/><text x="32.7101%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (9 samples, 1.03%)</title><rect x="33.0296%" y="261" width="1.0251%" height="15" fill="rgb(205,185,37)" fg:x="290" fg:w="9"/><text x="33.2796%" y="271.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.23%)</title><rect x="33.8269%" y="245" width="0.2278%" height="15" fill="rgb(238,207,15)" fg:x="297" fg:w="2"/><text x="34.0769%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.11%)</title><rect x="33.9408%" y="229" width="0.1139%" height="15" fill="rgb(213,199,42)" fg:x="298" fg:w="1"/><text x="34.1908%" y="239.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (14 samples, 1.59%)</title><rect x="32.5740%" y="293" width="1.5945%" height="15" fill="rgb(235,201,11)" fg:x="286" fg:w="14"/><text x="32.8240%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (11 samples, 1.25%)</title><rect x="32.9157%" y="277" width="1.2528%" height="15" fill="rgb(207,46,11)" fg:x="289" fg:w="11"/><text x="33.1657%" y="287.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.11%)</title><rect x="34.0547%" y="261" width="0.1139%" height="15" fill="rgb(241,35,35)" fg:x="299" fg:w="1"/><text x="34.3047%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.11%)</title><rect x="34.0547%" y="245" width="0.1139%" height="15" fill="rgb(243,32,47)" fg:x="299" fg:w="1"/><text x="34.3047%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::convert::From&lt;[(K,V) (1 samples, 0.11%)</title><rect x="34.1686%" y="245" width="0.1139%" height="15" fill="rgb(247,202,23)" fg:x="300" fg:w="1"/><text x="34.4186%" y="255.50"></text></g><g><title> N]&gt;&gt;::from (1 samples, 0.11%)</title><rect x="34.1686%" y="229" width="0.1139%" height="15" fill="rgb(219,102,11)" fg:x="300" fg:w="1"/><text x="34.4186%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (1 samples, 0.11%)</title><rect x="34.1686%" y="213" width="0.1139%" height="15" fill="rgb(243,110,44)" fg:x="300" fg:w="1"/><text x="34.4186%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="34.1686%" y="197" width="0.1139%" height="15" fill="rgb(222,74,54)" fg:x="300" fg:w="1"/><text x="34.4186%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.11%)</title><rect x="35.1936%" y="213" width="0.1139%" height="15" fill="rgb(216,99,12)" fg:x="309" fg:w="1"/><text x="35.4436%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.11%)</title><rect x="35.3075%" y="213" width="0.1139%" height="15" fill="rgb(226,22,26)" fg:x="310" fg:w="1"/><text x="35.5575%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.11%)</title><rect x="35.3075%" y="197" width="0.1139%" height="15" fill="rgb(217,163,10)" fg:x="310" fg:w="1"/><text x="35.5575%" y="207.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete_ptr (11 samples, 1.25%)</title><rect x="34.2825%" y="245" width="1.2528%" height="15" fill="rgb(213,25,53)" fg:x="301" fg:w="11"/><text x="34.5325%" y="255.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (11 samples, 1.25%)</title><rect x="34.2825%" y="229" width="1.2528%" height="15" fill="rgb(252,105,26)" fg:x="301" fg:w="11"/><text x="34.5325%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="35.4214%" y="213" width="0.1139%" height="15" fill="rgb(220,39,43)" fg:x="311" fg:w="1"/><text x="35.6714%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (13 samples, 1.48%)</title><rect x="34.1686%" y="277" width="1.4806%" height="15" fill="rgb(229,68,48)" fg:x="300" fg:w="13"/><text x="34.4186%" y="287.50"></text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (13 samples, 1.48%)</title><rect x="34.1686%" y="261" width="1.4806%" height="15" fill="rgb(252,8,32)" fg:x="300" fg:w="13"/><text x="34.4186%" y="271.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (1 samples, 0.11%)</title><rect x="35.5353%" y="245" width="0.1139%" height="15" fill="rgb(223,20,43)" fg:x="312" fg:w="1"/><text x="35.7853%" y="255.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.11%)</title><rect x="35.5353%" y="229" width="0.1139%" height="15" fill="rgb(229,81,49)" fg:x="312" fg:w="1"/><text x="35.7853%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.11%)</title><rect x="35.6492%" y="261" width="0.1139%" height="15" fill="rgb(236,28,36)" fg:x="313" fg:w="1"/><text x="35.8992%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.11%)</title><rect x="35.6492%" y="245" width="0.1139%" height="15" fill="rgb(249,185,26)" fg:x="313" fg:w="1"/><text x="35.8992%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.11%)</title><rect x="35.6492%" y="229" width="0.1139%" height="15" fill="rgb(249,174,33)" fg:x="313" fg:w="1"/><text x="35.8992%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.11%)</title><rect x="35.6492%" y="213" width="0.1139%" height="15" fill="rgb(233,201,37)" fg:x="313" fg:w="1"/><text x="35.8992%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (1 samples, 0.11%)</title><rect x="35.7631%" y="261" width="0.1139%" height="15" fill="rgb(221,78,26)" fg:x="314" fg:w="1"/><text x="36.0131%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.11%)</title><rect x="35.7631%" y="245" width="0.1139%" height="15" fill="rgb(250,127,30)" fg:x="314" fg:w="1"/><text x="36.0131%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="35.7631%" y="229" width="0.1139%" height="15" fill="rgb(230,49,44)" fg:x="314" fg:w="1"/><text x="36.0131%" y="239.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (45 samples, 5.13%)</title><rect x="30.9795%" y="309" width="5.1253%" height="15" fill="rgb(229,67,23)" fg:x="272" fg:w="45"/><text x="31.2295%" y="319.50">mwpf`m..</text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (17 samples, 1.94%)</title><rect x="34.1686%" y="293" width="1.9362%" height="15" fill="rgb(249,83,47)" fg:x="300" fg:w="17"/><text x="34.4186%" y="303.50">m..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (4 samples, 0.46%)</title><rect x="35.6492%" y="277" width="0.4556%" height="15" fill="rgb(215,43,3)" fg:x="313" fg:w="4"/><text x="35.8992%" y="287.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (2 samples, 0.23%)</title><rect x="35.8770%" y="261" width="0.2278%" height="15" fill="rgb(238,154,13)" fg:x="315" fg:w="2"/><text x="36.1270%" y="271.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (1 samples, 0.11%)</title><rect x="35.9909%" y="245" width="0.1139%" height="15" fill="rgb(219,56,2)" fg:x="316" fg:w="1"/><text x="36.2409%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="37.0159%" y="277" width="0.1139%" height="15" fill="rgb(233,0,4)" fg:x="325" fg:w="1"/><text x="37.2659%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.23%)</title><rect x="37.1298%" y="261" width="0.2278%" height="15" fill="rgb(235,30,7)" fg:x="326" fg:w="2"/><text x="37.3798%" y="271.50"></text></g><g><title>mwpf`&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.80%)</title><rect x="36.6743%" y="293" width="0.7973%" height="15" fill="rgb(250,79,13)" fg:x="322" fg:w="7"/><text x="36.9243%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.34%)</title><rect x="37.1298%" y="277" width="0.3417%" height="15" fill="rgb(211,146,34)" fg:x="326" fg:w="3"/><text x="37.3798%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.11%)</title><rect x="37.3576%" y="261" width="0.1139%" height="15" fill="rgb(228,22,38)" fg:x="328" fg:w="1"/><text x="37.6076%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.11%)</title><rect x="37.4715%" y="293" width="0.1139%" height="15" fill="rgb(235,168,5)" fg:x="329" fg:w="1"/><text x="37.7215%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.23%)</title><rect x="37.5854%" y="293" width="0.2278%" height="15" fill="rgb(221,155,16)" fg:x="330" fg:w="2"/><text x="37.8354%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.23%)</title><rect x="37.5854%" y="277" width="0.2278%" height="15" fill="rgb(215,215,53)" fg:x="330" fg:w="2"/><text x="37.8354%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="37.6993%" y="261" width="0.1139%" height="15" fill="rgb(223,4,10)" fg:x="331" fg:w="1"/><text x="37.9493%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.11%)</title><rect x="39.7494%" y="245" width="0.1139%" height="15" fill="rgb(234,103,6)" fg:x="349" fg:w="1"/><text x="39.9994%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (20 samples, 2.28%)</title><rect x="37.8132%" y="293" width="2.2779%" height="15" fill="rgb(227,97,0)" fg:x="332" fg:w="20"/><text x="38.0632%" y="303.50">m..</text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (14 samples, 1.59%)</title><rect x="38.4966%" y="277" width="1.5945%" height="15" fill="rgb(234,150,53)" fg:x="338" fg:w="14"/><text x="38.7466%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.34%)</title><rect x="39.7494%" y="261" width="0.3417%" height="15" fill="rgb(228,201,54)" fg:x="349" fg:w="3"/><text x="39.9994%" y="271.50"></text></g><g><title>mwpf`DYLD-STUB$$memmove (2 samples, 0.23%)</title><rect x="39.8633%" y="245" width="0.2278%" height="15" fill="rgb(222,22,37)" fg:x="350" fg:w="2"/><text x="40.1133%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (1 samples, 0.11%)</title><rect x="40.0911%" y="293" width="0.1139%" height="15" fill="rgb(237,53,32)" fg:x="352" fg:w="1"/><text x="40.3411%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::append (1 samples, 0.11%)</title><rect x="40.2050%" y="293" width="0.1139%" height="15" fill="rgb(233,25,53)" fg:x="353" fg:w="1"/><text x="40.4550%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::append_from_sorted_iters (1 samples, 0.11%)</title><rect x="40.2050%" y="277" width="0.1139%" height="15" fill="rgb(210,40,34)" fg:x="353" fg:w="1"/><text x="40.4550%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::append::MergeIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="40.2050%" y="261" width="0.1139%" height="15" fill="rgb(241,220,44)" fg:x="353" fg:w="1"/><text x="40.4550%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="40.2050%" y="245" width="0.1139%" height="15" fill="rgb(235,28,35)" fg:x="353" fg:w="1"/><text x="40.4550%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.11%)</title><rect x="40.2050%" y="229" width="0.1139%" height="15" fill="rgb(210,56,17)" fg:x="353" fg:w="1"/><text x="40.4550%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.11%)</title><rect x="40.2050%" y="213" width="0.1139%" height="15" fill="rgb(224,130,29)" fg:x="353" fg:w="1"/><text x="40.4550%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.11%)</title><rect x="40.3189%" y="293" width="0.1139%" height="15" fill="rgb(235,212,8)" fg:x="354" fg:w="1"/><text x="40.5689%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve (185 samples, 21.07%)</title><rect x="19.4761%" y="325" width="21.0706%" height="15" fill="rgb(223,33,50)" fg:x="171" fg:w="185"/><text x="19.7261%" y="335.50">mwpf`&lt;mwpf::primal_module_serial:..</text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::union (39 samples, 4.44%)</title><rect x="36.1048%" y="309" width="4.4419%" height="15" fill="rgb(219,149,13)" fg:x="317" fg:w="39"/><text x="36.3548%" y="319.50">mwpf`..</text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.11%)</title><rect x="40.4328%" y="293" width="0.1139%" height="15" fill="rgb(250,156,29)" fg:x="355" fg:w="1"/><text x="40.6828%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.11%)</title><rect x="40.8884%" y="309" width="0.1139%" height="15" fill="rgb(216,193,19)" fg:x="359" fg:w="1"/><text x="41.1384%" y="319.50"></text></g><g><title>mwpf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.11%)</title><rect x="40.8884%" y="293" width="0.1139%" height="15" fill="rgb(216,135,14)" fg:x="359" fg:w="1"/><text x="41.1384%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::is_edge_tight_tune (2 samples, 0.23%)</title><rect x="41.0023%" y="309" width="0.2278%" height="15" fill="rgb(241,47,5)" fg:x="360" fg:w="2"/><text x="41.2523%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (1 samples, 0.11%)</title><rect x="41.2301%" y="309" width="0.1139%" height="15" fill="rgb(233,42,35)" fg:x="362" fg:w="1"/><text x="41.4801%" y="319.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.11%)</title><rect x="41.3440%" y="309" width="0.1139%" height="15" fill="rgb(231,13,6)" fg:x="363" fg:w="1"/><text x="41.5940%" y="319.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="41.4579%" y="309" width="0.1139%" height="15" fill="rgb(207,181,40)" fg:x="364" fg:w="1"/><text x="41.7079%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.23%)</title><rect x="41.5718%" y="293" width="0.2278%" height="15" fill="rgb(254,173,49)" fg:x="365" fg:w="2"/><text x="41.8218%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.23%)</title><rect x="41.5718%" y="277" width="0.2278%" height="15" fill="rgb(221,1,38)" fg:x="365" fg:w="2"/><text x="41.8218%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.11%)</title><rect x="41.7995%" y="277" width="0.1139%" height="15" fill="rgb(206,124,46)" fg:x="367" fg:w="1"/><text x="42.0495%" y="287.50"></text></g><g><title>mwpf`mwpf::matrix::interface::MatrixEchelon::get_solution_local_minimum (4 samples, 0.46%)</title><rect x="41.5718%" y="309" width="0.4556%" height="15" fill="rgb(249,21,11)" fg:x="365" fg:w="4"/><text x="41.8218%" y="319.50"></text></g><g><title>mwpf`alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (2 samples, 0.23%)</title><rect x="41.7995%" y="293" width="0.2278%" height="15" fill="rgb(222,201,40)" fg:x="367" fg:w="2"/><text x="42.0495%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.11%)</title><rect x="41.9134%" y="277" width="0.1139%" height="15" fill="rgb(235,61,29)" fg:x="368" fg:w="1"/><text x="42.1634%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="42.0273%" y="293" width="0.1139%" height="15" fill="rgb(219,207,3)" fg:x="369" fg:w="1"/><text x="42.2773%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="42.0273%" y="277" width="0.1139%" height="15" fill="rgb(222,56,46)" fg:x="369" fg:w="1"/><text x="42.2773%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="42.0273%" y="261" width="0.1139%" height="15" fill="rgb(239,76,54)" fg:x="369" fg:w="1"/><text x="42.2773%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (1 samples, 0.11%)</title><rect x="42.1412%" y="277" width="0.1139%" height="15" fill="rgb(231,124,27)" fg:x="370" fg:w="1"/><text x="42.3912%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="42.2551%" y="261" width="0.1139%" height="15" fill="rgb(249,195,6)" fg:x="371" fg:w="1"/><text x="42.5051%" y="271.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (2 samples, 0.23%)</title><rect x="42.2551%" y="277" width="0.2278%" height="15" fill="rgb(237,174,47)" fg:x="371" fg:w="2"/><text x="42.5051%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 0.11%)</title><rect x="42.3690%" y="261" width="0.1139%" height="15" fill="rgb(206,201,31)" fg:x="372" fg:w="1"/><text x="42.6190%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="42.3690%" y="245" width="0.1139%" height="15" fill="rgb(231,57,52)" fg:x="372" fg:w="1"/><text x="42.6190%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.46%)</title><rect x="42.1412%" y="293" width="0.4556%" height="15" fill="rgb(248,177,22)" fg:x="370" fg:w="4"/><text x="42.3912%" y="303.50"></text></g><g><title>mwpf`core::slice::sort::merge_sort (1 samples, 0.11%)</title><rect x="42.4829%" y="277" width="0.1139%" height="15" fill="rgb(215,211,37)" fg:x="373" fg:w="1"/><text x="42.7329%" y="287.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="42.5968%" y="293" width="0.1139%" height="15" fill="rgb(241,128,51)" fg:x="374" fg:w="1"/><text x="42.8468%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="42.7107%" y="213" width="0.1139%" height="15" fill="rgb(227,165,31)" fg:x="375" fg:w="1"/><text x="42.9607%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.11%)</title><rect x="42.8246%" y="197" width="0.1139%" height="15" fill="rgb(228,167,24)" fg:x="376" fg:w="1"/><text x="43.0746%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.34%)</title><rect x="42.7107%" y="245" width="0.3417%" height="15" fill="rgb(228,143,12)" fg:x="375" fg:w="3"/><text x="42.9607%" y="255.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.34%)</title><rect x="42.7107%" y="229" width="0.3417%" height="15" fill="rgb(249,149,8)" fg:x="375" fg:w="3"/><text x="42.9607%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.23%)</title><rect x="42.8246%" y="213" width="0.2278%" height="15" fill="rgb(243,35,44)" fg:x="376" fg:w="2"/><text x="43.0746%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="42.9385%" y="197" width="0.1139%" height="15" fill="rgb(246,89,9)" fg:x="377" fg:w="1"/><text x="43.1885%" y="207.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer_forest::RelaxerForest&gt; (5 samples, 0.57%)</title><rect x="42.7107%" y="293" width="0.5695%" height="15" fill="rgb(233,213,13)" fg:x="375" fg:w="5"/><text x="42.9607%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.57%)</title><rect x="42.7107%" y="277" width="0.5695%" height="15" fill="rgb(233,141,41)" fg:x="375" fg:w="5"/><text x="42.9607%" y="287.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.57%)</title><rect x="42.7107%" y="261" width="0.5695%" height="15" fill="rgb(239,167,4)" fg:x="375" fg:w="5"/><text x="42.9607%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.23%)</title><rect x="43.0524%" y="245" width="0.2278%" height="15" fill="rgb(209,217,16)" fg:x="378" fg:w="2"/><text x="43.3024%" y="255.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (10 samples, 1.14%)</title><rect x="43.2802%" y="293" width="1.1390%" height="15" fill="rgb(219,88,35)" fg:x="380" fg:w="10"/><text x="43.5302%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (6 samples, 0.68%)</title><rect x="43.7358%" y="277" width="0.6834%" height="15" fill="rgb(220,193,23)" fg:x="384" fg:w="6"/><text x="43.9858%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (6 samples, 0.68%)</title><rect x="43.7358%" y="261" width="0.6834%" height="15" fill="rgb(230,90,52)" fg:x="384" fg:w="6"/><text x="43.9858%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.11%)</title><rect x="44.4191%" y="277" width="0.1139%" height="15" fill="rgb(252,106,19)" fg:x="390" fg:w="1"/><text x="44.6691%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (1 samples, 0.11%)</title><rect x="44.5330%" y="277" width="0.1139%" height="15" fill="rgb(206,74,20)" fg:x="391" fg:w="1"/><text x="44.7830%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (3 samples, 0.34%)</title><rect x="44.6469%" y="277" width="0.3417%" height="15" fill="rgb(230,138,44)" fg:x="392" fg:w="3"/><text x="44.8969%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::OccupiedEntry&lt;K,V,A&gt;::remove_kv (2 samples, 0.23%)</title><rect x="44.7608%" y="261" width="0.2278%" height="15" fill="rgb(235,182,43)" fg:x="393" fg:w="2"/><text x="45.0108%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (2 samples, 0.23%)</title><rect x="44.7608%" y="245" width="0.2278%" height="15" fill="rgb(242,16,51)" fg:x="393" fg:w="2"/><text x="45.0108%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_leaf_kv (2 samples, 0.23%)</title><rect x="44.7608%" y="229" width="0.2278%" height="15" fill="rgb(248,9,4)" fg:x="393" fg:w="2"/><text x="45.0108%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.11%)</title><rect x="46.4692%" y="229" width="0.1139%" height="15" fill="rgb(210,31,22)" fg:x="408" fg:w="1"/><text x="46.7192%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="46.5831%" y="229" width="0.1139%" height="15" fill="rgb(239,54,39)" fg:x="409" fg:w="1"/><text x="46.8331%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.57%)</title><rect x="46.2415%" y="261" width="0.5695%" height="15" fill="rgb(230,99,41)" fg:x="406" fg:w="5"/><text x="46.4915%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.34%)</title><rect x="46.4692%" y="245" width="0.3417%" height="15" fill="rgb(253,106,12)" fg:x="408" fg:w="3"/><text x="46.7192%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.11%)</title><rect x="46.6970%" y="229" width="0.1139%" height="15" fill="rgb(213,46,41)" fg:x="410" fg:w="1"/><text x="46.9470%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.11%)</title><rect x="46.8109%" y="245" width="0.1139%" height="15" fill="rgb(215,133,35)" fg:x="411" fg:w="1"/><text x="47.0609%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (1 samples, 0.11%)</title><rect x="46.9248%" y="245" width="0.1139%" height="15" fill="rgb(213,28,5)" fg:x="412" fg:w="1"/><text x="47.1748%" y="255.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (2 samples, 0.23%)</title><rect x="47.0387%" y="245" width="0.2278%" height="15" fill="rgb(215,77,49)" fg:x="413" fg:w="2"/><text x="47.2887%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (10 samples, 1.14%)</title><rect x="46.8109%" y="261" width="1.1390%" height="15" fill="rgb(248,100,22)" fg:x="411" fg:w="10"/><text x="47.0609%" y="271.50"></text></g><g><title>mwpf`core::slice::sort::merge_sort (6 samples, 0.68%)</title><rect x="47.2665%" y="245" width="0.6834%" height="15" fill="rgb(208,67,9)" fg:x="415" fg:w="6"/><text x="47.5165%" y="255.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (2 samples, 0.23%)</title><rect x="47.7221%" y="229" width="0.2278%" height="15" fill="rgb(219,133,21)" fg:x="419" fg:w="2"/><text x="47.9721%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.34%)</title><rect x="47.9499%" y="261" width="0.3417%" height="15" fill="rgb(246,46,29)" fg:x="421" fg:w="3"/><text x="48.1999%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.11%)</title><rect x="48.2916%" y="261" width="0.1139%" height="15" fill="rgb(246,185,52)" fg:x="424" fg:w="1"/><text x="48.5416%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.11%)</title><rect x="48.4055%" y="261" width="0.1139%" height="15" fill="rgb(252,136,11)" fg:x="425" fg:w="1"/><text x="48.6555%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (2 samples, 0.23%)</title><rect x="48.5194%" y="261" width="0.2278%" height="15" fill="rgb(219,138,53)" fg:x="426" fg:w="2"/><text x="48.7694%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.11%)</title><rect x="48.6333%" y="245" width="0.1139%" height="15" fill="rgb(211,51,23)" fg:x="427" fg:w="1"/><text x="48.8833%" y="255.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.11%)</title><rect x="48.7472%" y="261" width="0.1139%" height="15" fill="rgb(247,221,28)" fg:x="428" fg:w="1"/><text x="48.9972%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.11%)</title><rect x="48.7472%" y="245" width="0.1139%" height="15" fill="rgb(251,222,45)" fg:x="428" fg:w="1"/><text x="48.9972%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.11%)</title><rect x="51.5945%" y="245" width="0.1139%" height="15" fill="rgb(217,162,53)" fg:x="453" fg:w="1"/><text x="51.8445%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.11%)</title><rect x="51.7084%" y="245" width="0.1139%" height="15" fill="rgb(229,93,14)" fg:x="454" fg:w="1"/><text x="51.9584%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.11%)</title><rect x="51.8223%" y="245" width="0.1139%" height="15" fill="rgb(209,67,49)" fg:x="455" fg:w="1"/><text x="52.0723%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.23%)</title><rect x="51.9362%" y="245" width="0.2278%" height="15" fill="rgb(213,87,29)" fg:x="456" fg:w="2"/><text x="52.1862%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.23%)</title><rect x="51.9362%" y="229" width="0.2278%" height="15" fill="rgb(205,151,52)" fg:x="456" fg:w="2"/><text x="52.1862%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.34%)</title><rect x="52.1640%" y="245" width="0.3417%" height="15" fill="rgb(253,215,39)" fg:x="458" fg:w="3"/><text x="52.4140%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.46%)</title><rect x="52.5057%" y="245" width="0.4556%" height="15" fill="rgb(221,220,41)" fg:x="461" fg:w="4"/><text x="52.7557%" y="255.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (40 samples, 4.56%)</title><rect x="48.8610%" y="261" width="4.5558%" height="15" fill="rgb(218,133,21)" fg:x="429" fg:w="40"/><text x="49.1110%" y="271.50">mwpf`..</text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.46%)</title><rect x="52.9613%" y="245" width="0.4556%" height="15" fill="rgb(221,193,43)" fg:x="465" fg:w="4"/><text x="53.2113%" y="255.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (38 samples, 4.33%)</title><rect x="53.7585%" y="245" width="4.3280%" height="15" fill="rgb(240,128,52)" fg:x="472" fg:w="38"/><text x="54.0085%" y="255.50">mwpf`..</text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (8 samples, 0.91%)</title><rect x="57.1754%" y="229" width="0.9112%" height="15" fill="rgb(253,114,12)" fg:x="502" fg:w="8"/><text x="57.4254%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.11%)</title><rect x="58.2005%" y="229" width="0.1139%" height="15" fill="rgb(215,223,47)" fg:x="511" fg:w="1"/><text x="58.4505%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.11%)</title><rect x="58.2005%" y="213" width="0.1139%" height="15" fill="rgb(248,225,23)" fg:x="511" fg:w="1"/><text x="58.4505%" y="223.50"></text></g><g><title>mwpf`mwpf::matrix::hair::HairView&lt;M&gt;::new (44 samples, 5.01%)</title><rect x="53.4169%" y="261" width="5.0114%" height="15" fill="rgb(250,108,0)" fg:x="469" fg:w="44"/><text x="53.6669%" y="271.50">mwpf`m..</text></g><g><title>mwpf`mwpf::matrix::interface::MatrixTail::set_tail_edges (3 samples, 0.34%)</title><rect x="58.0866%" y="245" width="0.3417%" height="15" fill="rgb(228,208,7)" fg:x="510" fg:w="3"/><text x="58.3366%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.11%)</title><rect x="58.3144%" y="229" width="0.1139%" height="15" fill="rgb(244,45,10)" fg:x="512" fg:w="1"/><text x="58.5644%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="61.1617%" y="245" width="0.1139%" height="15" fill="rgb(207,125,25)" fg:x="537" fg:w="1"/><text x="61.4117%" y="255.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.11%)</title><rect x="61.2756%" y="245" width="0.1139%" height="15" fill="rgb(210,195,18)" fg:x="538" fg:w="1"/><text x="61.5256%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_single_hair::PluginSingleHair as mwpf::plugin::PluginImpl&gt;::find_relaxers (146 samples, 16.63%)</title><rect x="44.9886%" y="277" width="16.6287%" height="15" fill="rgb(249,80,12)" fg:x="395" fg:w="146"/><text x="45.2386%" y="287.50">mwpf`&lt;mwpf::plugin_single_..</text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (28 samples, 3.19%)</title><rect x="58.4282%" y="261" width="3.1891%" height="15" fill="rgb(221,65,9)" fg:x="513" fg:w="28"/><text x="58.6782%" y="271.50">mwp..</text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.23%)</title><rect x="61.3895%" y="245" width="0.2278%" height="15" fill="rgb(235,49,36)" fg:x="539" fg:w="2"/><text x="61.6395%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.11%)</title><rect x="61.5034%" y="229" width="0.1139%" height="15" fill="rgb(225,32,20)" fg:x="540" fg:w="1"/><text x="61.7534%" y="239.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete_ptr (2 samples, 0.23%)</title><rect x="61.6173%" y="245" width="0.2278%" height="15" fill="rgb(215,141,46)" fg:x="541" fg:w="2"/><text x="61.8673%" y="255.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (2 samples, 0.23%)</title><rect x="61.6173%" y="229" width="0.2278%" height="15" fill="rgb(250,160,47)" fg:x="541" fg:w="2"/><text x="61.8673%" y="239.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (6 samples, 0.68%)</title><rect x="61.8451%" y="245" width="0.6834%" height="15" fill="rgb(216,222,40)" fg:x="543" fg:w="6"/><text x="62.0951%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (6 samples, 0.68%)</title><rect x="61.8451%" y="229" width="0.6834%" height="15" fill="rgb(234,217,39)" fg:x="543" fg:w="6"/><text x="62.0951%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (4 samples, 0.46%)</title><rect x="62.0729%" y="213" width="0.4556%" height="15" fill="rgb(207,178,40)" fg:x="545" fg:w="4"/><text x="62.3229%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (9 samples, 1.03%)</title><rect x="61.6173%" y="277" width="1.0251%" height="15" fill="rgb(221,136,13)" fg:x="541" fg:w="9"/><text x="61.8673%" y="287.50"></text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (9 samples, 1.03%)</title><rect x="61.6173%" y="261" width="1.0251%" height="15" fill="rgb(249,199,10)" fg:x="541" fg:w="9"/><text x="61.8673%" y="271.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (1 samples, 0.11%)</title><rect x="62.5285%" y="245" width="0.1139%" height="15" fill="rgb(249,222,13)" fg:x="549" fg:w="1"/><text x="62.7785%" y="255.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.11%)</title><rect x="62.6424%" y="277" width="0.1139%" height="15" fill="rgb(244,185,38)" fg:x="550" fg:w="1"/><text x="62.8924%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.11%)</title><rect x="62.8702%" y="213" width="0.1139%" height="15" fill="rgb(236,202,9)" fg:x="552" fg:w="1"/><text x="63.1202%" y="223.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::add (3 samples, 0.34%)</title><rect x="62.7563%" y="277" width="0.3417%" height="15" fill="rgb(250,229,37)" fg:x="551" fg:w="3"/><text x="63.0063%" y="287.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.23%)</title><rect x="62.8702%" y="261" width="0.2278%" height="15" fill="rgb(206,174,23)" fg:x="552" fg:w="2"/><text x="63.1202%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.23%)</title><rect x="62.8702%" y="245" width="0.2278%" height="15" fill="rgb(211,33,43)" fg:x="552" fg:w="2"/><text x="63.1202%" y="255.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.23%)</title><rect x="62.8702%" y="229" width="0.2278%" height="15" fill="rgb(245,58,50)" fg:x="552" fg:w="2"/><text x="63.1202%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="62.9841%" y="213" width="0.1139%" height="15" fill="rgb(244,68,36)" fg:x="553" fg:w="1"/><text x="63.2341%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (1 samples, 0.11%)</title><rect x="63.0979%" y="229" width="0.1139%" height="15" fill="rgb(232,229,15)" fg:x="554" fg:w="1"/><text x="63.3479%" y="239.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.11%)</title><rect x="63.0979%" y="213" width="0.1139%" height="15" fill="rgb(254,30,23)" fg:x="554" fg:w="1"/><text x="63.3479%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 0.11%)</title><rect x="63.0979%" y="197" width="0.1139%" height="15" fill="rgb(235,160,14)" fg:x="554" fg:w="1"/><text x="63.3479%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="63.0979%" y="181" width="0.1139%" height="15" fill="rgb(212,155,44)" fg:x="554" fg:w="1"/><text x="63.3479%" y="191.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (188 samples, 21.41%)</title><rect x="42.0273%" y="309" width="21.4123%" height="15" fill="rgb(226,2,50)" fg:x="369" fg:w="188"/><text x="42.2773%" y="319.50">mwpf`mwpf::plugin::PluginManager::..</text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (167 samples, 19.02%)</title><rect x="44.4191%" y="293" width="19.0205%" height="15" fill="rgb(234,177,6)" fg:x="390" fg:w="167"/><text x="44.6691%" y="303.50">mwpf`mwpf::plugin::PluginEntry..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (3 samples, 0.34%)</title><rect x="63.0979%" y="277" width="0.3417%" height="15" fill="rgb(217,24,9)" fg:x="554" fg:w="3"/><text x="63.3479%" y="287.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (3 samples, 0.34%)</title><rect x="63.0979%" y="261" width="0.3417%" height="15" fill="rgb(220,13,46)" fg:x="554" fg:w="3"/><text x="63.3479%" y="271.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (3 samples, 0.34%)</title><rect x="63.0979%" y="245" width="0.3417%" height="15" fill="rgb(239,221,27)" fg:x="554" fg:w="3"/><text x="63.3479%" y="255.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (2 samples, 0.23%)</title><rect x="63.2118%" y="229" width="0.2278%" height="15" fill="rgb(222,198,25)" fg:x="555" fg:w="2"/><text x="63.4618%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="63.3257%" y="213" width="0.1139%" height="15" fill="rgb(211,99,13)" fg:x="556" fg:w="1"/><text x="63.5757%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_calloc (1 samples, 0.11%)</title><rect x="63.4396%" y="293" width="0.1139%" height="15" fill="rgb(232,111,31)" fg:x="557" fg:w="1"/><text x="63.6896%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 0.11%)</title><rect x="63.5535%" y="293" width="0.1139%" height="15" fill="rgb(245,82,37)" fg:x="558" fg:w="1"/><text x="63.8035%" y="303.50"></text></g><g><title>mwpf`Highs::~Highs (1 samples, 0.11%)</title><rect x="63.6674%" y="293" width="0.1139%" height="15" fill="rgb(227,149,46)" fg:x="559" fg:w="1"/><text x="63.9174%" y="303.50"></text></g><g><title>mwpf`Highs::~Highs (1 samples, 0.11%)</title><rect x="63.6674%" y="277" width="0.1139%" height="15" fill="rgb(218,36,50)" fg:x="559" fg:w="1"/><text x="63.9174%" y="287.50"></text></g><g><title>mwpf`InfoRecordDouble::~InfoRecordDouble (1 samples, 0.11%)</title><rect x="63.6674%" y="261" width="0.1139%" height="15" fill="rgb(226,80,48)" fg:x="559" fg:w="1"/><text x="63.9174%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="63.6674%" y="245" width="0.1139%" height="15" fill="rgb(238,224,15)" fg:x="559" fg:w="1"/><text x="63.9174%" y="255.50"></text></g><g><title>mwpf`highs::Model::add_col (1 samples, 0.11%)</title><rect x="63.7813%" y="293" width="0.1139%" height="15" fill="rgb(241,136,10)" fg:x="560" fg:w="1"/><text x="64.0313%" y="303.50"></text></g><g><title>mwpf`&lt;(ExtendA,ExtendB) as core::iter::traits::collect::Extend&lt;(A,B)&gt;&gt;::extend (1 samples, 0.11%)</title><rect x="63.7813%" y="277" width="0.1139%" height="15" fill="rgb(208,32,45)" fg:x="560" fg:w="1"/><text x="64.0313%" y="287.50"></text></g><g><title>mwpf`HEkk::addRows (1 samples, 0.11%)</title><rect x="63.8952%" y="229" width="0.1139%" height="15" fill="rgb(207,135,9)" fg:x="561" fg:w="1"/><text x="64.1452%" y="239.50"></text></g><g><title>mwpf`HEkk::clear (1 samples, 0.11%)</title><rect x="63.8952%" y="213" width="0.1139%" height="15" fill="rgb(206,86,44)" fg:x="561" fg:w="1"/><text x="64.1452%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.11%)</title><rect x="63.8952%" y="197" width="0.1139%" height="15" fill="rgb(245,177,15)" fg:x="561" fg:w="1"/><text x="64.1452%" y="207.50"></text></g><g><title>mwpf`HighsLp::addRowNames(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.11%)</title><rect x="64.0091%" y="229" width="0.1139%" height="15" fill="rgb(206,64,50)" fg:x="562" fg:w="1"/><text x="64.2591%" y="239.50"></text></g><g><title>mwpf`HighsSparseMatrix::ensureRowwise (1 samples, 0.11%)</title><rect x="64.1230%" y="213" width="0.1139%" height="15" fill="rgb(234,36,40)" fg:x="563" fg:w="1"/><text x="64.3730%" y="223.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (1 samples, 0.11%)</title><rect x="64.1230%" y="197" width="0.1139%" height="15" fill="rgb(213,64,8)" fg:x="563" fg:w="1"/><text x="64.3730%" y="207.50"></text></g><g><title>mwpf`HighsSparseMatrix::addRows (2 samples, 0.23%)</title><rect x="64.1230%" y="229" width="0.2278%" height="15" fill="rgb(210,75,36)" fg:x="563" fg:w="2"/><text x="64.3730%" y="239.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::__append (1 samples, 0.11%)</title><rect x="64.2369%" y="213" width="0.1139%" height="15" fill="rgb(229,88,21)" fg:x="564" fg:w="1"/><text x="64.4869%" y="223.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.11%)</title><rect x="64.4647%" y="197" width="0.1139%" height="15" fill="rgb(252,204,47)" fg:x="566" fg:w="1"/><text x="64.7147%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.11%)</title><rect x="64.4647%" y="181" width="0.1139%" height="15" fill="rgb(208,77,27)" fg:x="566" fg:w="1"/><text x="64.7147%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.11%)</title><rect x="64.4647%" y="165" width="0.1139%" height="15" fill="rgb(221,76,26)" fg:x="566" fg:w="1"/><text x="64.7147%" y="175.50"></text></g><g><title>mwpf`HighsSparseMatrix::assess(HighsLogOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.34%)</title><rect x="64.3508%" y="229" width="0.3417%" height="15" fill="rgb(225,139,18)" fg:x="565" fg:w="3"/><text x="64.6008%" y="239.50"></text></g><g><title>mwpf`assessMatrix(HighsLogOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, int, int, bool, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;double, std::__1::allocator (3 samples, 0.34%)</title><rect x="64.3508%" y="213" width="0.3417%" height="15" fill="rgb(230,137,11)" fg:x="565" fg:w="3"/><text x="64.6008%" y="223.50"></text></g><g><title>mwpf`bool HighsHashTable&lt;int, void&gt;::insert&lt;int const&amp;&gt; (1 samples, 0.11%)</title><rect x="64.5786%" y="197" width="0.1139%" height="15" fill="rgb(212,28,1)" fg:x="567" fg:w="1"/><text x="64.8286%" y="207.50"></text></g><g><title>mwpf`Highs::addRowsInterface (8 samples, 0.91%)</title><rect x="63.8952%" y="245" width="0.9112%" height="15" fill="rgb(248,164,17)" fg:x="561" fg:w="8"/><text x="64.1452%" y="255.50"></text></g><g><title>mwpf`appendRowsToLpVectors(HighsLp&amp;, int, std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt; const&amp;, std::__1::vector&lt;double, std::__1::allocator (1 samples, 0.11%)</title><rect x="64.6925%" y="229" width="0.1139%" height="15" fill="rgb(222,171,42)" fg:x="568" fg:w="1"/><text x="64.9425%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.11%)</title><rect x="64.6925%" y="213" width="0.1139%" height="15" fill="rgb(243,84,45)" fg:x="568" fg:w="1"/><text x="64.9425%" y="223.50"></text></g><g><title>mwpf`Highs::returnFromHighs (1 samples, 0.11%)</title><rect x="64.8064%" y="245" width="0.1139%" height="15" fill="rgb(252,49,23)" fg:x="569" fg:w="1"/><text x="65.0564%" y="255.50"></text></g><g><title>mwpf`Highs::forceHighsSolutionBasisSize (1 samples, 0.11%)</title><rect x="64.8064%" y="229" width="0.1139%" height="15" fill="rgb(215,19,7)" fg:x="569" fg:w="1"/><text x="65.0564%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.11%)</title><rect x="64.8064%" y="213" width="0.1139%" height="15" fill="rgb(238,81,41)" fg:x="569" fg:w="1"/><text x="65.0564%" y="223.50"></text></g><g><title>mwpf`highs::Model::add_row (10 samples, 1.14%)</title><rect x="63.8952%" y="293" width="1.1390%" height="15" fill="rgb(210,199,37)" fg:x="561" fg:w="10"/><text x="64.1452%" y="303.50"></text></g><g><title>mwpf`Highs::addRow (10 samples, 1.14%)</title><rect x="63.8952%" y="277" width="1.1390%" height="15" fill="rgb(244,192,49)" fg:x="561" fg:w="10"/><text x="64.1452%" y="287.50"></text></g><g><title>mwpf`Highs::addRows (10 samples, 1.14%)</title><rect x="63.8952%" y="261" width="1.1390%" height="15" fill="rgb(226,211,11)" fg:x="561" fg:w="10"/><text x="64.1452%" y="271.50"></text></g><g><title>mwpf`PresolveComponentData::clear (1 samples, 0.11%)</title><rect x="64.9203%" y="245" width="0.1139%" height="15" fill="rgb(236,162,54)" fg:x="570" fg:w="1"/><text x="65.1703%" y="255.50"></text></g><g><title>mwpf`HighsLp::clear (1 samples, 0.11%)</title><rect x="64.9203%" y="229" width="0.1139%" height="15" fill="rgb(220,229,9)" fg:x="570" fg:w="1"/><text x="65.1703%" y="239.50"></text></g><g><title>libc++.1.dylib`DYLD-STUB$$strlen (1 samples, 0.11%)</title><rect x="64.9203%" y="213" width="0.1139%" height="15" fill="rgb(250,87,22)" fg:x="570" fg:w="1"/><text x="65.1703%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.11%)</title><rect x="65.0342%" y="245" width="0.1139%" height="15" fill="rgb(239,43,17)" fg:x="571" fg:w="1"/><text x="65.2842%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.11%)</title><rect x="65.1481%" y="197" width="0.1139%" height="15" fill="rgb(231,177,25)" fg:x="572" fg:w="1"/><text x="65.3981%" y="207.50"></text></g><g><title>mwpf`HEkk::debugOkForSolve (1 samples, 0.11%)</title><rect x="65.2620%" y="197" width="0.1139%" height="15" fill="rgb(219,179,1)" fg:x="573" fg:w="1"/><text x="65.5120%" y="207.50"></text></g><g><title>mwpf`HEkk::computeDual (1 samples, 0.11%)</title><rect x="65.4897%" y="181" width="0.1139%" height="15" fill="rgb(238,219,53)" fg:x="575" fg:w="1"/><text x="65.7397%" y="191.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::setup (1 samples, 0.11%)</title><rect x="65.4897%" y="165" width="0.1139%" height="15" fill="rgb(232,167,36)" fg:x="575" fg:w="1"/><text x="65.7397%" y="175.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::__append (1 samples, 0.11%)</title><rect x="65.4897%" y="149" width="0.1139%" height="15" fill="rgb(244,19,51)" fg:x="575" fg:w="1"/><text x="65.7397%" y="159.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.11%)</title><rect x="65.4897%" y="133" width="0.1139%" height="15" fill="rgb(224,6,22)" fg:x="575" fg:w="1"/><text x="65.7397%" y="143.50"></text></g><g><title>mwpf`HFactor::ftranU(HVectorBase (1 samples, 0.11%)</title><rect x="65.6036%" y="133" width="0.1139%" height="15" fill="rgb(224,145,5)" fg:x="576" fg:w="1"/><text x="65.8536%" y="143.50"></text></g><g><title>mwpf`HEkk::computePrimal (2 samples, 0.23%)</title><rect x="65.6036%" y="181" width="0.2278%" height="15" fill="rgb(234,130,49)" fg:x="576" fg:w="2"/><text x="65.8536%" y="191.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (2 samples, 0.23%)</title><rect x="65.6036%" y="165" width="0.2278%" height="15" fill="rgb(254,6,2)" fg:x="576" fg:w="2"/><text x="65.8536%" y="175.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (2 samples, 0.23%)</title><rect x="65.6036%" y="149" width="0.2278%" height="15" fill="rgb(208,96,46)" fg:x="576" fg:w="2"/><text x="65.8536%" y="159.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::tight (1 samples, 0.11%)</title><rect x="65.7175%" y="133" width="0.1139%" height="15" fill="rgb(239,3,39)" fg:x="577" fg:w="1"/><text x="65.9675%" y="143.50"></text></g><g><title>mwpf`HEkk::initialiseForSolve (5 samples, 0.57%)</title><rect x="65.3759%" y="197" width="0.5695%" height="15" fill="rgb(233,210,1)" fg:x="574" fg:w="5"/><text x="65.6259%" y="207.50"></text></g><g><title>mwpf`HEkk::initialiseSimplexLpBasisAndFactor (1 samples, 0.11%)</title><rect x="65.8314%" y="181" width="0.1139%" height="15" fill="rgb(244,137,37)" fg:x="578" fg:w="1"/><text x="66.0814%" y="191.50"></text></g><g><title>mwpf`HSimplexNla::setup (1 samples, 0.11%)</title><rect x="65.8314%" y="165" width="0.1139%" height="15" fill="rgb(240,136,2)" fg:x="578" fg:w="1"/><text x="66.0814%" y="175.50"></text></g><g><title>mwpf`HFactor::setupGeneral (1 samples, 0.11%)</title><rect x="65.8314%" y="149" width="0.1139%" height="15" fill="rgb(239,18,37)" fg:x="578" fg:w="1"/><text x="66.0814%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.11%)</title><rect x="65.8314%" y="133" width="0.1139%" height="15" fill="rgb(218,185,22)" fg:x="578" fg:w="1"/><text x="66.0814%" y="143.50"></text></g><g><title>mwpf`HEkkDual::initialiseInstance (1 samples, 0.11%)</title><rect x="65.9453%" y="181" width="0.1139%" height="15" fill="rgb(225,218,4)" fg:x="579" fg:w="1"/><text x="66.1953%" y="191.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::setup (1 samples, 0.11%)</title><rect x="65.9453%" y="165" width="0.1139%" height="15" fill="rgb(230,182,32)" fg:x="579" fg:w="1"/><text x="66.1953%" y="175.50"></text></g><g><title>mwpf`std::__1::vector&lt;char, std::__1::allocator&lt;char&gt;&gt;::assign (1 samples, 0.11%)</title><rect x="65.9453%" y="149" width="0.1139%" height="15" fill="rgb(242,56,43)" fg:x="579" fg:w="1"/><text x="66.1953%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.11%)</title><rect x="65.9453%" y="133" width="0.1139%" height="15" fill="rgb(233,99,24)" fg:x="579" fg:w="1"/><text x="66.1953%" y="143.50"></text></g><g><title>mwpf`HEkkDual::HEkkDual (2 samples, 0.23%)</title><rect x="65.9453%" y="197" width="0.2278%" height="15" fill="rgb(234,209,42)" fg:x="579" fg:w="2"/><text x="66.1953%" y="207.50"></text></g><g><title>mwpf`HighsSparseMatrix::clear (1 samples, 0.11%)</title><rect x="66.0592%" y="181" width="0.1139%" height="15" fill="rgb(227,7,12)" fg:x="580" fg:w="1"/><text x="66.3092%" y="191.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (1 samples, 0.11%)</title><rect x="66.0592%" y="165" width="0.1139%" height="15" fill="rgb(245,203,43)" fg:x="580" fg:w="1"/><text x="66.3092%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.11%)</title><rect x="66.0592%" y="149" width="0.1139%" height="15" fill="rgb(238,205,33)" fg:x="580" fg:w="1"/><text x="66.3092%" y="159.50"></text></g><g><title>mwpf`HEkk::fullBtran(HVectorBase (1 samples, 0.11%)</title><rect x="66.1731%" y="165" width="0.1139%" height="15" fill="rgb(231,56,7)" fg:x="581" fg:w="1"/><text x="66.4231%" y="175.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (1 samples, 0.11%)</title><rect x="66.1731%" y="149" width="0.1139%" height="15" fill="rgb(244,186,29)" fg:x="581" fg:w="1"/><text x="66.4231%" y="159.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (1 samples, 0.11%)</title><rect x="66.1731%" y="133" width="0.1139%" height="15" fill="rgb(234,111,31)" fg:x="581" fg:w="1"/><text x="66.4231%" y="143.50"></text></g><g><title>mwpf`HFactor::btranU(HVectorBase (1 samples, 0.11%)</title><rect x="66.1731%" y="117" width="0.1139%" height="15" fill="rgb(241,149,10)" fg:x="581" fg:w="1"/><text x="66.4231%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.11%)</title><rect x="66.2870%" y="149" width="0.1139%" height="15" fill="rgb(249,206,44)" fg:x="582" fg:w="1"/><text x="66.5370%" y="159.50"></text></g><g><title>mwpf`HEkk::computeDual (3 samples, 0.34%)</title><rect x="66.1731%" y="181" width="0.3417%" height="15" fill="rgb(251,153,30)" fg:x="581" fg:w="3"/><text x="66.4231%" y="191.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::setup (2 samples, 0.23%)</title><rect x="66.2870%" y="165" width="0.2278%" height="15" fill="rgb(239,152,38)" fg:x="582" fg:w="2"/><text x="66.5370%" y="175.50"></text></g><g><title>mwpf`std::__1::vector&lt;char, std::__1::allocator&lt;char&gt;&gt;::assign (1 samples, 0.11%)</title><rect x="66.4009%" y="149" width="0.1139%" height="15" fill="rgb(249,139,47)" fg:x="583" fg:w="1"/><text x="66.6509%" y="159.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.11%)</title><rect x="66.4009%" y="133" width="0.1139%" height="15" fill="rgb(244,64,35)" fg:x="583" fg:w="1"/><text x="66.6509%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.11%)</title><rect x="66.4009%" y="117" width="0.1139%" height="15" fill="rgb(216,46,15)" fg:x="583" fg:w="1"/><text x="66.6509%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.11%)</title><rect x="66.4009%" y="101" width="0.1139%" height="15" fill="rgb(250,74,19)" fg:x="583" fg:w="1"/><text x="66.6509%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.11%)</title><rect x="66.4009%" y="85" width="0.1139%" height="15" fill="rgb(249,42,33)" fg:x="583" fg:w="1"/><text x="66.6509%" y="95.50"></text></g><g><title>mwpf`HEkk::rebuildRefactor (1 samples, 0.11%)</title><rect x="66.5148%" y="165" width="0.1139%" height="15" fill="rgb(242,149,17)" fg:x="584" fg:w="1"/><text x="66.7648%" y="175.50"></text></g><g><title>mwpf`HEkk::factorSolveError (1 samples, 0.11%)</title><rect x="66.5148%" y="149" width="0.1139%" height="15" fill="rgb(244,29,21)" fg:x="584" fg:w="1"/><text x="66.7648%" y="159.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (1 samples, 0.11%)</title><rect x="66.5148%" y="133" width="0.1139%" height="15" fill="rgb(220,130,37)" fg:x="584" fg:w="1"/><text x="66.7648%" y="143.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (1 samples, 0.11%)</title><rect x="66.5148%" y="117" width="0.1139%" height="15" fill="rgb(211,67,2)" fg:x="584" fg:w="1"/><text x="66.7648%" y="127.50"></text></g><g><title>mwpf`HFactor::ftranU(HVectorBase (1 samples, 0.11%)</title><rect x="66.5148%" y="101" width="0.1139%" height="15" fill="rgb(235,68,52)" fg:x="584" fg:w="1"/><text x="66.7648%" y="111.50"></text></g><g><title>mwpf`HEkkDual::chooseColumn(HVectorBase (1 samples, 0.11%)</title><rect x="66.6287%" y="149" width="0.1139%" height="15" fill="rgb(246,142,3)" fg:x="585" fg:w="1"/><text x="66.8787%" y="159.50"></text></g><g><title>mwpf`HighsSimplexAnalysis::simplexTimerStop (1 samples, 0.11%)</title><rect x="66.6287%" y="133" width="0.1139%" height="15" fill="rgb(241,25,7)" fg:x="585" fg:w="1"/><text x="66.8787%" y="143.50"></text></g><g><title>mwpf`HEkkDual::iterate (2 samples, 0.23%)</title><rect x="66.6287%" y="165" width="0.2278%" height="15" fill="rgb(242,119,39)" fg:x="585" fg:w="2"/><text x="66.8787%" y="175.50"></text></g><g><title>mwpf`HEkkDual::updatePivots (1 samples, 0.11%)</title><rect x="66.7426%" y="149" width="0.1139%" height="15" fill="rgb(241,98,45)" fg:x="586" fg:w="1"/><text x="66.9926%" y="159.50"></text></g><g><title>mwpf`HEkk::updateFactor(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.11%)</title><rect x="66.7426%" y="133" width="0.1139%" height="15" fill="rgb(254,28,30)" fg:x="586" fg:w="1"/><text x="66.9926%" y="143.50"></text></g><g><title>mwpf`HSimplexNla::update(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.11%)</title><rect x="66.7426%" y="117" width="0.1139%" height="15" fill="rgb(241,142,54)" fg:x="586" fg:w="1"/><text x="66.9926%" y="127.50"></text></g><g><title>mwpf`HFactor::update(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.11%)</title><rect x="66.7426%" y="101" width="0.1139%" height="15" fill="rgb(222,85,15)" fg:x="586" fg:w="1"/><text x="66.9926%" y="111.50"></text></g><g><title>mwpf`HFactor::updateFT(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.11%)</title><rect x="66.7426%" y="85" width="0.1139%" height="15" fill="rgb(210,85,47)" fg:x="586" fg:w="1"/><text x="66.9926%" y="95.50"></text></g><g><title>mwpf`HEkk::computeDual (1 samples, 0.11%)</title><rect x="66.8565%" y="149" width="0.1139%" height="15" fill="rgb(224,206,25)" fg:x="587" fg:w="1"/><text x="67.1065%" y="159.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::setup (1 samples, 0.11%)</title><rect x="66.8565%" y="133" width="0.1139%" height="15" fill="rgb(243,201,19)" fg:x="587" fg:w="1"/><text x="67.1065%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.11%)</title><rect x="66.8565%" y="117" width="0.1139%" height="15" fill="rgb(236,59,4)" fg:x="587" fg:w="1"/><text x="67.1065%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="66.9704%" y="117" width="0.1139%" height="15" fill="rgb(254,179,45)" fg:x="588" fg:w="1"/><text x="67.2204%" y="127.50"></text></g><g><title>mwpf`HEkk::rebuildRefactor (2 samples, 0.23%)</title><rect x="66.9704%" y="149" width="0.2278%" height="15" fill="rgb(226,14,10)" fg:x="588" fg:w="2"/><text x="67.2204%" y="159.50"></text></g><g><title>mwpf`HEkk::factorSolveError (2 samples, 0.23%)</title><rect x="66.9704%" y="133" width="0.2278%" height="15" fill="rgb(244,27,41)" fg:x="588" fg:w="2"/><text x="67.2204%" y="143.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (1 samples, 0.11%)</title><rect x="67.0843%" y="117" width="0.1139%" height="15" fill="rgb(235,35,32)" fg:x="589" fg:w="1"/><text x="67.3343%" y="127.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (1 samples, 0.11%)</title><rect x="67.0843%" y="101" width="0.1139%" height="15" fill="rgb(218,68,31)" fg:x="589" fg:w="1"/><text x="67.3343%" y="111.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::tight (1 samples, 0.11%)</title><rect x="67.0843%" y="85" width="0.1139%" height="15" fill="rgb(207,120,37)" fg:x="589" fg:w="1"/><text x="67.3343%" y="95.50"></text></g><g><title>mwpf`HEkkDual::solvePhase1 (7 samples, 0.80%)</title><rect x="66.5148%" y="181" width="0.7973%" height="15" fill="rgb(227,98,0)" fg:x="584" fg:w="7"/><text x="66.7648%" y="191.50"></text></g><g><title>mwpf`HEkkDual::rebuild (4 samples, 0.46%)</title><rect x="66.8565%" y="165" width="0.4556%" height="15" fill="rgb(207,7,3)" fg:x="587" fg:w="4"/><text x="67.1065%" y="175.50"></text></g><g><title>mwpf`HEkkDual::reportRebuild (1 samples, 0.11%)</title><rect x="67.1982%" y="149" width="0.1139%" height="15" fill="rgb(206,98,19)" fg:x="590" fg:w="1"/><text x="67.4482%" y="159.50"></text></g><g><title>mwpf`HighsSimplexAnalysis::invertReport (1 samples, 0.11%)</title><rect x="67.1982%" y="133" width="0.1139%" height="15" fill="rgb(217,5,26)" fg:x="590" fg:w="1"/><text x="67.4482%" y="143.50"></text></g><g><title>mwpf`HighsSimplexAnalysis::userInvertReport (1 samples, 0.11%)</title><rect x="67.1982%" y="117" width="0.1139%" height="15" fill="rgb(235,190,38)" fg:x="590" fg:w="1"/><text x="67.4482%" y="127.50"></text></g><g><title>mwpf`std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt;&gt;&amp; std::__1::__put_character_sequence&lt;char, std::__1::char_traits&lt;char&gt;&gt;(std::__1::basic_ostream&lt;char, std::__1::char_traits (1 samples, 0.11%)</title><rect x="67.1982%" y="101" width="0.1139%" height="15" fill="rgb(247,86,24)" fg:x="590" fg:w="1"/><text x="67.4482%" y="111.50"></text></g><g><title>mwpf`std::__1::ostreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt;&gt; std::__1::__pad_and_output&lt;char, std::__1::char_traits&lt;char&gt;&gt;(std::__1::ostreambuf_iterator&lt;char, std::__1::char_traits (1 samples, 0.11%)</title><rect x="67.1982%" y="85" width="0.1139%" height="15" fill="rgb(205,101,16)" fg:x="590" fg:w="1"/><text x="67.4482%" y="95.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_streambuf&lt;char, std::__1::char_traits&lt;char&gt;&gt;::xsputn (1 samples, 0.11%)</title><rect x="67.1982%" y="69" width="0.1139%" height="15" fill="rgb(246,168,33)" fg:x="590" fg:w="1"/><text x="67.4482%" y="79.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_stringbuf&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::overflow (1 samples, 0.11%)</title><rect x="67.1982%" y="53" width="0.1139%" height="15" fill="rgb(231,114,1)" fg:x="590" fg:w="1"/><text x="67.4482%" y="63.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::append (1 samples, 0.11%)</title><rect x="67.1982%" y="37" width="0.1139%" height="15" fill="rgb(207,184,53)" fg:x="590" fg:w="1"/><text x="67.4482%" y="47.50"></text></g><g><title>mwpf`HEkk::initialiseBound (1 samples, 0.11%)</title><rect x="67.3121%" y="165" width="0.1139%" height="15" fill="rgb(224,95,51)" fg:x="591" fg:w="1"/><text x="67.5621%" y="175.50"></text></g><g><title>mwpf`HEkk::factorSolveError (1 samples, 0.11%)</title><rect x="67.4260%" y="133" width="0.1139%" height="15" fill="rgb(212,188,45)" fg:x="592" fg:w="1"/><text x="67.6760%" y="143.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::setup (1 samples, 0.11%)</title><rect x="67.4260%" y="117" width="0.1139%" height="15" fill="rgb(223,154,38)" fg:x="592" fg:w="1"/><text x="67.6760%" y="127.50"></text></g><g><title>mwpf`DYLD-STUB$$memmove (1 samples, 0.11%)</title><rect x="67.4260%" y="101" width="0.1139%" height="15" fill="rgb(251,22,52)" fg:x="592" fg:w="1"/><text x="67.6760%" y="111.50"></text></g><g><title>mwpf`HEkkDual::solve (13 samples, 1.48%)</title><rect x="66.1731%" y="197" width="1.4806%" height="15" fill="rgb(229,209,22)" fg:x="581" fg:w="13"/><text x="66.4231%" y="207.50"></text></g><g><title>mwpf`HEkkDual::solvePhase2 (3 samples, 0.34%)</title><rect x="67.3121%" y="181" width="0.3417%" height="15" fill="rgb(234,138,34)" fg:x="591" fg:w="3"/><text x="67.5621%" y="191.50"></text></g><g><title>mwpf`HEkkDual::rebuild (2 samples, 0.23%)</title><rect x="67.4260%" y="165" width="0.2278%" height="15" fill="rgb(212,95,11)" fg:x="592" fg:w="2"/><text x="67.6760%" y="175.50"></text></g><g><title>mwpf`HEkk::rebuildRefactor (2 samples, 0.23%)</title><rect x="67.4260%" y="149" width="0.2278%" height="15" fill="rgb(240,179,47)" fg:x="592" fg:w="2"/><text x="67.6760%" y="159.50"></text></g><g><title>mwpf`HighsRandom::drawUniform (1 samples, 0.11%)</title><rect x="67.5399%" y="133" width="0.1139%" height="15" fill="rgb(240,163,11)" fg:x="593" fg:w="1"/><text x="67.7899%" y="143.50"></text></g><g><title>mwpf`Highs::callSolveLp(HighsLp&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (24 samples, 2.73%)</title><rect x="65.0342%" y="261" width="2.7335%" height="15" fill="rgb(236,37,12)" fg:x="571" fg:w="24"/><text x="65.2842%" y="271.50">mw..</text></g><g><title>mwpf`solveLp(HighsLpSolverObject&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (23 samples, 2.62%)</title><rect x="65.1481%" y="245" width="2.6196%" height="15" fill="rgb(232,164,16)" fg:x="572" fg:w="23"/><text x="65.3981%" y="255.50">mw..</text></g><g><title>mwpf`solveLpSimplex(HighsLpSolverObject&amp;) (23 samples, 2.62%)</title><rect x="65.1481%" y="229" width="2.6196%" height="15" fill="rgb(244,205,15)" fg:x="572" fg:w="23"/><text x="65.3981%" y="239.50">mw..</text></g><g><title>mwpf`HEkk::solve (23 samples, 2.62%)</title><rect x="65.1481%" y="213" width="2.6196%" height="15" fill="rgb(223,117,47)" fg:x="572" fg:w="23"/><text x="65.3981%" y="223.50">mw..</text></g><g><title>mwpf`HEkkPrimal::solve (1 samples, 0.11%)</title><rect x="67.6538%" y="197" width="0.1139%" height="15" fill="rgb(244,107,35)" fg:x="594" fg:w="1"/><text x="67.9038%" y="207.50"></text></g><g><title>mwpf`HEkkPrimal::solvePhase2 (1 samples, 0.11%)</title><rect x="67.6538%" y="181" width="0.1139%" height="15" fill="rgb(205,140,8)" fg:x="594" fg:w="1"/><text x="67.9038%" y="191.50"></text></g><g><title>mwpf`HEkkPrimal::rebuild (1 samples, 0.11%)</title><rect x="67.6538%" y="165" width="0.1139%" height="15" fill="rgb(228,84,46)" fg:x="594" fg:w="1"/><text x="67.9038%" y="175.50"></text></g><g><title>mwpf`HEkk::computeDual (1 samples, 0.11%)</title><rect x="67.6538%" y="149" width="0.1139%" height="15" fill="rgb(254,188,9)" fg:x="594" fg:w="1"/><text x="67.9038%" y="159.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::setup (1 samples, 0.11%)</title><rect x="67.6538%" y="133" width="0.1139%" height="15" fill="rgb(206,112,54)" fg:x="594" fg:w="1"/><text x="67.9038%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.11%)</title><rect x="67.6538%" y="117" width="0.1139%" height="15" fill="rgb(216,84,49)" fg:x="594" fg:w="1"/><text x="67.9038%" y="127.50"></text></g><g><title>mwpf`Highs::returnFromRun (1 samples, 0.11%)</title><rect x="67.7677%" y="261" width="0.1139%" height="15" fill="rgb(214,194,35)" fg:x="595" fg:w="1"/><text x="68.0177%" y="271.50"></text></g><g><title>mwpf`debugHighsSolution(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.11%)</title><rect x="67.7677%" y="245" width="0.1139%" height="15" fill="rgb(249,28,3)" fg:x="595" fg:w="1"/><text x="68.0177%" y="255.50"></text></g><g><title>mwpf`HighsInfo::initRecords (1 samples, 0.11%)</title><rect x="67.7677%" y="229" width="0.1139%" height="15" fill="rgb(222,56,52)" fg:x="595" fg:w="1"/><text x="68.0177%" y="239.50"></text></g><g><title>mwpf`InfoRecordDouble::InfoRecordDouble(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.11%)</title><rect x="67.7677%" y="213" width="0.1139%" height="15" fill="rgb(245,217,50)" fg:x="595" fg:w="1"/><text x="68.0177%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.11%)</title><rect x="67.7677%" y="197" width="0.1139%" height="15" fill="rgb(213,201,24)" fg:x="595" fg:w="1"/><text x="68.0177%" y="207.50"></text></g><g><title>libsystem_m.dylib`frexp (1 samples, 0.11%)</title><rect x="67.8815%" y="197" width="0.1139%" height="15" fill="rgb(248,116,28)" fg:x="596" fg:w="1"/><text x="68.1315%" y="207.50"></text></g><g><title>mwpf`HighsHashHelpers::sparse_combine (1 samples, 0.11%)</title><rect x="67.9954%" y="197" width="0.1139%" height="15" fill="rgb(219,72,43)" fg:x="597" fg:w="1"/><text x="68.2454%" y="207.50"></text></g><g><title>mwpf`presolve::HPresolve::unlink (1 samples, 0.11%)</title><rect x="68.3371%" y="181" width="0.1139%" height="15" fill="rgb(209,138,14)" fg:x="600" fg:w="1"/><text x="68.5871%" y="191.50"></text></g><g><title>mwpf`presolve::HighsPostsolveStack::duplicateColumn (1 samples, 0.11%)</title><rect x="68.4510%" y="181" width="0.1139%" height="15" fill="rgb(222,18,33)" fg:x="601" fg:w="1"/><text x="68.7010%" y="191.50"></text></g><g><title>mwpf`presolve::HighsPostsolveStack::DuplicateColumn::okMerge (1 samples, 0.11%)</title><rect x="68.4510%" y="165" width="0.1139%" height="15" fill="rgb(213,199,7)" fg:x="601" fg:w="1"/><text x="68.7010%" y="175.50"></text></g><g><title>mwpf`presolve::HighsPostsolveStack::duplicateRow (1 samples, 0.11%)</title><rect x="68.5649%" y="181" width="0.1139%" height="15" fill="rgb(250,110,10)" fg:x="602" fg:w="1"/><text x="68.8149%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.11%)</title><rect x="68.5649%" y="165" width="0.1139%" height="15" fill="rgb(248,123,6)" fg:x="602" fg:w="1"/><text x="68.8149%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::detectParallelRowsAndCols (6 samples, 0.68%)</title><rect x="68.1093%" y="197" width="0.6834%" height="15" fill="rgb(206,91,31)" fg:x="598" fg:w="6"/><text x="68.3593%" y="207.50"></text></g><g><title>mwpf`presolve::HighsPostsolveStack::reductionAdded (1 samples, 0.11%)</title><rect x="68.6788%" y="181" width="0.1139%" height="15" fill="rgb(211,154,13)" fg:x="603" fg:w="1"/><text x="68.9288%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::fromCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (1 samples, 0.11%)</title><rect x="68.7927%" y="197" width="0.1139%" height="15" fill="rgb(225,148,7)" fg:x="604" fg:w="1"/><text x="69.0427%" y="207.50"></text></g><g><title>mwpf`std::__1::enable_if&lt;__is_cpp17_forward_iterator&lt;std::__1::__wrap_iter&lt;int*&gt;&gt;::value &amp;&amp; is_constructible&lt;int, std::__1::iterator_traits&lt;std::__1::__wrap_iter&lt;int*&gt;&gt;::reference&gt;::value, std::__1::__wrap_iter&lt;int*&gt;&gt;::type std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::insert&lt;std::__1::__wrap_iter&lt;int*&gt;&gt;(std::__1::__wrap_iter&lt;int const*&gt;, std::__1::__wrap_iter&lt;int*&gt;, std::__1::__wrap_iter (1 samples, 0.11%)</title><rect x="68.7927%" y="181" width="0.1139%" height="15" fill="rgb(220,160,43)" fg:x="604" fg:w="1"/><text x="69.0427%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::run (10 samples, 1.14%)</title><rect x="67.8815%" y="229" width="1.1390%" height="15" fill="rgb(213,52,39)" fg:x="596" fg:w="10"/><text x="68.1315%" y="239.50"></text></g><g><title>mwpf`presolve::HPresolve::presolve (10 samples, 1.14%)</title><rect x="67.8815%" y="213" width="1.1390%" height="15" fill="rgb(243,137,7)" fg:x="596" fg:w="10"/><text x="68.1315%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::initialRowAndColPresolve (1 samples, 0.11%)</title><rect x="68.9066%" y="197" width="0.1139%" height="15" fill="rgb(230,79,13)" fg:x="605" fg:w="1"/><text x="69.1566%" y="207.50"></text></g><g><title>mwpf`presolve::HPresolve::colPresolve (1 samples, 0.11%)</title><rect x="68.9066%" y="181" width="0.1139%" height="15" fill="rgb(247,105,23)" fg:x="605" fg:w="1"/><text x="69.1566%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::updateRowDualImpliedBounds (1 samples, 0.11%)</title><rect x="68.9066%" y="165" width="0.1139%" height="15" fill="rgb(223,179,41)" fg:x="605" fg:w="1"/><text x="69.1566%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::changeImplRowDualUpper (1 samples, 0.11%)</title><rect x="68.9066%" y="149" width="0.1139%" height="15" fill="rgb(218,9,34)" fg:x="605" fg:w="1"/><text x="69.1566%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.11%)</title><rect x="69.0205%" y="213" width="0.1139%" height="15" fill="rgb(222,106,8)" fg:x="606" fg:w="1"/><text x="69.2705%" y="223.50"></text></g><g><title>mwpf`Highs::runPresolve (12 samples, 1.37%)</title><rect x="67.8815%" y="261" width="1.3667%" height="15" fill="rgb(211,220,0)" fg:x="596" fg:w="12"/><text x="68.1315%" y="271.50"></text></g><g><title>mwpf`PresolveComponent::run (12 samples, 1.37%)</title><rect x="67.8815%" y="245" width="1.3667%" height="15" fill="rgb(229,52,16)" fg:x="596" fg:w="12"/><text x="68.1315%" y="255.50"></text></g><g><title>mwpf`presolve::HPresolve::setInput (2 samples, 0.23%)</title><rect x="69.0205%" y="229" width="0.2278%" height="15" fill="rgb(212,155,18)" fg:x="606" fg:w="2"/><text x="69.2705%" y="239.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::__append (1 samples, 0.11%)</title><rect x="69.1344%" y="213" width="0.1139%" height="15" fill="rgb(242,21,14)" fg:x="607" fg:w="1"/><text x="69.3844%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.11%)</title><rect x="69.2483%" y="229" width="0.1139%" height="15" fill="rgb(222,19,48)" fg:x="608" fg:w="1"/><text x="69.4983%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.11%)</title><rect x="69.3622%" y="229" width="0.1139%" height="15" fill="rgb(232,45,27)" fg:x="609" fg:w="1"/><text x="69.6122%" y="239.50"></text></g><g><title>mwpf`HighsOptions::HighsOptions (3 samples, 0.34%)</title><rect x="69.2483%" y="261" width="0.3417%" height="15" fill="rgb(249,103,42)" fg:x="608" fg:w="3"/><text x="69.4983%" y="271.50"></text></g><g><title>mwpf`HighsOptions::initRecords (3 samples, 0.34%)</title><rect x="69.2483%" y="245" width="0.3417%" height="15" fill="rgb(246,81,33)" fg:x="608" fg:w="3"/><text x="69.4983%" y="255.50"></text></g><g><title>mwpf`OptionRecordDouble::OptionRecordDouble(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.11%)</title><rect x="69.4761%" y="229" width="0.1139%" height="15" fill="rgb(252,33,42)" fg:x="610" fg:w="1"/><text x="69.7261%" y="239.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.11%)</title><rect x="69.4761%" y="213" width="0.1139%" height="15" fill="rgb(209,212,41)" fg:x="610" fg:w="1"/><text x="69.7261%" y="223.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.11%)</title><rect x="69.4761%" y="197" width="0.1139%" height="15" fill="rgb(207,154,6)" fg:x="610" fg:w="1"/><text x="69.7261%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.11%)</title><rect x="69.4761%" y="181" width="0.1139%" height="15" fill="rgb(223,64,47)" fg:x="610" fg:w="1"/><text x="69.7261%" y="191.50"></text></g><g><title>mwpf`HighsOptions::~HighsOptions (2 samples, 0.23%)</title><rect x="69.5900%" y="261" width="0.2278%" height="15" fill="rgb(211,161,38)" fg:x="611" fg:w="2"/><text x="69.8400%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.23%)</title><rect x="69.5900%" y="245" width="0.2278%" height="15" fill="rgb(219,138,40)" fg:x="611" fg:w="2"/><text x="69.8400%" y="255.50"></text></g><g><title>mwpf`highs::Model::solve (43 samples, 4.90%)</title><rect x="65.0342%" y="293" width="4.8975%" height="15" fill="rgb(241,228,46)" fg:x="571" fg:w="43"/><text x="65.2842%" y="303.50">mwpf`h..</text></g><g><title>mwpf`Highs::run (43 samples, 4.90%)</title><rect x="65.0342%" y="277" width="4.8975%" height="15" fill="rgb(223,209,38)" fg:x="571" fg:w="43"/><text x="65.2842%" y="287.50">mwpf`H..</text></g><g><title>mwpf`debugHighsSolution(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.11%)</title><rect x="69.8178%" y="261" width="0.1139%" height="15" fill="rgb(236,164,45)" fg:x="613" fg:w="1"/><text x="70.0678%" y="271.50"></text></g><g><title>mwpf`HighsInfo::initRecords (1 samples, 0.11%)</title><rect x="69.8178%" y="245" width="0.1139%" height="15" fill="rgb(231,15,5)" fg:x="613" fg:w="1"/><text x="70.0678%" y="255.50"></text></g><g><title>mwpf`InfoRecordInt::InfoRecordInt(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.11%)</title><rect x="69.8178%" y="229" width="0.1139%" height="15" fill="rgb(252,35,15)" fg:x="613" fg:w="1"/><text x="70.0678%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.11%)</title><rect x="69.8178%" y="213" width="0.1139%" height="15" fill="rgb(248,181,18)" fg:x="613" fg:w="1"/><text x="70.0678%" y="223.50"></text></g><g><title>mwpf`HEkk::HEkk (1 samples, 0.11%)</title><rect x="69.9317%" y="245" width="0.1139%" height="15" fill="rgb(233,39,42)" fg:x="614" fg:w="1"/><text x="70.1817%" y="255.50"></text></g><g><title>mwpf`HighsLp::HighsLp (1 samples, 0.11%)</title><rect x="69.9317%" y="229" width="0.1139%" height="15" fill="rgb(238,110,33)" fg:x="614" fg:w="1"/><text x="70.1817%" y="239.50"></text></g><g><title>mwpf`HighsSparseMatrix::clear (1 samples, 0.11%)</title><rect x="69.9317%" y="213" width="0.1139%" height="15" fill="rgb(233,195,10)" fg:x="614" fg:w="1"/><text x="70.1817%" y="223.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (1 samples, 0.11%)</title><rect x="69.9317%" y="197" width="0.1139%" height="15" fill="rgb(254,105,3)" fg:x="614" fg:w="1"/><text x="70.1817%" y="207.50"></text></g><g><title>mwpf`HighsLp::HighsLp (1 samples, 0.11%)</title><rect x="70.0456%" y="245" width="0.1139%" height="15" fill="rgb(221,225,9)" fg:x="615" fg:w="1"/><text x="70.2956%" y="255.50"></text></g><g><title>mwpf`HighsSparseMatrix::clear (1 samples, 0.11%)</title><rect x="70.0456%" y="229" width="0.1139%" height="15" fill="rgb(224,227,45)" fg:x="615" fg:w="1"/><text x="70.2956%" y="239.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (1 samples, 0.11%)</title><rect x="70.0456%" y="213" width="0.1139%" height="15" fill="rgb(229,198,43)" fg:x="615" fg:w="1"/><text x="70.2956%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.11%)</title><rect x="70.0456%" y="197" width="0.1139%" height="15" fill="rgb(206,209,35)" fg:x="615" fg:w="1"/><text x="70.2956%" y="207.50"></text></g><g><title>mwpf`highs::Problem&lt;MATRIX&gt;::try_optimise (3 samples, 0.34%)</title><rect x="69.9317%" y="293" width="0.3417%" height="15" fill="rgb(245,195,53)" fg:x="614" fg:w="3"/><text x="70.1817%" y="303.50"></text></g><g><title>mwpf`Highs_create (3 samples, 0.34%)</title><rect x="69.9317%" y="277" width="0.3417%" height="15" fill="rgb(240,92,26)" fg:x="614" fg:w="3"/><text x="70.1817%" y="287.50"></text></g><g><title>mwpf`Highs::Highs (3 samples, 0.34%)</title><rect x="69.9317%" y="261" width="0.3417%" height="15" fill="rgb(207,40,23)" fg:x="614" fg:w="3"/><text x="70.1817%" y="271.50"></text></g><g><title>mwpf`HighsOptions::initRecords (1 samples, 0.11%)</title><rect x="70.1595%" y="245" width="0.1139%" height="15" fill="rgb(223,111,35)" fg:x="616" fg:w="1"/><text x="70.4095%" y="255.50"></text></g><g><title>mwpf`OptionRecordInt::OptionRecordInt(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.11%)</title><rect x="70.1595%" y="229" width="0.1139%" height="15" fill="rgb(229,147,28)" fg:x="616" fg:w="1"/><text x="70.4095%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.11%)</title><rect x="70.1595%" y="213" width="0.1139%" height="15" fill="rgb(211,29,28)" fg:x="616" fg:w="1"/><text x="70.4095%" y="223.50"></text></g><g><title>mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize (61 samples, 6.95%)</title><rect x="63.4396%" y="309" width="6.9476%" height="15" fill="rgb(228,72,33)" fg:x="557" fg:w="61"/><text x="63.6896%" y="319.50">mwpf`mwpf..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::iter::traits::collect::FromIterator&lt;(&lt;K as weak_table::traits::WeakElement&gt;::Strong,V)&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::from_iter (1 samples, 0.11%)</title><rect x="70.2733%" y="293" width="0.1139%" height="15" fill="rgb(205,214,31)" fg:x="617" fg:w="1"/><text x="70.5233%" y="303.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="70.2733%" y="277" width="0.1139%" height="15" fill="rgb(224,111,15)" fg:x="617" fg:w="1"/><text x="70.5233%" y="287.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.11%)</title><rect x="70.3872%" y="277" width="0.1139%" height="15" fill="rgb(253,21,26)" fg:x="618" fg:w="1"/><text x="70.6372%" y="287.50"></text></g><g><title>mwpf`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.23%)</title><rect x="70.3872%" y="293" width="0.2278%" height="15" fill="rgb(245,139,43)" fg:x="618" fg:w="2"/><text x="70.6372%" y="303.50"></text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.11%)</title><rect x="70.5011%" y="277" width="0.1139%" height="15" fill="rgb(252,170,7)" fg:x="619" fg:w="1"/><text x="70.7511%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="70.5011%" y="261" width="0.1139%" height="15" fill="rgb(231,118,14)" fg:x="619" fg:w="1"/><text x="70.7511%" y="271.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (1 samples, 0.11%)</title><rect x="70.6150%" y="293" width="0.1139%" height="15" fill="rgb(238,83,0)" fg:x="620" fg:w="1"/><text x="70.8650%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.11%)</title><rect x="70.6150%" y="277" width="0.1139%" height="15" fill="rgb(221,39,39)" fg:x="620" fg:w="1"/><text x="70.8650%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.11%)</title><rect x="70.6150%" y="261" width="0.1139%" height="15" fill="rgb(222,119,46)" fg:x="620" fg:w="1"/><text x="70.8650%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.11%)</title><rect x="70.6150%" y="245" width="0.1139%" height="15" fill="rgb(222,165,49)" fg:x="620" fg:w="1"/><text x="70.8650%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune (267 samples, 30.41%)</title><rect x="40.5467%" y="325" width="30.4100%" height="15" fill="rgb(219,113,52)" fg:x="356" fg:w="267"/><text x="40.7967%" y="335.50">mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSer..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::iter::traits::collect::FromIterator&lt;(&lt;K as weak_table::traits::WeakElement&gt;::Strong,V)&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::from_iter (5 samples, 0.57%)</title><rect x="70.3872%" y="309" width="0.5695%" height="15" fill="rgb(214,7,15)" fg:x="618" fg:w="5"/><text x="70.6372%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (2 samples, 0.23%)</title><rect x="70.7289%" y="293" width="0.2278%" height="15" fill="rgb(235,32,4)" fg:x="621" fg:w="2"/><text x="70.9789%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.11%)</title><rect x="70.8428%" y="277" width="0.1139%" height="15" fill="rgb(238,90,54)" fg:x="622" fg:w="1"/><text x="71.0928%" y="287.50"></text></g><g><title>mwpf`mwpf::matrix::interface::MatrixEchelon::get_solution_local_minimum (3 samples, 0.34%)</title><rect x="70.9567%" y="293" width="0.3417%" height="15" fill="rgb(213,208,19)" fg:x="623" fg:w="3"/><text x="71.2067%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="71.1845%" y="277" width="0.1139%" height="15" fill="rgb(233,156,4)" fg:x="625" fg:w="1"/><text x="71.4345%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="71.2984%" y="277" width="0.1139%" height="15" fill="rgb(207,194,5)" fg:x="626" fg:w="1"/><text x="71.5484%" y="287.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="71.2984%" y="261" width="0.1139%" height="15" fill="rgb(206,111,30)" fg:x="626" fg:w="1"/><text x="71.5484%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="71.2984%" y="245" width="0.1139%" height="15" fill="rgb(243,70,54)" fg:x="626" fg:w="1"/><text x="71.5484%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="71.2984%" y="229" width="0.1139%" height="15" fill="rgb(242,28,8)" fg:x="626" fg:w="1"/><text x="71.5484%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.11%)</title><rect x="71.4123%" y="277" width="0.1139%" height="15" fill="rgb(219,106,18)" fg:x="627" fg:w="1"/><text x="71.6623%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.11%)</title><rect x="71.4123%" y="261" width="0.1139%" height="15" fill="rgb(244,222,10)" fg:x="627" fg:w="1"/><text x="71.6623%" y="271.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer_forest::RelaxerForest&gt; (1 samples, 0.11%)</title><rect x="71.5262%" y="277" width="0.1139%" height="15" fill="rgb(236,179,52)" fg:x="628" fg:w="1"/><text x="71.7762%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="71.5262%" y="261" width="0.1139%" height="15" fill="rgb(213,23,39)" fg:x="628" fg:w="1"/><text x="71.7762%" y="271.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="71.5262%" y="245" width="0.1139%" height="15" fill="rgb(238,48,10)" fg:x="628" fg:w="1"/><text x="71.7762%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="71.5262%" y="229" width="0.1139%" height="15" fill="rgb(251,196,23)" fg:x="628" fg:w="1"/><text x="71.7762%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.11%)</title><rect x="71.5262%" y="213" width="0.1139%" height="15" fill="rgb(250,152,24)" fg:x="628" fg:w="1"/><text x="71.7762%" y="223.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (3 samples, 0.34%)</title><rect x="71.6401%" y="277" width="0.3417%" height="15" fill="rgb(209,150,17)" fg:x="629" fg:w="3"/><text x="71.8901%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (2 samples, 0.23%)</title><rect x="71.7540%" y="261" width="0.2278%" height="15" fill="rgb(234,202,34)" fg:x="630" fg:w="2"/><text x="72.0040%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (1 samples, 0.11%)</title><rect x="71.8679%" y="245" width="0.1139%" height="15" fill="rgb(253,148,53)" fg:x="631" fg:w="1"/><text x="72.1179%" y="255.50"></text></g><g><title>mwpf`mwpf::matrix::row::ParityRow::xor_two_rows (1 samples, 0.11%)</title><rect x="71.9818%" y="277" width="0.1139%" height="15" fill="rgb(218,129,16)" fg:x="632" fg:w="1"/><text x="72.2318%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="72.2096%" y="229" width="0.1139%" height="15" fill="rgb(216,85,19)" fg:x="634" fg:w="1"/><text x="72.4596%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="72.2096%" y="213" width="0.1139%" height="15" fill="rgb(235,228,7)" fg:x="634" fg:w="1"/><text x="72.4596%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.23%)</title><rect x="72.2096%" y="245" width="0.2278%" height="15" fill="rgb(245,175,0)" fg:x="634" fg:w="2"/><text x="72.4596%" y="255.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.11%)</title><rect x="72.3235%" y="229" width="0.1139%" height="15" fill="rgb(208,168,36)" fg:x="635" fg:w="1"/><text x="72.5735%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="72.3235%" y="213" width="0.1139%" height="15" fill="rgb(246,171,24)" fg:x="635" fg:w="1"/><text x="72.5735%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.11%)</title><rect x="72.3235%" y="197" width="0.1139%" height="15" fill="rgb(215,142,24)" fg:x="635" fg:w="1"/><text x="72.5735%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.11%)</title><rect x="72.3235%" y="181" width="0.1139%" height="15" fill="rgb(250,187,7)" fg:x="635" fg:w="1"/><text x="72.5735%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.11%)</title><rect x="72.3235%" y="165" width="0.1139%" height="15" fill="rgb(228,66,33)" fg:x="635" fg:w="1"/><text x="72.5735%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.34%)</title><rect x="72.4374%" y="245" width="0.3417%" height="15" fill="rgb(234,215,21)" fg:x="636" fg:w="3"/><text x="72.6874%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (2 samples, 0.23%)</title><rect x="72.5513%" y="229" width="0.2278%" height="15" fill="rgb(222,191,20)" fg:x="637" fg:w="2"/><text x="72.8013%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.11%)</title><rect x="72.6651%" y="213" width="0.1139%" height="15" fill="rgb(245,79,54)" fg:x="638" fg:w="1"/><text x="72.9151%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.11%)</title><rect x="72.7790%" y="245" width="0.1139%" height="15" fill="rgb(240,10,37)" fg:x="639" fg:w="1"/><text x="73.0290%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.11%)</title><rect x="72.8929%" y="245" width="0.1139%" height="15" fill="rgb(214,192,32)" fg:x="640" fg:w="1"/><text x="73.1429%" y="255.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.11%)</title><rect x="73.0068%" y="245" width="0.1139%" height="15" fill="rgb(209,36,54)" fg:x="641" fg:w="1"/><text x="73.2568%" y="255.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.11%)</title><rect x="73.0068%" y="229" width="0.1139%" height="15" fill="rgb(220,10,11)" fg:x="641" fg:w="1"/><text x="73.2568%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.11%)</title><rect x="73.0068%" y="213" width="0.1139%" height="15" fill="rgb(221,106,17)" fg:x="641" fg:w="1"/><text x="73.2568%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.11%)</title><rect x="73.0068%" y="197" width="0.1139%" height="15" fill="rgb(251,142,44)" fg:x="641" fg:w="1"/><text x="73.2568%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.11%)</title><rect x="73.0068%" y="181" width="0.1139%" height="15" fill="rgb(238,13,15)" fg:x="641" fg:w="1"/><text x="73.2568%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.11%)</title><rect x="73.0068%" y="165" width="0.1139%" height="15" fill="rgb(208,107,27)" fg:x="641" fg:w="1"/><text x="73.2568%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.11%)</title><rect x="73.0068%" y="149" width="0.1139%" height="15" fill="rgb(205,136,37)" fg:x="641" fg:w="1"/><text x="73.2568%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.11%)</title><rect x="73.0068%" y="133" width="0.1139%" height="15" fill="rgb(250,205,27)" fg:x="641" fg:w="1"/><text x="73.2568%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.34%)</title><rect x="74.6014%" y="229" width="0.3417%" height="15" fill="rgb(210,80,43)" fg:x="655" fg:w="3"/><text x="74.8514%" y="239.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (17 samples, 1.94%)</title><rect x="73.1207%" y="245" width="1.9362%" height="15" fill="rgb(247,160,36)" fg:x="642" fg:w="17"/><text x="73.3707%" y="255.50">m..</text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="74.9431%" y="229" width="0.1139%" height="15" fill="rgb(234,13,49)" fg:x="658" fg:w="1"/><text x="75.1931%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="74.9431%" y="213" width="0.1139%" height="15" fill="rgb(234,122,0)" fg:x="658" fg:w="1"/><text x="75.1931%" y="223.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (37 samples, 4.21%)</title><rect x="75.0569%" y="229" width="4.2141%" height="15" fill="rgb(207,146,38)" fg:x="659" fg:w="37"/><text x="75.3069%" y="239.50">mwpf`..</text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (1 samples, 0.11%)</title><rect x="79.1572%" y="213" width="0.1139%" height="15" fill="rgb(207,177,25)" fg:x="695" fg:w="1"/><text x="79.4072%" y="223.50"></text></g><g><title>mwpf`mwpf::matrix::hair::HairView&lt;M&gt;::new (38 samples, 4.33%)</title><rect x="75.0569%" y="245" width="4.3280%" height="15" fill="rgb(211,178,42)" fg:x="659" fg:w="38"/><text x="75.3069%" y="255.50">mwpf`..</text></g><g><title>mwpf`mwpf::matrix::interface::MatrixTail::set_tail_edges (1 samples, 0.11%)</title><rect x="79.2711%" y="229" width="0.1139%" height="15" fill="rgb(230,69,54)" fg:x="696" fg:w="1"/><text x="79.5211%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.23%)</title><rect x="80.4100%" y="229" width="0.2278%" height="15" fill="rgb(214,135,41)" fg:x="706" fg:w="2"/><text x="80.6600%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="80.5239%" y="213" width="0.1139%" height="15" fill="rgb(237,67,25)" fg:x="707" fg:w="1"/><text x="80.7739%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.11%)</title><rect x="80.6378%" y="229" width="0.1139%" height="15" fill="rgb(222,189,50)" fg:x="708" fg:w="1"/><text x="80.8878%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.11%)</title><rect x="80.6378%" y="213" width="0.1139%" height="15" fill="rgb(245,148,34)" fg:x="708" fg:w="1"/><text x="80.8878%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.11%)</title><rect x="80.6378%" y="197" width="0.1139%" height="15" fill="rgb(222,29,6)" fg:x="708" fg:w="1"/><text x="80.8878%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_single_hair::PluginSingleHair as mwpf::plugin::PluginImpl&gt;::find_relaxers (77 samples, 8.77%)</title><rect x="72.0957%" y="261" width="8.7699%" height="15" fill="rgb(221,189,43)" fg:x="633" fg:w="77"/><text x="72.3457%" y="271.50">mwpf`&lt;mwpf::..</text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (13 samples, 1.48%)</title><rect x="79.3850%" y="245" width="1.4806%" height="15" fill="rgb(207,36,27)" fg:x="697" fg:w="13"/><text x="79.6350%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.11%)</title><rect x="80.7517%" y="229" width="0.1139%" height="15" fill="rgb(217,90,24)" fg:x="709" fg:w="1"/><text x="81.0017%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.11%)</title><rect x="80.7517%" y="213" width="0.1139%" height="15" fill="rgb(224,66,35)" fg:x="709" fg:w="1"/><text x="81.0017%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.11%)</title><rect x="80.7517%" y="197" width="0.1139%" height="15" fill="rgb(221,13,50)" fg:x="709" fg:w="1"/><text x="81.0017%" y="207.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (2 samples, 0.23%)</title><rect x="80.9795%" y="229" width="0.2278%" height="15" fill="rgb(236,68,49)" fg:x="711" fg:w="2"/><text x="81.2295%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (2 samples, 0.23%)</title><rect x="80.9795%" y="213" width="0.2278%" height="15" fill="rgb(229,146,28)" fg:x="711" fg:w="2"/><text x="81.2295%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.23%)</title><rect x="80.9795%" y="197" width="0.2278%" height="15" fill="rgb(225,31,38)" fg:x="711" fg:w="2"/><text x="81.2295%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.23%)</title><rect x="81.2073%" y="181" width="0.2278%" height="15" fill="rgb(250,208,3)" fg:x="713" fg:w="2"/><text x="81.4573%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.23%)</title><rect x="81.2073%" y="165" width="0.2278%" height="15" fill="rgb(246,54,23)" fg:x="713" fg:w="2"/><text x="81.4573%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.34%)</title><rect x="81.2073%" y="213" width="0.3417%" height="15" fill="rgb(243,76,11)" fg:x="713" fg:w="3"/><text x="81.4573%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (3 samples, 0.34%)</title><rect x="81.2073%" y="197" width="0.3417%" height="15" fill="rgb(245,21,50)" fg:x="713" fg:w="3"/><text x="81.4573%" y="207.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.11%)</title><rect x="81.4351%" y="181" width="0.1139%" height="15" fill="rgb(228,9,43)" fg:x="715" fg:w="1"/><text x="81.6851%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 0.11%)</title><rect x="81.4351%" y="165" width="0.1139%" height="15" fill="rgb(208,100,47)" fg:x="715" fg:w="1"/><text x="81.6851%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="81.4351%" y="149" width="0.1139%" height="15" fill="rgb(232,26,8)" fg:x="715" fg:w="1"/><text x="81.6851%" y="159.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (91 samples, 10.36%)</title><rect x="71.2984%" y="293" width="10.3645%" height="15" fill="rgb(216,166,38)" fg:x="626" fg:w="91"/><text x="71.5484%" y="303.50">mwpf`mwpf::plug..</text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (84 samples, 9.57%)</title><rect x="72.0957%" y="277" width="9.5672%" height="15" fill="rgb(251,202,51)" fg:x="633" fg:w="84"/><text x="72.3457%" y="287.50">mwpf`mwpf::plu..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (7 samples, 0.80%)</title><rect x="80.8656%" y="261" width="0.7973%" height="15" fill="rgb(254,216,34)" fg:x="710" fg:w="7"/><text x="81.1156%" y="271.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (7 samples, 0.80%)</title><rect x="80.8656%" y="245" width="0.7973%" height="15" fill="rgb(251,32,27)" fg:x="710" fg:w="7"/><text x="81.1156%" y="255.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (4 samples, 0.46%)</title><rect x="81.2073%" y="229" width="0.4556%" height="15" fill="rgb(208,127,28)" fg:x="713" fg:w="4"/><text x="81.4573%" y="239.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (1 samples, 0.11%)</title><rect x="81.5490%" y="213" width="0.1139%" height="15" fill="rgb(224,137,22)" fg:x="716" fg:w="1"/><text x="81.7990%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="81.7768%" y="277" width="0.1139%" height="15" fill="rgb(254,70,32)" fg:x="718" fg:w="1"/><text x="82.0268%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 0.11%)</title><rect x="81.8907%" y="277" width="0.1139%" height="15" fill="rgb(229,75,37)" fg:x="719" fg:w="1"/><text x="82.1407%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="81.8907%" y="261" width="0.1139%" height="15" fill="rgb(252,64,23)" fg:x="719" fg:w="1"/><text x="82.1407%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.11%)</title><rect x="82.0046%" y="277" width="0.1139%" height="15" fill="rgb(232,162,48)" fg:x="720" fg:w="1"/><text x="82.2546%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.11%)</title><rect x="82.1185%" y="245" width="0.1139%" height="15" fill="rgb(246,160,12)" fg:x="721" fg:w="1"/><text x="82.3685%" y="255.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.23%)</title><rect x="82.1185%" y="277" width="0.2278%" height="15" fill="rgb(247,166,0)" fg:x="721" fg:w="2"/><text x="82.3685%" y="287.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (2 samples, 0.23%)</title><rect x="82.1185%" y="261" width="0.2278%" height="15" fill="rgb(249,219,21)" fg:x="721" fg:w="2"/><text x="82.3685%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.11%)</title><rect x="82.2323%" y="245" width="0.1139%" height="15" fill="rgb(205,209,3)" fg:x="722" fg:w="1"/><text x="82.4823%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.11%)</title><rect x="82.2323%" y="229" width="0.1139%" height="15" fill="rgb(243,44,1)" fg:x="722" fg:w="1"/><text x="82.4823%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.11%)</title><rect x="82.2323%" y="213" width="0.1139%" height="15" fill="rgb(206,159,16)" fg:x="722" fg:w="1"/><text x="82.4823%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.11%)</title><rect x="82.2323%" y="197" width="0.1139%" height="15" fill="rgb(244,77,30)" fg:x="722" fg:w="1"/><text x="82.4823%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.11%)</title><rect x="82.2323%" y="181" width="0.1139%" height="15" fill="rgb(218,69,12)" fg:x="722" fg:w="1"/><text x="82.4823%" y="191.50"></text></g><g><title>mwpf`HighsSparseMatrix::HighsSparseMatrix (1 samples, 0.11%)</title><rect x="82.3462%" y="213" width="0.1139%" height="15" fill="rgb(212,87,7)" fg:x="723" fg:w="1"/><text x="82.5962%" y="223.50"></text></g><g><title>mwpf`highs::Model::add_col (2 samples, 0.23%)</title><rect x="82.3462%" y="277" width="0.2278%" height="15" fill="rgb(245,114,25)" fg:x="723" fg:w="2"/><text x="82.5962%" y="287.50"></text></g><g><title>mwpf`Highs::addCol (2 samples, 0.23%)</title><rect x="82.3462%" y="261" width="0.2278%" height="15" fill="rgb(210,61,42)" fg:x="723" fg:w="2"/><text x="82.5962%" y="271.50"></text></g><g><title>mwpf`Highs::addCols (2 samples, 0.23%)</title><rect x="82.3462%" y="245" width="0.2278%" height="15" fill="rgb(211,52,33)" fg:x="723" fg:w="2"/><text x="82.5962%" y="255.50"></text></g><g><title>mwpf`Highs::addColsInterface (2 samples, 0.23%)</title><rect x="82.3462%" y="229" width="0.2278%" height="15" fill="rgb(234,58,33)" fg:x="723" fg:w="2"/><text x="82.5962%" y="239.50"></text></g><g><title>mwpf`highs_isInfinity(double) (1 samples, 0.11%)</title><rect x="82.4601%" y="213" width="0.1139%" height="15" fill="rgb(220,115,36)" fg:x="724" fg:w="1"/><text x="82.7101%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="82.5740%" y="213" width="0.1139%" height="15" fill="rgb(243,153,54)" fg:x="725" fg:w="1"/><text x="82.8240%" y="223.50"></text></g><g><title>mwpf`HEkk::addRows (1 samples, 0.11%)</title><rect x="82.6879%" y="213" width="0.1139%" height="15" fill="rgb(251,47,18)" fg:x="726" fg:w="1"/><text x="82.9379%" y="223.50"></text></g><g><title>mwpf`HEkk::clear (1 samples, 0.11%)</title><rect x="82.6879%" y="197" width="0.1139%" height="15" fill="rgb(242,102,42)" fg:x="726" fg:w="1"/><text x="82.9379%" y="207.50"></text></g><g><title>mwpf`HighsLp::clear (1 samples, 0.11%)</title><rect x="82.6879%" y="181" width="0.1139%" height="15" fill="rgb(234,31,38)" fg:x="726" fg:w="1"/><text x="82.9379%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.11%)</title><rect x="82.6879%" y="165" width="0.1139%" height="15" fill="rgb(221,117,51)" fg:x="726" fg:w="1"/><text x="82.9379%" y="175.50"></text></g><g><title>mwpf`Highs::addRowsInterface (3 samples, 0.34%)</title><rect x="82.5740%" y="229" width="0.3417%" height="15" fill="rgb(212,20,18)" fg:x="725" fg:w="3"/><text x="82.8240%" y="239.50"></text></g><g><title>mwpf`HighsSparseMatrix::assess(HighsLogOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.11%)</title><rect x="82.8018%" y="213" width="0.1139%" height="15" fill="rgb(245,133,36)" fg:x="727" fg:w="1"/><text x="83.0518%" y="223.50"></text></g><g><title>mwpf`assessMatrix(HighsLogOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, int, int, bool, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;double, std::__1::allocator (1 samples, 0.11%)</title><rect x="82.8018%" y="197" width="0.1139%" height="15" fill="rgb(212,6,19)" fg:x="727" fg:w="1"/><text x="83.0518%" y="207.50"></text></g><g><title>mwpf`HighsModel::clear (1 samples, 0.11%)</title><rect x="82.9157%" y="229" width="0.1139%" height="15" fill="rgb(218,1,36)" fg:x="728" fg:w="1"/><text x="83.1657%" y="239.50"></text></g><g><title>mwpf`HighsLp::clear (1 samples, 0.11%)</title><rect x="82.9157%" y="213" width="0.1139%" height="15" fill="rgb(246,84,54)" fg:x="728" fg:w="1"/><text x="83.1657%" y="223.50"></text></g><g><title>mwpf`HighsSparseMatrix::clear (1 samples, 0.11%)</title><rect x="82.9157%" y="197" width="0.1139%" height="15" fill="rgb(242,110,6)" fg:x="728" fg:w="1"/><text x="83.1657%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_external (1 samples, 0.11%)</title><rect x="83.0296%" y="213" width="0.1139%" height="15" fill="rgb(214,47,5)" fg:x="729" fg:w="1"/><text x="83.2796%" y="223.50"></text></g><g><title>mwpf`Highs::addRow (6 samples, 0.68%)</title><rect x="82.5740%" y="261" width="0.6834%" height="15" fill="rgb(218,159,25)" fg:x="725" fg:w="6"/><text x="82.8240%" y="271.50"></text></g><g><title>mwpf`Highs::addRows (6 samples, 0.68%)</title><rect x="82.5740%" y="245" width="0.6834%" height="15" fill="rgb(215,211,28)" fg:x="725" fg:w="6"/><text x="82.8240%" y="255.50"></text></g><g><title>mwpf`PresolveComponentData::clear (2 samples, 0.23%)</title><rect x="83.0296%" y="229" width="0.2278%" height="15" fill="rgb(238,59,32)" fg:x="729" fg:w="2"/><text x="83.2796%" y="239.50"></text></g><g><title>mwpf`HighsLp::clear (1 samples, 0.11%)</title><rect x="83.1435%" y="213" width="0.1139%" height="15" fill="rgb(226,82,3)" fg:x="730" fg:w="1"/><text x="83.3935%" y="223.50"></text></g><g><title>mwpf`HighsSparseMatrix::clear (1 samples, 0.11%)</title><rect x="83.1435%" y="197" width="0.1139%" height="15" fill="rgb(240,164,32)" fg:x="730" fg:w="1"/><text x="83.3935%" y="207.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (1 samples, 0.11%)</title><rect x="83.1435%" y="181" width="0.1139%" height="15" fill="rgb(232,46,7)" fg:x="730" fg:w="1"/><text x="83.3935%" y="191.50"></text></g><g><title>mwpf`highs::Model::add_row (7 samples, 0.80%)</title><rect x="82.5740%" y="277" width="0.7973%" height="15" fill="rgb(229,129,53)" fg:x="725" fg:w="7"/><text x="82.8240%" y="287.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.11%)</title><rect x="83.2574%" y="261" width="0.1139%" height="15" fill="rgb(234,188,29)" fg:x="731" fg:w="1"/><text x="83.5074%" y="271.50"></text></g><g><title>mwpf`HEkk::computeDual (1 samples, 0.11%)</title><rect x="83.3713%" y="165" width="0.1139%" height="15" fill="rgb(246,141,4)" fg:x="732" fg:w="1"/><text x="83.6213%" y="175.50"></text></g><g><title>mwpf`HEkk::fullBtran(HVectorBase (1 samples, 0.11%)</title><rect x="83.3713%" y="149" width="0.1139%" height="15" fill="rgb(229,23,39)" fg:x="732" fg:w="1"/><text x="83.6213%" y="159.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (1 samples, 0.11%)</title><rect x="83.3713%" y="133" width="0.1139%" height="15" fill="rgb(206,12,3)" fg:x="732" fg:w="1"/><text x="83.6213%" y="143.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (1 samples, 0.11%)</title><rect x="83.3713%" y="117" width="0.1139%" height="15" fill="rgb(252,226,20)" fg:x="732" fg:w="1"/><text x="83.6213%" y="127.50"></text></g><g><title>mwpf`HFactor::buildFinish (1 samples, 0.11%)</title><rect x="83.4852%" y="101" width="0.1139%" height="15" fill="rgb(216,123,35)" fg:x="733" fg:w="1"/><text x="83.7352%" y="111.50"></text></g><g><title>mwpf`HEkk::initialiseForSolve (3 samples, 0.34%)</title><rect x="83.3713%" y="181" width="0.3417%" height="15" fill="rgb(212,68,40)" fg:x="732" fg:w="3"/><text x="83.6213%" y="191.50"></text></g><g><title>mwpf`HEkk::initialiseSimplexLpBasisAndFactor (2 samples, 0.23%)</title><rect x="83.4852%" y="165" width="0.2278%" height="15" fill="rgb(254,125,32)" fg:x="733" fg:w="2"/><text x="83.7352%" y="175.50"></text></g><g><title>mwpf`HEkk::computeFactor (2 samples, 0.23%)</title><rect x="83.4852%" y="149" width="0.2278%" height="15" fill="rgb(253,97,22)" fg:x="733" fg:w="2"/><text x="83.7352%" y="159.50"></text></g><g><title>mwpf`HSimplexNla::invert (2 samples, 0.23%)</title><rect x="83.4852%" y="133" width="0.2278%" height="15" fill="rgb(241,101,14)" fg:x="733" fg:w="2"/><text x="83.7352%" y="143.50"></text></g><g><title>mwpf`HFactor::build (2 samples, 0.23%)</title><rect x="83.4852%" y="117" width="0.2278%" height="15" fill="rgb(238,103,29)" fg:x="733" fg:w="2"/><text x="83.7352%" y="127.50"></text></g><g><title>mwpf`HFactor::buildKernel (1 samples, 0.11%)</title><rect x="83.5991%" y="101" width="0.1139%" height="15" fill="rgb(233,195,47)" fg:x="734" fg:w="1"/><text x="83.8491%" y="111.50"></text></g><g><title>mwpf`HEkkDual::solvePhase1 (1 samples, 0.11%)</title><rect x="83.7130%" y="165" width="0.1139%" height="15" fill="rgb(246,218,30)" fg:x="735" fg:w="1"/><text x="83.9630%" y="175.50"></text></g><g><title>mwpf`HEkkDual::rebuild (1 samples, 0.11%)</title><rect x="83.7130%" y="149" width="0.1139%" height="15" fill="rgb(219,145,47)" fg:x="735" fg:w="1"/><text x="83.9630%" y="159.50"></text></g><g><title>mwpf`HEkk::rebuildRefactor (1 samples, 0.11%)</title><rect x="83.7130%" y="133" width="0.1139%" height="15" fill="rgb(243,12,26)" fg:x="735" fg:w="1"/><text x="83.9630%" y="143.50"></text></g><g><title>mwpf`HighsRandom::drawUniform (1 samples, 0.11%)</title><rect x="83.7130%" y="117" width="0.1139%" height="15" fill="rgb(214,87,16)" fg:x="735" fg:w="1"/><text x="83.9630%" y="127.50"></text></g><g><title>mwpf`HEkkDual::cleanup (1 samples, 0.11%)</title><rect x="83.8269%" y="149" width="0.1139%" height="15" fill="rgb(208,99,42)" fg:x="736" fg:w="1"/><text x="84.0769%" y="159.50"></text></g><g><title>mwpf`HEkk::computeDual (1 samples, 0.11%)</title><rect x="83.8269%" y="133" width="0.1139%" height="15" fill="rgb(253,99,2)" fg:x="736" fg:w="1"/><text x="84.0769%" y="143.50"></text></g><g><title>mwpf`HEkk::fullBtran(HVectorBase (1 samples, 0.11%)</title><rect x="83.8269%" y="117" width="0.1139%" height="15" fill="rgb(220,168,23)" fg:x="736" fg:w="1"/><text x="84.0769%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (1 samples, 0.11%)</title><rect x="83.8269%" y="101" width="0.1139%" height="15" fill="rgb(242,38,24)" fg:x="736" fg:w="1"/><text x="84.0769%" y="111.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (1 samples, 0.11%)</title><rect x="83.8269%" y="85" width="0.1139%" height="15" fill="rgb(225,182,9)" fg:x="736" fg:w="1"/><text x="84.0769%" y="95.50"></text></g><g><title>mwpf`HEkkDual::chooseColumn(HVectorBase (1 samples, 0.11%)</title><rect x="83.9408%" y="133" width="0.1139%" height="15" fill="rgb(243,178,37)" fg:x="737" fg:w="1"/><text x="84.1908%" y="143.50"></text></g><g><title>mwpf`HEkk::tableauRowPrice(bool, HVectorBase&lt;double&gt; const&amp;, HVectorBase (1 samples, 0.11%)</title><rect x="83.9408%" y="117" width="0.1139%" height="15" fill="rgb(232,139,19)" fg:x="737" fg:w="1"/><text x="84.1908%" y="127.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByRowWithSwitch(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (1 samples, 0.11%)</title><rect x="83.9408%" y="101" width="0.1139%" height="15" fill="rgb(225,201,24)" fg:x="737" fg:w="1"/><text x="84.1908%" y="111.50"></text></g><g><title>mwpf`HEkkDual::chooseRow (1 samples, 0.11%)</title><rect x="84.0547%" y="133" width="0.1139%" height="15" fill="rgb(221,47,46)" fg:x="738" fg:w="1"/><text x="84.3047%" y="143.50"></text></g><g><title>mwpf`HEkkDualRHS::chooseNormal (1 samples, 0.11%)</title><rect x="84.0547%" y="117" width="0.1139%" height="15" fill="rgb(249,23,13)" fg:x="738" fg:w="1"/><text x="84.3047%" y="127.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (1 samples, 0.11%)</title><rect x="84.1686%" y="101" width="0.1139%" height="15" fill="rgb(219,9,5)" fg:x="739" fg:w="1"/><text x="84.4186%" y="111.50"></text></g><g><title>mwpf`HFactor::ftranFT(HVectorBase (1 samples, 0.11%)</title><rect x="84.1686%" y="85" width="0.1139%" height="15" fill="rgb(254,171,16)" fg:x="739" fg:w="1"/><text x="84.4186%" y="95.50"></text></g><g><title>mwpf`HEkkDual::updateFtran (2 samples, 0.23%)</title><rect x="84.1686%" y="133" width="0.2278%" height="15" fill="rgb(230,171,20)" fg:x="739" fg:w="2"/><text x="84.4186%" y="143.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (2 samples, 0.23%)</title><rect x="84.1686%" y="117" width="0.2278%" height="15" fill="rgb(210,71,41)" fg:x="739" fg:w="2"/><text x="84.4186%" y="127.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (1 samples, 0.11%)</title><rect x="84.2825%" y="101" width="0.1139%" height="15" fill="rgb(206,173,20)" fg:x="740" fg:w="1"/><text x="84.5325%" y="111.50"></text></g><g><title>mwpf`HEkkDual::updatePivots (1 samples, 0.11%)</title><rect x="84.3964%" y="133" width="0.1139%" height="15" fill="rgb(233,88,34)" fg:x="741" fg:w="1"/><text x="84.6464%" y="143.50"></text></g><g><title>mwpf`HighsSparseMatrix::update (1 samples, 0.11%)</title><rect x="84.3964%" y="117" width="0.1139%" height="15" fill="rgb(223,209,46)" fg:x="741" fg:w="1"/><text x="84.6464%" y="127.50"></text></g><g><title>mwpf`HEkkDual::iterate (6 samples, 0.68%)</title><rect x="83.9408%" y="149" width="0.6834%" height="15" fill="rgb(250,43,18)" fg:x="737" fg:w="6"/><text x="84.1908%" y="159.50"></text></g><g><title>mwpf`HEkkDual::updatePrimal(HVectorBase (1 samples, 0.11%)</title><rect x="84.5103%" y="133" width="0.1139%" height="15" fill="rgb(208,13,10)" fg:x="742" fg:w="1"/><text x="84.7603%" y="143.50"></text></g><g><title>mwpf`HEkkDualRHS::updatePrimal(HVectorBase (1 samples, 0.11%)</title><rect x="84.5103%" y="117" width="0.1139%" height="15" fill="rgb(212,200,36)" fg:x="742" fg:w="1"/><text x="84.7603%" y="127.50"></text></g><g><title>mwpf`HEkkDual::solve (9 samples, 1.03%)</title><rect x="83.7130%" y="181" width="1.0251%" height="15" fill="rgb(225,90,30)" fg:x="735" fg:w="9"/><text x="83.9630%" y="191.50"></text></g><g><title>mwpf`HEkkDual::solvePhase2 (8 samples, 0.91%)</title><rect x="83.8269%" y="165" width="0.9112%" height="15" fill="rgb(236,182,39)" fg:x="736" fg:w="8"/><text x="84.0769%" y="175.50"></text></g><g><title>mwpf`HEkkDual::rebuild (1 samples, 0.11%)</title><rect x="84.6241%" y="149" width="0.1139%" height="15" fill="rgb(212,144,35)" fg:x="743" fg:w="1"/><text x="84.8741%" y="159.50"></text></g><g><title>mwpf`HEkk::computeDual (1 samples, 0.11%)</title><rect x="84.6241%" y="133" width="0.1139%" height="15" fill="rgb(228,63,44)" fg:x="743" fg:w="1"/><text x="84.8741%" y="143.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::setup (1 samples, 0.11%)</title><rect x="84.6241%" y="117" width="0.1139%" height="15" fill="rgb(228,109,6)" fg:x="743" fg:w="1"/><text x="84.8741%" y="127.50"></text></g><g><title>mwpf`std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;::__append (1 samples, 0.11%)</title><rect x="84.6241%" y="101" width="0.1139%" height="15" fill="rgb(238,117,24)" fg:x="743" fg:w="1"/><text x="84.8741%" y="111.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.11%)</title><rect x="84.6241%" y="85" width="0.1139%" height="15" fill="rgb(242,26,26)" fg:x="743" fg:w="1"/><text x="84.8741%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.11%)</title><rect x="84.6241%" y="69" width="0.1139%" height="15" fill="rgb(221,92,48)" fg:x="743" fg:w="1"/><text x="84.8741%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.11%)</title><rect x="84.6241%" y="53" width="0.1139%" height="15" fill="rgb(209,209,32)" fg:x="743" fg:w="1"/><text x="84.8741%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.11%)</title><rect x="84.6241%" y="37" width="0.1139%" height="15" fill="rgb(221,70,22)" fg:x="743" fg:w="1"/><text x="84.8741%" y="47.50"></text></g><g><title>mwpf`HEkk::computeDual (1 samples, 0.11%)</title><rect x="84.7380%" y="133" width="0.1139%" height="15" fill="rgb(248,145,5)" fg:x="744" fg:w="1"/><text x="84.9880%" y="143.50"></text></g><g><title>mwpf`HEkk::solve (14 samples, 1.59%)</title><rect x="83.3713%" y="197" width="1.5945%" height="15" fill="rgb(226,116,26)" fg:x="732" fg:w="14"/><text x="83.6213%" y="207.50"></text></g><g><title>mwpf`HEkkPrimal::solve (2 samples, 0.23%)</title><rect x="84.7380%" y="181" width="0.2278%" height="15" fill="rgb(244,5,17)" fg:x="744" fg:w="2"/><text x="84.9880%" y="191.50"></text></g><g><title>mwpf`HEkkPrimal::solvePhase2 (2 samples, 0.23%)</title><rect x="84.7380%" y="165" width="0.2278%" height="15" fill="rgb(252,159,33)" fg:x="744" fg:w="2"/><text x="84.9880%" y="175.50"></text></g><g><title>mwpf`HEkkPrimal::rebuild (2 samples, 0.23%)</title><rect x="84.7380%" y="149" width="0.2278%" height="15" fill="rgb(206,71,0)" fg:x="744" fg:w="2"/><text x="84.9880%" y="159.50"></text></g><g><title>mwpf`HEkk::rebuildRefactor (1 samples, 0.11%)</title><rect x="84.8519%" y="133" width="0.1139%" height="15" fill="rgb(233,118,54)" fg:x="745" fg:w="1"/><text x="85.1019%" y="143.50"></text></g><g><title>mwpf`HEkk::factorSolveError (1 samples, 0.11%)</title><rect x="84.8519%" y="117" width="0.1139%" height="15" fill="rgb(234,83,48)" fg:x="745" fg:w="1"/><text x="85.1019%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (1 samples, 0.11%)</title><rect x="84.8519%" y="101" width="0.1139%" height="15" fill="rgb(228,3,54)" fg:x="745" fg:w="1"/><text x="85.1019%" y="111.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (1 samples, 0.11%)</title><rect x="84.8519%" y="85" width="0.1139%" height="15" fill="rgb(226,155,13)" fg:x="745" fg:w="1"/><text x="85.1019%" y="95.50"></text></g><g><title>mwpf`HFactor::btranU(HVectorBase (1 samples, 0.11%)</title><rect x="84.8519%" y="69" width="0.1139%" height="15" fill="rgb(241,28,37)" fg:x="745" fg:w="1"/><text x="85.1019%" y="79.50"></text></g><g><title>mwpf`Highs::callSolveLp(HighsLp&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (15 samples, 1.71%)</title><rect x="83.3713%" y="245" width="1.7084%" height="15" fill="rgb(233,93,10)" fg:x="732" fg:w="15"/><text x="83.6213%" y="255.50"></text></g><g><title>mwpf`solveLp(HighsLpSolverObject&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (15 samples, 1.71%)</title><rect x="83.3713%" y="229" width="1.7084%" height="15" fill="rgb(225,113,19)" fg:x="732" fg:w="15"/><text x="83.6213%" y="239.50"></text></g><g><title>mwpf`solveLpSimplex(HighsLpSolverObject&amp;) (15 samples, 1.71%)</title><rect x="83.3713%" y="213" width="1.7084%" height="15" fill="rgb(241,2,18)" fg:x="732" fg:w="15"/><text x="83.6213%" y="223.50"></text></g><g><title>mwpf`considerScaling(HighsOptions const&amp;, HighsLp&amp;) (1 samples, 0.11%)</title><rect x="84.9658%" y="197" width="0.1139%" height="15" fill="rgb(228,207,21)" fg:x="746" fg:w="1"/><text x="85.2158%" y="207.50"></text></g><g><title>mwpf`HighsSparseMatrix::range (1 samples, 0.11%)</title><rect x="84.9658%" y="181" width="0.1139%" height="15" fill="rgb(213,211,35)" fg:x="746" fg:w="1"/><text x="85.2158%" y="191.50"></text></g><g><title>mwpf`HighsHashHelpers::sparse_combine (1 samples, 0.11%)</title><rect x="85.0797%" y="181" width="0.1139%" height="15" fill="rgb(209,83,10)" fg:x="747" fg:w="1"/><text x="85.3297%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::detectParallelRowsAndCols (4 samples, 0.46%)</title><rect x="85.1936%" y="181" width="0.4556%" height="15" fill="rgb(209,164,1)" fg:x="748" fg:w="4"/><text x="85.4436%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::findNonzero (1 samples, 0.11%)</title><rect x="85.6492%" y="181" width="0.1139%" height="15" fill="rgb(213,184,43)" fg:x="752" fg:w="1"/><text x="85.8992%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::colPresolve (1 samples, 0.11%)</title><rect x="85.7631%" y="165" width="0.1139%" height="15" fill="rgb(231,61,34)" fg:x="753" fg:w="1"/><text x="86.0131%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::updateRowDualImpliedBounds (1 samples, 0.11%)</title><rect x="85.7631%" y="149" width="0.1139%" height="15" fill="rgb(235,75,3)" fg:x="753" fg:w="1"/><text x="86.0131%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::initialRowAndColPresolve (2 samples, 0.23%)</title><rect x="85.7631%" y="181" width="0.2278%" height="15" fill="rgb(220,106,47)" fg:x="753" fg:w="2"/><text x="86.0131%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::updateRowDualImpliedBounds (1 samples, 0.11%)</title><rect x="85.8770%" y="165" width="0.1139%" height="15" fill="rgb(210,196,33)" fg:x="754" fg:w="1"/><text x="86.1270%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::run (9 samples, 1.03%)</title><rect x="85.0797%" y="213" width="1.0251%" height="15" fill="rgb(229,154,42)" fg:x="747" fg:w="9"/><text x="85.3297%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::presolve (9 samples, 1.03%)</title><rect x="85.0797%" y="197" width="1.0251%" height="15" fill="rgb(228,114,26)" fg:x="747" fg:w="9"/><text x="85.3297%" y="207.50"></text></g><g><title>mwpf`presolve::HPresolve::shrinkProblem (1 samples, 0.11%)</title><rect x="85.9909%" y="181" width="0.1139%" height="15" fill="rgb(208,144,1)" fg:x="755" fg:w="1"/><text x="86.2409%" y="191.50"></text></g><g><title>mwpf`HighsLinearSumBounds::shrink(std::__1::vector&lt;int, std::__1::allocator (1 samples, 0.11%)</title><rect x="85.9909%" y="165" width="0.1139%" height="15" fill="rgb(239,112,37)" fg:x="755" fg:w="1"/><text x="86.2409%" y="175.50"></text></g><g><title>mwpf`Highs::runPresolve (11 samples, 1.25%)</title><rect x="85.0797%" y="245" width="1.2528%" height="15" fill="rgb(210,96,50)" fg:x="747" fg:w="11"/><text x="85.3297%" y="255.50"></text></g><g><title>mwpf`PresolveComponent::run (11 samples, 1.25%)</title><rect x="85.0797%" y="229" width="1.2528%" height="15" fill="rgb(222,178,2)" fg:x="747" fg:w="11"/><text x="85.3297%" y="239.50"></text></g><g><title>mwpf`presolve::HPresolve::setInput (2 samples, 0.23%)</title><rect x="86.1048%" y="213" width="0.2278%" height="15" fill="rgb(226,74,18)" fg:x="756" fg:w="2"/><text x="86.3548%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::fromCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (2 samples, 0.23%)</title><rect x="86.1048%" y="197" width="0.2278%" height="15" fill="rgb(225,67,54)" fg:x="756" fg:w="2"/><text x="86.3548%" y="207.50"></text></g><g><title>mwpf`HighsLinearSumBounds::add (2 samples, 0.23%)</title><rect x="86.1048%" y="181" width="0.2278%" height="15" fill="rgb(251,92,32)" fg:x="756" fg:w="2"/><text x="86.3548%" y="191.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;true&gt; (1 samples, 0.11%)</title><rect x="86.3326%" y="197" width="0.1139%" height="15" fill="rgb(228,149,22)" fg:x="758" fg:w="1"/><text x="86.5826%" y="207.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.11%)</title><rect x="86.3326%" y="181" width="0.1139%" height="15" fill="rgb(243,54,13)" fg:x="758" fg:w="1"/><text x="86.5826%" y="191.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.11%)</title><rect x="86.3326%" y="165" width="0.1139%" height="15" fill="rgb(243,180,28)" fg:x="758" fg:w="1"/><text x="86.5826%" y="175.50"></text></g><g><title>mwpf`highs::Model::solve (28 samples, 3.19%)</title><rect x="83.3713%" y="277" width="3.1891%" height="15" fill="rgb(208,167,24)" fg:x="732" fg:w="28"/><text x="83.6213%" y="287.50">mwp..</text></g><g><title>mwpf`Highs::run (28 samples, 3.19%)</title><rect x="83.3713%" y="261" width="3.1891%" height="15" fill="rgb(245,73,45)" fg:x="732" fg:w="28"/><text x="83.6213%" y="271.50">mwp..</text></g><g><title>mwpf`HighsOptions::HighsOptions (2 samples, 0.23%)</title><rect x="86.3326%" y="245" width="0.2278%" height="15" fill="rgb(237,203,48)" fg:x="758" fg:w="2"/><text x="86.5826%" y="255.50"></text></g><g><title>mwpf`HighsOptions::initRecords (2 samples, 0.23%)</title><rect x="86.3326%" y="229" width="0.2278%" height="15" fill="rgb(211,197,16)" fg:x="758" fg:w="2"/><text x="86.5826%" y="239.50"></text></g><g><title>mwpf`OptionRecordInt::OptionRecordInt(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.23%)</title><rect x="86.3326%" y="213" width="0.2278%" height="15" fill="rgb(243,99,51)" fg:x="758" fg:w="2"/><text x="86.5826%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.11%)</title><rect x="86.4465%" y="197" width="0.1139%" height="15" fill="rgb(215,123,29)" fg:x="759" fg:w="1"/><text x="86.6965%" y="207.50"></text></g><g><title>mwpf`highs::Problem&lt;MATRIX&gt;::try_optimise (1 samples, 0.11%)</title><rect x="86.5604%" y="277" width="0.1139%" height="15" fill="rgb(239,186,37)" fg:x="760" fg:w="1"/><text x="86.8104%" y="287.50"></text></g><g><title>mwpf`highs::HighsPtr::make_quiet (1 samples, 0.11%)</title><rect x="86.5604%" y="261" width="0.1139%" height="15" fill="rgb(252,136,39)" fg:x="760" fg:w="1"/><text x="86.8104%" y="271.50"></text></g><g><title>mwpf`highs::HighsPtr::set_option (1 samples, 0.11%)</title><rect x="86.5604%" y="245" width="0.1139%" height="15" fill="rgb(223,213,32)" fg:x="760" fg:w="1"/><text x="86.8104%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_strlen (1 samples, 0.11%)</title><rect x="86.5604%" y="229" width="0.1139%" height="15" fill="rgb(233,115,5)" fg:x="760" fg:w="1"/><text x="86.8104%" y="239.50"></text></g><g><title>mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize (45 samples, 5.13%)</title><rect x="81.6629%" y="293" width="5.1253%" height="15" fill="rgb(207,226,44)" fg:x="717" fg:w="45"/><text x="81.9129%" y="303.50">mwpf`m..</text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (1 samples, 0.11%)</title><rect x="86.6743%" y="277" width="0.1139%" height="15" fill="rgb(208,126,0)" fg:x="761" fg:w="1"/><text x="86.9243%" y="287.50"></text></g><g><title>mwpf`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="86.9021%" y="277" width="0.1139%" height="15" fill="rgb(244,66,21)" fg:x="763" fg:w="1"/><text x="87.1521%" y="287.50"></text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.11%)</title><rect x="86.9021%" y="261" width="0.1139%" height="15" fill="rgb(222,97,12)" fg:x="763" fg:w="1"/><text x="87.1521%" y="271.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (1 samples, 0.11%)</title><rect x="86.9021%" y="245" width="0.1139%" height="15" fill="rgb(219,213,19)" fg:x="763" fg:w="1"/><text x="87.1521%" y="255.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.11%)</title><rect x="87.0159%" y="277" width="0.1139%" height="15" fill="rgb(252,169,30)" fg:x="764" fg:w="1"/><text x="87.2659%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune (145 samples, 16.51%)</title><rect x="70.9567%" y="309" width="16.5148%" height="15" fill="rgb(206,32,51)" fg:x="623" fg:w="145"/><text x="71.2067%" y="319.50">mwpf`&lt;mwpf::primal_module..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::iter::traits::collect::FromIterator&lt;(&lt;K as weak_table::traits::WeakElement&gt;::Strong,V)&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::from_iter (6 samples, 0.68%)</title><rect x="86.7882%" y="293" width="0.6834%" height="15" fill="rgb(250,172,42)" fg:x="762" fg:w="6"/><text x="87.0382%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (3 samples, 0.34%)</title><rect x="87.1298%" y="277" width="0.3417%" height="15" fill="rgb(209,34,43)" fg:x="765" fg:w="3"/><text x="87.3798%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (3 samples, 0.34%)</title><rect x="87.1298%" y="261" width="0.3417%" height="15" fill="rgb(223,11,35)" fg:x="765" fg:w="3"/><text x="87.3798%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (4 samples, 0.46%)</title><rect x="87.5854%" y="293" width="0.4556%" height="15" fill="rgb(251,219,26)" fg:x="769" fg:w="4"/><text x="87.8354%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (2 samples, 0.23%)</title><rect x="87.8132%" y="277" width="0.2278%" height="15" fill="rgb(231,119,3)" fg:x="771" fg:w="2"/><text x="88.0632%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.11%)</title><rect x="87.9271%" y="261" width="0.1139%" height="15" fill="rgb(216,97,11)" fg:x="772" fg:w="1"/><text x="88.1771%" y="271.50"></text></g><g><title>mwpf`DYLD-STUB$$memmove (1 samples, 0.11%)</title><rect x="87.9271%" y="245" width="0.1139%" height="15" fill="rgb(223,59,9)" fg:x="772" fg:w="1"/><text x="88.1771%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_tune (151 samples, 17.20%)</title><rect x="70.9567%" y="325" width="17.1982%" height="15" fill="rgb(233,93,31)" fg:x="623" fg:w="151"/><text x="71.2067%" y="335.50">mwpf`&lt;mwpf::primal_module_s..</text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::union (6 samples, 0.68%)</title><rect x="87.4715%" y="309" width="0.6834%" height="15" fill="rgb(239,81,33)" fg:x="768" fg:w="6"/><text x="87.7215%" y="319.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::append (1 samples, 0.11%)</title><rect x="88.0410%" y="293" width="0.1139%" height="15" fill="rgb(213,120,34)" fg:x="773" fg:w="1"/><text x="88.2910%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::append_from_sorted_iters (1 samples, 0.11%)</title><rect x="88.0410%" y="277" width="0.1139%" height="15" fill="rgb(243,49,53)" fg:x="773" fg:w="1"/><text x="88.2910%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::append::MergeIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="88.0410%" y="261" width="0.1139%" height="15" fill="rgb(247,216,33)" fg:x="773" fg:w="1"/><text x="88.2910%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="88.0410%" y="245" width="0.1139%" height="15" fill="rgb(226,26,14)" fg:x="773" fg:w="1"/><text x="88.2910%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.11%)</title><rect x="88.0410%" y="229" width="0.1139%" height="15" fill="rgb(215,49,53)" fg:x="773" fg:w="1"/><text x="88.2910%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.11%)</title><rect x="88.0410%" y="213" width="0.1139%" height="15" fill="rgb(245,162,40)" fg:x="773" fg:w="1"/><text x="88.2910%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.11%)</title><rect x="88.0410%" y="197" width="0.1139%" height="15" fill="rgb(229,68,17)" fg:x="773" fg:w="1"/><text x="88.2910%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="88.1549%" y="309" width="0.1139%" height="15" fill="rgb(213,182,10)" fg:x="774" fg:w="1"/><text x="88.4049%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::calculate_cluster_affinity (3 samples, 0.34%)</title><rect x="88.2688%" y="309" width="0.3417%" height="15" fill="rgb(245,125,30)" fg:x="775" fg:w="3"/><text x="88.5188%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="88.4966%" y="293" width="0.1139%" height="15" fill="rgb(232,202,2)" fg:x="777" fg:w="1"/><text x="88.7466%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::update_sorted_clusters_aff (6 samples, 0.68%)</title><rect x="88.1549%" y="325" width="0.6834%" height="15" fill="rgb(237,140,51)" fg:x="774" fg:w="6"/><text x="88.4049%" y="335.50"></text></g><g><title>mwpf`alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (2 samples, 0.23%)</title><rect x="88.6105%" y="309" width="0.2278%" height="15" fill="rgb(236,157,25)" fg:x="778" fg:w="2"/><text x="88.8605%" y="319.50"></text></g><g><title>mwpf`DYLD-STUB$$free (1 samples, 0.11%)</title><rect x="88.8383%" y="325" width="0.1139%" height="15" fill="rgb(219,209,0)" fg:x="780" fg:w="1"/><text x="89.0883%" y="335.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.11%)</title><rect x="88.9522%" y="325" width="0.1139%" height="15" fill="rgb(240,116,54)" fg:x="781" fg:w="1"/><text x="89.2022%" y="335.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="89.0661%" y="325" width="0.1139%" height="15" fill="rgb(216,10,36)" fg:x="782" fg:w="1"/><text x="89.3161%" y="335.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="89.2938%" y="309" width="0.1139%" height="15" fill="rgb(222,72,44)" fg:x="784" fg:w="1"/><text x="89.5438%" y="319.50"></text></g><g><title>mwpf`mwpf::dual_module::DualModuleImpl::get_conflicts_tune (3 samples, 0.34%)</title><rect x="89.1800%" y="325" width="0.3417%" height="15" fill="rgb(232,159,9)" fg:x="783" fg:w="3"/><text x="89.4300%" y="335.50"></text></g><g><title>mwpf`alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (1 samples, 0.11%)</title><rect x="89.4077%" y="309" width="0.1139%" height="15" fill="rgb(210,39,32)" fg:x="785" fg:w="1"/><text x="89.6577%" y="319.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.11%)</title><rect x="89.4077%" y="293" width="0.1139%" height="15" fill="rgb(216,194,45)" fg:x="785" fg:w="1"/><text x="89.6577%" y="303.50"></text></g><g><title>mwpf`DYLD-STUB$$memmove (1 samples, 0.11%)</title><rect x="89.4077%" y="277" width="0.1139%" height="15" fill="rgb(218,18,35)" fg:x="785" fg:w="1"/><text x="89.6577%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.11%)</title><rect x="89.5216%" y="309" width="0.1139%" height="15" fill="rgb(207,83,51)" fg:x="786" fg:w="1"/><text x="89.7716%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.11%)</title><rect x="89.7494%" y="293" width="0.1139%" height="15" fill="rgb(225,63,43)" fg:x="788" fg:w="1"/><text x="89.9994%" y="303.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.23%)</title><rect x="89.9772%" y="277" width="0.2278%" height="15" fill="rgb(207,57,36)" fg:x="790" fg:w="2"/><text x="90.2272%" y="287.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (40 samples, 4.56%)</title><rect x="90.2050%" y="277" width="4.5558%" height="15" fill="rgb(216,99,33)" fg:x="792" fg:w="40"/><text x="90.4550%" y="287.50">mwpf`..</text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (39 samples, 4.44%)</title><rect x="90.3189%" y="261" width="4.4419%" height="15" fill="rgb(225,42,16)" fg:x="793" fg:w="39"/><text x="90.5689%" y="271.50">mwpf`..</text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (45 samples, 5.13%)</title><rect x="89.8633%" y="293" width="5.1253%" height="15" fill="rgb(220,201,45)" fg:x="789" fg:w="45"/><text x="90.1133%" y="303.50">mwpf`&lt;..</text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_unique (2 samples, 0.23%)</title><rect x="94.7608%" y="277" width="0.2278%" height="15" fill="rgb(225,33,4)" fg:x="832" fg:w="2"/><text x="95.0108%" y="287.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (1 samples, 0.11%)</title><rect x="94.9886%" y="293" width="0.1139%" height="15" fill="rgb(224,33,50)" fg:x="834" fg:w="1"/><text x="95.2386%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node (49 samples, 5.58%)</title><rect x="89.6355%" y="309" width="5.5809%" height="15" fill="rgb(246,198,51)" fg:x="787" fg:w="49"/><text x="89.8855%" y="319.50">mwpf`&lt;m..</text></g><g><title>mwpf`mwpf::dual_module::DualNode::init_time (1 samples, 0.11%)</title><rect x="95.1025%" y="293" width="0.1139%" height="15" fill="rgb(205,22,4)" fg:x="835" fg:w="1"/><text x="95.3525%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="95.2164%" y="309" width="0.1139%" height="15" fill="rgb(206,3,8)" fg:x="836" fg:w="1"/><text x="95.4664%" y="319.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.11%)</title><rect x="95.3303%" y="309" width="0.1139%" height="15" fill="rgb(251,23,15)" fg:x="837" fg:w="1"/><text x="95.5803%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (16 samples, 1.82%)</title><rect x="95.4442%" y="293" width="1.8223%" height="15" fill="rgb(252,88,28)" fg:x="838" fg:w="16"/><text x="95.6942%" y="303.50">m..</text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 1.59%)</title><rect x="95.6720%" y="277" width="1.5945%" height="15" fill="rgb(212,127,14)" fg:x="840" fg:w="14"/><text x="95.9220%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.46%)</title><rect x="97.2665%" y="293" width="0.4556%" height="15" fill="rgb(247,145,37)" fg:x="854" fg:w="4"/><text x="97.5165%" y="303.50"></text></g><g><title>mwpf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (21 samples, 2.39%)</title><rect x="95.4442%" y="309" width="2.3918%" height="15" fill="rgb(209,117,53)" fg:x="838" fg:w="21"/><text x="95.6942%" y="319.50">mw..</text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.11%)</title><rect x="97.7221%" y="293" width="0.1139%" height="15" fill="rgb(212,90,42)" fg:x="858" fg:w="1"/><text x="97.9721%" y="303.50"></text></g><g><title>mwpf`mwpf::decoding_hypergraph::DecodingHyperGraph::set_syndrome (1 samples, 0.11%)</title><rect x="97.8360%" y="309" width="0.1139%" height="15" fill="rgb(218,164,37)" fg:x="859" fg:w="1"/><text x="98.0860%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.11%)</title><rect x="98.0638%" y="293" width="0.1139%" height="15" fill="rgb(246,65,34)" fg:x="861" fg:w="1"/><text x="98.3138%" y="303.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::load (77 samples, 8.77%)</title><rect x="89.5216%" y="325" width="8.7699%" height="15" fill="rgb(231,100,33)" fg:x="786" fg:w="77"/><text x="89.7716%" y="335.50">mwpf`mwpf::d..</text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (3 samples, 0.34%)</title><rect x="97.9499%" y="309" width="0.3417%" height="15" fill="rgb(228,126,14)" fg:x="860" fg:w="3"/><text x="98.1999%" y="319.50"></text></g><g><title>mwpf`DYLD-STUB$$free (1 samples, 0.11%)</title><rect x="98.1777%" y="293" width="0.1139%" height="15" fill="rgb(215,173,21)" fg:x="862" fg:w="1"/><text x="98.4277%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::mwpf_solver::SolverSerialPlugins as mwpf::mwpf_solver::PrimalDualSolver&gt;::solve_visualizer (821 samples, 93.51%)</title><rect x="4.8975%" y="357" width="93.5080%" height="15" fill="rgb(210,6,40)" fg:x="43" fg:w="821"/><text x="5.1475%" y="367.50">mwpf`&lt;mwpf::mwpf_solver::SolverSerialPlugins as mwpf::mwpf_solver::PrimalDualSolver&gt;::solve_visualizer</text></g><g><title>mwpf`mwpf::primal_module::PrimalModuleImpl::solve_visualizer (820 samples, 93.39%)</title><rect x="5.0114%" y="341" width="93.3941%" height="15" fill="rgb(212,48,18)" fg:x="44" fg:w="820"/><text x="5.2614%" y="351.50">mwpf`mwpf::primal_module::PrimalModuleImpl::solve_visualizer</text></g><g><title>mwpf`mwpf::dual_module_pq::Obstacle::is_valid (1 samples, 0.11%)</title><rect x="98.2916%" y="325" width="0.1139%" height="15" fill="rgb(230,214,11)" fg:x="863" fg:w="1"/><text x="98.5416%" y="335.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::util::BenchmarkProfiler&gt; (1 samples, 0.11%)</title><rect x="98.4055%" y="357" width="0.1139%" height="15" fill="rgb(254,105,39)" fg:x="864" fg:w="1"/><text x="98.6555%" y="367.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::util::BenchmarkProfilerEntry&gt; (1 samples, 0.11%)</title><rect x="98.4055%" y="341" width="0.1139%" height="15" fill="rgb(245,158,5)" fg:x="864" fg:w="1"/><text x="98.6555%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="98.4055%" y="325" width="0.1139%" height="15" fill="rgb(249,208,11)" fg:x="864" fg:w="1"/><text x="98.6555%" y="335.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.11%)</title><rect x="98.5194%" y="325" width="0.1139%" height="15" fill="rgb(210,39,28)" fg:x="865" fg:w="1"/><text x="98.7694%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.23%)</title><rect x="98.7472%" y="293" width="0.2278%" height="15" fill="rgb(211,56,53)" fg:x="867" fg:w="2"/><text x="98.9972%" y="303.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::clear (7 samples, 0.80%)</title><rect x="98.5194%" y="357" width="0.7973%" height="15" fill="rgb(226,201,30)" fg:x="865" fg:w="7"/><text x="98.7694%" y="367.50"></text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::clear (7 samples, 0.80%)</title><rect x="98.5194%" y="341" width="0.7973%" height="15" fill="rgb(239,101,34)" fg:x="865" fg:w="7"/><text x="98.7694%" y="351.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.68%)</title><rect x="98.6333%" y="325" width="0.6834%" height="15" fill="rgb(226,209,5)" fg:x="866" fg:w="6"/><text x="98.8833%" y="335.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (6 samples, 0.68%)</title><rect x="98.6333%" y="309" width="0.6834%" height="15" fill="rgb(250,105,47)" fg:x="866" fg:w="6"/><text x="98.8833%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.34%)</title><rect x="98.9749%" y="293" width="0.3417%" height="15" fill="rgb(230,72,3)" fg:x="869" fg:w="3"/><text x="99.2249%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (3 samples, 0.34%)</title><rect x="98.9749%" y="277" width="0.3417%" height="15" fill="rgb(232,218,39)" fg:x="869" fg:w="3"/><text x="99.2249%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.34%)</title><rect x="98.9749%" y="261" width="0.3417%" height="15" fill="rgb(248,166,6)" fg:x="869" fg:w="3"/><text x="99.2249%" y="271.50"></text></g><g><title>mwpf`mwpf::example_codes::ExampleCode::generate_random_errors (4 samples, 0.46%)</title><rect x="99.3166%" y="357" width="0.4556%" height="15" fill="rgb(247,89,20)" fg:x="872" fg:w="4"/><text x="99.5666%" y="367.50"></text></g><g><title>mwpf`mwpf::example_codes::ExampleCode::get_syndrome (1 samples, 0.11%)</title><rect x="99.6583%" y="341" width="0.1139%" height="15" fill="rgb(248,130,54)" fg:x="875" fg:w="1"/><text x="99.9083%" y="351.50"></text></g><g><title>mwpf`mwpf::mwpf_solver::SolverSerialSingleHair::new (1 samples, 0.11%)</title><rect x="99.7722%" y="357" width="0.1139%" height="15" fill="rgb(234,196,4)" fg:x="876" fg:w="1"/><text x="100.0222%" y="367.50"></text></g><g><title>mwpf`mwpf::mwpf_solver::SolverSerialPlugins::new (1 samples, 0.11%)</title><rect x="99.7722%" y="341" width="0.1139%" height="15" fill="rgb(250,143,31)" fg:x="876" fg:w="1"/><text x="100.0222%" y="351.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::new_empty (1 samples, 0.11%)</title><rect x="99.7722%" y="325" width="0.1139%" height="15" fill="rgb(211,110,34)" fg:x="876" fg:w="1"/><text x="100.0222%" y="335.50"></text></g><g><title>mwpf`mwpf::example_codes::ExampleCode::sanity_check (1 samples, 0.11%)</title><rect x="99.7722%" y="309" width="0.1139%" height="15" fill="rgb(215,124,48)" fg:x="876" fg:w="1"/><text x="100.0222%" y="319.50"></text></g><g><title>mwpf`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.11%)</title><rect x="99.7722%" y="293" width="0.1139%" height="15" fill="rgb(216,46,13)" fg:x="876" fg:w="1"/><text x="100.0222%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.11%)</title><rect x="99.7722%" y="277" width="0.1139%" height="15" fill="rgb(205,184,25)" fg:x="876" fg:w="1"/><text x="100.0222%" y="287.50"></text></g><g><title>all (878 samples, 100%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(228,1,10)" fg:x="0" fg:w="878"/><text x="0.2500%" y="511.50"></text></g><g><title>dyld`start (878 samples, 100.00%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(213,116,27)" fg:x="0" fg:w="878"/><text x="0.2500%" y="495.50">dyld`start</text></g><g><title>mwpf`main (878 samples, 100.00%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(241,95,50)" fg:x="0" fg:w="878"/><text x="0.2500%" y="479.50">mwpf`main</text></g><g><title>mwpf`std::rt::lang_start (878 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(238,48,32)" fg:x="0" fg:w="878"/><text x="0.2500%" y="463.50">mwpf`std::rt::lang_start</text></g><g><title>mwpf`std::rt::lang_start_internal (878 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(235,113,49)" fg:x="0" fg:w="878"/><text x="0.2500%" y="447.50">mwpf`std::rt::lang_start_internal</text></g><g><title>mwpf`std::rt::lang_start::_{{closure}} (878 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(205,127,43)" fg:x="0" fg:w="878"/><text x="0.2500%" y="431.50">mwpf`std::rt::lang_start::_{{closure}}</text></g><g><title>mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace (878 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(250,162,2)" fg:x="0" fg:w="878"/><text x="0.2500%" y="415.50">mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mwpf`mwpf::main (878 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(220,13,41)" fg:x="0" fg:w="878"/><text x="0.2500%" y="399.50">mwpf`mwpf::main</text></g><g><title>mwpf`mwpf::cli::Cli::run (878 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(249,221,25)" fg:x="0" fg:w="878"/><text x="0.2500%" y="383.50">mwpf`mwpf::cli::Cli::run</text></g><g><title>mwpf`pbr::pb::ProgressBar&lt;T&gt;::draw (1 samples, 0.11%)</title><rect x="99.8861%" y="357" width="0.1139%" height="15" fill="rgb(215,208,19)" fg:x="877" fg:w="1"/><text x="100.1361%" y="367.50"></text></g><g><title>mwpf`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_all (1 samples, 0.11%)</title><rect x="99.8861%" y="341" width="0.1139%" height="15" fill="rgb(236,175,2)" fg:x="877" fg:w="1"/><text x="100.1361%" y="351.50"></text></g><g><title>mwpf`&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_all (1 samples, 0.11%)</title><rect x="99.8861%" y="325" width="0.1139%" height="15" fill="rgb(241,52,2)" fg:x="877" fg:w="1"/><text x="100.1361%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.11%)</title><rect x="99.8861%" y="309" width="0.1139%" height="15" fill="rgb(248,140,14)" fg:x="877" fg:w="1"/><text x="100.1361%" y="319.50"></text></g></svg></svg>