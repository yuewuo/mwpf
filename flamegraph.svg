<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="80"><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 1.25%)</title><rect x="0.0000%" y="357" width="1.2500%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve (1 samples, 1.25%)</title><rect x="1.2500%" y="261" width="1.2500%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="1.5000%" y="271.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_or_create_node (1 samples, 1.25%)</title><rect x="1.2500%" y="245" width="1.2500%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="1.5000%" y="255.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_node (1 samples, 1.25%)</title><rect x="1.2500%" y="229" width="1.2500%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="1.5000%" y="239.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (1 samples, 1.25%)</title><rect x="2.5000%" y="197" width="1.2500%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="2.7500%" y="207.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 1.25%)</title><rect x="2.5000%" y="181" width="1.2500%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="1"/><text x="2.7500%" y="191.50"></text></g><g><title>mwpf`mwpf::matrix::hair::HairView&lt;M&gt;::new (1 samples, 1.25%)</title><rect x="3.7500%" y="197" width="1.2500%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="4.0000%" y="207.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (1 samples, 1.25%)</title><rect x="3.7500%" y="181" width="1.2500%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="4.0000%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_single_hair::PluginSingleHair as mwpf::plugin::PluginImpl&gt;::find_relaxers (3 samples, 3.75%)</title><rect x="2.5000%" y="213" width="3.7500%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="3"/><text x="2.7500%" y="223.50">mwpf..</text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (1 samples, 1.25%)</title><rect x="5.0000%" y="197" width="1.2500%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="1"/><text x="5.2500%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 1.25%)</title><rect x="5.0000%" y="181" width="1.2500%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="1"/><text x="5.2500%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 1.25%)</title><rect x="6.2500%" y="149" width="1.2500%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="1"/><text x="6.5000%" y="159.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 1.25%)</title><rect x="6.2500%" y="133" width="1.2500%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="1"/><text x="6.5000%" y="143.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 1.25%)</title><rect x="6.2500%" y="117" width="1.2500%" height="15" fill="rgb(206,188,39)" fg:x="5" fg:w="1"/><text x="6.5000%" y="127.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 1.25%)</title><rect x="6.2500%" y="101" width="1.2500%" height="15" fill="rgb(217,207,13)" fg:x="5" fg:w="1"/><text x="6.5000%" y="111.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (5 samples, 6.25%)</title><rect x="2.5000%" y="245" width="6.2500%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="5"/><text x="2.7500%" y="255.50">mwpf`mwp..</text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (5 samples, 6.25%)</title><rect x="2.5000%" y="229" width="6.2500%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="5"/><text x="2.7500%" y="239.50">mwpf`mwp..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (2 samples, 2.50%)</title><rect x="6.2500%" y="213" width="2.5000%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="2"/><text x="6.5000%" y="223.50">mw..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (2 samples, 2.50%)</title><rect x="6.2500%" y="197" width="2.5000%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="2"/><text x="6.5000%" y="207.50">mw..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (2 samples, 2.50%)</title><rect x="6.2500%" y="181" width="2.5000%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="2"/><text x="6.5000%" y="191.50">mw..</text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (2 samples, 2.50%)</title><rect x="6.2500%" y="165" width="2.5000%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="2"/><text x="6.5000%" y="175.50">mw..</text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (1 samples, 1.25%)</title><rect x="7.5000%" y="149" width="1.2500%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="1"/><text x="7.7500%" y="159.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 1.25%)</title><rect x="7.5000%" y="133" width="1.2500%" height="15" fill="rgb(221,5,38)" fg:x="6" fg:w="1"/><text x="7.7500%" y="143.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 1.25%)</title><rect x="7.5000%" y="117" width="1.2500%" height="15" fill="rgb(247,18,42)" fg:x="6" fg:w="1"/><text x="7.7500%" y="127.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 1.25%)</title><rect x="7.5000%" y="101" width="1.2500%" height="15" fill="rgb(241,131,45)" fg:x="6" fg:w="1"/><text x="7.7500%" y="111.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 1.25%)</title><rect x="7.5000%" y="85" width="1.2500%" height="15" fill="rgb(249,31,29)" fg:x="6" fg:w="1"/><text x="7.7500%" y="95.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 1.25%)</title><rect x="8.7500%" y="229" width="1.2500%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="1"/><text x="9.0000%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 1.25%)</title><rect x="8.7500%" y="213" width="1.2500%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="1"/><text x="9.0000%" y="223.50"></text></g><g><title>mwpf`highs::Model::add_col (1 samples, 1.25%)</title><rect x="10.0000%" y="229" width="1.2500%" height="15" fill="rgb(214,148,48)" fg:x="8" fg:w="1"/><text x="10.2500%" y="239.50"></text></g><g><title>mwpf`Highs::addCol (1 samples, 1.25%)</title><rect x="10.0000%" y="213" width="1.2500%" height="15" fill="rgb(232,36,49)" fg:x="8" fg:w="1"/><text x="10.2500%" y="223.50"></text></g><g><title>mwpf`Highs::addCols (1 samples, 1.25%)</title><rect x="10.0000%" y="197" width="1.2500%" height="15" fill="rgb(209,103,24)" fg:x="8" fg:w="1"/><text x="10.2500%" y="207.50"></text></g><g><title>mwpf`PresolveComponentData::clear (1 samples, 1.25%)</title><rect x="10.0000%" y="181" width="1.2500%" height="15" fill="rgb(229,88,8)" fg:x="8" fg:w="1"/><text x="10.2500%" y="191.50"></text></g><g><title>mwpf`presolve::HighsPostsolveStack::operator= (1 samples, 1.25%)</title><rect x="10.0000%" y="165" width="1.2500%" height="15" fill="rgb(213,181,19)" fg:x="8" fg:w="1"/><text x="10.2500%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune (8 samples, 10.00%)</title><rect x="2.5000%" y="261" width="10.0000%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="8"/><text x="2.7500%" y="271.50">mwpf`&lt;mwpf::pr..</text></g><g><title>mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize (3 samples, 3.75%)</title><rect x="8.7500%" y="245" width="3.7500%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="3"/><text x="9.0000%" y="255.50">mwpf..</text></g><g><title>mwpf`highs::Model::solve (1 samples, 1.25%)</title><rect x="11.2500%" y="229" width="1.2500%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="1"/><text x="11.5000%" y="239.50"></text></g><g><title>mwpf`highs::Model::try_solve (1 samples, 1.25%)</title><rect x="11.2500%" y="213" width="1.2500%" height="15" fill="rgb(226,3,54)" fg:x="9" fg:w="1"/><text x="11.5000%" y="223.50"></text></g><g><title>mwpf`Highs::run (1 samples, 1.25%)</title><rect x="11.2500%" y="197" width="1.2500%" height="15" fill="rgb(245,192,40)" fg:x="9" fg:w="1"/><text x="11.5000%" y="207.50"></text></g><g><title>mwpf`Highs::callSolveLp(HighsLp&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 1.25%)</title><rect x="11.2500%" y="181" width="1.2500%" height="15" fill="rgb(238,167,29)" fg:x="9" fg:w="1"/><text x="11.5000%" y="191.50"></text></g><g><title>mwpf`solveLp(HighsLpSolverObject&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 1.25%)</title><rect x="11.2500%" y="165" width="1.2500%" height="15" fill="rgb(232,182,51)" fg:x="9" fg:w="1"/><text x="11.5000%" y="175.50"></text></g><g><title>mwpf`solveLpSimplex(HighsLpSolverObject&amp;) (1 samples, 1.25%)</title><rect x="11.2500%" y="149" width="1.2500%" height="15" fill="rgb(231,60,39)" fg:x="9" fg:w="1"/><text x="11.5000%" y="159.50"></text></g><g><title>mwpf`HEkk::solve (1 samples, 1.25%)</title><rect x="11.2500%" y="133" width="1.2500%" height="15" fill="rgb(208,69,12)" fg:x="9" fg:w="1"/><text x="11.5000%" y="143.50"></text></g><g><title>mwpf`HEkkDual::solve (1 samples, 1.25%)</title><rect x="11.2500%" y="117" width="1.2500%" height="15" fill="rgb(235,93,37)" fg:x="9" fg:w="1"/><text x="11.5000%" y="127.50"></text></g><g><title>mwpf`HEkkDual::solvePhase1 (1 samples, 1.25%)</title><rect x="11.2500%" y="101" width="1.2500%" height="15" fill="rgb(213,116,39)" fg:x="9" fg:w="1"/><text x="11.5000%" y="111.50"></text></g><g><title>mwpf`HEkkDual::rebuild (1 samples, 1.25%)</title><rect x="11.2500%" y="85" width="1.2500%" height="15" fill="rgb(222,207,29)" fg:x="9" fg:w="1"/><text x="11.5000%" y="95.50"></text></g><g><title>mwpf`HEkk::computeDualObjectiveValue (1 samples, 1.25%)</title><rect x="11.2500%" y="69" width="1.2500%" height="15" fill="rgb(206,96,30)" fg:x="9" fg:w="1"/><text x="11.5000%" y="79.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::get_edge_nodes (1 samples, 1.25%)</title><rect x="12.5000%" y="245" width="1.2500%" height="15" fill="rgb(218,138,4)" fg:x="10" fg:w="1"/><text x="12.7500%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 1.25%)</title><rect x="12.5000%" y="229" width="1.2500%" height="15" fill="rgb(250,191,14)" fg:x="10" fg:w="1"/><text x="12.7500%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 1.25%)</title><rect x="13.7500%" y="229" width="1.2500%" height="15" fill="rgb(239,60,40)" fg:x="11" fg:w="1"/><text x="14.0000%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (1 samples, 1.25%)</title><rect x="13.7500%" y="213" width="1.2500%" height="15" fill="rgb(206,27,48)" fg:x="11" fg:w="1"/><text x="14.0000%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 1.25%)</title><rect x="13.7500%" y="197" width="1.2500%" height="15" fill="rgb(225,35,8)" fg:x="11" fg:w="1"/><text x="14.0000%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 1.25%)</title><rect x="13.7500%" y="181" width="1.2500%" height="15" fill="rgb(250,213,24)" fg:x="11" fg:w="1"/><text x="14.0000%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 1.25%)</title><rect x="13.7500%" y="165" width="1.2500%" height="15" fill="rgb(247,123,22)" fg:x="11" fg:w="1"/><text x="14.0000%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 1.25%)</title><rect x="13.7500%" y="149" width="1.2500%" height="15" fill="rgb(231,138,38)" fg:x="11" fg:w="1"/><text x="14.0000%" y="159.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_or_create_node_tune (1 samples, 1.25%)</title><rect x="15.0000%" y="229" width="1.2500%" height="15" fill="rgb(231,145,46)" fg:x="12" fg:w="1"/><text x="15.2500%" y="239.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_node (1 samples, 1.25%)</title><rect x="15.0000%" y="213" width="1.2500%" height="15" fill="rgb(251,118,11)" fg:x="12" fg:w="1"/><text x="15.2500%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 1.25%)</title><rect x="15.0000%" y="197" width="1.2500%" height="15" fill="rgb(217,147,25)" fg:x="12" fg:w="1"/><text x="15.2500%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 1.25%)</title><rect x="15.0000%" y="181" width="1.2500%" height="15" fill="rgb(247,81,37)" fg:x="12" fg:w="1"/><text x="15.2500%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 1.25%)</title><rect x="15.0000%" y="165" width="1.2500%" height="15" fill="rgb(209,12,38)" fg:x="12" fg:w="1"/><text x="15.2500%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 1.25%)</title><rect x="17.5000%" y="181" width="1.2500%" height="15" fill="rgb(227,1,9)" fg:x="14" fg:w="1"/><text x="17.7500%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (5 samples, 6.25%)</title><rect x="20.0000%" y="165" width="6.2500%" height="15" fill="rgb(248,47,43)" fg:x="16" fg:w="5"/><text x="20.2500%" y="175.50">mwpf`wea..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 1.25%)</title><rect x="26.2500%" y="149" width="1.2500%" height="15" fill="rgb(221,10,30)" fg:x="21" fg:w="1"/><text x="26.5000%" y="159.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (8 samples, 10.00%)</title><rect x="18.7500%" y="181" width="10.0000%" height="15" fill="rgb(210,229,1)" fg:x="15" fg:w="8"/><text x="19.0000%" y="191.50">mwpf`mwpf::inv..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (2 samples, 2.50%)</title><rect x="26.2500%" y="165" width="2.5000%" height="15" fill="rgb(222,148,37)" fg:x="21" fg:w="2"/><text x="26.5000%" y="175.50">mw..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 1.25%)</title><rect x="27.5000%" y="149" width="1.2500%" height="15" fill="rgb(234,67,33)" fg:x="22" fg:w="1"/><text x="27.7500%" y="159.50"></text></g><g><title>mwpf`mwpf::matrix::hair::HairView&lt;M&gt;::new (14 samples, 17.50%)</title><rect x="28.7500%" y="181" width="17.5000%" height="15" fill="rgb(247,98,35)" fg:x="23" fg:w="14"/><text x="29.0000%" y="191.50">mwpf`mwpf::matrix::hair::Ha..</text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (14 samples, 17.50%)</title><rect x="28.7500%" y="165" width="17.5000%" height="15" fill="rgb(247,138,52)" fg:x="23" fg:w="14"/><text x="29.0000%" y="175.50">mwpf`mwpf::matrix::echelon:..</text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (1 samples, 1.25%)</title><rect x="45.0000%" y="149" width="1.2500%" height="15" fill="rgb(213,79,30)" fg:x="36" fg:w="1"/><text x="45.2500%" y="159.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 1.25%)</title><rect x="45.0000%" y="133" width="1.2500%" height="15" fill="rgb(246,177,23)" fg:x="36" fg:w="1"/><text x="45.2500%" y="143.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (2 samples, 2.50%)</title><rect x="46.2500%" y="181" width="2.5000%" height="15" fill="rgb(230,62,27)" fg:x="37" fg:w="2"/><text x="46.5000%" y="191.50">mw..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 1.25%)</title><rect x="47.5000%" y="165" width="1.2500%" height="15" fill="rgb(216,154,8)" fg:x="38" fg:w="1"/><text x="47.7500%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 1.25%)</title><rect x="48.7500%" y="165" width="1.2500%" height="15" fill="rgb(244,35,45)" fg:x="39" fg:w="1"/><text x="49.0000%" y="175.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 1.25%)</title><rect x="50.0000%" y="149" width="1.2500%" height="15" fill="rgb(251,115,12)" fg:x="40" fg:w="1"/><text x="50.2500%" y="159.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (1 samples, 1.25%)</title><rect x="51.2500%" y="149" width="1.2500%" height="15" fill="rgb(240,54,50)" fg:x="41" fg:w="1"/><text x="51.5000%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 1.25%)</title><rect x="51.2500%" y="133" width="1.2500%" height="15" fill="rgb(233,84,52)" fg:x="41" fg:w="1"/><text x="51.5000%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 1.25%)</title><rect x="51.2500%" y="117" width="1.2500%" height="15" fill="rgb(207,117,47)" fg:x="41" fg:w="1"/><text x="51.5000%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 1.25%)</title><rect x="51.2500%" y="101" width="1.2500%" height="15" fill="rgb(249,43,39)" fg:x="41" fg:w="1"/><text x="51.5000%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr (1 samples, 1.25%)</title><rect x="51.2500%" y="85" width="1.2500%" height="15" fill="rgb(209,38,44)" fg:x="41" fg:w="1"/><text x="51.5000%" y="95.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (2 samples, 2.50%)</title><rect x="52.5000%" y="149" width="2.5000%" height="15" fill="rgb(236,212,23)" fg:x="42" fg:w="2"/><text x="52.7500%" y="159.50">mw..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (2 samples, 2.50%)</title><rect x="52.5000%" y="133" width="2.5000%" height="15" fill="rgb(242,79,21)" fg:x="42" fg:w="2"/><text x="52.7500%" y="143.50">mw..</text></g><g><title>mwpf`weak_table::ptr_weak_hash_set::_&lt;impl core::iter::traits::collect::FromIterator&lt;&lt;T as weak_table::traits::WeakElement&gt;::Strong&gt; for weak_table::PtrWeakHashSet&lt;T,S&gt;&gt;::from_iter (6 samples, 7.50%)</title><rect x="48.7500%" y="181" width="7.5000%" height="15" fill="rgb(211,96,35)" fg:x="39" fg:w="6"/><text x="49.0000%" y="191.50">mwpf`weak_..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (5 samples, 6.25%)</title><rect x="50.0000%" y="165" width="6.2500%" height="15" fill="rgb(253,215,40)" fg:x="40" fg:w="5"/><text x="50.2500%" y="175.50">mwpf`wea..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 1.25%)</title><rect x="55.0000%" y="149" width="1.2500%" height="15" fill="rgb(211,81,21)" fg:x="44" fg:w="1"/><text x="55.2500%" y="159.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 1.25%)</title><rect x="55.0000%" y="133" width="1.2500%" height="15" fill="rgb(208,190,38)" fg:x="44" fg:w="1"/><text x="55.2500%" y="143.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_single_hair::PluginSingleHair as mwpf::plugin::PluginImpl&gt;::find_relaxers (33 samples, 41.25%)</title><rect x="16.2500%" y="197" width="41.2500%" height="15" fill="rgb(235,213,38)" fg:x="13" fg:w="33"/><text x="16.5000%" y="207.50">mwpf`&lt;mwpf::plugin_single_hair::PluginSingleHair as mwpf::plugin::P..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::remove_index (1 samples, 1.25%)</title><rect x="56.2500%" y="181" width="1.2500%" height="15" fill="rgb(237,122,38)" fg:x="45" fg:w="1"/><text x="56.5000%" y="191.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (1 samples, 1.25%)</title><rect x="57.5000%" y="165" width="1.2500%" height="15" fill="rgb(244,218,35)" fg:x="46" fg:w="1"/><text x="57.7500%" y="175.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 1.25%)</title><rect x="57.5000%" y="149" width="1.2500%" height="15" fill="rgb(240,68,47)" fg:x="46" fg:w="1"/><text x="57.7500%" y="159.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 1.25%)</title><rect x="57.5000%" y="133" width="1.2500%" height="15" fill="rgb(210,16,53)" fg:x="46" fg:w="1"/><text x="57.7500%" y="143.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 1.25%)</title><rect x="57.5000%" y="117" width="1.2500%" height="15" fill="rgb(235,124,12)" fg:x="46" fg:w="1"/><text x="57.7500%" y="127.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (2 samples, 2.50%)</title><rect x="57.5000%" y="197" width="2.5000%" height="15" fill="rgb(224,169,11)" fg:x="46" fg:w="2"/><text x="57.7500%" y="207.50">mw..</text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (2 samples, 2.50%)</title><rect x="57.5000%" y="181" width="2.5000%" height="15" fill="rgb(250,166,2)" fg:x="46" fg:w="2"/><text x="57.7500%" y="191.50">mw..</text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (1 samples, 1.25%)</title><rect x="58.7500%" y="165" width="1.2500%" height="15" fill="rgb(242,216,29)" fg:x="47" fg:w="1"/><text x="59.0000%" y="175.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::add (1 samples, 1.25%)</title><rect x="60.0000%" y="197" width="1.2500%" height="15" fill="rgb(230,116,27)" fg:x="48" fg:w="1"/><text x="60.2500%" y="207.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 1.25%)</title><rect x="60.0000%" y="181" width="1.2500%" height="15" fill="rgb(228,99,48)" fg:x="48" fg:w="1"/><text x="60.2500%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (1 samples, 1.25%)</title><rect x="61.2500%" y="165" width="1.2500%" height="15" fill="rgb(253,11,6)" fg:x="49" fg:w="1"/><text x="61.5000%" y="175.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (1 samples, 1.25%)</title><rect x="61.2500%" y="149" width="1.2500%" height="15" fill="rgb(247,143,39)" fg:x="49" fg:w="1"/><text x="61.5000%" y="159.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 1.25%)</title><rect x="61.2500%" y="133" width="1.2500%" height="15" fill="rgb(236,97,10)" fg:x="49" fg:w="1"/><text x="61.5000%" y="143.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 1.25%)</title><rect x="61.2500%" y="117" width="1.2500%" height="15" fill="rgb(233,208,19)" fg:x="49" fg:w="1"/><text x="61.5000%" y="127.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 1.25%)</title><rect x="61.2500%" y="101" width="1.2500%" height="15" fill="rgb(216,164,2)" fg:x="49" fg:w="1"/><text x="61.5000%" y="111.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 1.25%)</title><rect x="61.2500%" y="85" width="1.2500%" height="15" fill="rgb(220,129,5)" fg:x="49" fg:w="1"/><text x="61.5000%" y="95.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 2.50%)</title><rect x="62.5000%" y="165" width="2.5000%" height="15" fill="rgb(242,17,10)" fg:x="50" fg:w="2"/><text x="62.7500%" y="175.50">mw..</text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (2 samples, 2.50%)</title><rect x="62.5000%" y="149" width="2.5000%" height="15" fill="rgb(242,107,0)" fg:x="50" fg:w="2"/><text x="62.7500%" y="159.50">mw..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (2 samples, 2.50%)</title><rect x="62.5000%" y="133" width="2.5000%" height="15" fill="rgb(251,28,31)" fg:x="50" fg:w="2"/><text x="62.7500%" y="143.50">mw..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (2 samples, 2.50%)</title><rect x="62.5000%" y="117" width="2.5000%" height="15" fill="rgb(233,223,10)" fg:x="50" fg:w="2"/><text x="62.7500%" y="127.50">mw..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 2.50%)</title><rect x="62.5000%" y="101" width="2.5000%" height="15" fill="rgb(215,21,27)" fg:x="50" fg:w="2"/><text x="62.7500%" y="111.50">mw..</text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 1.25%)</title><rect x="65.0000%" y="165" width="1.2500%" height="15" fill="rgb(232,23,21)" fg:x="52" fg:w="1"/><text x="65.2500%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 1.25%)</title><rect x="65.0000%" y="149" width="1.2500%" height="15" fill="rgb(244,5,23)" fg:x="52" fg:w="1"/><text x="65.2500%" y="159.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (1 samples, 1.25%)</title><rect x="66.2500%" y="165" width="1.2500%" height="15" fill="rgb(226,81,46)" fg:x="53" fg:w="1"/><text x="66.5000%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 1.25%)</title><rect x="67.5000%" y="117" width="1.2500%" height="15" fill="rgb(247,70,30)" fg:x="54" fg:w="1"/><text x="67.7500%" y="127.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 1.25%)</title><rect x="67.5000%" y="101" width="1.2500%" height="15" fill="rgb(212,68,19)" fg:x="54" fg:w="1"/><text x="67.7500%" y="111.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 1.25%)</title><rect x="67.5000%" y="85" width="1.2500%" height="15" fill="rgb(240,187,13)" fg:x="54" fg:w="1"/><text x="67.7500%" y="95.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 1.25%)</title><rect x="67.5000%" y="69" width="1.2500%" height="15" fill="rgb(223,113,26)" fg:x="54" fg:w="1"/><text x="67.7500%" y="79.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 1.25%)</title><rect x="68.7500%" y="85" width="1.2500%" height="15" fill="rgb(206,192,2)" fg:x="55" fg:w="1"/><text x="69.0000%" y="95.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 3.75%)</title><rect x="67.5000%" y="149" width="3.7500%" height="15" fill="rgb(241,108,4)" fg:x="54" fg:w="3"/><text x="67.7500%" y="159.50">mwpf..</text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (3 samples, 3.75%)</title><rect x="67.5000%" y="133" width="3.7500%" height="15" fill="rgb(247,173,49)" fg:x="54" fg:w="3"/><text x="67.7500%" y="143.50">mwpf..</text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (2 samples, 2.50%)</title><rect x="68.7500%" y="117" width="2.5000%" height="15" fill="rgb(224,114,35)" fg:x="55" fg:w="2"/><text x="69.0000%" y="127.50">mw..</text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (2 samples, 2.50%)</title><rect x="68.7500%" y="101" width="2.5000%" height="15" fill="rgb(245,159,27)" fg:x="55" fg:w="2"/><text x="69.0000%" y="111.50">mw..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 1.25%)</title><rect x="70.0000%" y="85" width="1.2500%" height="15" fill="rgb(245,172,44)" fg:x="56" fg:w="1"/><text x="70.2500%" y="95.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (45 samples, 56.25%)</title><rect x="16.2500%" y="229" width="56.2500%" height="15" fill="rgb(236,23,11)" fg:x="13" fg:w="45"/><text x="16.5000%" y="239.50">mwpf`mwpf::plugin::PluginManager::find_relaxer</text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (45 samples, 56.25%)</title><rect x="16.2500%" y="213" width="56.2500%" height="15" fill="rgb(205,117,38)" fg:x="13" fg:w="45"/><text x="16.5000%" y="223.50">mwpf`mwpf::plugin::PluginEntry::execute</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (9 samples, 11.25%)</title><rect x="61.2500%" y="197" width="11.2500%" height="15" fill="rgb(237,72,25)" fg:x="49" fg:w="9"/><text x="61.5000%" y="207.50">mwpf`mwpf::relaxe..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (9 samples, 11.25%)</title><rect x="61.2500%" y="181" width="11.2500%" height="15" fill="rgb(244,70,9)" fg:x="49" fg:w="9"/><text x="61.5000%" y="191.50">mwpf`mwpf::relaxe..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (4 samples, 5.00%)</title><rect x="67.5000%" y="165" width="5.0000%" height="15" fill="rgb(217,125,39)" fg:x="54" fg:w="4"/><text x="67.7500%" y="175.50">mwpf`m..</text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (1 samples, 1.25%)</title><rect x="71.2500%" y="149" width="1.2500%" height="15" fill="rgb(235,36,10)" fg:x="57" fg:w="1"/><text x="71.5000%" y="159.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (3 samples, 3.75%)</title><rect x="72.5000%" y="213" width="3.7500%" height="15" fill="rgb(251,123,47)" fg:x="58" fg:w="3"/><text x="72.7500%" y="223.50">mwpf..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (3 samples, 3.75%)</title><rect x="72.5000%" y="197" width="3.7500%" height="15" fill="rgb(221,13,13)" fg:x="58" fg:w="3"/><text x="72.7500%" y="207.50">mwpf..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 1.25%)</title><rect x="75.0000%" y="181" width="1.2500%" height="15" fill="rgb(238,131,9)" fg:x="60" fg:w="1"/><text x="75.2500%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 1.25%)</title><rect x="75.0000%" y="165" width="1.2500%" height="15" fill="rgb(211,50,8)" fg:x="60" fg:w="1"/><text x="75.2500%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 1.25%)</title><rect x="76.2500%" y="213" width="1.2500%" height="15" fill="rgb(245,182,24)" fg:x="61" fg:w="1"/><text x="76.5000%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 1.25%)</title><rect x="76.2500%" y="197" width="1.2500%" height="15" fill="rgb(242,14,37)" fg:x="61" fg:w="1"/><text x="76.5000%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 1.25%)</title><rect x="76.2500%" y="181" width="1.2500%" height="15" fill="rgb(246,228,12)" fg:x="61" fg:w="1"/><text x="76.5000%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 1.25%)</title><rect x="76.2500%" y="165" width="1.2500%" height="15" fill="rgb(213,55,15)" fg:x="61" fg:w="1"/><text x="76.5000%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 1.25%)</title><rect x="77.5000%" y="197" width="1.2500%" height="15" fill="rgb(209,9,3)" fg:x="62" fg:w="1"/><text x="77.7500%" y="207.50"></text></g><g><title>mwpf`highs::Model::add_row (3 samples, 3.75%)</title><rect x="77.5000%" y="213" width="3.7500%" height="15" fill="rgb(230,59,30)" fg:x="62" fg:w="3"/><text x="77.7500%" y="223.50">mwpf..</text></g><g><title>mwpf`Highs::addRow (2 samples, 2.50%)</title><rect x="78.7500%" y="197" width="2.5000%" height="15" fill="rgb(209,121,21)" fg:x="63" fg:w="2"/><text x="79.0000%" y="207.50">mw..</text></g><g><title>mwpf`Highs::addRows (2 samples, 2.50%)</title><rect x="78.7500%" y="181" width="2.5000%" height="15" fill="rgb(220,109,13)" fg:x="63" fg:w="2"/><text x="79.0000%" y="191.50">mw..</text></g><g><title>mwpf`Highs::addRowsInterface (2 samples, 2.50%)</title><rect x="78.7500%" y="165" width="2.5000%" height="15" fill="rgb(232,18,1)" fg:x="63" fg:w="2"/><text x="79.0000%" y="175.50">mw..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 1.25%)</title><rect x="80.0000%" y="149" width="1.2500%" height="15" fill="rgb(215,41,42)" fg:x="64" fg:w="1"/><text x="80.2500%" y="159.50"></text></g><g><title>mwpf`HEkk::initialiseForSolve (1 samples, 1.25%)</title><rect x="81.2500%" y="101" width="1.2500%" height="15" fill="rgb(224,123,36)" fg:x="65" fg:w="1"/><text x="81.5000%" y="111.50"></text></g><g><title>mwpf`HEkk::initialiseSimplexLpBasisAndFactor (1 samples, 1.25%)</title><rect x="81.2500%" y="85" width="1.2500%" height="15" fill="rgb(240,125,3)" fg:x="65" fg:w="1"/><text x="81.5000%" y="95.50"></text></g><g><title>mwpf`HSimplexNla::setup (1 samples, 1.25%)</title><rect x="81.2500%" y="69" width="1.2500%" height="15" fill="rgb(205,98,50)" fg:x="65" fg:w="1"/><text x="81.5000%" y="79.50"></text></g><g><title>mwpf`HFactor::setupGeneral (1 samples, 1.25%)</title><rect x="81.2500%" y="53" width="1.2500%" height="15" fill="rgb(205,185,37)" fg:x="65" fg:w="1"/><text x="81.5000%" y="63.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 1.25%)</title><rect x="81.2500%" y="37" width="1.2500%" height="15" fill="rgb(238,207,15)" fg:x="65" fg:w="1"/><text x="81.5000%" y="47.50"></text></g><g><title>mwpf`Highs::callSolveLp(HighsLp&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 2.50%)</title><rect x="81.2500%" y="165" width="2.5000%" height="15" fill="rgb(213,199,42)" fg:x="65" fg:w="2"/><text x="81.5000%" y="175.50">mw..</text></g><g><title>mwpf`solveLp(HighsLpSolverObject&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 2.50%)</title><rect x="81.2500%" y="149" width="2.5000%" height="15" fill="rgb(235,201,11)" fg:x="65" fg:w="2"/><text x="81.5000%" y="159.50">mw..</text></g><g><title>mwpf`solveLpSimplex(HighsLpSolverObject&amp;) (2 samples, 2.50%)</title><rect x="81.2500%" y="133" width="2.5000%" height="15" fill="rgb(207,46,11)" fg:x="65" fg:w="2"/><text x="81.5000%" y="143.50">mw..</text></g><g><title>mwpf`HEkk::solve (2 samples, 2.50%)</title><rect x="81.2500%" y="117" width="2.5000%" height="15" fill="rgb(241,35,35)" fg:x="65" fg:w="2"/><text x="81.5000%" y="127.50">mw..</text></g><g><title>mwpf`HEkkDual::solve (1 samples, 1.25%)</title><rect x="82.5000%" y="101" width="1.2500%" height="15" fill="rgb(243,32,47)" fg:x="66" fg:w="1"/><text x="82.7500%" y="111.50"></text></g><g><title>mwpf`HEkkDual::solvePhase2 (1 samples, 1.25%)</title><rect x="82.5000%" y="85" width="1.2500%" height="15" fill="rgb(247,202,23)" fg:x="66" fg:w="1"/><text x="82.7500%" y="95.50"></text></g><g><title>mwpf`HEkkDual::rebuild (1 samples, 1.25%)</title><rect x="82.5000%" y="69" width="1.2500%" height="15" fill="rgb(219,102,11)" fg:x="66" fg:w="1"/><text x="82.7500%" y="79.50"></text></g><g><title>mwpf`HighsSparseMatrix::collectAj(HVectorBase (1 samples, 1.25%)</title><rect x="82.5000%" y="53" width="1.2500%" height="15" fill="rgb(243,110,44)" fg:x="66" fg:w="1"/><text x="82.7500%" y="63.50"></text></g><g><title>mwpf`HighsHashHelpers::sparse_combine (1 samples, 1.25%)</title><rect x="83.7500%" y="101" width="1.2500%" height="15" fill="rgb(222,74,54)" fg:x="67" fg:w="1"/><text x="84.0000%" y="111.50"></text></g><g><title>mwpf`presolve::HPresolve::detectParallelRowsAndCols (1 samples, 1.25%)</title><rect x="85.0000%" y="101" width="1.2500%" height="15" fill="rgb(216,99,12)" fg:x="68" fg:w="1"/><text x="85.2500%" y="111.50"></text></g><g><title>mwpf`presolve::HPresolve::run (3 samples, 3.75%)</title><rect x="83.7500%" y="133" width="3.7500%" height="15" fill="rgb(226,22,26)" fg:x="67" fg:w="3"/><text x="84.0000%" y="143.50">mwpf..</text></g><g><title>mwpf`presolve::HPresolve::presolve (3 samples, 3.75%)</title><rect x="83.7500%" y="117" width="3.7500%" height="15" fill="rgb(217,163,10)" fg:x="67" fg:w="3"/><text x="84.0000%" y="127.50">mwpf..</text></g><g><title>mwpf`presolve::HPresolve::fastPresolveLoop (1 samples, 1.25%)</title><rect x="86.2500%" y="101" width="1.2500%" height="15" fill="rgb(213,25,53)" fg:x="69" fg:w="1"/><text x="86.5000%" y="111.50"></text></g><g><title>mwpf`presolve::HPresolve::presolveChangedRows (1 samples, 1.25%)</title><rect x="86.2500%" y="85" width="1.2500%" height="15" fill="rgb(252,105,26)" fg:x="69" fg:w="1"/><text x="86.5000%" y="95.50"></text></g><g><title>mwpf`presolve::HPresolve::rowPresolve (1 samples, 1.25%)</title><rect x="86.2500%" y="69" width="1.2500%" height="15" fill="rgb(220,39,43)" fg:x="69" fg:w="1"/><text x="86.5000%" y="79.50"></text></g><g><title>mwpf`presolve::HPresolve::updateColImpliedBounds (1 samples, 1.25%)</title><rect x="86.2500%" y="53" width="1.2500%" height="15" fill="rgb(229,68,48)" fg:x="69" fg:w="1"/><text x="86.5000%" y="63.50"></text></g><g><title>mwpf`highs::Model::solve (6 samples, 7.50%)</title><rect x="81.2500%" y="213" width="7.5000%" height="15" fill="rgb(252,8,32)" fg:x="65" fg:w="6"/><text x="81.5000%" y="223.50">mwpf`highs..</text></g><g><title>mwpf`highs::Model::try_solve (6 samples, 7.50%)</title><rect x="81.2500%" y="197" width="7.5000%" height="15" fill="rgb(223,20,43)" fg:x="65" fg:w="6"/><text x="81.5000%" y="207.50">mwpf`highs..</text></g><g><title>mwpf`Highs::run (6 samples, 7.50%)</title><rect x="81.2500%" y="181" width="7.5000%" height="15" fill="rgb(229,81,49)" fg:x="65" fg:w="6"/><text x="81.5000%" y="191.50">mwpf`Highs..</text></g><g><title>mwpf`Highs::runPresolve (4 samples, 5.00%)</title><rect x="83.7500%" y="165" width="5.0000%" height="15" fill="rgb(236,28,36)" fg:x="67" fg:w="4"/><text x="84.0000%" y="175.50">mwpf`H..</text></g><g><title>mwpf`PresolveComponent::run (4 samples, 5.00%)</title><rect x="83.7500%" y="149" width="5.0000%" height="15" fill="rgb(249,185,26)" fg:x="67" fg:w="4"/><text x="84.0000%" y="159.50">mwpf`P..</text></g><g><title>mwpf`presolve::HPresolve::setInput (1 samples, 1.25%)</title><rect x="87.5000%" y="133" width="1.2500%" height="15" fill="rgb(249,174,33)" fg:x="70" fg:w="1"/><text x="87.7500%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::fromCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (1 samples, 1.25%)</title><rect x="87.5000%" y="117" width="1.2500%" height="15" fill="rgb(233,201,37)" fg:x="70" fg:w="1"/><text x="87.7500%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::link (1 samples, 1.25%)</title><rect x="87.5000%" y="101" width="1.2500%" height="15" fill="rgb(221,78,26)" fg:x="70" fg:w="1"/><text x="87.7500%" y="111.50"></text></g><g><title>mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize (14 samples, 17.50%)</title><rect x="72.5000%" y="229" width="17.5000%" height="15" fill="rgb(250,127,30)" fg:x="58" fg:w="14"/><text x="72.7500%" y="239.50">mwpf`mwpf::relaxer_optimize..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 1.25%)</title><rect x="88.7500%" y="213" width="1.2500%" height="15" fill="rgb(230,49,44)" fg:x="71" fg:w="1"/><text x="89.0000%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune (64 samples, 80.00%)</title><rect x="13.7500%" y="245" width="80.0000%" height="15" fill="rgb(229,67,23)" fg:x="11" fg:w="64"/><text x="14.0000%" y="255.50">mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::iter::traits::collect::FromIterator&lt;(&lt;K as weak_table::traits::WeakElement&gt;::Strong,V)&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::from_iter (3 samples, 3.75%)</title><rect x="90.0000%" y="229" width="3.7500%" height="15" fill="rgb(249,83,47)" fg:x="72" fg:w="3"/><text x="90.2500%" y="239.50">mwpf..</text></g><g><title>mwpf`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 3.75%)</title><rect x="90.0000%" y="213" width="3.7500%" height="15" fill="rgb(215,43,3)" fg:x="72" fg:w="3"/><text x="90.2500%" y="223.50">mwpf..</text></g><g><title>mwpf`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 3.75%)</title><rect x="90.0000%" y="197" width="3.7500%" height="15" fill="rgb(238,154,13)" fg:x="72" fg:w="3"/><text x="90.2500%" y="207.50">mwpf..</text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (1 samples, 1.25%)</title><rect x="93.7500%" y="229" width="1.2500%" height="15" fill="rgb(219,56,2)" fg:x="75" fg:w="1"/><text x="94.0000%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 1.25%)</title><rect x="93.7500%" y="213" width="1.2500%" height="15" fill="rgb(233,0,4)" fg:x="75" fg:w="1"/><text x="94.0000%" y="223.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 1.25%)</title><rect x="93.7500%" y="197" width="1.2500%" height="15" fill="rgb(235,30,7)" fg:x="75" fg:w="1"/><text x="94.0000%" y="207.50"></text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::union (2 samples, 2.50%)</title><rect x="93.7500%" y="245" width="2.5000%" height="15" fill="rgb(250,79,13)" fg:x="75" fg:w="2"/><text x="94.0000%" y="255.50">mw..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 1.25%)</title><rect x="95.0000%" y="229" width="1.2500%" height="15" fill="rgb(211,146,34)" fg:x="76" fg:w="1"/><text x="95.2500%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 1.25%)</title><rect x="95.0000%" y="213" width="1.2500%" height="15" fill="rgb(228,22,38)" fg:x="76" fg:w="1"/><text x="95.2500%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 1.25%)</title><rect x="95.0000%" y="197" width="1.2500%" height="15" fill="rgb(235,168,5)" fg:x="76" fg:w="1"/><text x="95.2500%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::mwpf_solver::SolverSerialPlugins as mwpf::mwpf_solver::PrimalDualSolver&gt;::solve_visualizer (77 samples, 96.25%)</title><rect x="1.2500%" y="293" width="96.2500%" height="15" fill="rgb(221,155,16)" fg:x="1" fg:w="77"/><text x="1.5000%" y="303.50">mwpf`&lt;mwpf::mwpf_solver::SolverSerialPlugins as mwpf::mwpf_solver::PrimalDualSolver&gt;::solve_visualizer</text></g><g><title>mwpf`mwpf::primal_module::PrimalModuleImpl::solve_visualizer (77 samples, 96.25%)</title><rect x="1.2500%" y="277" width="96.2500%" height="15" fill="rgb(215,215,53)" fg:x="1" fg:w="77"/><text x="1.5000%" y="287.50">mwpf`mwpf::primal_module::PrimalModuleImpl::solve_visualizer</text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_tune (68 samples, 85.00%)</title><rect x="12.5000%" y="261" width="85.0000%" height="15" fill="rgb(223,4,10)" fg:x="10" fg:w="68"/><text x="12.7500%" y="271.50">mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_tune</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 1.25%)</title><rect x="96.2500%" y="245" width="1.2500%" height="15" fill="rgb(234,103,6)" fg:x="77" fg:w="1"/><text x="96.5000%" y="255.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 1.25%)</title><rect x="96.2500%" y="229" width="1.2500%" height="15" fill="rgb(227,97,0)" fg:x="77" fg:w="1"/><text x="96.5000%" y="239.50"></text></g><g><title>dyld`start (79 samples, 98.75%)</title><rect x="0.0000%" y="421" width="98.7500%" height="15" fill="rgb(234,150,53)" fg:x="0" fg:w="79"/><text x="0.2500%" y="431.50">dyld`start</text></g><g><title>mwpf`main (79 samples, 98.75%)</title><rect x="0.0000%" y="405" width="98.7500%" height="15" fill="rgb(228,201,54)" fg:x="0" fg:w="79"/><text x="0.2500%" y="415.50">mwpf`main</text></g><g><title>mwpf`std::rt::lang_start (79 samples, 98.75%)</title><rect x="0.0000%" y="389" width="98.7500%" height="15" fill="rgb(222,22,37)" fg:x="0" fg:w="79"/><text x="0.2500%" y="399.50">mwpf`std::rt::lang_start</text></g><g><title>mwpf`std::rt::lang_start_internal (79 samples, 98.75%)</title><rect x="0.0000%" y="373" width="98.7500%" height="15" fill="rgb(237,53,32)" fg:x="0" fg:w="79"/><text x="0.2500%" y="383.50">mwpf`std::rt::lang_start_internal</text></g><g><title>mwpf`std::rt::lang_start::_{{closure}} (78 samples, 97.50%)</title><rect x="1.2500%" y="357" width="97.5000%" height="15" fill="rgb(233,25,53)" fg:x="1" fg:w="78"/><text x="1.5000%" y="367.50">mwpf`std::rt::lang_start::_{{closure}}</text></g><g><title>mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace (78 samples, 97.50%)</title><rect x="1.2500%" y="341" width="97.5000%" height="15" fill="rgb(210,40,34)" fg:x="1" fg:w="78"/><text x="1.5000%" y="351.50">mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mwpf`mwpf::main (78 samples, 97.50%)</title><rect x="1.2500%" y="325" width="97.5000%" height="15" fill="rgb(241,220,44)" fg:x="1" fg:w="78"/><text x="1.5000%" y="335.50">mwpf`mwpf::main</text></g><g><title>mwpf`mwpf::cli::Cli::run (78 samples, 97.50%)</title><rect x="1.2500%" y="309" width="97.5000%" height="15" fill="rgb(235,28,35)" fg:x="1" fg:w="78"/><text x="1.5000%" y="319.50">mwpf`mwpf::cli::Cli::run</text></g><g><title>mwpf`mwpf::mwpf_solver::SolverSerialSingleHair::new (1 samples, 1.25%)</title><rect x="97.5000%" y="293" width="1.2500%" height="15" fill="rgb(210,56,17)" fg:x="78" fg:w="1"/><text x="97.7500%" y="303.50"></text></g><g><title>mwpf`mwpf::mwpf_solver::SolverSerialPlugins::new (1 samples, 1.25%)</title><rect x="97.5000%" y="277" width="1.2500%" height="15" fill="rgb(224,130,29)" fg:x="78" fg:w="1"/><text x="97.7500%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::new_empty (1 samples, 1.25%)</title><rect x="97.5000%" y="261" width="1.2500%" height="15" fill="rgb(235,212,8)" fg:x="78" fg:w="1"/><text x="97.7500%" y="271.50"></text></g><g><title>mwpf`mwpf::example_codes::ExampleCode::sanity_check (1 samples, 1.25%)</title><rect x="97.5000%" y="245" width="1.2500%" height="15" fill="rgb(223,33,50)" fg:x="78" fg:w="1"/><text x="97.7500%" y="255.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (1 samples, 1.25%)</title><rect x="97.5000%" y="229" width="1.2500%" height="15" fill="rgb(219,149,13)" fg:x="78" fg:w="1"/><text x="97.7500%" y="239.50"></text></g><g><title>all (80 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(250,156,29)" fg:x="0" fg:w="80"/><text x="0.2500%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 1.25%)</title><rect x="98.7500%" y="421" width="1.2500%" height="15" fill="rgb(216,193,19)" fg:x="79" fg:w="1"/><text x="99.0000%" y="431.50"></text></g></svg></svg>