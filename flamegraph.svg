<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="565.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="565.00"> </text><svg id="frames" x="10" width="1180" total_samples="1704"><g><title>mwpf`&lt;mwpf::cli::Cli as clap_builder::derive::CommandFactory&gt;::command (1 samples, 0.06%)</title><rect x="0.0000%" y="405" width="0.0587%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>mwpf`&lt;mwpf::cli::Cli as clap_builder::derive::Args&gt;::augment_args (1 samples, 0.06%)</title><rect x="0.0000%" y="389" width="0.0587%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>mwpf`&lt;mwpf::cli::Commands as clap_builder::derive::Subcommand&gt;::augment_subcommands (1 samples, 0.06%)</title><rect x="0.0000%" y="373" width="0.0587%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>mwpf`&lt;mwpf::cli::BenchmarkParameters as clap_builder::derive::Args&gt;::augment_args (1 samples, 0.06%)</title><rect x="0.0000%" y="357" width="0.0587%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>mwpf`&lt;clap_builder::builder::styled_str::StyledStr as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.06%)</title><rect x="0.0000%" y="341" width="0.0587%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="0.0000%" y="325" width="0.0587%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>mwpf`&lt;mwpf::mwpf_solver::SolverSerialPlugins as mwpf::mwpf_solver::PrimalDualSolver&gt;::subgraph_range_visualizer (1 samples, 0.06%)</title><rect x="0.0587%" y="373" width="0.0587%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.3087%" y="383.50"></text></g><g><title>mwpf`mwpf::primal_module::PrimalModuleImpl::subgraph_range (1 samples, 0.06%)</title><rect x="0.0587%" y="357" width="0.0587%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.3087%" y="367.50"></text></g><g><title>mwpf`mwpf::util::SolverInitializer::get_subgraph_total_weight (1 samples, 0.06%)</title><rect x="0.0587%" y="341" width="0.0587%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.3087%" y="351.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="0.1174%" y="357" width="0.0587%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="1"/><text x="0.3674%" y="367.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="0.1174%" y="341" width="0.0587%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="1"/><text x="0.3674%" y="351.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="0.1761%" y="341" width="0.0587%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="0.4261%" y="351.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (6 samples, 0.35%)</title><rect x="0.2347%" y="341" width="0.3521%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="6"/><text x="0.4847%" y="351.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.12%)</title><rect x="0.5869%" y="325" width="0.1174%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="2"/><text x="0.8369%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (2 samples, 0.12%)</title><rect x="0.5869%" y="309" width="0.1174%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="2"/><text x="0.8369%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::cli::VerifierActualError as mwpf::cli::ResultVerifier&gt;::verify (13 samples, 0.76%)</title><rect x="0.0587%" y="389" width="0.7629%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="13"/><text x="0.3087%" y="399.50"></text></g><g><title>mwpf`mwpf::util::SolverInitializer::matches_subgraph_syndrome (12 samples, 0.70%)</title><rect x="0.1174%" y="373" width="0.7042%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="12"/><text x="0.3674%" y="383.50"></text></g><g><title>mwpf`mwpf::util::SolverInitializer::get_subgraph_syndrome (11 samples, 0.65%)</title><rect x="0.1761%" y="357" width="0.6455%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="11"/><text x="0.4261%" y="367.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (4 samples, 0.23%)</title><rect x="0.5869%" y="341" width="0.2347%" height="15" fill="rgb(221,200,47)" fg:x="10" fg:w="4"/><text x="0.8369%" y="351.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (2 samples, 0.12%)</title><rect x="0.7042%" y="325" width="0.1174%" height="15" fill="rgb(226,26,5)" fg:x="12" fg:w="2"/><text x="0.9542%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="0.7629%" y="309" width="0.0587%" height="15" fill="rgb(249,33,26)" fg:x="13" fg:w="1"/><text x="1.0129%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::clear (4 samples, 0.23%)</title><rect x="0.8216%" y="373" width="0.2347%" height="15" fill="rgb(235,183,28)" fg:x="14" fg:w="4"/><text x="1.0716%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.12%)</title><rect x="1.0563%" y="357" width="0.1174%" height="15" fill="rgb(221,5,38)" fg:x="18" fg:w="2"/><text x="1.3063%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.18%)</title><rect x="1.1737%" y="357" width="0.1761%" height="15" fill="rgb(247,18,42)" fg:x="20" fg:w="3"/><text x="1.4237%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.18%)</title><rect x="1.1737%" y="341" width="0.1761%" height="15" fill="rgb(241,131,45)" fg:x="20" fg:w="3"/><text x="1.4237%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.12%)</title><rect x="1.2324%" y="325" width="0.1174%" height="15" fill="rgb(249,31,29)" fg:x="21" fg:w="2"/><text x="1.4824%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="1.3498%" y="357" width="0.0587%" height="15" fill="rgb(225,111,53)" fg:x="23" fg:w="1"/><text x="1.5998%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.23%)</title><rect x="1.7019%" y="341" width="0.2347%" height="15" fill="rgb(238,160,17)" fg:x="29" fg:w="4"/><text x="1.9519%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="1.9366%" y="341" width="0.0587%" height="15" fill="rgb(214,148,48)" fg:x="33" fg:w="1"/><text x="2.1866%" y="351.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.18%)</title><rect x="1.9953%" y="341" width="0.1761%" height="15" fill="rgb(232,36,49)" fg:x="34" fg:w="3"/><text x="2.2453%" y="351.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer::Relaxer&gt; (3 samples, 0.18%)</title><rect x="1.9953%" y="325" width="0.1761%" height="15" fill="rgb(209,103,24)" fg:x="34" fg:w="3"/><text x="2.2453%" y="335.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="2.1127%" y="309" width="0.0587%" height="15" fill="rgb(229,88,8)" fg:x="36" fg:w="1"/><text x="2.3627%" y="319.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.06%)</title><rect x="2.1127%" y="293" width="0.0587%" height="15" fill="rgb(213,181,19)" fg:x="36" fg:w="1"/><text x="2.3627%" y="303.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::invalid_subgraph::InvalidSubgraph&gt; (1 samples, 0.06%)</title><rect x="2.1127%" y="277" width="0.0587%" height="15" fill="rgb(254,191,54)" fg:x="36" fg:w="1"/><text x="2.3627%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="2.2300%" y="325" width="0.0587%" height="15" fill="rgb(241,83,37)" fg:x="38" fg:w="1"/><text x="2.4800%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="2.2887%" y="309" width="0.0587%" height="15" fill="rgb(233,36,39)" fg:x="39" fg:w="1"/><text x="2.5387%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="2.3474%" y="309" width="0.0587%" height="15" fill="rgb(226,3,54)" fg:x="40" fg:w="1"/><text x="2.5974%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="2.4061%" y="309" width="0.0587%" height="15" fill="rgb(245,192,40)" fg:x="41" fg:w="1"/><text x="2.6561%" y="319.50"></text></g><g><title>mwpf`DYLD-STUB$$free (1 samples, 0.06%)</title><rect x="2.4648%" y="309" width="0.0587%" height="15" fill="rgb(238,167,29)" fg:x="42" fg:w="1"/><text x="2.7148%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="3.1103%" y="293" width="0.0587%" height="15" fill="rgb(232,182,51)" fg:x="53" fg:w="1"/><text x="3.3603%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.12%)</title><rect x="3.1690%" y="293" width="0.1174%" height="15" fill="rgb(231,60,39)" fg:x="54" fg:w="2"/><text x="3.4190%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.06%)</title><rect x="3.2277%" y="277" width="0.0587%" height="15" fill="rgb(208,69,12)" fg:x="55" fg:w="1"/><text x="3.4777%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::mwpf_solver::SolverSerialJointSingleHair as mwpf::mwpf_solver::PrimalDualSolver&gt;::clear (43 samples, 2.52%)</title><rect x="0.8216%" y="389" width="2.5235%" height="15" fill="rgb(235,93,37)" fg:x="14" fg:w="43"/><text x="1.0716%" y="399.50">mw..</text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::clear (39 samples, 2.29%)</title><rect x="1.0563%" y="373" width="2.2887%" height="15" fill="rgb(213,116,39)" fg:x="18" fg:w="39"/><text x="1.3063%" y="383.50">m..</text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (33 samples, 1.94%)</title><rect x="1.4085%" y="357" width="1.9366%" height="15" fill="rgb(222,207,29)" fg:x="24" fg:w="33"/><text x="1.6585%" y="367.50">m..</text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::matrix::echelon::Echelon&lt;mwpf::matrix::tail::Tail&lt;mwpf::matrix::tight::Tight&lt;mwpf::matrix::basic::BasicMatrix&gt;&gt;&gt;&gt; (20 samples, 1.17%)</title><rect x="2.1714%" y="341" width="1.1737%" height="15" fill="rgb(206,96,30)" fg:x="37" fg:w="20"/><text x="2.4214%" y="351.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::matrix::tight::Tight&lt;mwpf::matrix::basic::BasicMatrix&gt;&gt; (18 samples, 1.06%)</title><rect x="2.2887%" y="325" width="1.0563%" height="15" fill="rgb(218,138,4)" fg:x="39" fg:w="18"/><text x="2.5387%" y="335.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::matrix::basic::BasicMatrix&gt; (14 samples, 0.82%)</title><rect x="2.5235%" y="309" width="0.8216%" height="15" fill="rgb(250,191,14)" fg:x="43" fg:w="14"/><text x="2.7735%" y="319.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.06%)</title><rect x="3.2864%" y="293" width="0.0587%" height="15" fill="rgb(239,60,40)" fg:x="56" fg:w="1"/><text x="3.5364%" y="303.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.06%)</title><rect x="3.3451%" y="373" width="0.0587%" height="15" fill="rgb(206,27,48)" fg:x="57" fg:w="1"/><text x="3.5951%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="3.3451%" y="357" width="0.0587%" height="15" fill="rgb(225,35,8)" fg:x="57" fg:w="1"/><text x="3.5951%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="3.4038%" y="357" width="0.0587%" height="15" fill="rgb(250,213,24)" fg:x="58" fg:w="1"/><text x="3.6538%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="3.4624%" y="357" width="0.0587%" height="15" fill="rgb(247,123,22)" fg:x="59" fg:w="1"/><text x="3.7124%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.12%)</title><rect x="3.5211%" y="357" width="0.1174%" height="15" fill="rgb(231,138,38)" fg:x="60" fg:w="2"/><text x="3.7711%" y="367.50"></text></g><g><title>mwpf`&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="3.6385%" y="357" width="0.0587%" height="15" fill="rgb(231,145,46)" fg:x="62" fg:w="1"/><text x="3.8885%" y="367.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::advance_mode (15 samples, 0.88%)</title><rect x="3.6972%" y="357" width="0.8803%" height="15" fill="rgb(251,118,11)" fg:x="63" fg:w="15"/><text x="3.9472%" y="367.50"></text></g><g><title>mwpf`alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (3 samples, 0.18%)</title><rect x="4.4014%" y="341" width="0.1761%" height="15" fill="rgb(217,147,25)" fg:x="75" fg:w="3"/><text x="4.6514%" y="351.50"></text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (66 samples, 3.87%)</title><rect x="4.6362%" y="325" width="3.8732%" height="15" fill="rgb(247,81,37)" fg:x="79" fg:w="66"/><text x="4.8862%" y="335.50">mwpf..</text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::pop_event (78 samples, 4.58%)</title><rect x="4.5775%" y="341" width="4.5775%" height="15" fill="rgb(209,12,38)" fg:x="78" fg:w="78"/><text x="4.8275%" y="351.50">mwpf`..</text></g><g><title>mwpf`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (11 samples, 0.65%)</title><rect x="8.5094%" y="325" width="0.6455%" height="15" fill="rgb(227,1,9)" fg:x="145" fg:w="11"/><text x="8.7594%" y="335.50"></text></g><g><title>mwpf`mwpf::dual_module::GroupMaxUpdateLength::add (2 samples, 0.12%)</title><rect x="9.1549%" y="341" width="0.1174%" height="15" fill="rgb(248,47,43)" fg:x="156" fg:w="2"/><text x="9.4049%" y="351.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.12%)</title><rect x="9.1549%" y="325" width="0.1174%" height="15" fill="rgb(221,10,30)" fg:x="156" fg:w="2"/><text x="9.4049%" y="335.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (2 samples, 0.12%)</title><rect x="9.1549%" y="309" width="0.1174%" height="15" fill="rgb(210,229,1)" fg:x="156" fg:w="2"/><text x="9.4049%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.12%)</title><rect x="9.1549%" y="293" width="0.1174%" height="15" fill="rgb(222,148,37)" fg:x="156" fg:w="2"/><text x="9.4049%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.12%)</title><rect x="9.1549%" y="277" width="0.1174%" height="15" fill="rgb(234,67,33)" fg:x="156" fg:w="2"/><text x="9.4049%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.06%)</title><rect x="9.2136%" y="261" width="0.0587%" height="15" fill="rgb(247,98,35)" fg:x="157" fg:w="1"/><text x="9.4636%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::compute_maximum_update_length (81 samples, 4.75%)</title><rect x="4.5775%" y="357" width="4.7535%" height="15" fill="rgb(247,138,52)" fg:x="78" fg:w="81"/><text x="4.8275%" y="367.50">mwpf`&lt;..</text></g><g><title>mwpf`mwpf::dual_module_pq::Obstacle::is_valid (1 samples, 0.06%)</title><rect x="9.2723%" y="341" width="0.0587%" height="15" fill="rgb(213,79,30)" fg:x="158" fg:w="1"/><text x="9.5223%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="9.3897%" y="341" width="0.0587%" height="15" fill="rgb(246,177,23)" fg:x="160" fg:w="1"/><text x="9.6397%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="9.4484%" y="341" width="0.0587%" height="15" fill="rgb(230,62,27)" fg:x="161" fg:w="1"/><text x="9.6984%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="9.4484%" y="325" width="0.0587%" height="15" fill="rgb(216,154,8)" fg:x="161" fg:w="1"/><text x="9.6984%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.06%)</title><rect x="9.4484%" y="309" width="0.0587%" height="15" fill="rgb(244,35,45)" fg:x="161" fg:w="1"/><text x="9.6984%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.06%)</title><rect x="9.4484%" y="293" width="0.0587%" height="15" fill="rgb(251,115,12)" fg:x="161" fg:w="1"/><text x="9.6984%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.41%)</title><rect x="9.5070%" y="341" width="0.4108%" height="15" fill="rgb(240,54,50)" fg:x="162" fg:w="7"/><text x="9.7570%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="10.2113%" y="325" width="0.0587%" height="15" fill="rgb(233,84,52)" fg:x="174" fg:w="1"/><text x="10.4613%" y="335.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as core::default::Default&gt;::default (1 samples, 0.06%)</title><rect x="10.2700%" y="325" width="0.0587%" height="15" fill="rgb(207,117,47)" fg:x="175" fg:w="1"/><text x="10.5200%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="10.2700%" y="309" width="0.0587%" height="15" fill="rgb(249,43,39)" fg:x="175" fg:w="1"/><text x="10.5200%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (4 samples, 0.23%)</title><rect x="10.3286%" y="309" width="0.2347%" height="15" fill="rgb(209,38,44)" fg:x="176" fg:w="4"/><text x="10.5786%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (4 samples, 0.23%)</title><rect x="10.3286%" y="293" width="0.2347%" height="15" fill="rgb(236,212,23)" fg:x="176" fg:w="4"/><text x="10.5786%" y="303.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.06%)</title><rect x="10.5634%" y="309" width="0.0587%" height="15" fill="rgb(242,79,21)" fg:x="180" fg:w="1"/><text x="10.8134%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="10.5634%" y="293" width="0.0587%" height="15" fill="rgb(211,96,35)" fg:x="180" fg:w="1"/><text x="10.8134%" y="303.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="10.7394%" y="293" width="0.0587%" height="15" fill="rgb(253,215,40)" fg:x="183" fg:w="1"/><text x="10.9894%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (7 samples, 0.41%)</title><rect x="10.6221%" y="309" width="0.4108%" height="15" fill="rgb(211,81,21)" fg:x="181" fg:w="7"/><text x="10.8721%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (4 samples, 0.23%)</title><rect x="10.7981%" y="293" width="0.2347%" height="15" fill="rgb(208,190,38)" fg:x="184" fg:w="4"/><text x="11.0481%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (15 samples, 0.88%)</title><rect x="10.3286%" y="325" width="0.8803%" height="15" fill="rgb(235,213,38)" fg:x="176" fg:w="15"/><text x="10.5786%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (3 samples, 0.18%)</title><rect x="11.0329%" y="309" width="0.1761%" height="15" fill="rgb(237,122,38)" fg:x="188" fg:w="3"/><text x="11.2829%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (3 samples, 0.18%)</title><rect x="11.0329%" y="293" width="0.1761%" height="15" fill="rgb(244,218,35)" fg:x="188" fg:w="3"/><text x="11.2829%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="11.1502%" y="277" width="0.0587%" height="15" fill="rgb(240,68,47)" fg:x="190" fg:w="1"/><text x="11.4002%" y="287.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="11.3263%" y="309" width="0.0587%" height="15" fill="rgb(210,16,53)" fg:x="193" fg:w="1"/><text x="11.5763%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="11.3850%" y="309" width="0.0587%" height="15" fill="rgb(235,124,12)" fg:x="194" fg:w="1"/><text x="11.6350%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (3 samples, 0.18%)</title><rect x="11.4437%" y="309" width="0.1761%" height="15" fill="rgb(224,169,11)" fg:x="195" fg:w="3"/><text x="11.6937%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="11.6784%" y="293" width="0.0587%" height="15" fill="rgb(250,166,2)" fg:x="199" fg:w="1"/><text x="11.9284%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.06%)</title><rect x="11.6784%" y="277" width="0.0587%" height="15" fill="rgb(242,216,29)" fg:x="199" fg:w="1"/><text x="11.9284%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (10 samples, 0.59%)</title><rect x="11.2089%" y="325" width="0.5869%" height="15" fill="rgb(230,116,27)" fg:x="191" fg:w="10"/><text x="11.4589%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (3 samples, 0.18%)</title><rect x="11.6197%" y="309" width="0.1761%" height="15" fill="rgb(228,99,48)" fg:x="198" fg:w="3"/><text x="11.8697%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="11.7371%" y="293" width="0.0587%" height="15" fill="rgb(253,11,6)" fg:x="200" fg:w="1"/><text x="11.9871%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="11.7371%" y="277" width="0.0587%" height="15" fill="rgb(247,143,39)" fg:x="200" fg:w="1"/><text x="11.9871%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::load (43 samples, 2.52%)</title><rect x="9.3310%" y="357" width="2.5235%" height="15" fill="rgb(236,97,10)" fg:x="159" fg:w="43"/><text x="9.5810%" y="367.50">mw..</text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::generate_matrix (33 samples, 1.94%)</title><rect x="9.9178%" y="341" width="1.9366%" height="15" fill="rgb(233,208,19)" fg:x="169" fg:w="33"/><text x="10.1678%" y="351.50">m..</text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (1 samples, 0.06%)</title><rect x="11.7958%" y="325" width="0.0587%" height="15" fill="rgb(216,164,2)" fg:x="201" fg:w="1"/><text x="12.0458%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.06%)</title><rect x="12.4413%" y="341" width="0.0587%" height="15" fill="rgb(220,129,5)" fg:x="212" fg:w="1"/><text x="12.6913%" y="351.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.18%)</title><rect x="12.5000%" y="341" width="0.1761%" height="15" fill="rgb(242,17,10)" fg:x="213" fg:w="3"/><text x="12.7500%" y="351.50"></text></g><g><title>mwpf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.12%)</title><rect x="12.5587%" y="325" width="0.1174%" height="15" fill="rgb(242,107,0)" fg:x="214" fg:w="2"/><text x="12.8087%" y="335.50"></text></g><g><title>mwpf`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.06%)</title><rect x="12.6174%" y="309" width="0.0587%" height="15" fill="rgb(251,28,31)" fg:x="215" fg:w="1"/><text x="12.8674%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::get_edge_nodes (1 samples, 0.06%)</title><rect x="12.6761%" y="341" width="0.0587%" height="15" fill="rgb(233,223,10)" fg:x="216" fg:w="1"/><text x="12.9261%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="12.6761%" y="325" width="0.0587%" height="15" fill="rgb(215,21,27)" fg:x="216" fg:w="1"/><text x="12.9261%" y="335.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::is_edge_tight (1 samples, 0.06%)</title><rect x="12.7347%" y="341" width="0.0587%" height="15" fill="rgb(232,23,21)" fg:x="217" fg:w="1"/><text x="12.9847%" y="351.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="13.4977%" y="293" width="0.0587%" height="15" fill="rgb(244,5,23)" fg:x="230" fg:w="1"/><text x="13.7477%" y="303.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (22 samples, 1.29%)</title><rect x="13.4977%" y="309" width="1.2911%" height="15" fill="rgb(226,81,46)" fg:x="230" fg:w="22"/><text x="13.7477%" y="319.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (21 samples, 1.23%)</title><rect x="13.5563%" y="293" width="1.2324%" height="15" fill="rgb(247,70,30)" fg:x="231" fg:w="21"/><text x="13.8063%" y="303.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (28 samples, 1.64%)</title><rect x="13.2629%" y="325" width="1.6432%" height="15" fill="rgb(212,68,19)" fg:x="226" fg:w="28"/><text x="13.5129%" y="335.50"></text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_unique (2 samples, 0.12%)</title><rect x="14.7887%" y="309" width="0.1174%" height="15" fill="rgb(240,187,13)" fg:x="252" fg:w="2"/><text x="15.0387%" y="319.50"></text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_unique (1 samples, 0.06%)</title><rect x="14.9061%" y="325" width="0.0587%" height="15" fill="rgb(223,113,26)" fg:x="254" fg:w="1"/><text x="15.1561%" y="335.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::set_grow_rate (39 samples, 2.29%)</title><rect x="12.7934%" y="341" width="2.2887%" height="15" fill="rgb(206,192,2)" fg:x="218" fg:w="39"/><text x="13.0434%" y="351.50">m..</text></g><g><title>mwpf`mwpf::dual_module::DualNode::get_dual_variable (2 samples, 0.12%)</title><rect x="14.9648%" y="325" width="0.1174%" height="15" fill="rgb(241,108,4)" fg:x="255" fg:w="2"/><text x="15.2148%" y="335.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (2 samples, 0.12%)</title><rect x="15.1995%" y="309" width="0.1174%" height="15" fill="rgb(247,173,49)" fg:x="259" fg:w="2"/><text x="15.4495%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.12%)</title><rect x="15.3169%" y="309" width="0.1174%" height="15" fill="rgb(224,114,35)" fg:x="261" fg:w="2"/><text x="15.5669%" y="319.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="15.5516%" y="293" width="0.0587%" height="15" fill="rgb(245,159,27)" fg:x="265" fg:w="1"/><text x="15.8016%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="15.6103%" y="293" width="0.0587%" height="15" fill="rgb(245,172,44)" fg:x="266" fg:w="1"/><text x="15.8603%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.06%)</title><rect x="15.6103%" y="277" width="0.0587%" height="15" fill="rgb(236,23,11)" fg:x="266" fg:w="1"/><text x="15.8603%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (10 samples, 0.59%)</title><rect x="15.1995%" y="325" width="0.5869%" height="15" fill="rgb(205,117,38)" fg:x="259" fg:w="10"/><text x="15.4495%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (6 samples, 0.35%)</title><rect x="15.4343%" y="309" width="0.3521%" height="15" fill="rgb(237,72,25)" fg:x="263" fg:w="6"/><text x="15.6843%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (2 samples, 0.12%)</title><rect x="15.6690%" y="293" width="0.1174%" height="15" fill="rgb(244,70,9)" fg:x="267" fg:w="2"/><text x="15.9190%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.12%)</title><rect x="15.6690%" y="277" width="0.1174%" height="15" fill="rgb(217,125,39)" fg:x="267" fg:w="2"/><text x="15.9190%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="15.7864%" y="325" width="0.0587%" height="15" fill="rgb(235,36,10)" fg:x="269" fg:w="1"/><text x="16.0364%" y="335.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="15.8451%" y="309" width="0.0587%" height="15" fill="rgb(251,123,47)" fg:x="270" fg:w="1"/><text x="16.0951%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (6 samples, 0.35%)</title><rect x="15.8451%" y="325" width="0.3521%" height="15" fill="rgb(221,13,13)" fg:x="270" fg:w="6"/><text x="16.0951%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (5 samples, 0.29%)</title><rect x="15.9038%" y="309" width="0.2934%" height="15" fill="rgb(238,131,9)" fg:x="271" fg:w="5"/><text x="16.1538%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (20 samples, 1.17%)</title><rect x="15.0822%" y="341" width="1.1737%" height="15" fill="rgb(211,50,8)" fg:x="257" fg:w="20"/><text x="15.3322%" y="351.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.06%)</title><rect x="16.1972%" y="325" width="0.0587%" height="15" fill="rgb(245,182,24)" fg:x="276" fg:w="1"/><text x="16.4472%" y="335.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="16.1972%" y="309" width="0.0587%" height="15" fill="rgb(242,14,37)" fg:x="276" fg:w="1"/><text x="16.4472%" y="319.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (2 samples, 0.12%)</title><rect x="16.3146%" y="325" width="0.1174%" height="15" fill="rgb(246,228,12)" fg:x="278" fg:w="2"/><text x="16.5646%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="16.4319%" y="325" width="0.0587%" height="15" fill="rgb(213,55,15)" fg:x="280" fg:w="1"/><text x="16.6819%" y="335.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.12%)</title><rect x="16.4906%" y="309" width="0.1174%" height="15" fill="rgb(209,9,3)" fg:x="281" fg:w="2"/><text x="16.7406%" y="319.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.12%)</title><rect x="16.6080%" y="309" width="0.1174%" height="15" fill="rgb(230,59,30)" fg:x="283" fg:w="2"/><text x="16.8580%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="16.7254%" y="309" width="0.0587%" height="15" fill="rgb(209,121,21)" fg:x="285" fg:w="1"/><text x="16.9754%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.06%)</title><rect x="16.7254%" y="293" width="0.0587%" height="15" fill="rgb(220,109,13)" fg:x="285" fg:w="1"/><text x="16.9754%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (12 samples, 0.70%)</title><rect x="16.2559%" y="341" width="0.7042%" height="15" fill="rgb(232,18,1)" fg:x="277" fg:w="12"/><text x="16.5059%" y="351.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (8 samples, 0.47%)</title><rect x="16.4906%" y="325" width="0.4695%" height="15" fill="rgb(215,41,42)" fg:x="281" fg:w="8"/><text x="16.7406%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (3 samples, 0.18%)</title><rect x="16.7840%" y="309" width="0.1761%" height="15" fill="rgb(224,123,36)" fg:x="286" fg:w="3"/><text x="17.0340%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.12%)</title><rect x="16.8427%" y="293" width="0.1174%" height="15" fill="rgb(240,125,3)" fg:x="287" fg:w="2"/><text x="17.0927%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 0.06%)</title><rect x="17.1948%" y="309" width="0.0587%" height="15" fill="rgb(205,98,50)" fg:x="293" fg:w="1"/><text x="17.4448%" y="319.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.06%)</title><rect x="17.1948%" y="293" width="0.0587%" height="15" fill="rgb(205,185,37)" fg:x="293" fg:w="1"/><text x="17.4448%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (6 samples, 0.35%)</title><rect x="16.9601%" y="341" width="0.3521%" height="15" fill="rgb(238,207,15)" fg:x="289" fg:w="6"/><text x="17.2101%" y="351.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (2 samples, 0.12%)</title><rect x="17.1948%" y="325" width="0.1174%" height="15" fill="rgb(213,199,42)" fg:x="293" fg:w="2"/><text x="17.4448%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.06%)</title><rect x="17.2535%" y="309" width="0.0587%" height="15" fill="rgb(235,201,11)" fg:x="294" fg:w="1"/><text x="17.5035%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.06%)</title><rect x="17.2535%" y="293" width="0.0587%" height="15" fill="rgb(207,46,11)" fg:x="294" fg:w="1"/><text x="17.5035%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="17.2535%" y="277" width="0.0587%" height="15" fill="rgb(241,35,35)" fg:x="294" fg:w="1"/><text x="17.5035%" y="287.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (5 samples, 0.29%)</title><rect x="17.3122%" y="341" width="0.2934%" height="15" fill="rgb(243,32,47)" fg:x="295" fg:w="5"/><text x="17.5622%" y="351.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (15 samples, 0.88%)</title><rect x="17.8404%" y="293" width="0.8803%" height="15" fill="rgb(247,202,23)" fg:x="304" fg:w="15"/><text x="18.0904%" y="303.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (15 samples, 0.88%)</title><rect x="17.8404%" y="277" width="0.8803%" height="15" fill="rgb(219,102,11)" fg:x="304" fg:w="15"/><text x="18.0904%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node (21 samples, 1.23%)</title><rect x="17.6056%" y="325" width="1.2324%" height="15" fill="rgb(243,110,44)" fg:x="300" fg:w="21"/><text x="17.8556%" y="335.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (19 samples, 1.12%)</title><rect x="17.7230%" y="309" width="1.1150%" height="15" fill="rgb(222,74,54)" fg:x="302" fg:w="19"/><text x="17.9730%" y="319.50"></text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_unique (2 samples, 0.12%)</title><rect x="18.7207%" y="293" width="0.1174%" height="15" fill="rgb(216,99,12)" fg:x="319" fg:w="2"/><text x="18.9707%" y="303.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (1 samples, 0.06%)</title><rect x="18.8380%" y="325" width="0.0587%" height="15" fill="rgb(226,22,26)" fg:x="321" fg:w="1"/><text x="19.0880%" y="335.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="19.0141%" y="277" width="0.0587%" height="15" fill="rgb(217,163,10)" fg:x="324" fg:w="1"/><text x="19.2641%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (9 samples, 0.53%)</title><rect x="18.8967%" y="309" width="0.5282%" height="15" fill="rgb(213,25,53)" fg:x="322" fg:w="9"/><text x="19.1467%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (7 samples, 0.41%)</title><rect x="19.0141%" y="293" width="0.4108%" height="15" fill="rgb(252,105,26)" fg:x="324" fg:w="7"/><text x="19.2641%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (6 samples, 0.35%)</title><rect x="19.0728%" y="277" width="0.3521%" height="15" fill="rgb(220,39,43)" fg:x="325" fg:w="6"/><text x="19.3228%" y="287.50"></text></g><g><title>mwpf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10 samples, 0.59%)</title><rect x="18.8967%" y="325" width="0.5869%" height="15" fill="rgb(229,68,48)" fg:x="322" fg:w="10"/><text x="19.1467%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.06%)</title><rect x="19.4249%" y="309" width="0.0587%" height="15" fill="rgb(252,8,32)" fg:x="331" fg:w="1"/><text x="19.6749%" y="319.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (3 samples, 0.18%)</title><rect x="19.7770%" y="277" width="0.1761%" height="15" fill="rgb(223,20,43)" fg:x="337" fg:w="3"/><text x="20.0270%" y="287.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_or_create_node (43 samples, 2.52%)</title><rect x="17.6056%" y="341" width="2.5235%" height="15" fill="rgb(229,81,49)" fg:x="300" fg:w="43"/><text x="17.8556%" y="351.50">mw..</text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_node (11 samples, 0.65%)</title><rect x="19.4836%" y="325" width="0.6455%" height="15" fill="rgb(236,28,36)" fg:x="332" fg:w="11"/><text x="19.7336%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (9 samples, 0.53%)</title><rect x="19.6009%" y="309" width="0.5282%" height="15" fill="rgb(249,185,26)" fg:x="334" fg:w="9"/><text x="19.8509%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (6 samples, 0.35%)</title><rect x="19.7770%" y="293" width="0.3521%" height="15" fill="rgb(249,174,33)" fg:x="337" fg:w="6"/><text x="20.0270%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (3 samples, 0.18%)</title><rect x="19.9531%" y="277" width="0.1761%" height="15" fill="rgb(233,201,37)" fg:x="340" fg:w="3"/><text x="20.2031%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="20.3638%" y="325" width="0.0587%" height="15" fill="rgb(221,78,26)" fg:x="347" fg:w="1"/><text x="20.6138%" y="335.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="20.4225%" y="325" width="0.0587%" height="15" fill="rgb(250,127,30)" fg:x="348" fg:w="1"/><text x="20.6725%" y="335.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.06%)</title><rect x="20.4225%" y="309" width="0.0587%" height="15" fill="rgb(230,49,44)" fg:x="348" fg:w="1"/><text x="20.6725%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="20.4225%" y="293" width="0.0587%" height="15" fill="rgb(229,67,23)" fg:x="348" fg:w="1"/><text x="20.6725%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (1 samples, 0.06%)</title><rect x="20.4812%" y="325" width="0.0587%" height="15" fill="rgb(249,83,47)" fg:x="349" fg:w="1"/><text x="20.7312%" y="335.50"></text></g><g><title>mwpf`mwpf::dual_module_pq::_&lt;impl core::cmp::Ord for mwpf::pointers::WeakRwLock&lt;mwpf::dual_module_pq::Edge&gt;&gt;::cmp (1 samples, 0.06%)</title><rect x="20.4812%" y="309" width="0.0587%" height="15" fill="rgb(215,43,3)" fg:x="349" fg:w="1"/><text x="20.7312%" y="319.50"></text></g><g><title>mwpf`mwpf::matrix::interface::MatrixEchelon::get_solution_local_minimum (8 samples, 0.47%)</title><rect x="20.1291%" y="341" width="0.4695%" height="15" fill="rgb(238,154,13)" fg:x="343" fg:w="8"/><text x="20.3791%" y="351.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.06%)</title><rect x="20.5399%" y="325" width="0.0587%" height="15" fill="rgb(219,56,2)" fg:x="350" fg:w="1"/><text x="20.7899%" y="335.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="20.5399%" y="309" width="0.0587%" height="15" fill="rgb(233,0,4)" fg:x="350" fg:w="1"/><text x="20.7899%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.06%)</title><rect x="20.5399%" y="293" width="0.0587%" height="15" fill="rgb(235,30,7)" fg:x="350" fg:w="1"/><text x="20.7899%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.06%)</title><rect x="20.5399%" y="277" width="0.0587%" height="15" fill="rgb(250,79,13)" fg:x="350" fg:w="1"/><text x="20.7899%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.06%)</title><rect x="20.5399%" y="261" width="0.0587%" height="15" fill="rgb(211,146,34)" fg:x="350" fg:w="1"/><text x="20.7899%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="20.5399%" y="245" width="0.0587%" height="15" fill="rgb(228,22,38)" fg:x="350" fg:w="1"/><text x="20.7899%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="20.6573%" y="293" width="0.0587%" height="15" fill="rgb(235,168,5)" fg:x="352" fg:w="1"/><text x="20.9073%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="20.6573%" y="277" width="0.0587%" height="15" fill="rgb(221,155,16)" fg:x="352" fg:w="1"/><text x="20.9073%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="20.6573%" y="261" width="0.0587%" height="15" fill="rgb(215,215,53)" fg:x="352" fg:w="1"/><text x="20.9073%" y="271.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.12%)</title><rect x="20.6573%" y="309" width="0.1174%" height="15" fill="rgb(223,4,10)" fg:x="352" fg:w="2"/><text x="20.9073%" y="319.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer::Relaxer&gt; (1 samples, 0.06%)</title><rect x="20.7160%" y="293" width="0.0587%" height="15" fill="rgb(234,103,6)" fg:x="353" fg:w="1"/><text x="20.9660%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.18%)</title><rect x="20.6573%" y="325" width="0.1761%" height="15" fill="rgb(227,97,0)" fg:x="352" fg:w="3"/><text x="20.9073%" y="335.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer::Relaxer&gt; (1 samples, 0.06%)</title><rect x="20.7746%" y="309" width="0.0587%" height="15" fill="rgb(234,150,53)" fg:x="354" fg:w="1"/><text x="21.0246%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="20.8333%" y="293" width="0.0587%" height="15" fill="rgb(228,201,54)" fg:x="355" fg:w="1"/><text x="21.0833%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="20.8920%" y="293" width="0.0587%" height="15" fill="rgb(222,22,37)" fg:x="356" fg:w="1"/><text x="21.1420%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (4 samples, 0.23%)</title><rect x="20.8333%" y="309" width="0.2347%" height="15" fill="rgb(237,53,32)" fg:x="355" fg:w="4"/><text x="21.0833%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.12%)</title><rect x="20.9507%" y="293" width="0.1174%" height="15" fill="rgb(233,25,53)" fg:x="357" fg:w="2"/><text x="21.2007%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (2 samples, 0.12%)</title><rect x="20.9507%" y="277" width="0.1174%" height="15" fill="rgb(210,40,34)" fg:x="357" fg:w="2"/><text x="21.2007%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.06%)</title><rect x="21.0094%" y="261" width="0.0587%" height="15" fill="rgb(241,220,44)" fg:x="358" fg:w="1"/><text x="21.2594%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="21.0094%" y="245" width="0.0587%" height="15" fill="rgb(235,28,35)" fg:x="358" fg:w="1"/><text x="21.2594%" y="255.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (2 samples, 0.12%)</title><rect x="21.0681%" y="277" width="0.1174%" height="15" fill="rgb(210,56,17)" fg:x="359" fg:w="2"/><text x="21.3181%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.47%)</title><rect x="20.8333%" y="325" width="0.4695%" height="15" fill="rgb(224,130,29)" fg:x="355" fg:w="8"/><text x="21.0833%" y="335.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (4 samples, 0.23%)</title><rect x="21.0681%" y="309" width="0.2347%" height="15" fill="rgb(235,212,8)" fg:x="359" fg:w="4"/><text x="21.3181%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (4 samples, 0.23%)</title><rect x="21.0681%" y="293" width="0.2347%" height="15" fill="rgb(223,33,50)" fg:x="359" fg:w="4"/><text x="21.3181%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (2 samples, 0.12%)</title><rect x="21.1854%" y="277" width="0.1174%" height="15" fill="rgb(219,149,13)" fg:x="361" fg:w="2"/><text x="21.4354%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.06%)</title><rect x="21.2441%" y="261" width="0.0587%" height="15" fill="rgb(250,156,29)" fg:x="362" fg:w="1"/><text x="21.4941%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="21.2441%" y="245" width="0.0587%" height="15" fill="rgb(216,193,19)" fg:x="362" fg:w="1"/><text x="21.4941%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="21.3028%" y="325" width="0.0587%" height="15" fill="rgb(216,135,14)" fg:x="363" fg:w="1"/><text x="21.5528%" y="335.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (1 samples, 0.06%)</title><rect x="21.3615%" y="325" width="0.0587%" height="15" fill="rgb(241,47,5)" fg:x="364" fg:w="1"/><text x="21.6115%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="21.4789%" y="309" width="0.0587%" height="15" fill="rgb(233,42,35)" fg:x="366" fg:w="1"/><text x="21.7289%" y="319.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer_forest::RelaxerForest&gt; (3 samples, 0.18%)</title><rect x="21.4202%" y="325" width="0.1761%" height="15" fill="rgb(231,13,6)" fg:x="365" fg:w="3"/><text x="21.6702%" y="335.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="21.5376%" y="309" width="0.0587%" height="15" fill="rgb(207,181,40)" fg:x="367" fg:w="1"/><text x="21.7876%" y="319.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.06%)</title><rect x="21.5376%" y="293" width="0.0587%" height="15" fill="rgb(254,173,49)" fg:x="367" fg:w="1"/><text x="21.7876%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="21.5376%" y="277" width="0.0587%" height="15" fill="rgb(221,1,38)" fg:x="367" fg:w="1"/><text x="21.7876%" y="287.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.06%)</title><rect x="21.9484%" y="293" width="0.0587%" height="15" fill="rgb(206,124,46)" fg:x="374" fg:w="1"/><text x="22.1984%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="21.9484%" y="277" width="0.0587%" height="15" fill="rgb(249,21,11)" fg:x="374" fg:w="1"/><text x="22.1984%" y="287.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="22.0070%" y="293" width="0.0587%" height="15" fill="rgb(222,201,40)" fg:x="375" fg:w="1"/><text x="22.2570%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (15 samples, 0.88%)</title><rect x="21.8310%" y="309" width="0.8803%" height="15" fill="rgb(235,61,29)" fg:x="372" fg:w="15"/><text x="22.0810%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (11 samples, 0.65%)</title><rect x="22.0657%" y="293" width="0.6455%" height="15" fill="rgb(219,207,3)" fg:x="376" fg:w="11"/><text x="22.3157%" y="303.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (20 samples, 1.17%)</title><rect x="21.5962%" y="325" width="1.1737%" height="15" fill="rgb(222,56,46)" fg:x="368" fg:w="20"/><text x="21.8462%" y="335.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="22.7113%" y="309" width="0.0587%" height="15" fill="rgb(239,76,54)" fg:x="387" fg:w="1"/><text x="22.9613%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="22.7113%" y="293" width="0.0587%" height="15" fill="rgb(231,124,27)" fg:x="387" fg:w="1"/><text x="22.9613%" y="303.50"></text></g><g><title>mwpf`mwpf::matrix::row::ParityRow::xor_two_rows (1 samples, 0.06%)</title><rect x="22.7700%" y="325" width="0.0587%" height="15" fill="rgb(249,195,6)" fg:x="388" fg:w="1"/><text x="23.0200%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="23.0047%" y="261" width="0.0587%" height="15" fill="rgb(237,174,47)" fg:x="392" fg:w="1"/><text x="23.2547%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="23.0047%" y="245" width="0.0587%" height="15" fill="rgb(206,201,31)" fg:x="392" fg:w="1"/><text x="23.2547%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="23.0047%" y="229" width="0.0587%" height="15" fill="rgb(231,57,52)" fg:x="392" fg:w="1"/><text x="23.2547%" y="239.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="23.0634%" y="261" width="0.0587%" height="15" fill="rgb(248,177,22)" fg:x="393" fg:w="1"/><text x="23.3134%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (9 samples, 0.53%)</title><rect x="23.1221%" y="261" width="0.5282%" height="15" fill="rgb(215,211,37)" fg:x="394" fg:w="9"/><text x="23.3721%" y="271.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.12%)</title><rect x="23.7676%" y="245" width="0.1174%" height="15" fill="rgb(241,128,51)" fg:x="405" fg:w="2"/><text x="24.0176%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.12%)</title><rect x="23.8850%" y="245" width="0.1174%" height="15" fill="rgb(227,165,31)" fg:x="407" fg:w="2"/><text x="24.1350%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (2 samples, 0.12%)</title><rect x="23.8850%" y="229" width="0.1174%" height="15" fill="rgb(228,167,24)" fg:x="407" fg:w="2"/><text x="24.1350%" y="239.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (23 samples, 1.35%)</title><rect x="22.9460%" y="277" width="1.3498%" height="15" fill="rgb(228,143,12)" fg:x="391" fg:w="23"/><text x="23.1960%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (11 samples, 0.65%)</title><rect x="23.6502%" y="261" width="0.6455%" height="15" fill="rgb(249,149,8)" fg:x="403" fg:w="11"/><text x="23.9002%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (5 samples, 0.29%)</title><rect x="24.0023%" y="245" width="0.2934%" height="15" fill="rgb(243,35,44)" fg:x="409" fg:w="5"/><text x="24.2523%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (5 samples, 0.29%)</title><rect x="24.0023%" y="229" width="0.2934%" height="15" fill="rgb(246,89,9)" fg:x="409" fg:w="5"/><text x="24.2523%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.12%)</title><rect x="24.4131%" y="261" width="0.1174%" height="15" fill="rgb(233,213,13)" fg:x="416" fg:w="2"/><text x="24.6631%" y="271.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="24.5305%" y="261" width="0.0587%" height="15" fill="rgb(233,141,41)" fg:x="418" fg:w="1"/><text x="24.7805%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (3 samples, 0.18%)</title><rect x="24.5892%" y="261" width="0.1761%" height="15" fill="rgb(239,167,4)" fg:x="419" fg:w="3"/><text x="24.8392%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="24.7066%" y="245" width="0.0587%" height="15" fill="rgb(209,217,16)" fg:x="421" fg:w="1"/><text x="24.9566%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="24.7066%" y="229" width="0.0587%" height="15" fill="rgb(219,88,35)" fg:x="421" fg:w="1"/><text x="24.9566%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.06%)</title><rect x="24.7066%" y="213" width="0.0587%" height="15" fill="rgb(220,193,23)" fg:x="421" fg:w="1"/><text x="24.9566%" y="223.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="24.8239%" y="245" width="0.0587%" height="15" fill="rgb(230,90,52)" fg:x="423" fg:w="1"/><text x="25.0739%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.18%)</title><rect x="24.8826%" y="245" width="0.1761%" height="15" fill="rgb(252,106,19)" fg:x="424" fg:w="3"/><text x="25.1326%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (2 samples, 0.12%)</title><rect x="24.9413%" y="229" width="0.1174%" height="15" fill="rgb(206,74,20)" fg:x="425" fg:w="2"/><text x="25.1913%" y="239.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (16 samples, 0.94%)</title><rect x="24.2958%" y="277" width="0.9390%" height="15" fill="rgb(230,138,44)" fg:x="414" fg:w="16"/><text x="24.5458%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (8 samples, 0.47%)</title><rect x="24.7653%" y="261" width="0.4695%" height="15" fill="rgb(235,182,43)" fg:x="422" fg:w="8"/><text x="25.0153%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (3 samples, 0.18%)</title><rect x="25.0587%" y="245" width="0.1761%" height="15" fill="rgb(242,16,51)" fg:x="427" fg:w="3"/><text x="25.3087%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.12%)</title><rect x="25.1174%" y="229" width="0.1174%" height="15" fill="rgb(248,9,4)" fg:x="428" fg:w="2"/><text x="25.3674%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.06%)</title><rect x="25.2347%" y="245" width="0.0587%" height="15" fill="rgb(210,31,22)" fg:x="430" fg:w="1"/><text x="25.4847%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="25.2347%" y="229" width="0.0587%" height="15" fill="rgb(239,54,39)" fg:x="430" fg:w="1"/><text x="25.4847%" y="239.50"></text></g><g><title>mwpf`weak_table::ptr_weak_hash_set::_&lt;impl core::iter::traits::collect::FromIterator&lt;&lt;T as weak_table::traits::WeakElement&gt;::Strong&gt; for weak_table::PtrWeakHashSet&lt;T,S&gt;&gt;::from_iter (4 samples, 0.23%)</title><rect x="25.2347%" y="277" width="0.2347%" height="15" fill="rgb(230,99,41)" fg:x="430" fg:w="4"/><text x="25.4847%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (4 samples, 0.23%)</title><rect x="25.2347%" y="261" width="0.2347%" height="15" fill="rgb(253,106,12)" fg:x="430" fg:w="4"/><text x="25.4847%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (3 samples, 0.18%)</title><rect x="25.2934%" y="245" width="0.1761%" height="15" fill="rgb(213,46,41)" fg:x="431" fg:w="3"/><text x="25.5434%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="25.4108%" y="229" width="0.0587%" height="15" fill="rgb(215,133,35)" fg:x="433" fg:w="1"/><text x="25.6608%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (48 samples, 2.82%)</title><rect x="22.8286%" y="309" width="2.8169%" height="15" fill="rgb(213,28,5)" fg:x="389" fg:w="48"/><text x="23.0786%" y="319.50">mw..</text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (48 samples, 2.82%)</title><rect x="22.8286%" y="293" width="2.8169%" height="15" fill="rgb(215,77,49)" fg:x="389" fg:w="48"/><text x="23.0786%" y="303.50">mw..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (3 samples, 0.18%)</title><rect x="25.4695%" y="277" width="0.1761%" height="15" fill="rgb(248,100,22)" fg:x="434" fg:w="3"/><text x="25.7195%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (5 samples, 0.29%)</title><rect x="25.6455%" y="293" width="0.2934%" height="15" fill="rgb(208,67,9)" fg:x="437" fg:w="5"/><text x="25.8955%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (5 samples, 0.29%)</title><rect x="25.6455%" y="277" width="0.2934%" height="15" fill="rgb(219,133,21)" fg:x="437" fg:w="5"/><text x="25.8955%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (4 samples, 0.23%)</title><rect x="25.7042%" y="261" width="0.2347%" height="15" fill="rgb(246,46,29)" fg:x="438" fg:w="4"/><text x="25.9542%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (4 samples, 0.23%)</title><rect x="25.7042%" y="245" width="0.2347%" height="15" fill="rgb(246,185,52)" fg:x="438" fg:w="4"/><text x="25.9542%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.06%)</title><rect x="26.0563%" y="277" width="0.0587%" height="15" fill="rgb(252,136,11)" fg:x="444" fg:w="1"/><text x="26.3063%" y="287.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="26.1150%" y="277" width="0.0587%" height="15" fill="rgb(219,138,53)" fg:x="445" fg:w="1"/><text x="26.3650%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="26.2324%" y="261" width="0.0587%" height="15" fill="rgb(211,51,23)" fg:x="447" fg:w="1"/><text x="26.4824%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="26.2911%" y="261" width="0.0587%" height="15" fill="rgb(247,221,28)" fg:x="448" fg:w="1"/><text x="26.5411%" y="271.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="26.3498%" y="261" width="0.0587%" height="15" fill="rgb(251,222,45)" fg:x="449" fg:w="1"/><text x="26.5998%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.06%)</title><rect x="26.4085%" y="261" width="0.0587%" height="15" fill="rgb(217,162,53)" fg:x="450" fg:w="1"/><text x="26.6585%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="26.4085%" y="245" width="0.0587%" height="15" fill="rgb(229,93,14)" fg:x="450" fg:w="1"/><text x="26.6585%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.06%)</title><rect x="26.4671%" y="261" width="0.0587%" height="15" fill="rgb(209,67,49)" fg:x="451" fg:w="1"/><text x="26.7171%" y="271.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (1 samples, 0.06%)</title><rect x="26.5258%" y="261" width="0.0587%" height="15" fill="rgb(213,87,29)" fg:x="452" fg:w="1"/><text x="26.7758%" y="271.50"></text></g><g><title>mwpf`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.06%)</title><rect x="26.5258%" y="245" width="0.0587%" height="15" fill="rgb(205,151,52)" fg:x="452" fg:w="1"/><text x="26.7758%" y="255.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="26.6432%" y="245" width="0.0587%" height="15" fill="rgb(253,215,39)" fg:x="454" fg:w="1"/><text x="26.8932%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.12%)</title><rect x="26.7019%" y="245" width="0.1174%" height="15" fill="rgb(221,220,41)" fg:x="455" fg:w="2"/><text x="26.9519%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="26.8192%" y="245" width="0.0587%" height="15" fill="rgb(218,133,21)" fg:x="457" fg:w="1"/><text x="27.0692%" y="255.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (20 samples, 1.17%)</title><rect x="26.1737%" y="277" width="1.1737%" height="15" fill="rgb(221,193,43)" fg:x="446" fg:w="20"/><text x="26.4237%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (13 samples, 0.76%)</title><rect x="26.5845%" y="261" width="0.7629%" height="15" fill="rgb(240,128,52)" fg:x="453" fg:w="13"/><text x="26.8345%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (8 samples, 0.47%)</title><rect x="26.8779%" y="245" width="0.4695%" height="15" fill="rgb(253,114,12)" fg:x="458" fg:w="8"/><text x="27.1279%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (5 samples, 0.29%)</title><rect x="27.0540%" y="229" width="0.2934%" height="15" fill="rgb(215,223,47)" fg:x="461" fg:w="5"/><text x="27.3040%" y="239.50"></text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (80 samples, 4.69%)</title><rect x="22.8286%" y="325" width="4.6948%" height="15" fill="rgb(248,225,23)" fg:x="389" fg:w="80"/><text x="23.0786%" y="335.50">mwpf`..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (32 samples, 1.88%)</title><rect x="25.6455%" y="309" width="1.8779%" height="15" fill="rgb(250,108,0)" fg:x="437" fg:w="32"/><text x="25.8955%" y="319.50">m..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (27 samples, 1.58%)</title><rect x="25.9390%" y="293" width="1.5845%" height="15" fill="rgb(228,208,7)" fg:x="442" fg:w="27"/><text x="26.1890%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (3 samples, 0.18%)</title><rect x="27.3474%" y="277" width="0.1761%" height="15" fill="rgb(244,45,10)" fg:x="466" fg:w="3"/><text x="27.5974%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="27.5822%" y="309" width="0.0587%" height="15" fill="rgb(207,125,25)" fg:x="470" fg:w="1"/><text x="27.8322%" y="319.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="27.6995%" y="293" width="0.0587%" height="15" fill="rgb(210,195,18)" fg:x="472" fg:w="1"/><text x="27.9495%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.06%)</title><rect x="27.7582%" y="293" width="0.0587%" height="15" fill="rgb(249,80,12)" fg:x="473" fg:w="1"/><text x="28.0082%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="27.7582%" y="277" width="0.0587%" height="15" fill="rgb(221,65,9)" fg:x="473" fg:w="1"/><text x="28.0082%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.18%)</title><rect x="27.8169%" y="293" width="0.1761%" height="15" fill="rgb(235,49,36)" fg:x="474" fg:w="3"/><text x="28.0669%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (2 samples, 0.12%)</title><rect x="27.8756%" y="277" width="0.1174%" height="15" fill="rgb(225,32,20)" fg:x="475" fg:w="2"/><text x="28.1256%" y="287.50"></text></g><g><title>mwpf`weak_table::ptr_weak_hash_set::_&lt;impl core::iter::traits::collect::FromIterator&lt;&lt;T as weak_table::traits::WeakElement&gt;::Strong&gt; for weak_table::PtrWeakHashSet&lt;T,S&gt;&gt;::from_iter (11 samples, 0.65%)</title><rect x="27.5235%" y="325" width="0.6455%" height="15" fill="rgb(215,141,46)" fg:x="469" fg:w="11"/><text x="27.7735%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (9 samples, 0.53%)</title><rect x="27.6408%" y="309" width="0.5282%" height="15" fill="rgb(250,160,47)" fg:x="471" fg:w="9"/><text x="27.8908%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (3 samples, 0.18%)</title><rect x="27.9930%" y="293" width="0.1761%" height="15" fill="rgb(216,222,40)" fg:x="477" fg:w="3"/><text x="28.2430%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (3 samples, 0.18%)</title><rect x="27.9930%" y="277" width="0.1761%" height="15" fill="rgb(234,217,39)" fg:x="477" fg:w="3"/><text x="28.2430%" y="287.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (131 samples, 7.69%)</title><rect x="20.5986%" y="341" width="7.6878%" height="15" fill="rgb(207,178,40)" fg:x="351" fg:w="131"/><text x="20.8486%" y="351.50">mwpf`mwpf::..</text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (2 samples, 0.12%)</title><rect x="28.1690%" y="325" width="0.1174%" height="15" fill="rgb(221,136,13)" fg:x="480" fg:w="2"/><text x="28.4190%" y="335.50"></text></g><g><title>mwpf`alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.06%)</title><rect x="28.2277%" y="309" width="0.0587%" height="15" fill="rgb(249,199,10)" fg:x="481" fg:w="1"/><text x="28.4777%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="28.6385%" y="325" width="0.0587%" height="15" fill="rgb(249,222,13)" fg:x="488" fg:w="1"/><text x="28.8885%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="28.6972%" y="325" width="0.0587%" height="15" fill="rgb(244,185,38)" fg:x="489" fg:w="1"/><text x="28.9472%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="28.7559%" y="325" width="0.0587%" height="15" fill="rgb(236,202,9)" fg:x="490" fg:w="1"/><text x="29.0059%" y="335.50"></text></g><g><title>mwpf`&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="28.8146%" y="325" width="0.0587%" height="15" fill="rgb(250,229,37)" fg:x="491" fg:w="1"/><text x="29.0646%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="29.3427%" y="277" width="0.0587%" height="15" fill="rgb(206,174,23)" fg:x="500" fg:w="1"/><text x="29.5927%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.06%)</title><rect x="29.4014%" y="261" width="0.0587%" height="15" fill="rgb(211,33,43)" fg:x="501" fg:w="1"/><text x="29.6514%" y="271.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.18%)</title><rect x="29.3427%" y="293" width="0.1761%" height="15" fill="rgb(245,58,50)" fg:x="500" fg:w="3"/><text x="29.5927%" y="303.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (2 samples, 0.12%)</title><rect x="29.4014%" y="277" width="0.1174%" height="15" fill="rgb(244,68,36)" fg:x="501" fg:w="2"/><text x="29.6514%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.06%)</title><rect x="29.4601%" y="261" width="0.0587%" height="15" fill="rgb(232,229,15)" fg:x="502" fg:w="1"/><text x="29.7101%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.06%)</title><rect x="29.4601%" y="245" width="0.0587%" height="15" fill="rgb(254,30,23)" fg:x="502" fg:w="1"/><text x="29.7101%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.06%)</title><rect x="29.4601%" y="229" width="0.0587%" height="15" fill="rgb(235,160,14)" fg:x="502" fg:w="1"/><text x="29.7101%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.06%)</title><rect x="29.4601%" y="213" width="0.0587%" height="15" fill="rgb(212,155,44)" fg:x="502" fg:w="1"/><text x="29.7101%" y="223.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="29.5188%" y="293" width="0.0587%" height="15" fill="rgb(226,2,50)" fg:x="503" fg:w="1"/><text x="29.7688%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (8 samples, 0.47%)</title><rect x="29.5775%" y="293" width="0.4695%" height="15" fill="rgb(234,177,6)" fg:x="504" fg:w="8"/><text x="29.8275%" y="303.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.12%)</title><rect x="30.1056%" y="277" width="0.1174%" height="15" fill="rgb(217,24,9)" fg:x="513" fg:w="2"/><text x="30.3556%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.06%)</title><rect x="30.2230%" y="277" width="0.0587%" height="15" fill="rgb(220,13,46)" fg:x="515" fg:w="1"/><text x="30.4730%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (5 samples, 0.29%)</title><rect x="30.2817%" y="277" width="0.2934%" height="15" fill="rgb(239,221,27)" fg:x="516" fg:w="5"/><text x="30.5317%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (5 samples, 0.29%)</title><rect x="30.2817%" y="261" width="0.2934%" height="15" fill="rgb(222,198,25)" fg:x="516" fg:w="5"/><text x="30.5317%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (29 samples, 1.70%)</title><rect x="29.1080%" y="309" width="1.7019%" height="15" fill="rgb(211,99,13)" fg:x="496" fg:w="29"/><text x="29.3580%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (13 samples, 0.76%)</title><rect x="30.0469%" y="293" width="0.7629%" height="15" fill="rgb(232,111,31)" fg:x="512" fg:w="13"/><text x="30.2969%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (4 samples, 0.23%)</title><rect x="30.5751%" y="277" width="0.2347%" height="15" fill="rgb(245,82,37)" fg:x="521" fg:w="4"/><text x="30.8251%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (3 samples, 0.18%)</title><rect x="30.6338%" y="261" width="0.1761%" height="15" fill="rgb(227,149,46)" fg:x="522" fg:w="3"/><text x="30.8838%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (11 samples, 0.65%)</title><rect x="30.8099%" y="309" width="0.6455%" height="15" fill="rgb(218,36,50)" fg:x="525" fg:w="11"/><text x="31.0599%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (11 samples, 0.65%)</title><rect x="30.8099%" y="293" width="0.6455%" height="15" fill="rgb(226,80,48)" fg:x="525" fg:w="11"/><text x="31.0599%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.06%)</title><rect x="31.4554%" y="293" width="0.0587%" height="15" fill="rgb(238,224,15)" fg:x="536" fg:w="1"/><text x="31.7054%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="31.4554%" y="277" width="0.0587%" height="15" fill="rgb(241,136,10)" fg:x="536" fg:w="1"/><text x="31.7054%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (47 samples, 2.76%)</title><rect x="28.8732%" y="325" width="2.7582%" height="15" fill="rgb(208,32,45)" fg:x="492" fg:w="47"/><text x="29.1232%" y="335.50">mw..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (3 samples, 0.18%)</title><rect x="31.4554%" y="309" width="0.1761%" height="15" fill="rgb(207,135,9)" fg:x="536" fg:w="3"/><text x="31.7054%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (2 samples, 0.12%)</title><rect x="31.5141%" y="293" width="0.1174%" height="15" fill="rgb(206,86,44)" fg:x="537" fg:w="2"/><text x="31.7641%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.12%)</title><rect x="31.5141%" y="277" width="0.1174%" height="15" fill="rgb(245,177,15)" fg:x="537" fg:w="2"/><text x="31.7641%" y="287.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.41%)</title><rect x="31.6315%" y="325" width="0.4108%" height="15" fill="rgb(206,64,50)" fg:x="539" fg:w="7"/><text x="31.8815%" y="335.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="32.0423%" y="325" width="0.0587%" height="15" fill="rgb(234,36,40)" fg:x="546" fg:w="1"/><text x="32.2923%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="32.1009%" y="325" width="0.0587%" height="15" fill="rgb(213,64,8)" fg:x="547" fg:w="1"/><text x="32.3509%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.12%)</title><rect x="32.1596%" y="325" width="0.1174%" height="15" fill="rgb(210,75,36)" fg:x="548" fg:w="2"/><text x="32.4096%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.06%)</title><rect x="32.3944%" y="309" width="0.0587%" height="15" fill="rgb(229,88,21)" fg:x="552" fg:w="1"/><text x="32.6444%" y="319.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.18%)</title><rect x="32.4531%" y="309" width="0.1761%" height="15" fill="rgb(252,204,47)" fg:x="553" fg:w="3"/><text x="32.7031%" y="319.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="32.6291%" y="309" width="0.0587%" height="15" fill="rgb(208,77,27)" fg:x="556" fg:w="1"/><text x="32.8791%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.06%)</title><rect x="32.6878%" y="309" width="0.0587%" height="15" fill="rgb(221,76,26)" fg:x="557" fg:w="1"/><text x="32.9378%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="32.6878%" y="293" width="0.0587%" height="15" fill="rgb(225,139,18)" fg:x="557" fg:w="1"/><text x="32.9378%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::OccupiedEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="32.7465%" y="309" width="0.0587%" height="15" fill="rgb(230,137,11)" fg:x="558" fg:w="1"/><text x="32.9965%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (4 samples, 0.23%)</title><rect x="32.8052%" y="309" width="0.2347%" height="15" fill="rgb(212,28,1)" fg:x="559" fg:w="4"/><text x="33.0552%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (3 samples, 0.18%)</title><rect x="32.8638%" y="293" width="0.1761%" height="15" fill="rgb(248,164,17)" fg:x="560" fg:w="3"/><text x="33.1138%" y="303.50"></text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::union (92 samples, 5.40%)</title><rect x="28.2864%" y="341" width="5.3991%" height="15" fill="rgb(222,171,42)" fg:x="482" fg:w="92"/><text x="28.5364%" y="351.50">mwpf`mw..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (24 samples, 1.41%)</title><rect x="32.2770%" y="325" width="1.4085%" height="15" fill="rgb(243,84,45)" fg:x="550" fg:w="24"/><text x="32.5270%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (11 samples, 0.65%)</title><rect x="33.0399%" y="309" width="0.6455%" height="15" fill="rgb(252,49,23)" fg:x="563" fg:w="11"/><text x="33.2899%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (8 samples, 0.47%)</title><rect x="33.2160%" y="293" width="0.4695%" height="15" fill="rgb(215,19,7)" fg:x="566" fg:w="8"/><text x="33.4660%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (5 samples, 0.29%)</title><rect x="33.6854%" y="341" width="0.2934%" height="15" fill="rgb(238,81,41)" fg:x="574" fg:w="5"/><text x="33.9354%" y="351.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="34.1549%" y="325" width="0.0587%" height="15" fill="rgb(210,199,37)" fg:x="582" fg:w="1"/><text x="34.4049%" y="335.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.12%)</title><rect x="34.2136%" y="325" width="0.1174%" height="15" fill="rgb(244,192,49)" fg:x="583" fg:w="2"/><text x="34.4636%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::OccupiedEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="34.3310%" y="325" width="0.0587%" height="15" fill="rgb(226,211,11)" fg:x="585" fg:w="1"/><text x="34.5810%" y="335.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve (389 samples, 22.83%)</title><rect x="11.8545%" y="357" width="22.8286%" height="15" fill="rgb(236,162,54)" fg:x="202" fg:w="389"/><text x="12.1045%" y="367.50">mwpf`&lt;mwpf::primal_module_serial::Pr..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (12 samples, 0.70%)</title><rect x="33.9789%" y="341" width="0.7042%" height="15" fill="rgb(220,229,9)" fg:x="579" fg:w="12"/><text x="34.2289%" y="351.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (5 samples, 0.29%)</title><rect x="34.3897%" y="325" width="0.2934%" height="15" fill="rgb(250,87,22)" fg:x="586" fg:w="5"/><text x="34.6397%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (4 samples, 0.23%)</title><rect x="34.4484%" y="309" width="0.2347%" height="15" fill="rgb(239,43,17)" fg:x="587" fg:w="4"/><text x="34.6984%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.18%)</title><rect x="34.8005%" y="341" width="0.1761%" height="15" fill="rgb(231,177,25)" fg:x="593" fg:w="3"/><text x="35.0505%" y="351.50"></text></g><g><title>mwpf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.18%)</title><rect x="34.8005%" y="325" width="0.1761%" height="15" fill="rgb(219,179,1)" fg:x="593" fg:w="3"/><text x="35.0505%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (4 samples, 0.23%)</title><rect x="35.1526%" y="325" width="0.2347%" height="15" fill="rgb(238,219,53)" fg:x="599" fg:w="4"/><text x="35.4026%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.06%)</title><rect x="35.6221%" y="309" width="0.0587%" height="15" fill="rgb(232,167,36)" fg:x="607" fg:w="1"/><text x="35.8721%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="35.6221%" y="293" width="0.0587%" height="15" fill="rgb(244,19,51)" fg:x="607" fg:w="1"/><text x="35.8721%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (15 samples, 0.88%)</title><rect x="34.9765%" y="341" width="0.8803%" height="15" fill="rgb(224,6,22)" fg:x="596" fg:w="15"/><text x="35.2265%" y="351.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (8 samples, 0.47%)</title><rect x="35.3873%" y="325" width="0.4695%" height="15" fill="rgb(224,145,5)" fg:x="603" fg:w="8"/><text x="35.6373%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (3 samples, 0.18%)</title><rect x="35.6808%" y="309" width="0.1761%" height="15" fill="rgb(234,130,49)" fg:x="608" fg:w="3"/><text x="35.9308%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (3 samples, 0.18%)</title><rect x="35.6808%" y="293" width="0.1761%" height="15" fill="rgb(254,6,2)" fg:x="608" fg:w="3"/><text x="35.9308%" y="303.50"></text></g><g><title>mwpf`mwpf::matrix::interface::MatrixEchelon::get_solution_local_minimum (1 samples, 0.06%)</title><rect x="35.8568%" y="341" width="0.0587%" height="15" fill="rgb(208,96,46)" fg:x="611" fg:w="1"/><text x="36.1068%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="35.9155%" y="325" width="0.0587%" height="15" fill="rgb(239,3,39)" fg:x="612" fg:w="1"/><text x="36.1655%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="35.9742%" y="309" width="0.0587%" height="15" fill="rgb(233,210,1)" fg:x="613" fg:w="1"/><text x="36.2242%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="36.0329%" y="309" width="0.0587%" height="15" fill="rgb(244,137,37)" fg:x="614" fg:w="1"/><text x="36.2829%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="36.0915%" y="293" width="0.0587%" height="15" fill="rgb(240,136,2)" fg:x="615" fg:w="1"/><text x="36.3415%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (3 samples, 0.18%)</title><rect x="36.0915%" y="309" width="0.1761%" height="15" fill="rgb(239,18,37)" fg:x="615" fg:w="3"/><text x="36.3415%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.12%)</title><rect x="36.1502%" y="293" width="0.1174%" height="15" fill="rgb(218,185,22)" fg:x="616" fg:w="2"/><text x="36.4002%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.06%)</title><rect x="36.2089%" y="277" width="0.0587%" height="15" fill="rgb(225,218,4)" fg:x="617" fg:w="1"/><text x="36.4589%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.06%)</title><rect x="36.2089%" y="261" width="0.0587%" height="15" fill="rgb(230,182,32)" fg:x="617" fg:w="1"/><text x="36.4589%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="36.2089%" y="245" width="0.0587%" height="15" fill="rgb(242,56,43)" fg:x="617" fg:w="1"/><text x="36.4589%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6 samples, 0.35%)</title><rect x="35.9742%" y="325" width="0.3521%" height="15" fill="rgb(233,99,24)" fg:x="613" fg:w="6"/><text x="36.2242%" y="335.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (1 samples, 0.06%)</title><rect x="36.2676%" y="309" width="0.0587%" height="15" fill="rgb(234,209,42)" fg:x="618" fg:w="1"/><text x="36.5176%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 0.06%)</title><rect x="36.2676%" y="293" width="0.0587%" height="15" fill="rgb(227,7,12)" fg:x="618" fg:w="1"/><text x="36.5176%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.06%)</title><rect x="36.2676%" y="277" width="0.0587%" height="15" fill="rgb(245,203,43)" fg:x="618" fg:w="1"/><text x="36.5176%" y="287.50"></text></g><g><title>mwpf`DYLD-STUB$$free (1 samples, 0.06%)</title><rect x="36.3263%" y="325" width="0.0587%" height="15" fill="rgb(238,205,33)" fg:x="619" fg:w="1"/><text x="36.5763%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="36.4437%" y="309" width="0.0587%" height="15" fill="rgb(231,56,7)" fg:x="621" fg:w="1"/><text x="36.6937%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="36.5023%" y="309" width="0.0587%" height="15" fill="rgb(244,186,29)" fg:x="622" fg:w="1"/><text x="36.7523%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="36.5610%" y="309" width="0.0587%" height="15" fill="rgb(234,111,31)" fg:x="623" fg:w="1"/><text x="36.8110%" y="319.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.06%)</title><rect x="36.5610%" y="293" width="0.0587%" height="15" fill="rgb(241,149,10)" fg:x="623" fg:w="1"/><text x="36.8110%" y="303.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer_forest::RelaxerForest&gt; (11 samples, 0.65%)</title><rect x="36.3850%" y="325" width="0.6455%" height="15" fill="rgb(249,206,44)" fg:x="620" fg:w="11"/><text x="36.6350%" y="335.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.41%)</title><rect x="36.6197%" y="309" width="0.4108%" height="15" fill="rgb(251,153,30)" fg:x="624" fg:w="7"/><text x="36.8697%" y="319.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer::Relaxer&gt; (7 samples, 0.41%)</title><rect x="36.6197%" y="293" width="0.4108%" height="15" fill="rgb(239,152,38)" fg:x="624" fg:w="7"/><text x="36.8697%" y="303.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.23%)</title><rect x="36.7958%" y="277" width="0.2347%" height="15" fill="rgb(249,139,47)" fg:x="627" fg:w="4"/><text x="37.0458%" y="287.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::invalid_subgraph::InvalidSubgraph&gt; (4 samples, 0.23%)</title><rect x="36.7958%" y="261" width="0.2347%" height="15" fill="rgb(244,64,35)" fg:x="627" fg:w="4"/><text x="37.0458%" y="271.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (21 samples, 1.23%)</title><rect x="37.0305%" y="325" width="1.2324%" height="15" fill="rgb(216,46,15)" fg:x="631" fg:w="21"/><text x="37.2805%" y="335.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (18 samples, 1.06%)</title><rect x="37.2066%" y="309" width="1.0563%" height="15" fill="rgb(250,74,19)" fg:x="634" fg:w="18"/><text x="37.4566%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (15 samples, 0.88%)</title><rect x="37.3826%" y="293" width="0.8803%" height="15" fill="rgb(249,42,33)" fg:x="637" fg:w="15"/><text x="37.6326%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="38.3216%" y="309" width="0.0587%" height="15" fill="rgb(242,149,17)" fg:x="653" fg:w="1"/><text x="38.5716%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.06%)</title><rect x="38.3803%" y="309" width="0.0587%" height="15" fill="rgb(244,29,21)" fg:x="654" fg:w="1"/><text x="38.6303%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (1 samples, 0.06%)</title><rect x="38.4390%" y="309" width="0.0587%" height="15" fill="rgb(220,130,37)" fg:x="655" fg:w="1"/><text x="38.6890%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::remove_index (1 samples, 0.06%)</title><rect x="38.4390%" y="293" width="0.0587%" height="15" fill="rgb(211,67,2)" fg:x="655" fg:w="1"/><text x="38.6890%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.18%)</title><rect x="38.9085%" y="293" width="0.1761%" height="15" fill="rgb(235,68,52)" fg:x="663" fg:w="3"/><text x="39.1585%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="39.0845%" y="293" width="0.0587%" height="15" fill="rgb(246,142,3)" fg:x="666" fg:w="1"/><text x="39.3345%" y="303.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="39.2019%" y="197" width="0.0587%" height="15" fill="rgb(241,25,7)" fg:x="668" fg:w="1"/><text x="39.4519%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (4 samples, 0.23%)</title><rect x="39.1432%" y="261" width="0.2347%" height="15" fill="rgb(242,119,39)" fg:x="667" fg:w="4"/><text x="39.3932%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.23%)</title><rect x="39.1432%" y="245" width="0.2347%" height="15" fill="rgb(241,98,45)" fg:x="667" fg:w="4"/><text x="39.3932%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (4 samples, 0.23%)</title><rect x="39.1432%" y="229" width="0.2347%" height="15" fill="rgb(254,28,30)" fg:x="667" fg:w="4"/><text x="39.3932%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (3 samples, 0.18%)</title><rect x="39.2019%" y="213" width="0.1761%" height="15" fill="rgb(241,142,54)" fg:x="668" fg:w="3"/><text x="39.4519%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.12%)</title><rect x="39.2606%" y="197" width="0.1174%" height="15" fill="rgb(222,85,15)" fg:x="669" fg:w="2"/><text x="39.5106%" y="207.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.06%)</title><rect x="39.3779%" y="229" width="0.0587%" height="15" fill="rgb(210,85,47)" fg:x="671" fg:w="1"/><text x="39.6279%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::convert::From&lt;[(K,V) (6 samples, 0.35%)</title><rect x="39.1432%" y="293" width="0.3521%" height="15" fill="rgb(224,206,25)" fg:x="667" fg:w="6"/><text x="39.3932%" y="303.50"></text></g><g><title> N]&gt;&gt;::from (6 samples, 0.35%)</title><rect x="39.1432%" y="277" width="0.3521%" height="15" fill="rgb(243,201,19)" fg:x="667" fg:w="6"/><text x="39.3932%" y="287.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (2 samples, 0.12%)</title><rect x="39.3779%" y="261" width="0.1174%" height="15" fill="rgb(236,59,4)" fg:x="671" fg:w="2"/><text x="39.6279%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (2 samples, 0.12%)</title><rect x="39.3779%" y="245" width="0.1174%" height="15" fill="rgb(254,179,45)" fg:x="671" fg:w="2"/><text x="39.6279%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.06%)</title><rect x="39.4366%" y="229" width="0.0587%" height="15" fill="rgb(226,14,10)" fg:x="672" fg:w="1"/><text x="39.6866%" y="239.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.06%)</title><rect x="39.4953%" y="293" width="0.0587%" height="15" fill="rgb(244,27,41)" fg:x="673" fg:w="1"/><text x="39.7453%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.06%)</title><rect x="39.5540%" y="293" width="0.0587%" height="15" fill="rgb(235,35,32)" fg:x="674" fg:w="1"/><text x="39.8040%" y="303.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.06%)</title><rect x="39.6127%" y="293" width="0.0587%" height="15" fill="rgb(218,68,31)" fg:x="675" fg:w="1"/><text x="39.8627%" y="303.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="39.6127%" y="277" width="0.0587%" height="15" fill="rgb(207,120,37)" fg:x="675" fg:w="1"/><text x="39.8627%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.06%)</title><rect x="39.6127%" y="261" width="0.0587%" height="15" fill="rgb(227,98,0)" fg:x="675" fg:w="1"/><text x="39.8627%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.06%)</title><rect x="39.6127%" y="245" width="0.0587%" height="15" fill="rgb(207,7,3)" fg:x="675" fg:w="1"/><text x="39.8627%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.06%)</title><rect x="39.6127%" y="229" width="0.0587%" height="15" fill="rgb(206,98,19)" fg:x="675" fg:w="1"/><text x="39.8627%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="40.4343%" y="277" width="0.0587%" height="15" fill="rgb(217,5,26)" fg:x="689" fg:w="1"/><text x="40.6843%" y="287.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="40.4930%" y="277" width="0.0587%" height="15" fill="rgb(235,190,38)" fg:x="690" fg:w="1"/><text x="40.7430%" y="287.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (3 samples, 0.18%)</title><rect x="40.5516%" y="277" width="0.1761%" height="15" fill="rgb(247,86,24)" fg:x="691" fg:w="3"/><text x="40.8016%" y="287.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_raw (6 samples, 0.35%)</title><rect x="40.7277%" y="277" width="0.3521%" height="15" fill="rgb(205,101,16)" fg:x="694" fg:w="6"/><text x="40.9777%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.35%)</title><rect x="40.7277%" y="261" width="0.3521%" height="15" fill="rgb(246,168,33)" fg:x="694" fg:w="6"/><text x="40.9777%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::OccupiedEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="41.0798%" y="277" width="0.0587%" height="15" fill="rgb(231,114,1)" fg:x="700" fg:w="1"/><text x="41.3298%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="41.1385%" y="277" width="0.0587%" height="15" fill="rgb(207,184,53)" fg:x="701" fg:w="1"/><text x="41.3885%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (41 samples, 2.41%)</title><rect x="41.1972%" y="277" width="2.4061%" height="15" fill="rgb(224,95,51)" fg:x="702" fg:w="41"/><text x="41.4472%" y="287.50">mw..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="43.7793%" y="261" width="0.0587%" height="15" fill="rgb(212,188,45)" fg:x="746" fg:w="1"/><text x="44.0293%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="43.8380%" y="261" width="0.0587%" height="15" fill="rgb(223,154,38)" fg:x="747" fg:w="1"/><text x="44.0880%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="43.8380%" y="245" width="0.0587%" height="15" fill="rgb(251,22,52)" fg:x="747" fg:w="1"/><text x="44.0880%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.06%)</title><rect x="43.8380%" y="229" width="0.0587%" height="15" fill="rgb(229,209,22)" fg:x="747" fg:w="1"/><text x="44.0880%" y="239.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.29%)</title><rect x="43.8967%" y="261" width="0.2934%" height="15" fill="rgb(234,138,34)" fg:x="748" fg:w="5"/><text x="44.1467%" y="271.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.47%)</title><rect x="44.1901%" y="261" width="0.4695%" height="15" fill="rgb(212,95,11)" fg:x="753" fg:w="8"/><text x="44.4401%" y="271.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (2 samples, 0.12%)</title><rect x="44.6596%" y="261" width="0.1174%" height="15" fill="rgb(240,179,47)" fg:x="761" fg:w="2"/><text x="44.9096%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (2 samples, 0.12%)</title><rect x="44.7770%" y="261" width="0.1174%" height="15" fill="rgb(240,163,11)" fg:x="763" fg:w="2"/><text x="45.0270%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="44.8357%" y="245" width="0.0587%" height="15" fill="rgb(236,37,12)" fg:x="764" fg:w="1"/><text x="45.0857%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.06%)</title><rect x="44.8357%" y="229" width="0.0587%" height="15" fill="rgb(232,164,16)" fg:x="764" fg:w="1"/><text x="45.0857%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="44.8944%" y="261" width="0.0587%" height="15" fill="rgb(244,205,15)" fg:x="765" fg:w="1"/><text x="45.1444%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (8 samples, 0.47%)</title><rect x="44.9531%" y="261" width="0.4695%" height="15" fill="rgb(223,117,47)" fg:x="766" fg:w="8"/><text x="45.2031%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (8 samples, 0.47%)</title><rect x="44.9531%" y="245" width="0.4695%" height="15" fill="rgb(244,107,35)" fg:x="766" fg:w="8"/><text x="45.2031%" y="255.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (132 samples, 7.75%)</title><rect x="39.6714%" y="293" width="7.7465%" height="15" fill="rgb(205,140,8)" fg:x="676" fg:w="132"/><text x="39.9214%" y="303.50">mwpf`mwpf::..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (65 samples, 3.81%)</title><rect x="43.6033%" y="277" width="3.8146%" height="15" fill="rgb(228,84,46)" fg:x="743" fg:w="65"/><text x="43.8533%" y="287.50">mwpf..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (34 samples, 2.00%)</title><rect x="45.4225%" y="261" width="1.9953%" height="15" fill="rgb(254,188,9)" fg:x="774" fg:w="34"/><text x="45.6725%" y="271.50">m..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (31 samples, 1.82%)</title><rect x="45.5986%" y="245" width="1.8192%" height="15" fill="rgb(206,112,54)" fg:x="777" fg:w="31"/><text x="45.8486%" y="255.50">m..</text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="47.4178%" y="277" width="0.0587%" height="15" fill="rgb(216,84,49)" fg:x="808" fg:w="1"/><text x="47.6678%" y="287.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (2 samples, 0.12%)</title><rect x="49.0023%" y="245" width="0.1174%" height="15" fill="rgb(214,194,35)" fg:x="835" fg:w="2"/><text x="49.2523%" y="255.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (41 samples, 2.41%)</title><rect x="47.4765%" y="277" width="2.4061%" height="15" fill="rgb(249,28,3)" fg:x="809" fg:w="41"/><text x="47.7265%" y="287.50">mw..</text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (17 samples, 1.00%)</title><rect x="48.8850%" y="261" width="0.9977%" height="15" fill="rgb(222,56,52)" fg:x="833" fg:w="17"/><text x="49.1350%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (13 samples, 0.76%)</title><rect x="49.1197%" y="245" width="0.7629%" height="15" fill="rgb(245,217,50)" fg:x="837" fg:w="13"/><text x="49.3697%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="50.1761%" y="261" width="0.0587%" height="15" fill="rgb(213,201,24)" fg:x="855" fg:w="1"/><text x="50.4261%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="50.2347%" y="245" width="0.0587%" height="15" fill="rgb(248,116,28)" fg:x="856" fg:w="1"/><text x="50.4847%" y="255.50"></text></g><g><title>mwpf`mwpf::matrix::interface::MatrixTail::set_tail_edges (12 samples, 0.70%)</title><rect x="49.8826%" y="277" width="0.7042%" height="15" fill="rgb(219,72,43)" fg:x="850" fg:w="12"/><text x="50.1326%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (6 samples, 0.35%)</title><rect x="50.2347%" y="261" width="0.3521%" height="15" fill="rgb(209,138,14)" fg:x="856" fg:w="6"/><text x="50.4847%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (5 samples, 0.29%)</title><rect x="50.2934%" y="245" width="0.2934%" height="15" fill="rgb(222,18,33)" fg:x="857" fg:w="5"/><text x="50.5434%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (5 samples, 0.29%)</title><rect x="50.2934%" y="229" width="0.2934%" height="15" fill="rgb(213,199,7)" fg:x="857" fg:w="5"/><text x="50.5434%" y="239.50"></text></g><g><title>mwpf`mwpf::matrix::hair::HairView&lt;M&gt;::new (60 samples, 3.52%)</title><rect x="47.4178%" y="293" width="3.5211%" height="15" fill="rgb(250,110,10)" fg:x="808" fg:w="60"/><text x="47.6678%" y="303.50">mwp..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (6 samples, 0.35%)</title><rect x="50.5869%" y="277" width="0.3521%" height="15" fill="rgb(248,123,6)" fg:x="862" fg:w="6"/><text x="50.8369%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="52.6408%" y="277" width="0.0587%" height="15" fill="rgb(206,91,31)" fg:x="897" fg:w="1"/><text x="52.8908%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.35%)</title><rect x="52.6995%" y="277" width="0.3521%" height="15" fill="rgb(211,154,13)" fg:x="898" fg:w="6"/><text x="52.9495%" y="287.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="53.0516%" y="277" width="0.0587%" height="15" fill="rgb(225,148,7)" fg:x="904" fg:w="1"/><text x="53.3016%" y="287.50"></text></g><g><title>mwpf`DYLD-STUB$$memmove (1 samples, 0.06%)</title><rect x="53.1103%" y="277" width="0.0587%" height="15" fill="rgb(220,160,43)" fg:x="905" fg:w="1"/><text x="53.3603%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.18%)</title><rect x="53.1690%" y="277" width="0.1761%" height="15" fill="rgb(213,52,39)" fg:x="906" fg:w="3"/><text x="53.4190%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="53.2864%" y="261" width="0.0587%" height="15" fill="rgb(243,137,7)" fg:x="908" fg:w="1"/><text x="53.5364%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="53.2864%" y="245" width="0.0587%" height="15" fill="rgb(230,79,13)" fg:x="908" fg:w="1"/><text x="53.5364%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.06%)</title><rect x="53.2864%" y="229" width="0.0587%" height="15" fill="rgb(247,105,23)" fg:x="908" fg:w="1"/><text x="53.5364%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.12%)</title><rect x="53.3451%" y="277" width="0.1174%" height="15" fill="rgb(223,179,41)" fg:x="909" fg:w="2"/><text x="53.5951%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="53.4038%" y="261" width="0.0587%" height="15" fill="rgb(218,9,34)" fg:x="910" fg:w="1"/><text x="53.6538%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="53.4038%" y="245" width="0.0587%" height="15" fill="rgb(222,106,8)" fg:x="910" fg:w="1"/><text x="53.6538%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.06%)</title><rect x="53.4038%" y="229" width="0.0587%" height="15" fill="rgb(211,220,0)" fg:x="910" fg:w="1"/><text x="53.6538%" y="239.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::update_hash (1 samples, 0.06%)</title><rect x="53.4624%" y="277" width="0.0587%" height="15" fill="rgb(229,52,16)" fg:x="911" fg:w="1"/><text x="53.7124%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="53.4624%" y="261" width="0.0587%" height="15" fill="rgb(212,155,18)" fg:x="911" fg:w="1"/><text x="53.7124%" y="271.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (1 samples, 0.06%)</title><rect x="53.5211%" y="277" width="0.0587%" height="15" fill="rgb(242,21,14)" fg:x="912" fg:w="1"/><text x="53.7711%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.06%)</title><rect x="53.5211%" y="261" width="0.0587%" height="15" fill="rgb(222,19,48)" fg:x="912" fg:w="1"/><text x="53.7711%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.06%)</title><rect x="53.5211%" y="245" width="0.0587%" height="15" fill="rgb(232,45,27)" fg:x="912" fg:w="1"/><text x="53.7711%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.06%)</title><rect x="53.5211%" y="229" width="0.0587%" height="15" fill="rgb(249,103,42)" fg:x="912" fg:w="1"/><text x="53.7711%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.12%)</title><rect x="53.5798%" y="277" width="0.1174%" height="15" fill="rgb(246,81,33)" fg:x="913" fg:w="2"/><text x="53.8298%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="53.8146%" y="261" width="0.0587%" height="15" fill="rgb(252,33,42)" fg:x="917" fg:w="1"/><text x="54.0646%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="53.8732%" y="261" width="0.0587%" height="15" fill="rgb(209,212,41)" fg:x="918" fg:w="1"/><text x="54.1232%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="53.8732%" y="245" width="0.0587%" height="15" fill="rgb(207,154,6)" fg:x="918" fg:w="1"/><text x="54.1232%" y="255.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.35%)</title><rect x="53.9319%" y="261" width="0.3521%" height="15" fill="rgb(223,64,47)" fg:x="919" fg:w="6"/><text x="54.1819%" y="271.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.41%)</title><rect x="54.2840%" y="261" width="0.4108%" height="15" fill="rgb(211,161,38)" fg:x="925" fg:w="7"/><text x="54.5340%" y="271.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (2 samples, 0.12%)</title><rect x="54.6948%" y="261" width="0.1174%" height="15" fill="rgb(219,138,40)" fg:x="932" fg:w="2"/><text x="54.9448%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="54.7535%" y="245" width="0.0587%" height="15" fill="rgb(241,228,46)" fg:x="933" fg:w="1"/><text x="55.0035%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="54.7535%" y="229" width="0.0587%" height="15" fill="rgb(223,209,38)" fg:x="933" fg:w="1"/><text x="55.0035%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.06%)</title><rect x="54.7535%" y="213" width="0.0587%" height="15" fill="rgb(236,164,45)" fg:x="933" fg:w="1"/><text x="55.0035%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (3 samples, 0.18%)</title><rect x="54.8122%" y="261" width="0.1761%" height="15" fill="rgb(231,15,5)" fg:x="934" fg:w="3"/><text x="55.0622%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.12%)</title><rect x="54.8709%" y="245" width="0.1174%" height="15" fill="rgb(252,35,15)" fg:x="935" fg:w="2"/><text x="55.1209%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.12%)</title><rect x="54.9883%" y="261" width="0.1174%" height="15" fill="rgb(248,181,18)" fg:x="937" fg:w="2"/><text x="55.2383%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (11 samples, 0.65%)</title><rect x="55.1056%" y="261" width="0.6455%" height="15" fill="rgb(233,39,42)" fg:x="939" fg:w="11"/><text x="55.3556%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (8 samples, 0.47%)</title><rect x="55.2817%" y="245" width="0.4695%" height="15" fill="rgb(238,110,33)" fg:x="942" fg:w="8"/><text x="55.5317%" y="255.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (104 samples, 6.10%)</title><rect x="50.9390%" y="293" width="6.1033%" height="15" fill="rgb(233,195,10)" fg:x="868" fg:w="104"/><text x="51.1890%" y="303.50">mwpf`mwp..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (57 samples, 3.35%)</title><rect x="53.6972%" y="277" width="3.3451%" height="15" fill="rgb(254,105,3)" fg:x="915" fg:w="57"/><text x="53.9472%" y="287.50">mwp..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (22 samples, 1.29%)</title><rect x="55.7512%" y="261" width="1.2911%" height="15" fill="rgb(221,225,9)" fg:x="950" fg:w="22"/><text x="56.0012%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (14 samples, 0.82%)</title><rect x="56.2207%" y="245" width="0.8216%" height="15" fill="rgb(224,227,45)" fg:x="958" fg:w="14"/><text x="56.4707%" y="255.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (1 samples, 0.06%)</title><rect x="57.0423%" y="277" width="0.0587%" height="15" fill="rgb(229,198,43)" fg:x="972" fg:w="1"/><text x="57.2923%" y="287.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.12%)</title><rect x="57.2770%" y="261" width="0.1174%" height="15" fill="rgb(206,209,35)" fg:x="976" fg:w="2"/><text x="57.5270%" y="271.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="57.3944%" y="261" width="0.0587%" height="15" fill="rgb(245,195,53)" fg:x="978" fg:w="1"/><text x="57.6444%" y="271.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (3 samples, 0.18%)</title><rect x="57.4531%" y="261" width="0.1761%" height="15" fill="rgb(240,92,26)" fg:x="979" fg:w="3"/><text x="57.7031%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="57.5704%" y="245" width="0.0587%" height="15" fill="rgb(207,40,23)" fg:x="981" fg:w="1"/><text x="57.8204%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.06%)</title><rect x="57.5704%" y="229" width="0.0587%" height="15" fill="rgb(223,111,35)" fg:x="981" fg:w="1"/><text x="57.8204%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.06%)</title><rect x="57.5704%" y="213" width="0.0587%" height="15" fill="rgb(229,147,28)" fg:x="981" fg:w="1"/><text x="57.8204%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.06%)</title><rect x="57.5704%" y="197" width="0.0587%" height="15" fill="rgb(211,29,28)" fg:x="981" fg:w="1"/><text x="57.8204%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (3 samples, 0.18%)</title><rect x="57.6291%" y="261" width="0.1761%" height="15" fill="rgb(228,72,33)" fg:x="982" fg:w="3"/><text x="57.8791%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.18%)</title><rect x="57.6291%" y="245" width="0.1761%" height="15" fill="rgb(205,214,31)" fg:x="982" fg:w="3"/><text x="57.8791%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="57.8052%" y="261" width="0.0587%" height="15" fill="rgb(224,111,15)" fg:x="985" fg:w="1"/><text x="58.0552%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (6 samples, 0.35%)</title><rect x="57.8638%" y="261" width="0.3521%" height="15" fill="rgb(253,21,26)" fg:x="986" fg:w="6"/><text x="58.1138%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (4 samples, 0.23%)</title><rect x="57.9812%" y="245" width="0.2347%" height="15" fill="rgb(245,139,43)" fg:x="988" fg:w="4"/><text x="58.2312%" y="255.50"></text></g><g><title>mwpf`weak_table::ptr_weak_hash_set::_&lt;impl core::iter::traits::collect::FromIterator&lt;&lt;T as weak_table::traits::WeakElement&gt;::Strong&gt; for weak_table::PtrWeakHashSet&lt;T,S&gt;&gt;::from_iter (33 samples, 1.94%)</title><rect x="57.0423%" y="293" width="1.9366%" height="15" fill="rgb(252,170,7)" fg:x="972" fg:w="33"/><text x="57.2923%" y="303.50">m..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (32 samples, 1.88%)</title><rect x="57.1009%" y="277" width="1.8779%" height="15" fill="rgb(231,118,14)" fg:x="973" fg:w="32"/><text x="57.3509%" y="287.50">m..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (13 samples, 0.76%)</title><rect x="58.2160%" y="261" width="0.7629%" height="15" fill="rgb(238,83,0)" fg:x="992" fg:w="13"/><text x="58.4660%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (10 samples, 0.59%)</title><rect x="58.3920%" y="245" width="0.5869%" height="15" fill="rgb(221,39,39)" fg:x="995" fg:w="10"/><text x="58.6420%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (5 samples, 0.29%)</title><rect x="58.9789%" y="293" width="0.2934%" height="15" fill="rgb(222,119,46)" fg:x="1005" fg:w="5"/><text x="59.2289%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="59.3310%" y="277" width="0.0587%" height="15" fill="rgb(222,165,49)" fg:x="1011" fg:w="1"/><text x="59.5810%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::OccupiedEntry&lt;K,V&gt;::insert (2 samples, 0.12%)</title><rect x="59.3897%" y="277" width="0.1174%" height="15" fill="rgb(219,113,52)" fg:x="1012" fg:w="2"/><text x="59.6397%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (7 samples, 0.41%)</title><rect x="59.2723%" y="293" width="0.4108%" height="15" fill="rgb(214,7,15)" fg:x="1010" fg:w="7"/><text x="59.5223%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (3 samples, 0.18%)</title><rect x="59.5070%" y="277" width="0.1761%" height="15" fill="rgb(235,32,4)" fg:x="1014" fg:w="3"/><text x="59.7570%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (3 samples, 0.18%)</title><rect x="59.5070%" y="261" width="0.1761%" height="15" fill="rgb(238,90,54)" fg:x="1014" fg:w="3"/><text x="59.7570%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_single_hair::PluginSingleHair as mwpf::plugin::PluginImpl&gt;::find_relaxers (363 samples, 21.30%)</title><rect x="38.4977%" y="309" width="21.3028%" height="15" fill="rgb(213,208,19)" fg:x="656" fg:w="363"/><text x="38.7477%" y="319.50">mwpf`&lt;mwpf::plugin_single_hair::Pl..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::remove_index (2 samples, 0.12%)</title><rect x="59.6831%" y="293" width="0.1174%" height="15" fill="rgb(233,156,4)" fg:x="1017" fg:w="2"/><text x="59.9331%" y="303.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (1 samples, 0.06%)</title><rect x="59.8005%" y="277" width="0.0587%" height="15" fill="rgb(207,194,5)" fg:x="1019" fg:w="1"/><text x="60.0505%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.06%)</title><rect x="59.8005%" y="261" width="0.0587%" height="15" fill="rgb(206,111,30)" fg:x="1019" fg:w="1"/><text x="60.0505%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="59.8005%" y="245" width="0.0587%" height="15" fill="rgb(243,70,54)" fg:x="1019" fg:w="1"/><text x="60.0505%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="59.8005%" y="229" width="0.0587%" height="15" fill="rgb(242,28,8)" fg:x="1019" fg:w="1"/><text x="60.0505%" y="239.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (2 samples, 0.12%)</title><rect x="59.8592%" y="277" width="0.1174%" height="15" fill="rgb(219,106,18)" fg:x="1020" fg:w="2"/><text x="60.1092%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (1 samples, 0.06%)</title><rect x="59.9178%" y="261" width="0.0587%" height="15" fill="rgb(244,222,10)" fg:x="1021" fg:w="1"/><text x="60.1678%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (4 samples, 0.23%)</title><rect x="59.8005%" y="309" width="0.2347%" height="15" fill="rgb(236,179,52)" fg:x="1019" fg:w="4"/><text x="60.0505%" y="319.50"></text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (4 samples, 0.23%)</title><rect x="59.8005%" y="293" width="0.2347%" height="15" fill="rgb(213,23,39)" fg:x="1019" fg:w="4"/><text x="60.0505%" y="303.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (1 samples, 0.06%)</title><rect x="59.9765%" y="277" width="0.0587%" height="15" fill="rgb(238,48,10)" fg:x="1022" fg:w="1"/><text x="60.2265%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.06%)</title><rect x="59.9765%" y="261" width="0.0587%" height="15" fill="rgb(251,196,23)" fg:x="1022" fg:w="1"/><text x="60.2265%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.06%)</title><rect x="60.1526%" y="261" width="0.0587%" height="15" fill="rgb(250,152,24)" fg:x="1025" fg:w="1"/><text x="60.4026%" y="271.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.18%)</title><rect x="60.1526%" y="293" width="0.1761%" height="15" fill="rgb(209,150,17)" fg:x="1025" fg:w="3"/><text x="60.4026%" y="303.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer::Relaxer&gt; (3 samples, 0.18%)</title><rect x="60.1526%" y="277" width="0.1761%" height="15" fill="rgb(234,202,34)" fg:x="1025" fg:w="3"/><text x="60.4026%" y="287.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.12%)</title><rect x="60.2113%" y="261" width="0.1174%" height="15" fill="rgb(253,148,53)" fg:x="1026" fg:w="2"/><text x="60.4613%" y="271.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::invalid_subgraph::InvalidSubgraph&gt; (2 samples, 0.12%)</title><rect x="60.2113%" y="245" width="0.1174%" height="15" fill="rgb(218,129,16)" fg:x="1026" fg:w="2"/><text x="60.4613%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (3 samples, 0.18%)</title><rect x="60.3286%" y="293" width="0.1761%" height="15" fill="rgb(216,85,19)" fg:x="1028" fg:w="3"/><text x="60.5786%" y="303.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::add (12 samples, 0.70%)</title><rect x="60.0352%" y="309" width="0.7042%" height="15" fill="rgb(235,228,7)" fg:x="1023" fg:w="12"/><text x="60.2852%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (4 samples, 0.23%)</title><rect x="60.5047%" y="293" width="0.2347%" height="15" fill="rgb(245,175,0)" fg:x="1031" fg:w="4"/><text x="60.7547%" y="303.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.18%)</title><rect x="60.5634%" y="277" width="0.1761%" height="15" fill="rgb(208,168,36)" fg:x="1032" fg:w="3"/><text x="60.8134%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (2 samples, 0.12%)</title><rect x="60.7394%" y="293" width="0.1174%" height="15" fill="rgb(246,171,24)" fg:x="1035" fg:w="2"/><text x="60.9894%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (2 samples, 0.12%)</title><rect x="60.7394%" y="277" width="0.1174%" height="15" fill="rgb(215,142,24)" fg:x="1035" fg:w="2"/><text x="60.9894%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (2 samples, 0.12%)</title><rect x="60.7394%" y="261" width="0.1174%" height="15" fill="rgb(250,187,7)" fg:x="1035" fg:w="2"/><text x="60.9894%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="60.7981%" y="245" width="0.0587%" height="15" fill="rgb(228,66,33)" fg:x="1036" fg:w="1"/><text x="61.0481%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (2 samples, 0.12%)</title><rect x="60.8568%" y="261" width="0.1174%" height="15" fill="rgb(234,215,21)" fg:x="1037" fg:w="2"/><text x="61.1068%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (2 samples, 0.12%)</title><rect x="60.8568%" y="245" width="0.1174%" height="15" fill="rgb(222,191,20)" fg:x="1037" fg:w="2"/><text x="61.1068%" y="255.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="60.9155%" y="229" width="0.0587%" height="15" fill="rgb(245,79,54)" fg:x="1038" fg:w="1"/><text x="61.1655%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (3 samples, 0.18%)</title><rect x="60.8568%" y="277" width="0.1761%" height="15" fill="rgb(240,10,37)" fg:x="1037" fg:w="3"/><text x="61.1068%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.06%)</title><rect x="60.9742%" y="261" width="0.0587%" height="15" fill="rgb(214,192,32)" fg:x="1039" fg:w="1"/><text x="61.2242%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (2 samples, 0.12%)</title><rect x="61.0329%" y="277" width="0.1174%" height="15" fill="rgb(209,36,54)" fg:x="1040" fg:w="2"/><text x="61.2829%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (2 samples, 0.12%)</title><rect x="61.0329%" y="261" width="0.1174%" height="15" fill="rgb(220,10,11)" fg:x="1040" fg:w="2"/><text x="61.2829%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (2 samples, 0.12%)</title><rect x="61.0329%" y="245" width="0.1174%" height="15" fill="rgb(221,106,17)" fg:x="1040" fg:w="2"/><text x="61.2829%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.12%)</title><rect x="61.0329%" y="229" width="0.1174%" height="15" fill="rgb(251,142,44)" fg:x="1040" fg:w="2"/><text x="61.2829%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.06%)</title><rect x="61.1502%" y="277" width="0.0587%" height="15" fill="rgb(238,13,15)" fg:x="1042" fg:w="1"/><text x="61.4002%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 0.06%)</title><rect x="61.1502%" y="261" width="0.0587%" height="15" fill="rgb(208,107,27)" fg:x="1042" fg:w="1"/><text x="61.4002%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.06%)</title><rect x="61.1502%" y="245" width="0.0587%" height="15" fill="rgb(205,136,37)" fg:x="1042" fg:w="1"/><text x="61.4002%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.06%)</title><rect x="61.1502%" y="229" width="0.0587%" height="15" fill="rgb(250,205,27)" fg:x="1042" fg:w="1"/><text x="61.4002%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="61.1502%" y="213" width="0.0587%" height="15" fill="rgb(210,80,43)" fg:x="1042" fg:w="1"/><text x="61.4002%" y="223.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (3 samples, 0.18%)</title><rect x="61.2089%" y="277" width="0.1761%" height="15" fill="rgb(247,160,36)" fg:x="1043" fg:w="3"/><text x="61.4589%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.06%)</title><rect x="61.3263%" y="261" width="0.0587%" height="15" fill="rgb(234,13,49)" fg:x="1045" fg:w="1"/><text x="61.5763%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="61.3263%" y="245" width="0.0587%" height="15" fill="rgb(234,122,0)" fg:x="1045" fg:w="1"/><text x="61.5763%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.06%)</title><rect x="61.5023%" y="245" width="0.0587%" height="15" fill="rgb(207,146,38)" fg:x="1048" fg:w="1"/><text x="61.7523%" y="255.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (5 samples, 0.29%)</title><rect x="61.3850%" y="261" width="0.2934%" height="15" fill="rgb(207,177,25)" fg:x="1046" fg:w="5"/><text x="61.6350%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (2 samples, 0.12%)</title><rect x="61.5610%" y="245" width="0.1174%" height="15" fill="rgb(211,178,42)" fg:x="1049" fg:w="2"/><text x="61.8110%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (2 samples, 0.12%)</title><rect x="61.5610%" y="229" width="0.1174%" height="15" fill="rgb(230,69,54)" fg:x="1049" fg:w="2"/><text x="61.8110%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.12%)</title><rect x="61.5610%" y="213" width="0.1174%" height="15" fill="rgb(214,135,41)" fg:x="1049" fg:w="2"/><text x="61.8110%" y="223.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (6 samples, 0.35%)</title><rect x="61.3850%" y="277" width="0.3521%" height="15" fill="rgb(237,67,25)" fg:x="1046" fg:w="6"/><text x="61.6350%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="61.6784%" y="261" width="0.0587%" height="15" fill="rgb(222,189,50)" fg:x="1051" fg:w="1"/><text x="61.9284%" y="271.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (18 samples, 1.06%)</title><rect x="60.7394%" y="309" width="1.0563%" height="15" fill="rgb(245,148,34)" fg:x="1035" fg:w="18"/><text x="60.9894%" y="319.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (16 samples, 0.94%)</title><rect x="60.8568%" y="293" width="0.9390%" height="15" fill="rgb(222,29,6)" fg:x="1037" fg:w="16"/><text x="61.1068%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="61.7371%" y="277" width="0.0587%" height="15" fill="rgb(221,189,43)" fg:x="1052" fg:w="1"/><text x="61.9871%" y="287.50"></text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (403 samples, 23.65%)</title><rect x="38.2629%" y="325" width="23.6502%" height="15" fill="rgb(207,36,27)" fg:x="652" fg:w="403"/><text x="38.5129%" y="335.50">mwpf`mwpf::plugin::PluginEntry::execute</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.12%)</title><rect x="61.7958%" y="309" width="0.1174%" height="15" fill="rgb(217,90,24)" fg:x="1053" fg:w="2"/><text x="62.0458%" y="319.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="61.9131%" y="293" width="0.0587%" height="15" fill="rgb(224,66,35)" fg:x="1055" fg:w="1"/><text x="62.1631%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="61.9718%" y="293" width="0.0587%" height="15" fill="rgb(221,13,50)" fg:x="1056" fg:w="1"/><text x="62.2218%" y="303.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (447 samples, 26.23%)</title><rect x="35.9155%" y="341" width="26.2324%" height="15" fill="rgb(236,68,49)" fg:x="612" fg:w="447"/><text x="36.1655%" y="351.50">mwpf`mwpf::plugin::PluginManager::find_rel..</text></g><g><title>mwpf`weak_table::ptr_weak_hash_set::_&lt;impl core::iter::traits::collect::FromIterator&lt;&lt;T as weak_table::traits::WeakElement&gt;::Strong&gt; for weak_table::PtrWeakHashSet&lt;T,S&gt;&gt;::from_iter (4 samples, 0.23%)</title><rect x="61.9131%" y="325" width="0.2347%" height="15" fill="rgb(229,146,28)" fg:x="1055" fg:w="4"/><text x="62.1631%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (4 samples, 0.23%)</title><rect x="61.9131%" y="309" width="0.2347%" height="15" fill="rgb(225,31,38)" fg:x="1055" fg:w="4"/><text x="62.1631%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (2 samples, 0.12%)</title><rect x="62.0305%" y="293" width="0.1174%" height="15" fill="rgb(250,208,3)" fg:x="1057" fg:w="2"/><text x="62.2805%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.12%)</title><rect x="62.0305%" y="277" width="0.1174%" height="15" fill="rgb(246,54,23)" fg:x="1057" fg:w="2"/><text x="62.2805%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="62.1479%" y="325" width="0.0587%" height="15" fill="rgb(243,76,11)" fg:x="1059" fg:w="1"/><text x="62.3979%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="62.2066%" y="325" width="0.0587%" height="15" fill="rgb(245,21,50)" fg:x="1060" fg:w="1"/><text x="62.4566%" y="335.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.06%)</title><rect x="62.2653%" y="309" width="0.0587%" height="15" fill="rgb(228,9,43)" fg:x="1061" fg:w="1"/><text x="62.5153%" y="319.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="62.3239%" y="277" width="0.0587%" height="15" fill="rgb(208,100,47)" fg:x="1062" fg:w="1"/><text x="62.5739%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (3 samples, 0.18%)</title><rect x="62.2653%" y="325" width="0.1761%" height="15" fill="rgb(232,26,8)" fg:x="1061" fg:w="3"/><text x="62.5153%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (2 samples, 0.12%)</title><rect x="62.3239%" y="309" width="0.1174%" height="15" fill="rgb(216,166,38)" fg:x="1062" fg:w="2"/><text x="62.5739%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (2 samples, 0.12%)</title><rect x="62.3239%" y="293" width="0.1174%" height="15" fill="rgb(251,202,51)" fg:x="1062" fg:w="2"/><text x="62.5739%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="62.3826%" y="277" width="0.0587%" height="15" fill="rgb(254,216,34)" fg:x="1063" fg:w="1"/><text x="62.6326%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="62.4413%" y="309" width="0.0587%" height="15" fill="rgb(251,32,27)" fg:x="1064" fg:w="1"/><text x="62.6913%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="62.5000%" y="245" width="0.0587%" height="15" fill="rgb(208,127,28)" fg:x="1065" fg:w="1"/><text x="62.7500%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.06%)</title><rect x="62.5587%" y="245" width="0.0587%" height="15" fill="rgb(224,137,22)" fg:x="1066" fg:w="1"/><text x="62.8087%" y="255.50"></text></g><g><title>mwpf`HEkk::~HEkk (3 samples, 0.18%)</title><rect x="62.5000%" y="293" width="0.1761%" height="15" fill="rgb(254,70,32)" fg:x="1065" fg:w="3"/><text x="62.7500%" y="303.50"></text></g><g><title>mwpf`HSimplexNla::~HSimplexNla (3 samples, 0.18%)</title><rect x="62.5000%" y="277" width="0.1761%" height="15" fill="rgb(229,75,37)" fg:x="1065" fg:w="3"/><text x="62.7500%" y="287.50"></text></g><g><title>mwpf`HFactor::~HFactor (3 samples, 0.18%)</title><rect x="62.5000%" y="261" width="0.1761%" height="15" fill="rgb(252,64,23)" fg:x="1065" fg:w="3"/><text x="62.7500%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.06%)</title><rect x="62.6174%" y="245" width="0.0587%" height="15" fill="rgb(232,162,48)" fg:x="1067" fg:w="1"/><text x="62.8674%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.06%)</title><rect x="62.6174%" y="229" width="0.0587%" height="15" fill="rgb(246,160,12)" fg:x="1067" fg:w="1"/><text x="62.8674%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="62.6761%" y="277" width="0.0587%" height="15" fill="rgb(247,166,0)" fg:x="1068" fg:w="1"/><text x="62.9261%" y="287.50"></text></g><g><title>mwpf`Highs::~Highs (6 samples, 0.35%)</title><rect x="62.4413%" y="325" width="0.3521%" height="15" fill="rgb(249,219,21)" fg:x="1064" fg:w="6"/><text x="62.6913%" y="335.50"></text></g><g><title>mwpf`Highs::~Highs (5 samples, 0.29%)</title><rect x="62.5000%" y="309" width="0.2934%" height="15" fill="rgb(205,209,3)" fg:x="1065" fg:w="5"/><text x="62.7500%" y="319.50"></text></g><g><title>mwpf`OptionRecordBool::~OptionRecordBool (2 samples, 0.12%)</title><rect x="62.6761%" y="293" width="0.1174%" height="15" fill="rgb(243,44,1)" fg:x="1068" fg:w="2"/><text x="62.9261%" y="303.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.06%)</title><rect x="62.7347%" y="277" width="0.0587%" height="15" fill="rgb(206,159,16)" fg:x="1069" fg:w="1"/><text x="62.9847%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.29%)</title><rect x="62.7934%" y="325" width="0.2934%" height="15" fill="rgb(244,77,30)" fg:x="1070" fg:w="5"/><text x="63.0434%" y="335.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (5 samples, 0.29%)</title><rect x="62.7934%" y="309" width="0.2934%" height="15" fill="rgb(218,69,12)" fg:x="1070" fg:w="5"/><text x="63.0434%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (5 samples, 0.29%)</title><rect x="62.7934%" y="293" width="0.2934%" height="15" fill="rgb(212,87,7)" fg:x="1070" fg:w="5"/><text x="63.0434%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (4 samples, 0.23%)</title><rect x="62.8521%" y="277" width="0.2347%" height="15" fill="rgb(245,114,25)" fg:x="1071" fg:w="4"/><text x="63.1021%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (4 samples, 0.23%)</title><rect x="62.8521%" y="261" width="0.2347%" height="15" fill="rgb(210,61,42)" fg:x="1071" fg:w="4"/><text x="63.1021%" y="271.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.06%)</title><rect x="63.0869%" y="325" width="0.0587%" height="15" fill="rgb(211,52,33)" fg:x="1075" fg:w="1"/><text x="63.3369%" y="335.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="63.0869%" y="309" width="0.0587%" height="15" fill="rgb(234,58,33)" fg:x="1075" fg:w="1"/><text x="63.3369%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.06%)</title><rect x="63.0869%" y="293" width="0.0587%" height="15" fill="rgb(220,115,36)" fg:x="1075" fg:w="1"/><text x="63.3369%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.06%)</title><rect x="63.0869%" y="277" width="0.0587%" height="15" fill="rgb(243,153,54)" fg:x="1075" fg:w="1"/><text x="63.3369%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.06%)</title><rect x="63.0869%" y="261" width="0.0587%" height="15" fill="rgb(251,47,18)" fg:x="1075" fg:w="1"/><text x="63.3369%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="63.0869%" y="245" width="0.0587%" height="15" fill="rgb(242,102,42)" fg:x="1075" fg:w="1"/><text x="63.3369%" y="255.50"></text></g><g><title>mwpf`highs::Model::add_col (1 samples, 0.06%)</title><rect x="63.1455%" y="325" width="0.0587%" height="15" fill="rgb(234,31,38)" fg:x="1076" fg:w="1"/><text x="63.3955%" y="335.50"></text></g><g><title>mwpf`Highs::addCol (1 samples, 0.06%)</title><rect x="63.1455%" y="309" width="0.0587%" height="15" fill="rgb(221,117,51)" fg:x="1076" fg:w="1"/><text x="63.3955%" y="319.50"></text></g><g><title>mwpf`Highs::addCols (1 samples, 0.06%)</title><rect x="63.1455%" y="293" width="0.0587%" height="15" fill="rgb(212,20,18)" fg:x="1076" fg:w="1"/><text x="63.3955%" y="303.50"></text></g><g><title>mwpf`Highs::addColsInterface (1 samples, 0.06%)</title><rect x="63.1455%" y="277" width="0.0587%" height="15" fill="rgb(245,133,36)" fg:x="1076" fg:w="1"/><text x="63.3955%" y="287.50"></text></g><g><title>mwpf`HEkk::addCols (1 samples, 0.06%)</title><rect x="63.1455%" y="261" width="0.0587%" height="15" fill="rgb(212,6,19)" fg:x="1076" fg:w="1"/><text x="63.3955%" y="271.50"></text></g><g><title>mwpf`ProductFormUpdate::clear (1 samples, 0.06%)</title><rect x="63.1455%" y="245" width="0.0587%" height="15" fill="rgb(218,1,36)" fg:x="1076" fg:w="1"/><text x="63.3955%" y="255.50"></text></g><g><title>mwpf`&lt;(ExtendA,ExtendB) as core::iter::traits::collect::Extend&lt;(A,B)&gt;&gt;::extend (1 samples, 0.06%)</title><rect x="63.2042%" y="309" width="0.0587%" height="15" fill="rgb(246,84,54)" fg:x="1077" fg:w="1"/><text x="63.4542%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="63.2629%" y="277" width="0.0587%" height="15" fill="rgb(242,110,6)" fg:x="1078" fg:w="1"/><text x="63.5129%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="63.3216%" y="261" width="0.0587%" height="15" fill="rgb(214,47,5)" fg:x="1079" fg:w="1"/><text x="63.5716%" y="271.50"></text></g><g><title>mwpf`Highs::addRowsInterface (2 samples, 0.12%)</title><rect x="63.3216%" y="277" width="0.1174%" height="15" fill="rgb(218,159,25)" fg:x="1079" fg:w="2"/><text x="63.5716%" y="287.50"></text></g><g><title>mwpf`HighsSparseMatrix::assess(HighsLogOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.06%)</title><rect x="63.3803%" y="261" width="0.0587%" height="15" fill="rgb(215,211,28)" fg:x="1080" fg:w="1"/><text x="63.6303%" y="271.50"></text></g><g><title>mwpf`assessMatrix(HighsLogOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, int, int, bool, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;double, std::__1::allocator (1 samples, 0.06%)</title><rect x="63.3803%" y="245" width="0.0587%" height="15" fill="rgb(238,59,32)" fg:x="1080" fg:w="1"/><text x="63.6303%" y="255.50"></text></g><g><title>mwpf`bool HighsHashTable&lt;int, void&gt;::insert&lt;int&gt; (1 samples, 0.06%)</title><rect x="63.3803%" y="229" width="0.0587%" height="15" fill="rgb(226,82,3)" fg:x="1080" fg:w="1"/><text x="63.6303%" y="239.50"></text></g><g><title>mwpf`highs::Model::add_row (5 samples, 0.29%)</title><rect x="63.2042%" y="325" width="0.2934%" height="15" fill="rgb(240,164,32)" fg:x="1077" fg:w="5"/><text x="63.4542%" y="335.50"></text></g><g><title>mwpf`Highs::addRow (4 samples, 0.23%)</title><rect x="63.2629%" y="309" width="0.2347%" height="15" fill="rgb(232,46,7)" fg:x="1078" fg:w="4"/><text x="63.5129%" y="319.50"></text></g><g><title>mwpf`Highs::addRows (4 samples, 0.23%)</title><rect x="63.2629%" y="293" width="0.2347%" height="15" fill="rgb(229,129,53)" fg:x="1078" fg:w="4"/><text x="63.5129%" y="303.50"></text></g><g><title>mwpf`Highs::returnFromHighs (1 samples, 0.06%)</title><rect x="63.4390%" y="277" width="0.0587%" height="15" fill="rgb(234,188,29)" fg:x="1081" fg:w="1"/><text x="63.6890%" y="287.50"></text></g><g><title>mwpf`HighsSparseMatrix::isColwise (1 samples, 0.06%)</title><rect x="63.4390%" y="261" width="0.0587%" height="15" fill="rgb(246,141,4)" fg:x="1081" fg:w="1"/><text x="63.6890%" y="271.50"></text></g><g><title>mwpf`HEkk::moveLp (1 samples, 0.06%)</title><rect x="63.4977%" y="245" width="0.0587%" height="15" fill="rgb(229,23,39)" fg:x="1082" fg:w="1"/><text x="63.7477%" y="255.50"></text></g><g><title>mwpf`HighsLp::operator= (1 samples, 0.06%)</title><rect x="63.4977%" y="229" width="0.0587%" height="15" fill="rgb(206,12,3)" fg:x="1082" fg:w="1"/><text x="63.7477%" y="239.50"></text></g><g><title>mwpf`HEkk::chooseSimplexStrategyThreads (1 samples, 0.06%)</title><rect x="63.5563%" y="229" width="0.0587%" height="15" fill="rgb(252,226,20)" fg:x="1083" fg:w="1"/><text x="63.8063%" y="239.50"></text></g><g><title>mwpf`HEkk::allocateWorkAndBaseArrays (1 samples, 0.06%)</title><rect x="63.6150%" y="213" width="0.0587%" height="15" fill="rgb(216,123,35)" fg:x="1084" fg:w="1"/><text x="63.8650%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="63.6150%" y="197" width="0.0587%" height="15" fill="rgb(212,68,40)" fg:x="1084" fg:w="1"/><text x="63.8650%" y="207.50"></text></g><g><title>mwpf`HEkk::fullBtran(HVectorBase (1 samples, 0.06%)</title><rect x="63.6737%" y="197" width="0.0587%" height="15" fill="rgb(254,125,32)" fg:x="1085" fg:w="1"/><text x="63.9237%" y="207.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (1 samples, 0.06%)</title><rect x="63.6737%" y="181" width="0.0587%" height="15" fill="rgb(253,97,22)" fg:x="1085" fg:w="1"/><text x="63.9237%" y="191.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (1 samples, 0.06%)</title><rect x="63.6737%" y="165" width="0.0587%" height="15" fill="rgb(241,101,14)" fg:x="1085" fg:w="1"/><text x="63.9237%" y="175.50"></text></g><g><title>mwpf`DYLD-STUB$$HVectorBase&lt;double&gt;::tight (1 samples, 0.06%)</title><rect x="63.6737%" y="149" width="0.0587%" height="15" fill="rgb(238,103,29)" fg:x="1085" fg:w="1"/><text x="63.9237%" y="159.50"></text></g><g><title>mwpf`HEkk::computeDual (2 samples, 0.12%)</title><rect x="63.6737%" y="213" width="0.1174%" height="15" fill="rgb(233,195,47)" fg:x="1085" fg:w="2"/><text x="63.9237%" y="223.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::setup (1 samples, 0.06%)</title><rect x="63.7324%" y="197" width="0.0587%" height="15" fill="rgb(246,218,30)" fg:x="1086" fg:w="1"/><text x="63.9824%" y="207.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::__append (1 samples, 0.06%)</title><rect x="63.7324%" y="181" width="0.0587%" height="15" fill="rgb(219,145,47)" fg:x="1086" fg:w="1"/><text x="63.9824%" y="191.50"></text></g><g><title>mwpf`HEkk::computePrimal (1 samples, 0.06%)</title><rect x="63.7911%" y="213" width="0.0587%" height="15" fill="rgb(243,12,26)" fg:x="1087" fg:w="1"/><text x="64.0411%" y="223.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::setup (1 samples, 0.06%)</title><rect x="63.7911%" y="197" width="0.0587%" height="15" fill="rgb(214,87,16)" fg:x="1087" fg:w="1"/><text x="64.0411%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="63.7911%" y="181" width="0.0587%" height="15" fill="rgb(208,99,42)" fg:x="1087" fg:w="1"/><text x="64.0411%" y="191.50"></text></g><g><title>mwpf`HFactor::buildFinish (1 samples, 0.06%)</title><rect x="63.8498%" y="149" width="0.0587%" height="15" fill="rgb(253,99,2)" fg:x="1088" fg:w="1"/><text x="64.0998%" y="159.50"></text></g><g><title>mwpf`HEkk::computeFactor (2 samples, 0.12%)</title><rect x="63.8498%" y="197" width="0.1174%" height="15" fill="rgb(220,168,23)" fg:x="1088" fg:w="2"/><text x="64.0998%" y="207.50"></text></g><g><title>mwpf`HSimplexNla::invert (2 samples, 0.12%)</title><rect x="63.8498%" y="181" width="0.1174%" height="15" fill="rgb(242,38,24)" fg:x="1088" fg:w="2"/><text x="64.0998%" y="191.50"></text></g><g><title>mwpf`HFactor::build (2 samples, 0.12%)</title><rect x="63.8498%" y="165" width="0.1174%" height="15" fill="rgb(225,182,9)" fg:x="1088" fg:w="2"/><text x="64.0998%" y="175.50"></text></g><g><title>mwpf`HighsTimer::~HighsTimer (1 samples, 0.06%)</title><rect x="63.9085%" y="149" width="0.0587%" height="15" fill="rgb(243,178,37)" fg:x="1089" fg:w="1"/><text x="64.1585%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="63.9085%" y="133" width="0.0587%" height="15" fill="rgb(232,139,19)" fg:x="1089" fg:w="1"/><text x="64.1585%" y="143.50"></text></g><g><title>libc+ (1 samples, 0.06%)</title><rect x="63.9671%" y="181" width="0.0587%" height="15" fill="rgb(225,201,24)" fg:x="1090" fg:w="1"/><text x="64.2171%" y="191.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.06%)</title><rect x="64.0258%" y="165" width="0.0587%" height="15" fill="rgb(221,47,46)" fg:x="1091" fg:w="1"/><text x="64.2758%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="64.0258%" y="149" width="0.0587%" height="15" fill="rgb(249,23,13)" fg:x="1091" fg:w="1"/><text x="64.2758%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.06%)</title><rect x="64.0258%" y="133" width="0.0587%" height="15" fill="rgb(219,9,5)" fg:x="1091" fg:w="1"/><text x="64.2758%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="64.0845%" y="165" width="0.0587%" height="15" fill="rgb(254,171,16)" fg:x="1092" fg:w="1"/><text x="64.3345%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="64.1432%" y="165" width="0.0587%" height="15" fill="rgb(230,171,20)" fg:x="1093" fg:w="1"/><text x="64.3932%" y="175.50"></text></g><g><title>mwpf`HFactor::setupGeneral (4 samples, 0.23%)</title><rect x="64.0258%" y="181" width="0.2347%" height="15" fill="rgb(210,71,41)" fg:x="1091" fg:w="4"/><text x="64.2758%" y="191.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::__append (1 samples, 0.06%)</title><rect x="64.2019%" y="165" width="0.0587%" height="15" fill="rgb(206,173,20)" fg:x="1094" fg:w="1"/><text x="64.4519%" y="175.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.06%)</title><rect x="64.2019%" y="149" width="0.0587%" height="15" fill="rgb(233,88,34)" fg:x="1094" fg:w="1"/><text x="64.4519%" y="159.50"></text></g><g><title>mwpf`HEkk::initialiseForSolve (12 samples, 0.70%)</title><rect x="63.6150%" y="229" width="0.7042%" height="15" fill="rgb(223,209,46)" fg:x="1084" fg:w="12"/><text x="63.8650%" y="239.50"></text></g><g><title>mwpf`HEkk::initialiseSimplexLpBasisAndFactor (8 samples, 0.47%)</title><rect x="63.8498%" y="213" width="0.4695%" height="15" fill="rgb(250,43,18)" fg:x="1088" fg:w="8"/><text x="64.0998%" y="223.50"></text></g><g><title>mwpf`HSimplexNla::setup (6 samples, 0.35%)</title><rect x="63.9671%" y="197" width="0.3521%" height="15" fill="rgb(208,13,10)" fg:x="1090" fg:w="6"/><text x="64.2171%" y="207.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::__append (1 samples, 0.06%)</title><rect x="64.2606%" y="181" width="0.0587%" height="15" fill="rgb(212,200,36)" fg:x="1095" fg:w="1"/><text x="64.5106%" y="191.50"></text></g><g><title>mwpf`HEkkDual::HEkkDual (2 samples, 0.12%)</title><rect x="64.3192%" y="229" width="0.1174%" height="15" fill="rgb(225,90,30)" fg:x="1096" fg:w="2"/><text x="64.5692%" y="239.50"></text></g><g><title>mwpf`HEkkDual::initialiseInstance (1 samples, 0.06%)</title><rect x="64.3779%" y="213" width="0.0587%" height="15" fill="rgb(236,182,39)" fg:x="1097" fg:w="1"/><text x="64.6279%" y="223.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::setup (1 samples, 0.06%)</title><rect x="64.3779%" y="197" width="0.0587%" height="15" fill="rgb(212,144,35)" fg:x="1097" fg:w="1"/><text x="64.6279%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="64.3779%" y="181" width="0.0587%" height="15" fill="rgb(228,63,44)" fg:x="1097" fg:w="1"/><text x="64.6279%" y="191.50"></text></g><g><title>mwpf`HEkk::computeDual (1 samples, 0.06%)</title><rect x="64.4366%" y="213" width="0.0587%" height="15" fill="rgb(228,109,6)" fg:x="1098" fg:w="1"/><text x="64.6866%" y="223.50"></text></g><g><title>mwpf`HEkk::fullBtran(HVectorBase (1 samples, 0.06%)</title><rect x="64.4366%" y="197" width="0.0587%" height="15" fill="rgb(238,117,24)" fg:x="1098" fg:w="1"/><text x="64.6866%" y="207.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (1 samples, 0.06%)</title><rect x="64.4366%" y="181" width="0.0587%" height="15" fill="rgb(242,26,26)" fg:x="1098" fg:w="1"/><text x="64.6866%" y="191.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (1 samples, 0.06%)</title><rect x="64.4366%" y="165" width="0.0587%" height="15" fill="rgb(221,92,48)" fg:x="1098" fg:w="1"/><text x="64.6866%" y="175.50"></text></g><g><title>mwpf`HFactor::btranL(HVectorBase (1 samples, 0.06%)</title><rect x="64.4366%" y="149" width="0.0587%" height="15" fill="rgb(209,209,32)" fg:x="1098" fg:w="1"/><text x="64.6866%" y="159.50"></text></g><g><title>mwpf`HEkkDual::chooseRow (1 samples, 0.06%)</title><rect x="64.4953%" y="181" width="0.0587%" height="15" fill="rgb(221,70,22)" fg:x="1099" fg:w="1"/><text x="64.7453%" y="191.50"></text></g><g><title>mwpf`HighsRandom::drawUniform (1 samples, 0.06%)</title><rect x="64.4953%" y="165" width="0.0587%" height="15" fill="rgb(248,145,5)" fg:x="1099" fg:w="1"/><text x="64.7453%" y="175.50"></text></g><g><title>mwpf`HEkkDual::updateFtranBFRT (1 samples, 0.06%)</title><rect x="64.5540%" y="181" width="0.0587%" height="15" fill="rgb(226,116,26)" fg:x="1100" fg:w="1"/><text x="64.8040%" y="191.50"></text></g><g><title>mwpf`HEkkDualRow::updateFlip(HVectorBase (1 samples, 0.06%)</title><rect x="64.5540%" y="165" width="0.0587%" height="15" fill="rgb(244,5,17)" fg:x="1100" fg:w="1"/><text x="64.8040%" y="175.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::clear (1 samples, 0.06%)</title><rect x="64.5540%" y="149" width="0.0587%" height="15" fill="rgb(252,159,33)" fg:x="1100" fg:w="1"/><text x="64.8040%" y="159.50"></text></g><g><title>mwpf`std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;::assign (1 samples, 0.06%)</title><rect x="64.5540%" y="133" width="0.0587%" height="15" fill="rgb(206,71,0)" fg:x="1100" fg:w="1"/><text x="64.8040%" y="143.50"></text></g><g><title>mwpf`HEkkDual::iterate (3 samples, 0.18%)</title><rect x="64.4953%" y="197" width="0.1761%" height="15" fill="rgb(233,118,54)" fg:x="1099" fg:w="3"/><text x="64.7453%" y="207.50"></text></g><g><title>mwpf`HEkkDual::updatePrimal(HVectorBase (1 samples, 0.06%)</title><rect x="64.6127%" y="181" width="0.0587%" height="15" fill="rgb(234,83,48)" fg:x="1101" fg:w="1"/><text x="64.8627%" y="191.50"></text></g><g><title>mwpf`HEkk::updateDualSteepestEdgeWeights(int, int, HVectorBase (1 samples, 0.06%)</title><rect x="64.6127%" y="165" width="0.0587%" height="15" fill="rgb(228,3,54)" fg:x="1101" fg:w="1"/><text x="64.8627%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="64.6714%" y="181" width="0.0587%" height="15" fill="rgb(226,155,13)" fg:x="1102" fg:w="1"/><text x="64.9214%" y="191.50"></text></g><g><title>mwpf`HEkk::computeDual (1 samples, 0.06%)</title><rect x="64.7300%" y="181" width="0.0587%" height="15" fill="rgb(241,28,37)" fg:x="1103" fg:w="1"/><text x="64.9800%" y="191.50"></text></g><g><title>mwpf`HEkk::computePrimal (1 samples, 0.06%)</title><rect x="64.7887%" y="181" width="0.0587%" height="15" fill="rgb(233,93,10)" fg:x="1104" fg:w="1"/><text x="65.0387%" y="191.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::setup (1 samples, 0.06%)</title><rect x="64.7887%" y="165" width="0.0587%" height="15" fill="rgb(225,113,19)" fg:x="1104" fg:w="1"/><text x="65.0387%" y="175.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::__append (1 samples, 0.06%)</title><rect x="64.7887%" y="149" width="0.0587%" height="15" fill="rgb(241,2,18)" fg:x="1104" fg:w="1"/><text x="65.0387%" y="159.50"></text></g><g><title>mwpf`HEkk::rebuildRefactor (1 samples, 0.06%)</title><rect x="64.8474%" y="181" width="0.0587%" height="15" fill="rgb(228,207,21)" fg:x="1105" fg:w="1"/><text x="65.0974%" y="191.50"></text></g><g><title>mwpf`HighsRandom::drawUniform (1 samples, 0.06%)</title><rect x="64.8474%" y="165" width="0.0587%" height="15" fill="rgb(213,211,35)" fg:x="1105" fg:w="1"/><text x="65.0974%" y="175.50"></text></g><g><title>mwpf`HEkkDual::solvePhase1 (8 samples, 0.47%)</title><rect x="64.4953%" y="213" width="0.4695%" height="15" fill="rgb(209,83,10)" fg:x="1099" fg:w="8"/><text x="64.7453%" y="223.50"></text></g><g><title>mwpf`HEkkDual::rebuild (5 samples, 0.29%)</title><rect x="64.6714%" y="197" width="0.2934%" height="15" fill="rgb(209,164,1)" fg:x="1102" fg:w="5"/><text x="64.9214%" y="207.50"></text></g><g><title>mwpf`HEkkDual::reportRebuild (1 samples, 0.06%)</title><rect x="64.9061%" y="181" width="0.0587%" height="15" fill="rgb(213,184,43)" fg:x="1106" fg:w="1"/><text x="65.1561%" y="191.50"></text></g><g><title>mwpf`HighsSimplexAnalysis::userInvertReport (1 samples, 0.06%)</title><rect x="64.9061%" y="165" width="0.0587%" height="15" fill="rgb(231,61,34)" fg:x="1106" fg:w="1"/><text x="65.1561%" y="175.50"></text></g><g><title>mwpf`HighsSimplexAnalysis::reportInfeasibility (1 samples, 0.06%)</title><rect x="64.9061%" y="149" width="0.0587%" height="15" fill="rgb(235,75,3)" fg:x="1106" fg:w="1"/><text x="65.1561%" y="159.50"></text></g><g><title>mwpf`highsFormatToString(char const*, ...) (1 samples, 0.06%)</title><rect x="64.9061%" y="133" width="0.0587%" height="15" fill="rgb(220,106,47)" fg:x="1106" fg:w="1"/><text x="65.1561%" y="143.50"></text></g><g><title>libsystem_c.dylib`_vsnprintf (1 samples, 0.06%)</title><rect x="64.9061%" y="117" width="0.0587%" height="15" fill="rgb(210,196,33)" fg:x="1106" fg:w="1"/><text x="65.1561%" y="127.50"></text></g><g><title>libsystem_c.dylib`__vfprintf (1 samples, 0.06%)</title><rect x="64.9061%" y="101" width="0.0587%" height="15" fill="rgb(229,154,42)" fg:x="1106" fg:w="1"/><text x="65.1561%" y="111.50"></text></g><g><title>libsystem_c.dylib`__dtoa (1 samples, 0.06%)</title><rect x="64.9061%" y="85" width="0.0587%" height="15" fill="rgb(228,114,26)" fg:x="1106" fg:w="1"/><text x="65.1561%" y="95.50"></text></g><g><title>mwpf`HEkk::rebuildRefactor (1 samples, 0.06%)</title><rect x="64.9648%" y="197" width="0.0587%" height="15" fill="rgb(208,144,1)" fg:x="1107" fg:w="1"/><text x="65.2148%" y="207.50"></text></g><g><title>mwpf`HEkk::factorSolveError (1 samples, 0.06%)</title><rect x="64.9648%" y="181" width="0.0587%" height="15" fill="rgb(239,112,37)" fg:x="1107" fg:w="1"/><text x="65.2148%" y="191.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (1 samples, 0.06%)</title><rect x="64.9648%" y="165" width="0.0587%" height="15" fill="rgb(210,96,50)" fg:x="1107" fg:w="1"/><text x="65.2148%" y="175.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (1 samples, 0.06%)</title><rect x="64.9648%" y="149" width="0.0587%" height="15" fill="rgb(222,178,2)" fg:x="1107" fg:w="1"/><text x="65.2148%" y="159.50"></text></g><g><title>mwpf`HFactor::ftranFT(HVectorBase (1 samples, 0.06%)</title><rect x="64.9648%" y="133" width="0.0587%" height="15" fill="rgb(226,74,18)" fg:x="1107" fg:w="1"/><text x="65.2148%" y="143.50"></text></g><g><title>mwpf`HEkkDual::chooseRow (1 samples, 0.06%)</title><rect x="65.0235%" y="181" width="0.0587%" height="15" fill="rgb(225,67,54)" fg:x="1108" fg:w="1"/><text x="65.2735%" y="191.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (1 samples, 0.06%)</title><rect x="65.0235%" y="165" width="0.0587%" height="15" fill="rgb(251,92,32)" fg:x="1108" fg:w="1"/><text x="65.2735%" y="175.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (1 samples, 0.06%)</title><rect x="65.0235%" y="149" width="0.0587%" height="15" fill="rgb(228,149,22)" fg:x="1108" fg:w="1"/><text x="65.2735%" y="159.50"></text></g><g><title>mwpf`HEkkDual::solve (12 samples, 0.70%)</title><rect x="64.4366%" y="229" width="0.7042%" height="15" fill="rgb(243,54,13)" fg:x="1098" fg:w="12"/><text x="64.6866%" y="239.50"></text></g><g><title>mwpf`HEkkDual::solvePhase2 (3 samples, 0.18%)</title><rect x="64.9648%" y="213" width="0.1761%" height="15" fill="rgb(243,180,28)" fg:x="1107" fg:w="3"/><text x="65.2148%" y="223.50"></text></g><g><title>mwpf`HEkkDual::iterate (2 samples, 0.12%)</title><rect x="65.0235%" y="197" width="0.1174%" height="15" fill="rgb(208,167,24)" fg:x="1108" fg:w="2"/><text x="65.2735%" y="207.50"></text></g><g><title>mwpf`HEkkDual::updatePivots (1 samples, 0.06%)</title><rect x="65.0822%" y="181" width="0.0587%" height="15" fill="rgb(245,73,45)" fg:x="1109" fg:w="1"/><text x="65.3322%" y="191.50"></text></g><g><title>mwpf`HEkk::updateFactor(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.06%)</title><rect x="65.0822%" y="165" width="0.0587%" height="15" fill="rgb(237,203,48)" fg:x="1109" fg:w="1"/><text x="65.3322%" y="175.50"></text></g><g><title>mwpf`HSimplexNla::update(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.06%)</title><rect x="65.0822%" y="149" width="0.0587%" height="15" fill="rgb(211,197,16)" fg:x="1109" fg:w="1"/><text x="65.3322%" y="159.50"></text></g><g><title>mwpf`HFactor::update(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.06%)</title><rect x="65.0822%" y="133" width="0.0587%" height="15" fill="rgb(243,99,51)" fg:x="1109" fg:w="1"/><text x="65.3322%" y="143.50"></text></g><g><title>mwpf`HFactor::updateFT(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.06%)</title><rect x="65.0822%" y="117" width="0.0587%" height="15" fill="rgb(215,123,29)" fg:x="1109" fg:w="1"/><text x="65.3322%" y="127.50"></text></g><g><title>mwpf`HEkk::solve (28 samples, 1.64%)</title><rect x="63.5563%" y="245" width="1.6432%" height="15" fill="rgb(239,186,37)" fg:x="1083" fg:w="28"/><text x="63.8063%" y="255.50"></text></g><g><title>mwpf`HEkkPrimal::solve (1 samples, 0.06%)</title><rect x="65.1408%" y="229" width="0.0587%" height="15" fill="rgb(252,136,39)" fg:x="1110" fg:w="1"/><text x="65.3908%" y="239.50"></text></g><g><title>mwpf`HEkkPrimal::solvePhase2 (1 samples, 0.06%)</title><rect x="65.1408%" y="213" width="0.0587%" height="15" fill="rgb(223,213,32)" fg:x="1110" fg:w="1"/><text x="65.3908%" y="223.50"></text></g><g><title>mwpf`HEkkPrimal::iterate (1 samples, 0.06%)</title><rect x="65.1408%" y="197" width="0.0587%" height="15" fill="rgb(233,115,5)" fg:x="1110" fg:w="1"/><text x="65.3908%" y="207.50"></text></g><g><title>mwpf`HEkkPrimal::update (1 samples, 0.06%)</title><rect x="65.1408%" y="181" width="0.0587%" height="15" fill="rgb(207,226,44)" fg:x="1110" fg:w="1"/><text x="65.3908%" y="191.50"></text></g><g><title>mwpf`HEkkPrimal::phase2UpdatePrimal (1 samples, 0.06%)</title><rect x="65.1408%" y="165" width="0.0587%" height="15" fill="rgb(208,126,0)" fg:x="1110" fg:w="1"/><text x="65.3908%" y="175.50"></text></g><g><title>mwpf`Highs::callSolveLp(HighsLp&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (32 samples, 1.88%)</title><rect x="63.4977%" y="293" width="1.8779%" height="15" fill="rgb(244,66,21)" fg:x="1082" fg:w="32"/><text x="63.7477%" y="303.50">m..</text></g><g><title>mwpf`solveLp(HighsLpSolverObject&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (32 samples, 1.88%)</title><rect x="63.4977%" y="277" width="1.8779%" height="15" fill="rgb(222,97,12)" fg:x="1082" fg:w="32"/><text x="63.7477%" y="287.50">m..</text></g><g><title>mwpf`solveLpSimplex(HighsLpSolverObject&amp;) (32 samples, 1.88%)</title><rect x="63.4977%" y="261" width="1.8779%" height="15" fill="rgb(219,213,19)" fg:x="1082" fg:w="32"/><text x="63.7477%" y="271.50">m..</text></g><g><title>mwpf`considerScaling(HighsOptions const&amp;, HighsLp&amp;) (3 samples, 0.18%)</title><rect x="65.1995%" y="245" width="0.1761%" height="15" fill="rgb(252,169,30)" fg:x="1111" fg:w="3"/><text x="65.4495%" y="255.50"></text></g><g><title>mwpf`HighsSparseMatrix::range (3 samples, 0.18%)</title><rect x="65.1995%" y="229" width="0.1761%" height="15" fill="rgb(206,32,51)" fg:x="1111" fg:w="3"/><text x="65.4495%" y="239.50"></text></g><g><title>mwpf`Highs::returnFromHighs (1 samples, 0.06%)</title><rect x="65.3756%" y="293" width="0.0587%" height="15" fill="rgb(250,172,42)" fg:x="1114" fg:w="1"/><text x="65.6256%" y="303.50"></text></g><g><title>mwpf`Highs::returnFromRun (1 samples, 0.06%)</title><rect x="65.4343%" y="293" width="0.0587%" height="15" fill="rgb(209,34,43)" fg:x="1115" fg:w="1"/><text x="65.6843%" y="303.50"></text></g><g><title>mwpf`debugHighsSolution(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.06%)</title><rect x="65.4343%" y="277" width="0.0587%" height="15" fill="rgb(223,11,35)" fg:x="1115" fg:w="1"/><text x="65.6843%" y="287.50"></text></g><g><title>mwpf`HighsInfo::initRecords (1 samples, 0.06%)</title><rect x="65.4343%" y="261" width="0.0587%" height="15" fill="rgb(251,219,26)" fg:x="1115" fg:w="1"/><text x="65.6843%" y="271.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.06%)</title><rect x="65.4343%" y="245" width="0.0587%" height="15" fill="rgb(231,119,3)" fg:x="1115" fg:w="1"/><text x="65.6843%" y="255.50"></text></g><g><title>mwpf`Highs::runPostsolve (1 samples, 0.06%)</title><rect x="65.4930%" y="293" width="0.0587%" height="15" fill="rgb(216,97,11)" fg:x="1116" fg:w="1"/><text x="65.7430%" y="303.50"></text></g><g><title>mwpf`presolve::HighsPostsolveStack::undo (1 samples, 0.06%)</title><rect x="65.4930%" y="277" width="0.0587%" height="15" fill="rgb(223,59,9)" fg:x="1116" fg:w="1"/><text x="65.7430%" y="287.50"></text></g><g><title>mwpf`presolve::HPresolve::unlink (1 samples, 0.06%)</title><rect x="65.5516%" y="213" width="0.0587%" height="15" fill="rgb(233,93,31)" fg:x="1117" fg:w="1"/><text x="65.8016%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::detectParallelRowsAndCols (2 samples, 0.12%)</title><rect x="65.5516%" y="229" width="0.1174%" height="15" fill="rgb(239,81,33)" fg:x="1117" fg:w="2"/><text x="65.8016%" y="239.50"></text></g><g><title>mwpf`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;&gt;&gt;::__node_insert_multi(std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, void*&gt;*&gt;, std::__1::__hash_node&lt;std::__1::__hash_value_type (1 samples, 0.06%)</title><rect x="65.6103%" y="213" width="0.0587%" height="15" fill="rgb(213,120,34)" fg:x="1118" fg:w="1"/><text x="65.8603%" y="223.50"></text></g><g><title>mwpf`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;&gt;&gt;::__node_insert_multi(std::__1::__hash_node&lt;std::__1::__hash_value_type (1 samples, 0.06%)</title><rect x="65.6103%" y="197" width="0.0587%" height="15" fill="rgb(243,49,53)" fg:x="1118" fg:w="1"/><text x="65.8603%" y="207.50"></text></g><g><title>mwpf`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;&gt;&gt;::__node_insert_multi_prepare(unsigned long, std::__1::__hash_value_type (1 samples, 0.06%)</title><rect x="65.6103%" y="181" width="0.0587%" height="15" fill="rgb(247,216,33)" fg:x="1118" fg:w="1"/><text x="65.8603%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::presolveChangedRows (2 samples, 0.12%)</title><rect x="65.6690%" y="213" width="0.1174%" height="15" fill="rgb(226,26,14)" fg:x="1119" fg:w="2"/><text x="65.9190%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::rowPresolve (2 samples, 0.12%)</title><rect x="65.6690%" y="197" width="0.1174%" height="15" fill="rgb(215,49,53)" fg:x="1119" fg:w="2"/><text x="65.9190%" y="207.50"></text></g><g><title>mwpf`presolve::HPresolve::updateColImpliedBounds (2 samples, 0.12%)</title><rect x="65.6690%" y="181" width="0.1174%" height="15" fill="rgb(245,162,40)" fg:x="1119" fg:w="2"/><text x="65.9190%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::changeImplColUpper (1 samples, 0.06%)</title><rect x="65.7277%" y="165" width="0.0587%" height="15" fill="rgb(229,68,17)" fg:x="1120" fg:w="1"/><text x="65.9777%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::fastPresolveLoop (3 samples, 0.18%)</title><rect x="65.6690%" y="229" width="0.1761%" height="15" fill="rgb(213,182,10)" fg:x="1119" fg:w="3"/><text x="65.9190%" y="239.50"></text></g><g><title>mwpf`presolve::HPresolve::rowPresolve (1 samples, 0.06%)</title><rect x="65.7864%" y="213" width="0.0587%" height="15" fill="rgb(245,125,30)" fg:x="1121" fg:w="1"/><text x="66.0364%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::fromCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (1 samples, 0.06%)</title><rect x="65.8451%" y="229" width="0.0587%" height="15" fill="rgb(232,202,2)" fg:x="1122" fg:w="1"/><text x="66.0951%" y="239.50"></text></g><g><title>mwpf`presolve::HPresolve::link (1 samples, 0.06%)</title><rect x="65.8451%" y="213" width="0.0587%" height="15" fill="rgb(237,140,51)" fg:x="1122" fg:w="1"/><text x="66.0951%" y="223.50"></text></g><g><title>mwpf`HighsLinearSumBounds::getResidualSumLowerOrig (1 samples, 0.06%)</title><rect x="65.9038%" y="197" width="0.0587%" height="15" fill="rgb(236,157,25)" fg:x="1123" fg:w="1"/><text x="66.1538%" y="207.50"></text></g><g><title>mwpf`presolve::HPresolve::colPresolve (2 samples, 0.12%)</title><rect x="65.9038%" y="213" width="0.1174%" height="15" fill="rgb(219,209,0)" fg:x="1123" fg:w="2"/><text x="66.1538%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::updateRowDualImpliedBounds (1 samples, 0.06%)</title><rect x="65.9624%" y="197" width="0.0587%" height="15" fill="rgb(240,116,54)" fg:x="1124" fg:w="1"/><text x="66.2124%" y="207.50"></text></g><g><title>mwpf`Highs::runPresolve (9 samples, 0.53%)</title><rect x="65.5516%" y="293" width="0.5282%" height="15" fill="rgb(216,10,36)" fg:x="1117" fg:w="9"/><text x="65.8016%" y="303.50"></text></g><g><title>mwpf`PresolveComponent::run (9 samples, 0.53%)</title><rect x="65.5516%" y="277" width="0.5282%" height="15" fill="rgb(222,72,44)" fg:x="1117" fg:w="9"/><text x="65.8016%" y="287.50"></text></g><g><title>mwpf`presolve::HPresolve::run (9 samples, 0.53%)</title><rect x="65.5516%" y="261" width="0.5282%" height="15" fill="rgb(232,159,9)" fg:x="1117" fg:w="9"/><text x="65.8016%" y="271.50"></text></g><g><title>mwpf`presolve::HPresolve::presolve (9 samples, 0.53%)</title><rect x="65.5516%" y="245" width="0.5282%" height="15" fill="rgb(210,39,32)" fg:x="1117" fg:w="9"/><text x="65.8016%" y="255.50"></text></g><g><title>mwpf`presolve::HPresolve::initialRowAndColPresolve (3 samples, 0.18%)</title><rect x="65.9038%" y="229" width="0.1761%" height="15" fill="rgb(216,194,45)" fg:x="1123" fg:w="3"/><text x="66.1538%" y="239.50"></text></g><g><title>mwpf`presolve::HPresolve::rowPresolve (1 samples, 0.06%)</title><rect x="66.0211%" y="213" width="0.0587%" height="15" fill="rgb(218,18,35)" fg:x="1125" fg:w="1"/><text x="66.2711%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::updateColImpliedBounds (1 samples, 0.06%)</title><rect x="66.0211%" y="197" width="0.0587%" height="15" fill="rgb(207,83,51)" fg:x="1125" fg:w="1"/><text x="66.2711%" y="207.50"></text></g><g><title>mwpf`HighsLinearSumBounds::updatedImplVarLower (1 samples, 0.06%)</title><rect x="66.0211%" y="181" width="0.0587%" height="15" fill="rgb(225,63,43)" fg:x="1125" fg:w="1"/><text x="66.2711%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.06%)</title><rect x="66.0798%" y="277" width="0.0587%" height="15" fill="rgb(207,57,36)" fg:x="1126" fg:w="1"/><text x="66.3298%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="66.1385%" y="261" width="0.0587%" height="15" fill="rgb(216,99,33)" fg:x="1127" fg:w="1"/><text x="66.3885%" y="271.50"></text></g><g><title>mwpf`OptionRecordDouble::OptionRecordDouble(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.06%)</title><rect x="66.1972%" y="261" width="0.0587%" height="15" fill="rgb(225,42,16)" fg:x="1128" fg:w="1"/><text x="66.4472%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="66.1972%" y="245" width="0.0587%" height="15" fill="rgb(220,201,45)" fg:x="1128" fg:w="1"/><text x="66.4472%" y="255.50"></text></g><g><title>mwpf`OptionRecordInt::OptionRecordInt(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.06%)</title><rect x="66.2559%" y="261" width="0.0587%" height="15" fill="rgb(225,33,4)" fg:x="1129" fg:w="1"/><text x="66.5059%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;true&gt; (1 samples, 0.06%)</title><rect x="66.2559%" y="245" width="0.0587%" height="15" fill="rgb(224,33,50)" fg:x="1129" fg:w="1"/><text x="66.5059%" y="255.50"></text></g><g><title>mwpf`HighsOptions::HighsOptions (5 samples, 0.29%)</title><rect x="66.0798%" y="293" width="0.2934%" height="15" fill="rgb(246,198,51)" fg:x="1126" fg:w="5"/><text x="66.3298%" y="303.50"></text></g><g><title>mwpf`HighsOptions::initRecords (4 samples, 0.23%)</title><rect x="66.1385%" y="277" width="0.2347%" height="15" fill="rgb(205,22,4)" fg:x="1127" fg:w="4"/><text x="66.3885%" y="287.50"></text></g><g><title>mwpf`OptionRecordString::OptionRecordString(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, bool, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;*, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.06%)</title><rect x="66.3146%" y="261" width="0.0587%" height="15" fill="rgb(206,3,8)" fg:x="1130" fg:w="1"/><text x="66.5646%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="66.3146%" y="245" width="0.0587%" height="15" fill="rgb(251,23,15)" fg:x="1130" fg:w="1"/><text x="66.5646%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="66.3732%" y="277" width="0.0587%" height="15" fill="rgb(252,88,28)" fg:x="1131" fg:w="1"/><text x="66.6232%" y="287.50"></text></g><g><title>mwpf`HighsOptions::~HighsOptions (2 samples, 0.12%)</title><rect x="66.3732%" y="293" width="0.1174%" height="15" fill="rgb(212,127,14)" fg:x="1131" fg:w="2"/><text x="66.6232%" y="303.50"></text></g><g><title>mwpf`OptionRecordBool::~OptionRecordBool (1 samples, 0.06%)</title><rect x="66.4319%" y="277" width="0.0587%" height="15" fill="rgb(247,145,37)" fg:x="1132" fg:w="1"/><text x="66.6819%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="66.4319%" y="261" width="0.0587%" height="15" fill="rgb(209,117,53)" fg:x="1132" fg:w="1"/><text x="66.6819%" y="271.50"></text></g><g><title>mwpf`highs::Model::solve (52 samples, 3.05%)</title><rect x="63.4977%" y="325" width="3.0516%" height="15" fill="rgb(212,90,42)" fg:x="1082" fg:w="52"/><text x="63.7477%" y="335.50">mwp..</text></g><g><title>mwpf`Highs::run (52 samples, 3.05%)</title><rect x="63.4977%" y="309" width="3.0516%" height="15" fill="rgb(218,164,37)" fg:x="1082" fg:w="52"/><text x="63.7477%" y="319.50">mwp..</text></g><g><title>mwpf`HighsSparseMatrix::assessSmallValues (1 samples, 0.06%)</title><rect x="66.4906%" y="293" width="0.0587%" height="15" fill="rgb(246,65,34)" fg:x="1133" fg:w="1"/><text x="66.7406%" y="303.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$free (1 samples, 0.06%)</title><rect x="66.6080%" y="277" width="0.0587%" height="15" fill="rgb(231,100,33)" fg:x="1135" fg:w="1"/><text x="66.8580%" y="287.50"></text></g><g><title>mwpf`HighsHessian::clear (1 samples, 0.06%)</title><rect x="66.6667%" y="277" width="0.0587%" height="15" fill="rgb(228,126,14)" fg:x="1136" fg:w="1"/><text x="66.9167%" y="287.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (1 samples, 0.06%)</title><rect x="66.6667%" y="261" width="0.0587%" height="15" fill="rgb(215,173,21)" fg:x="1136" fg:w="1"/><text x="66.9167%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="66.7254%" y="261" width="0.0587%" height="15" fill="rgb(210,6,40)" fg:x="1137" fg:w="1"/><text x="66.9754%" y="271.50"></text></g><g><title>mwpf`HighsInfo::initRecords (2 samples, 0.12%)</title><rect x="66.7254%" y="277" width="0.1174%" height="15" fill="rgb(212,48,18)" fg:x="1137" fg:w="2"/><text x="66.9754%" y="287.50"></text></g><g><title>mwpf`InfoRecordDouble::InfoRecordDouble(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.06%)</title><rect x="66.7840%" y="261" width="0.0587%" height="15" fill="rgb(230,214,11)" fg:x="1138" fg:w="1"/><text x="67.0340%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::basic_string(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.06%)</title><rect x="66.7840%" y="245" width="0.0587%" height="15" fill="rgb(254,105,39)" fg:x="1138" fg:w="1"/><text x="67.0340%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__init_copy_ctor_external (1 samples, 0.06%)</title><rect x="66.7840%" y="229" width="0.0587%" height="15" fill="rgb(245,158,5)" fg:x="1138" fg:w="1"/><text x="67.0340%" y="239.50"></text></g><g><title>mwpf`OptionRecordDouble::OptionRecordDouble(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.06%)</title><rect x="66.8427%" y="261" width="0.0587%" height="15" fill="rgb(249,208,11)" fg:x="1139" fg:w="1"/><text x="67.0927%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;true&gt; (1 samples, 0.06%)</title><rect x="66.8427%" y="245" width="0.0587%" height="15" fill="rgb(210,39,28)" fg:x="1139" fg:w="1"/><text x="67.0927%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.06%)</title><rect x="66.8427%" y="229" width="0.0587%" height="15" fill="rgb(211,56,53)" fg:x="1139" fg:w="1"/><text x="67.0927%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="66.8427%" y="213" width="0.0587%" height="15" fill="rgb(226,201,30)" fg:x="1139" fg:w="1"/><text x="67.0927%" y="223.50"></text></g><g><title>mwpf`HighsOptions::initRecords (2 samples, 0.12%)</title><rect x="66.8427%" y="277" width="0.1174%" height="15" fill="rgb(239,101,34)" fg:x="1139" fg:w="2"/><text x="67.0927%" y="287.50"></text></g><g><title>mwpf`OptionRecordInt::OptionRecordInt(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.06%)</title><rect x="66.9014%" y="261" width="0.0587%" height="15" fill="rgb(226,209,5)" fg:x="1140" fg:w="1"/><text x="67.1514%" y="271.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;true&gt; (1 samples, 0.06%)</title><rect x="66.9014%" y="245" width="0.0587%" height="15" fill="rgb(250,105,47)" fg:x="1140" fg:w="1"/><text x="67.1514%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.06%)</title><rect x="66.9014%" y="229" width="0.0587%" height="15" fill="rgb(230,72,3)" fg:x="1140" fg:w="1"/><text x="67.1514%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="66.9014%" y="213" width="0.0587%" height="15" fill="rgb(232,218,39)" fg:x="1140" fg:w="1"/><text x="67.1514%" y="223.50"></text></g><g><title>mwpf`Highs_create (7 samples, 0.41%)</title><rect x="66.6080%" y="309" width="0.4108%" height="15" fill="rgb(248,166,6)" fg:x="1135" fg:w="7"/><text x="66.8580%" y="319.50"></text></g><g><title>mwpf`Highs::Highs (7 samples, 0.41%)</title><rect x="66.6080%" y="293" width="0.4108%" height="15" fill="rgb(247,89,20)" fg:x="1135" fg:w="7"/><text x="66.8580%" y="303.50"></text></g><g><title>mwpf`HighsTimer::HighsTimer (1 samples, 0.06%)</title><rect x="66.9601%" y="277" width="0.0587%" height="15" fill="rgb(248,130,54)" fg:x="1141" fg:w="1"/><text x="67.2101%" y="287.50"></text></g><g><title>mwpf`HighsTimer::clock_def (1 samples, 0.06%)</title><rect x="66.9601%" y="261" width="0.0587%" height="15" fill="rgb(234,196,4)" fg:x="1141" fg:w="1"/><text x="67.2101%" y="271.50"></text></g><g><title>mwpf`highs::Problem&lt;MATRIX&gt;::try_optimise (10 samples, 0.59%)</title><rect x="66.5493%" y="325" width="0.5869%" height="15" fill="rgb(250,143,31)" fg:x="1134" fg:w="10"/><text x="66.7993%" y="335.50"></text></g><g><title>mwpf`Highs_passLp (2 samples, 0.12%)</title><rect x="67.0188%" y="309" width="0.1174%" height="15" fill="rgb(211,110,34)" fg:x="1142" fg:w="2"/><text x="67.2688%" y="319.50"></text></g><g><title>mwpf`Highs::passModel (2 samples, 0.12%)</title><rect x="67.0188%" y="293" width="0.1174%" height="15" fill="rgb(215,124,48)" fg:x="1142" fg:w="2"/><text x="67.2688%" y="303.50"></text></g><g><title>mwpf`Highs::passModel (2 samples, 0.12%)</title><rect x="67.0188%" y="277" width="0.1174%" height="15" fill="rgb(216,46,13)" fg:x="1142" fg:w="2"/><text x="67.2688%" y="287.50"></text></g><g><title>mwpf`Highs::passModel (1 samples, 0.06%)</title><rect x="67.0775%" y="261" width="0.0587%" height="15" fill="rgb(205,184,25)" fg:x="1143" fg:w="1"/><text x="67.3275%" y="271.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (1 samples, 0.06%)</title><rect x="67.0775%" y="245" width="0.0587%" height="15" fill="rgb(228,1,10)" fg:x="1143" fg:w="1"/><text x="67.3275%" y="255.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (2 samples, 0.12%)</title><rect x="67.1362%" y="325" width="0.1174%" height="15" fill="rgb(213,116,27)" fg:x="1144" fg:w="2"/><text x="67.3862%" y="335.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="67.1948%" y="309" width="0.0587%" height="15" fill="rgb(241,95,50)" fg:x="1145" fg:w="1"/><text x="67.4448%" y="319.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.06%)</title><rect x="67.2535%" y="309" width="0.0587%" height="15" fill="rgb(238,48,32)" fg:x="1146" fg:w="1"/><text x="67.5035%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::iter::traits::collect::FromIterator&lt;(&lt;K as weak_table::traits::WeakElement&gt;::Strong,V)&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::from_iter (2 samples, 0.12%)</title><rect x="67.2535%" y="325" width="0.1174%" height="15" fill="rgb(235,113,49)" fg:x="1146" fg:w="2"/><text x="67.5035%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="67.3122%" y="309" width="0.0587%" height="15" fill="rgb(205,127,43)" fg:x="1147" fg:w="1"/><text x="67.5622%" y="319.50"></text></g><g><title>mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize (90 samples, 5.28%)</title><rect x="62.1479%" y="341" width="5.2817%" height="15" fill="rgb(250,162,2)" fg:x="1059" fg:w="90"/><text x="62.3979%" y="351.50">mwpf`m..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="67.3709%" y="325" width="0.0587%" height="15" fill="rgb(220,13,41)" fg:x="1148" fg:w="1"/><text x="67.6209%" y="335.50"></text></g><g><title>mwpf`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.12%)</title><rect x="67.4296%" y="325" width="0.1174%" height="15" fill="rgb(249,221,25)" fg:x="1149" fg:w="2"/><text x="67.6796%" y="335.50"></text></g><g><title>mwpf`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2 samples, 0.12%)</title><rect x="67.4296%" y="309" width="0.1174%" height="15" fill="rgb(215,208,19)" fg:x="1149" fg:w="2"/><text x="67.6796%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune (561 samples, 32.92%)</title><rect x="34.6831%" y="357" width="32.9225%" height="15" fill="rgb(236,175,2)" fg:x="591" fg:w="561"/><text x="34.9331%" y="367.50">mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial ..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::iter::traits::collect::FromIterator&lt;(&lt;K as weak_table::traits::WeakElement&gt;::Strong,V)&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::from_iter (3 samples, 0.18%)</title><rect x="67.4296%" y="341" width="0.1761%" height="15" fill="rgb(241,52,2)" fg:x="1149" fg:w="3"/><text x="67.6796%" y="351.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.06%)</title><rect x="67.5469%" y="325" width="0.0587%" height="15" fill="rgb(248,140,14)" fg:x="1151" fg:w="1"/><text x="67.7969%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="67.5469%" y="309" width="0.0587%" height="15" fill="rgb(253,22,42)" fg:x="1151" fg:w="1"/><text x="67.7969%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="67.5469%" y="293" width="0.0587%" height="15" fill="rgb(234,61,47)" fg:x="1151" fg:w="1"/><text x="67.7969%" y="303.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.06%)</title><rect x="67.7230%" y="309" width="0.0587%" height="15" fill="rgb(208,226,15)" fg:x="1154" fg:w="1"/><text x="67.9730%" y="319.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="67.7230%" y="293" width="0.0587%" height="15" fill="rgb(217,221,4)" fg:x="1154" fg:w="1"/><text x="67.9730%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.06%)</title><rect x="67.7230%" y="277" width="0.0587%" height="15" fill="rgb(212,174,34)" fg:x="1154" fg:w="1"/><text x="67.9730%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.06%)</title><rect x="67.7230%" y="261" width="0.0587%" height="15" fill="rgb(253,83,4)" fg:x="1154" fg:w="1"/><text x="67.9730%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.06%)</title><rect x="67.7230%" y="245" width="0.0587%" height="15" fill="rgb(250,195,49)" fg:x="1154" fg:w="1"/><text x="67.9730%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="67.7817%" y="309" width="0.0587%" height="15" fill="rgb(241,192,25)" fg:x="1155" fg:w="1"/><text x="68.0317%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (3 samples, 0.18%)</title><rect x="67.7230%" y="325" width="0.1761%" height="15" fill="rgb(208,124,10)" fg:x="1154" fg:w="3"/><text x="67.9730%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.06%)</title><rect x="67.8404%" y="309" width="0.0587%" height="15" fill="rgb(222,33,0)" fg:x="1156" fg:w="1"/><text x="68.0904%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="67.8404%" y="293" width="0.0587%" height="15" fill="rgb(234,209,28)" fg:x="1156" fg:w="1"/><text x="68.0904%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="67.8404%" y="277" width="0.0587%" height="15" fill="rgb(224,11,23)" fg:x="1156" fg:w="1"/><text x="68.0904%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (6 samples, 0.35%)</title><rect x="67.6643%" y="341" width="0.3521%" height="15" fill="rgb(232,99,1)" fg:x="1153" fg:w="6"/><text x="67.9143%" y="351.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (2 samples, 0.12%)</title><rect x="67.8991%" y="325" width="0.1174%" height="15" fill="rgb(237,95,45)" fg:x="1157" fg:w="2"/><text x="68.1491%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (2 samples, 0.12%)</title><rect x="67.8991%" y="309" width="0.1174%" height="15" fill="rgb(208,109,11)" fg:x="1157" fg:w="2"/><text x="68.1491%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.12%)</title><rect x="67.8991%" y="293" width="0.1174%" height="15" fill="rgb(216,190,48)" fg:x="1157" fg:w="2"/><text x="68.1491%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (1 samples, 0.06%)</title><rect x="68.0164%" y="309" width="0.0587%" height="15" fill="rgb(251,171,36)" fg:x="1159" fg:w="1"/><text x="68.2664%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="68.0164%" y="293" width="0.0587%" height="15" fill="rgb(230,62,22)" fg:x="1159" fg:w="1"/><text x="68.2664%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.06%)</title><rect x="68.0164%" y="277" width="0.0587%" height="15" fill="rgb(225,114,35)" fg:x="1159" fg:w="1"/><text x="68.2664%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.06%)</title><rect x="68.0164%" y="261" width="0.0587%" height="15" fill="rgb(215,118,42)" fg:x="1159" fg:w="1"/><text x="68.2664%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="68.0164%" y="245" width="0.0587%" height="15" fill="rgb(243,119,21)" fg:x="1159" fg:w="1"/><text x="68.2664%" y="255.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.06%)</title><rect x="68.0751%" y="277" width="0.0587%" height="15" fill="rgb(252,177,53)" fg:x="1160" fg:w="1"/><text x="68.3251%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.18%)</title><rect x="68.0164%" y="325" width="0.1761%" height="15" fill="rgb(237,209,29)" fg:x="1159" fg:w="3"/><text x="68.2664%" y="335.50"></text></g><g><title>mwpf`core::slice::sort::merge_sort (2 samples, 0.12%)</title><rect x="68.0751%" y="309" width="0.1174%" height="15" fill="rgb(212,65,23)" fg:x="1160" fg:w="2"/><text x="68.3251%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (2 samples, 0.12%)</title><rect x="68.0751%" y="293" width="0.1174%" height="15" fill="rgb(230,222,46)" fg:x="1160" fg:w="2"/><text x="68.3251%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.06%)</title><rect x="68.1338%" y="277" width="0.0587%" height="15" fill="rgb(215,135,32)" fg:x="1161" fg:w="1"/><text x="68.3838%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="68.1925%" y="325" width="0.0587%" height="15" fill="rgb(246,101,22)" fg:x="1162" fg:w="1"/><text x="68.4425%" y="335.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="68.1925%" y="309" width="0.0587%" height="15" fill="rgb(206,107,13)" fg:x="1162" fg:w="1"/><text x="68.4425%" y="319.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="68.1925%" y="293" width="0.0587%" height="15" fill="rgb(250,100,44)" fg:x="1162" fg:w="1"/><text x="68.4425%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.06%)</title><rect x="68.1925%" y="277" width="0.0587%" height="15" fill="rgb(231,147,38)" fg:x="1162" fg:w="1"/><text x="68.4425%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.06%)</title><rect x="68.1925%" y="261" width="0.0587%" height="15" fill="rgb(229,8,40)" fg:x="1162" fg:w="1"/><text x="68.4425%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.06%)</title><rect x="68.1925%" y="245" width="0.0587%" height="15" fill="rgb(221,135,30)" fg:x="1162" fg:w="1"/><text x="68.4425%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="68.1925%" y="229" width="0.0587%" height="15" fill="rgb(249,193,18)" fg:x="1162" fg:w="1"/><text x="68.4425%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (1 samples, 0.06%)</title><rect x="68.2512%" y="325" width="0.0587%" height="15" fill="rgb(209,133,39)" fg:x="1163" fg:w="1"/><text x="68.5012%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.06%)</title><rect x="68.2512%" y="309" width="0.0587%" height="15" fill="rgb(232,100,14)" fg:x="1163" fg:w="1"/><text x="68.5012%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="68.2512%" y="293" width="0.0587%" height="15" fill="rgb(224,185,1)" fg:x="1163" fg:w="1"/><text x="68.5012%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="68.2512%" y="277" width="0.0587%" height="15" fill="rgb(223,139,8)" fg:x="1163" fg:w="1"/><text x="68.5012%" y="287.50"></text></g><g><title>mwpf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.06%)</title><rect x="68.3099%" y="309" width="0.0587%" height="15" fill="rgb(232,213,38)" fg:x="1164" fg:w="1"/><text x="68.5599%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.06%)</title><rect x="68.3099%" y="293" width="0.0587%" height="15" fill="rgb(207,94,22)" fg:x="1164" fg:w="1"/><text x="68.5599%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.06%)</title><rect x="68.3099%" y="277" width="0.0587%" height="15" fill="rgb(219,183,54)" fg:x="1164" fg:w="1"/><text x="68.5599%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="68.3099%" y="261" width="0.0587%" height="15" fill="rgb(216,185,54)" fg:x="1164" fg:w="1"/><text x="68.5599%" y="271.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="68.4272%" y="261" width="0.0587%" height="15" fill="rgb(254,217,39)" fg:x="1166" fg:w="1"/><text x="68.6772%" y="271.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_or_create_node_tune (6 samples, 0.35%)</title><rect x="68.3099%" y="325" width="0.3521%" height="15" fill="rgb(240,178,23)" fg:x="1164" fg:w="6"/><text x="68.5599%" y="335.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_node (5 samples, 0.29%)</title><rect x="68.3685%" y="309" width="0.2934%" height="15" fill="rgb(218,11,47)" fg:x="1165" fg:w="5"/><text x="68.6185%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (5 samples, 0.29%)</title><rect x="68.3685%" y="293" width="0.2934%" height="15" fill="rgb(218,51,51)" fg:x="1165" fg:w="5"/><text x="68.6185%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (4 samples, 0.23%)</title><rect x="68.4272%" y="277" width="0.2347%" height="15" fill="rgb(238,126,27)" fg:x="1166" fg:w="4"/><text x="68.6772%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (3 samples, 0.18%)</title><rect x="68.4859%" y="261" width="0.1761%" height="15" fill="rgb(249,202,22)" fg:x="1167" fg:w="3"/><text x="68.7359%" y="271.50"></text></g><g><title>mwpf`mwpf::matrix::interface::MatrixEchelon::get_solution_local_minimum (1 samples, 0.06%)</title><rect x="68.6620%" y="325" width="0.0587%" height="15" fill="rgb(254,195,49)" fg:x="1170" fg:w="1"/><text x="68.9120%" y="335.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="68.7207%" y="309" width="0.0587%" height="15" fill="rgb(208,123,14)" fg:x="1171" fg:w="1"/><text x="68.9707%" y="319.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer::Relaxer&gt; (1 samples, 0.06%)</title><rect x="68.7207%" y="293" width="0.0587%" height="15" fill="rgb(224,200,8)" fg:x="1171" fg:w="1"/><text x="68.9707%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="68.7207%" y="277" width="0.0587%" height="15" fill="rgb(217,61,36)" fg:x="1171" fg:w="1"/><text x="68.9707%" y="287.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.06%)</title><rect x="68.7207%" y="261" width="0.0587%" height="15" fill="rgb(206,35,45)" fg:x="1171" fg:w="1"/><text x="68.9707%" y="271.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::invalid_subgraph::InvalidSubgraph&gt; (1 samples, 0.06%)</title><rect x="68.7207%" y="245" width="0.0587%" height="15" fill="rgb(217,65,33)" fg:x="1171" fg:w="1"/><text x="68.9707%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="68.7793%" y="309" width="0.0587%" height="15" fill="rgb(222,158,48)" fg:x="1172" fg:w="1"/><text x="69.0293%" y="319.50"></text></g><g><title>mwpf`core::slice::sort::merge_sort (1 samples, 0.06%)</title><rect x="68.7793%" y="293" width="0.0587%" height="15" fill="rgb(254,2,54)" fg:x="1172" fg:w="1"/><text x="69.0293%" y="303.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (1 samples, 0.06%)</title><rect x="68.7793%" y="277" width="0.0587%" height="15" fill="rgb(250,143,38)" fg:x="1172" fg:w="1"/><text x="69.0293%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (1 samples, 0.06%)</title><rect x="68.7793%" y="261" width="0.0587%" height="15" fill="rgb(248,25,0)" fg:x="1172" fg:w="1"/><text x="69.0293%" y="271.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.06%)</title><rect x="68.7793%" y="245" width="0.0587%" height="15" fill="rgb(206,152,27)" fg:x="1172" fg:w="1"/><text x="69.0293%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.06%)</title><rect x="68.8380%" y="245" width="0.0587%" height="15" fill="rgb(240,77,30)" fg:x="1173" fg:w="1"/><text x="69.0880%" y="255.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer_forest::RelaxerForest&gt; (2 samples, 0.12%)</title><rect x="68.8380%" y="309" width="0.1174%" height="15" fill="rgb(231,5,3)" fg:x="1173" fg:w="2"/><text x="69.0880%" y="319.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.12%)</title><rect x="68.8380%" y="293" width="0.1174%" height="15" fill="rgb(207,226,32)" fg:x="1173" fg:w="2"/><text x="69.0880%" y="303.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer::Relaxer&gt; (2 samples, 0.12%)</title><rect x="68.8380%" y="277" width="0.1174%" height="15" fill="rgb(222,207,47)" fg:x="1173" fg:w="2"/><text x="69.0880%" y="287.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.12%)</title><rect x="68.8380%" y="261" width="0.1174%" height="15" fill="rgb(229,115,45)" fg:x="1173" fg:w="2"/><text x="69.0880%" y="271.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::invalid_subgraph::InvalidSubgraph&gt; (1 samples, 0.06%)</title><rect x="68.8967%" y="245" width="0.0587%" height="15" fill="rgb(224,191,6)" fg:x="1174" fg:w="1"/><text x="69.1467%" y="255.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (4 samples, 0.23%)</title><rect x="68.9554%" y="309" width="0.2347%" height="15" fill="rgb(230,227,24)" fg:x="1175" fg:w="4"/><text x="69.2054%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (3 samples, 0.18%)</title><rect x="69.0141%" y="293" width="0.1761%" height="15" fill="rgb(228,80,19)" fg:x="1176" fg:w="3"/><text x="69.2641%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (3 samples, 0.18%)</title><rect x="69.0141%" y="277" width="0.1761%" height="15" fill="rgb(247,229,0)" fg:x="1176" fg:w="3"/><text x="69.2641%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.06%)</title><rect x="69.1901%" y="277" width="0.0587%" height="15" fill="rgb(237,194,15)" fg:x="1179" fg:w="1"/><text x="69.4401%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (15 samples, 0.88%)</title><rect x="69.3662%" y="261" width="0.8803%" height="15" fill="rgb(219,203,20)" fg:x="1182" fg:w="15"/><text x="69.6162%" y="271.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.12%)</title><rect x="70.2465%" y="245" width="0.1174%" height="15" fill="rgb(234,128,8)" fg:x="1197" fg:w="2"/><text x="70.4965%" y="255.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.12%)</title><rect x="70.3638%" y="245" width="0.1174%" height="15" fill="rgb(248,202,8)" fg:x="1199" fg:w="2"/><text x="70.6138%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.06%)</title><rect x="70.4812%" y="245" width="0.0587%" height="15" fill="rgb(206,104,37)" fg:x="1201" fg:w="1"/><text x="70.7312%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="70.4812%" y="229" width="0.0587%" height="15" fill="rgb(223,8,27)" fg:x="1201" fg:w="1"/><text x="70.7312%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (2 samples, 0.12%)</title><rect x="70.5399%" y="245" width="0.1174%" height="15" fill="rgb(216,217,28)" fg:x="1202" fg:w="2"/><text x="70.7899%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.12%)</title><rect x="70.6573%" y="245" width="0.1174%" height="15" fill="rgb(249,199,1)" fg:x="1204" fg:w="2"/><text x="70.9073%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.06%)</title><rect x="70.7160%" y="229" width="0.0587%" height="15" fill="rgb(240,85,17)" fg:x="1205" fg:w="1"/><text x="70.9660%" y="239.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (35 samples, 2.05%)</title><rect x="69.2488%" y="277" width="2.0540%" height="15" fill="rgb(206,108,45)" fg:x="1180" fg:w="35"/><text x="69.4988%" y="287.50">m..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (18 samples, 1.06%)</title><rect x="70.2465%" y="261" width="1.0563%" height="15" fill="rgb(245,210,41)" fg:x="1197" fg:w="18"/><text x="70.4965%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (9 samples, 0.53%)</title><rect x="70.7746%" y="245" width="0.5282%" height="15" fill="rgb(206,13,37)" fg:x="1206" fg:w="9"/><text x="71.0246%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (8 samples, 0.47%)</title><rect x="70.8333%" y="229" width="0.4695%" height="15" fill="rgb(250,61,18)" fg:x="1207" fg:w="8"/><text x="71.0833%" y="239.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="75.1761%" y="229" width="0.0587%" height="15" fill="rgb(235,172,48)" fg:x="1281" fg:w="1"/><text x="75.4261%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (5 samples, 0.29%)</title><rect x="75.1761%" y="245" width="0.2934%" height="15" fill="rgb(249,201,17)" fg:x="1281" fg:w="5"/><text x="75.4261%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (4 samples, 0.23%)</title><rect x="75.2347%" y="229" width="0.2347%" height="15" fill="rgb(219,208,6)" fg:x="1282" fg:w="4"/><text x="75.4847%" y="239.50"></text></g><g><title>mwpf`mwpf::matrix::row::ParityRow::xor_two_rows (1 samples, 0.06%)</title><rect x="75.4695%" y="245" width="0.0587%" height="15" fill="rgb(248,31,23)" fg:x="1286" fg:w="1"/><text x="75.7195%" y="255.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (73 samples, 4.28%)</title><rect x="71.3615%" y="261" width="4.2840%" height="15" fill="rgb(245,15,42)" fg:x="1216" fg:w="73"/><text x="71.6115%" y="271.50">mwpf`..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.12%)</title><rect x="75.5282%" y="245" width="0.1174%" height="15" fill="rgb(222,217,39)" fg:x="1287" fg:w="2"/><text x="75.7782%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="75.6455%" y="245" width="0.0587%" height="15" fill="rgb(210,219,27)" fg:x="1289" fg:w="1"/><text x="75.8955%" y="255.50"></text></g><g><title>mwpf`mwpf::matrix::interface::MatrixTail::set_tail_edges (2 samples, 0.12%)</title><rect x="75.6455%" y="261" width="0.1174%" height="15" fill="rgb(252,166,36)" fg:x="1289" fg:w="2"/><text x="75.8955%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.06%)</title><rect x="75.7042%" y="245" width="0.0587%" height="15" fill="rgb(245,132,34)" fg:x="1290" fg:w="1"/><text x="75.9542%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="75.7042%" y="229" width="0.0587%" height="15" fill="rgb(236,54,3)" fg:x="1290" fg:w="1"/><text x="75.9542%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="75.7042%" y="213" width="0.0587%" height="15" fill="rgb(241,173,43)" fg:x="1290" fg:w="1"/><text x="75.9542%" y="223.50"></text></g><g><title>mwpf`mwpf::matrix::hair::HairView&lt;M&gt;::new (77 samples, 4.52%)</title><rect x="71.3028%" y="277" width="4.5188%" height="15" fill="rgb(215,190,9)" fg:x="1215" fg:w="77"/><text x="71.5528%" y="287.50">mwpf`..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="75.7629%" y="261" width="0.0587%" height="15" fill="rgb(242,101,16)" fg:x="1291" fg:w="1"/><text x="76.0129%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.06%)</title><rect x="76.1150%" y="261" width="0.0587%" height="15" fill="rgb(223,190,21)" fg:x="1297" fg:w="1"/><text x="76.3650%" y="271.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (1 samples, 0.06%)</title><rect x="76.2911%" y="245" width="0.0587%" height="15" fill="rgb(215,228,25)" fg:x="1300" fg:w="1"/><text x="76.5411%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.06%)</title><rect x="76.3498%" y="245" width="0.0587%" height="15" fill="rgb(225,36,22)" fg:x="1301" fg:w="1"/><text x="76.5998%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.18%)</title><rect x="76.4085%" y="245" width="0.1761%" height="15" fill="rgb(251,106,46)" fg:x="1302" fg:w="3"/><text x="76.6585%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.06%)</title><rect x="76.5258%" y="229" width="0.0587%" height="15" fill="rgb(208,90,1)" fg:x="1304" fg:w="1"/><text x="76.7758%" y="239.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (18 samples, 1.06%)</title><rect x="75.8216%" y="277" width="1.0563%" height="15" fill="rgb(243,10,4)" fg:x="1292" fg:w="18"/><text x="76.0716%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (12 samples, 0.70%)</title><rect x="76.1737%" y="261" width="0.7042%" height="15" fill="rgb(212,137,27)" fg:x="1298" fg:w="12"/><text x="76.4237%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (5 samples, 0.29%)</title><rect x="76.5845%" y="245" width="0.2934%" height="15" fill="rgb(231,220,49)" fg:x="1305" fg:w="5"/><text x="76.8345%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (3 samples, 0.18%)</title><rect x="76.7019%" y="229" width="0.1761%" height="15" fill="rgb(237,96,20)" fg:x="1307" fg:w="3"/><text x="76.9519%" y="239.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.18%)</title><rect x="76.9366%" y="245" width="0.1761%" height="15" fill="rgb(239,229,30)" fg:x="1311" fg:w="3"/><text x="77.1866%" y="255.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="77.1127%" y="245" width="0.0587%" height="15" fill="rgb(219,65,33)" fg:x="1314" fg:w="1"/><text x="77.3627%" y="255.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (2 samples, 0.12%)</title><rect x="77.1714%" y="245" width="0.1174%" height="15" fill="rgb(243,134,7)" fg:x="1315" fg:w="2"/><text x="77.4214%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.06%)</title><rect x="77.2887%" y="245" width="0.0587%" height="15" fill="rgb(216,177,54)" fg:x="1317" fg:w="1"/><text x="77.5387%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="77.2887%" y="229" width="0.0587%" height="15" fill="rgb(211,160,20)" fg:x="1317" fg:w="1"/><text x="77.5387%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="77.3474%" y="245" width="0.0587%" height="15" fill="rgb(239,85,39)" fg:x="1318" fg:w="1"/><text x="77.5974%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (3 samples, 0.18%)</title><rect x="77.4061%" y="245" width="0.1761%" height="15" fill="rgb(232,125,22)" fg:x="1319" fg:w="3"/><text x="77.6561%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.06%)</title><rect x="77.5235%" y="229" width="0.0587%" height="15" fill="rgb(244,57,34)" fg:x="1321" fg:w="1"/><text x="77.7735%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (10 samples, 0.59%)</title><rect x="77.5822%" y="245" width="0.5869%" height="15" fill="rgb(214,203,32)" fg:x="1322" fg:w="10"/><text x="77.8322%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (5 samples, 0.29%)</title><rect x="77.8756%" y="229" width="0.2934%" height="15" fill="rgb(207,58,43)" fg:x="1327" fg:w="5"/><text x="78.1256%" y="239.50"></text></g><g><title>mwpf`weak_table::ptr_weak_hash_set::_&lt;impl core::iter::traits::collect::FromIterator&lt;&lt;T as weak_table::traits::WeakElement&gt;::Strong&gt; for weak_table::PtrWeakHashSet&lt;T,S&gt;&gt;::from_iter (23 samples, 1.35%)</title><rect x="76.8779%" y="277" width="1.3498%" height="15" fill="rgb(215,193,15)" fg:x="1310" fg:w="23"/><text x="77.1279%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (23 samples, 1.35%)</title><rect x="76.8779%" y="261" width="1.3498%" height="15" fill="rgb(232,15,44)" fg:x="1310" fg:w="23"/><text x="77.1279%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.06%)</title><rect x="78.1690%" y="245" width="0.0587%" height="15" fill="rgb(212,3,48)" fg:x="1332" fg:w="1"/><text x="78.4190%" y="255.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="78.3451%" y="261" width="0.0587%" height="15" fill="rgb(218,128,7)" fg:x="1335" fg:w="1"/><text x="78.5951%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::OccupiedEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="78.4038%" y="261" width="0.0587%" height="15" fill="rgb(226,216,39)" fg:x="1336" fg:w="1"/><text x="78.6538%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="78.4624%" y="261" width="0.0587%" height="15" fill="rgb(243,47,51)" fg:x="1337" fg:w="1"/><text x="78.7124%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.06%)</title><rect x="78.4624%" y="245" width="0.0587%" height="15" fill="rgb(241,183,40)" fg:x="1337" fg:w="1"/><text x="78.7124%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (7 samples, 0.41%)</title><rect x="78.2277%" y="277" width="0.4108%" height="15" fill="rgb(231,217,32)" fg:x="1333" fg:w="7"/><text x="78.4777%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (2 samples, 0.12%)</title><rect x="78.5211%" y="261" width="0.1174%" height="15" fill="rgb(229,61,38)" fg:x="1338" fg:w="2"/><text x="78.7711%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="78.5798%" y="245" width="0.0587%" height="15" fill="rgb(225,210,5)" fg:x="1339" fg:w="1"/><text x="78.8298%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_single_hair::PluginSingleHair as mwpf::plugin::PluginImpl&gt;::find_relaxers (162 samples, 9.51%)</title><rect x="69.1901%" y="293" width="9.5070%" height="15" fill="rgb(231,79,45)" fg:x="1179" fg:w="162"/><text x="69.4401%" y="303.50">mwpf`&lt;mwpf::pl..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::remove_index (1 samples, 0.06%)</title><rect x="78.6385%" y="277" width="0.0587%" height="15" fill="rgb(224,100,7)" fg:x="1340" fg:w="1"/><text x="78.8885%" y="287.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (1 samples, 0.06%)</title><rect x="78.6972%" y="261" width="0.0587%" height="15" fill="rgb(241,198,18)" fg:x="1341" fg:w="1"/><text x="78.9472%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.06%)</title><rect x="78.6972%" y="245" width="0.0587%" height="15" fill="rgb(252,97,53)" fg:x="1341" fg:w="1"/><text x="78.9472%" y="255.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="78.6972%" y="229" width="0.0587%" height="15" fill="rgb(220,88,7)" fg:x="1341" fg:w="1"/><text x="78.9472%" y="239.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (1 samples, 0.06%)</title><rect x="78.7559%" y="261" width="0.0587%" height="15" fill="rgb(213,176,14)" fg:x="1342" fg:w="1"/><text x="79.0059%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (1 samples, 0.06%)</title><rect x="78.7559%" y="245" width="0.0587%" height="15" fill="rgb(246,73,7)" fg:x="1342" fg:w="1"/><text x="79.0059%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="78.7559%" y="229" width="0.0587%" height="15" fill="rgb(245,64,36)" fg:x="1342" fg:w="1"/><text x="79.0059%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.06%)</title><rect x="78.8732%" y="245" width="0.0587%" height="15" fill="rgb(245,80,10)" fg:x="1344" fg:w="1"/><text x="79.1232%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.06%)</title><rect x="78.9319%" y="229" width="0.0587%" height="15" fill="rgb(232,107,50)" fg:x="1345" fg:w="1"/><text x="79.1819%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="78.9319%" y="213" width="0.0587%" height="15" fill="rgb(253,3,0)" fg:x="1345" fg:w="1"/><text x="79.1819%" y="223.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (4 samples, 0.23%)</title><rect x="78.8146%" y="261" width="0.2347%" height="15" fill="rgb(212,99,53)" fg:x="1343" fg:w="4"/><text x="79.0646%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (2 samples, 0.12%)</title><rect x="78.9319%" y="245" width="0.1174%" height="15" fill="rgb(249,111,54)" fg:x="1345" fg:w="2"/><text x="79.1819%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="78.9906%" y="229" width="0.0587%" height="15" fill="rgb(249,55,30)" fg:x="1346" fg:w="1"/><text x="79.2406%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.06%)</title><rect x="78.9906%" y="213" width="0.0587%" height="15" fill="rgb(237,47,42)" fg:x="1346" fg:w="1"/><text x="79.2406%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (7 samples, 0.41%)</title><rect x="78.6972%" y="293" width="0.4108%" height="15" fill="rgb(211,20,18)" fg:x="1341" fg:w="7"/><text x="78.9472%" y="303.50"></text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (7 samples, 0.41%)</title><rect x="78.6972%" y="277" width="0.4108%" height="15" fill="rgb(231,203,46)" fg:x="1341" fg:w="7"/><text x="78.9472%" y="287.50"></text></g><g><title>mwpf`weak_table::ptr_weak_hash_set::_&lt;impl core::iter::traits::collect::FromIterator&lt;&lt;T as weak_table::traits::WeakElement&gt;::Strong&gt; for weak_table::PtrWeakHashSet&lt;T,S&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="79.0493%" y="261" width="0.0587%" height="15" fill="rgb(237,142,3)" fg:x="1347" fg:w="1"/><text x="79.2993%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.06%)</title><rect x="79.0493%" y="245" width="0.0587%" height="15" fill="rgb(241,107,1)" fg:x="1347" fg:w="1"/><text x="79.2993%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="79.0493%" y="229" width="0.0587%" height="15" fill="rgb(229,83,13)" fg:x="1347" fg:w="1"/><text x="79.2993%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (11 samples, 0.65%)</title><rect x="79.1667%" y="245" width="0.6455%" height="15" fill="rgb(241,91,40)" fg:x="1349" fg:w="11"/><text x="79.4167%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (8 samples, 0.47%)</title><rect x="79.3427%" y="229" width="0.4695%" height="15" fill="rgb(225,3,45)" fg:x="1352" fg:w="8"/><text x="79.5927%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (7 samples, 0.41%)</title><rect x="79.4014%" y="213" width="0.4108%" height="15" fill="rgb(244,223,14)" fg:x="1353" fg:w="7"/><text x="79.6514%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (13 samples, 0.76%)</title><rect x="79.1667%" y="261" width="0.7629%" height="15" fill="rgb(224,124,37)" fg:x="1349" fg:w="13"/><text x="79.4167%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (2 samples, 0.12%)</title><rect x="79.8122%" y="245" width="0.1174%" height="15" fill="rgb(251,171,30)" fg:x="1360" fg:w="2"/><text x="80.0622%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (4 samples, 0.23%)</title><rect x="79.9296%" y="229" width="0.2347%" height="15" fill="rgb(236,46,54)" fg:x="1362" fg:w="4"/><text x="80.1796%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (3 samples, 0.18%)</title><rect x="79.9883%" y="213" width="0.1761%" height="15" fill="rgb(245,213,5)" fg:x="1363" fg:w="3"/><text x="80.2383%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (3 samples, 0.18%)</title><rect x="79.9883%" y="197" width="0.1761%" height="15" fill="rgb(230,144,27)" fg:x="1363" fg:w="3"/><text x="80.2383%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (5 samples, 0.29%)</title><rect x="79.9296%" y="245" width="0.2934%" height="15" fill="rgb(220,86,6)" fg:x="1362" fg:w="5"/><text x="80.1796%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.06%)</title><rect x="80.1643%" y="229" width="0.0587%" height="15" fill="rgb(240,20,13)" fg:x="1366" fg:w="1"/><text x="80.4143%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="80.3404%" y="229" width="0.0587%" height="15" fill="rgb(217,89,34)" fg:x="1369" fg:w="1"/><text x="80.5904%" y="239.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="80.4577%" y="213" width="0.0587%" height="15" fill="rgb(229,13,5)" fg:x="1371" fg:w="1"/><text x="80.7077%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (14 samples, 0.82%)</title><rect x="79.9296%" y="261" width="0.8216%" height="15" fill="rgb(244,67,35)" fg:x="1362" fg:w="14"/><text x="80.1796%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (9 samples, 0.53%)</title><rect x="80.2230%" y="245" width="0.5282%" height="15" fill="rgb(221,40,2)" fg:x="1367" fg:w="9"/><text x="80.4730%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (6 samples, 0.35%)</title><rect x="80.3991%" y="229" width="0.3521%" height="15" fill="rgb(237,157,21)" fg:x="1370" fg:w="6"/><text x="80.6491%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (4 samples, 0.23%)</title><rect x="80.5164%" y="213" width="0.2347%" height="15" fill="rgb(222,94,11)" fg:x="1372" fg:w="4"/><text x="80.7664%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="80.8685%" y="213" width="0.0587%" height="15" fill="rgb(249,113,6)" fg:x="1378" fg:w="1"/><text x="81.1185%" y="223.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="80.9272%" y="197" width="0.0587%" height="15" fill="rgb(238,137,36)" fg:x="1379" fg:w="1"/><text x="81.1772%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (13 samples, 0.76%)</title><rect x="80.7512%" y="229" width="0.7629%" height="15" fill="rgb(210,102,26)" fg:x="1376" fg:w="13"/><text x="81.0012%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (10 samples, 0.59%)</title><rect x="80.9272%" y="213" width="0.5869%" height="15" fill="rgb(218,30,30)" fg:x="1379" fg:w="10"/><text x="81.1772%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (9 samples, 0.53%)</title><rect x="80.9859%" y="197" width="0.5282%" height="15" fill="rgb(214,67,26)" fg:x="1380" fg:w="9"/><text x="81.2359%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (14 samples, 0.82%)</title><rect x="80.7512%" y="245" width="0.8216%" height="15" fill="rgb(251,9,53)" fg:x="1376" fg:w="14"/><text x="81.0012%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.06%)</title><rect x="81.5141%" y="229" width="0.0587%" height="15" fill="rgb(228,204,25)" fg:x="1389" fg:w="1"/><text x="81.7641%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (15 samples, 0.88%)</title><rect x="80.7512%" y="261" width="0.8803%" height="15" fill="rgb(207,153,8)" fg:x="1376" fg:w="15"/><text x="81.0012%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.06%)</title><rect x="81.5728%" y="245" width="0.0587%" height="15" fill="rgb(242,9,16)" fg:x="1390" fg:w="1"/><text x="81.8228%" y="255.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (4 samples, 0.23%)</title><rect x="81.6315%" y="261" width="0.2347%" height="15" fill="rgb(217,211,10)" fg:x="1391" fg:w="4"/><text x="81.8815%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.06%)</title><rect x="81.8075%" y="245" width="0.0587%" height="15" fill="rgb(219,228,52)" fg:x="1394" fg:w="1"/><text x="82.0575%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="81.8075%" y="229" width="0.0587%" height="15" fill="rgb(231,92,29)" fg:x="1394" fg:w="1"/><text x="82.0575%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="81.8075%" y="213" width="0.0587%" height="15" fill="rgb(232,8,23)" fg:x="1394" fg:w="1"/><text x="82.0575%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="81.9836%" y="197" width="0.0587%" height="15" fill="rgb(216,211,34)" fg:x="1397" fg:w="1"/><text x="82.2336%" y="207.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="82.1009%" y="181" width="0.0587%" height="15" fill="rgb(236,151,0)" fg:x="1399" fg:w="1"/><text x="82.3509%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (8 samples, 0.47%)</title><rect x="81.8662%" y="229" width="0.4695%" height="15" fill="rgb(209,168,3)" fg:x="1395" fg:w="8"/><text x="82.1162%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (8 samples, 0.47%)</title><rect x="81.8662%" y="213" width="0.4695%" height="15" fill="rgb(208,129,28)" fg:x="1395" fg:w="8"/><text x="82.1162%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (5 samples, 0.29%)</title><rect x="82.0423%" y="197" width="0.2934%" height="15" fill="rgb(229,78,22)" fg:x="1398" fg:w="5"/><text x="82.2923%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (3 samples, 0.18%)</title><rect x="82.1596%" y="181" width="0.1761%" height="15" fill="rgb(228,187,13)" fg:x="1400" fg:w="3"/><text x="82.4096%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="82.3944%" y="213" width="0.0587%" height="15" fill="rgb(240,119,24)" fg:x="1404" fg:w="1"/><text x="82.6444%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (12 samples, 0.70%)</title><rect x="81.8662%" y="245" width="0.7042%" height="15" fill="rgb(209,194,42)" fg:x="1395" fg:w="12"/><text x="82.1162%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (4 samples, 0.23%)</title><rect x="82.3357%" y="229" width="0.2347%" height="15" fill="rgb(247,200,46)" fg:x="1403" fg:w="4"/><text x="82.5857%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (2 samples, 0.12%)</title><rect x="82.4531%" y="213" width="0.1174%" height="15" fill="rgb(218,76,16)" fg:x="1405" fg:w="2"/><text x="82.7031%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.12%)</title><rect x="82.4531%" y="197" width="0.1174%" height="15" fill="rgb(225,21,48)" fg:x="1405" fg:w="2"/><text x="82.7031%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="82.5704%" y="181" width="0.0587%" height="15" fill="rgb(239,223,50)" fg:x="1407" fg:w="1"/><text x="82.8204%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (4 samples, 0.23%)</title><rect x="82.5704%" y="213" width="0.2347%" height="15" fill="rgb(244,45,21)" fg:x="1407" fg:w="4"/><text x="82.8204%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (4 samples, 0.23%)</title><rect x="82.5704%" y="197" width="0.2347%" height="15" fill="rgb(232,33,43)" fg:x="1407" fg:w="4"/><text x="82.8204%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (3 samples, 0.18%)</title><rect x="82.6291%" y="181" width="0.1761%" height="15" fill="rgb(209,8,3)" fg:x="1408" fg:w="3"/><text x="82.8791%" y="191.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.12%)</title><rect x="82.6878%" y="165" width="0.1174%" height="15" fill="rgb(214,25,53)" fg:x="1409" fg:w="2"/><text x="82.9378%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (6 samples, 0.35%)</title><rect x="82.5704%" y="245" width="0.3521%" height="15" fill="rgb(254,186,54)" fg:x="1407" fg:w="6"/><text x="82.8204%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (6 samples, 0.35%)</title><rect x="82.5704%" y="229" width="0.3521%" height="15" fill="rgb(208,174,49)" fg:x="1407" fg:w="6"/><text x="82.8204%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (2 samples, 0.12%)</title><rect x="82.8052%" y="213" width="0.1174%" height="15" fill="rgb(233,191,51)" fg:x="1411" fg:w="2"/><text x="83.0552%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.06%)</title><rect x="83.0986%" y="229" width="0.0587%" height="15" fill="rgb(222,134,10)" fg:x="1416" fg:w="1"/><text x="83.3486%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="83.1573%" y="213" width="0.0587%" height="15" fill="rgb(230,226,20)" fg:x="1417" fg:w="1"/><text x="83.4073%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="83.2160%" y="213" width="0.0587%" height="15" fill="rgb(251,111,25)" fg:x="1418" fg:w="1"/><text x="83.4660%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.06%)</title><rect x="83.2160%" y="197" width="0.0587%" height="15" fill="rgb(224,40,46)" fg:x="1418" fg:w="1"/><text x="83.4660%" y="207.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (10 samples, 0.59%)</title><rect x="82.9225%" y="245" width="0.5869%" height="15" fill="rgb(236,108,47)" fg:x="1413" fg:w="10"/><text x="83.1725%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (6 samples, 0.35%)</title><rect x="83.1573%" y="229" width="0.3521%" height="15" fill="rgb(234,93,0)" fg:x="1417" fg:w="6"/><text x="83.4073%" y="239.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (4 samples, 0.23%)</title><rect x="83.2746%" y="213" width="0.2347%" height="15" fill="rgb(224,213,32)" fg:x="1419" fg:w="4"/><text x="83.5246%" y="223.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (3 samples, 0.18%)</title><rect x="83.3333%" y="197" width="0.1761%" height="15" fill="rgb(251,11,48)" fg:x="1420" fg:w="3"/><text x="83.5833%" y="207.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (29 samples, 1.70%)</title><rect x="81.8662%" y="261" width="1.7019%" height="15" fill="rgb(236,173,5)" fg:x="1395" fg:w="29"/><text x="82.1162%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="83.5094%" y="245" width="0.0587%" height="15" fill="rgb(230,95,12)" fg:x="1423" fg:w="1"/><text x="83.7594%" y="255.50"></text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (246 samples, 14.44%)</title><rect x="69.1901%" y="309" width="14.4366%" height="15" fill="rgb(232,209,1)" fg:x="1179" fg:w="246"/><text x="69.4401%" y="319.50">mwpf`mwpf::plugin::Plu..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (77 samples, 4.52%)</title><rect x="79.1080%" y="293" width="4.5188%" height="15" fill="rgb(232,6,1)" fg:x="1348" fg:w="77"/><text x="79.3580%" y="303.50">mwpf`..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (77 samples, 4.52%)</title><rect x="79.1080%" y="277" width="4.5188%" height="15" fill="rgb(210,224,50)" fg:x="1348" fg:w="77"/><text x="79.3580%" y="287.50">mwpf`..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="83.5681%" y="261" width="0.0587%" height="15" fill="rgb(228,127,35)" fg:x="1424" fg:w="1"/><text x="83.8181%" y="271.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (255 samples, 14.96%)</title><rect x="68.7207%" y="325" width="14.9648%" height="15" fill="rgb(245,102,45)" fg:x="1171" fg:w="255"/><text x="68.9707%" y="335.50">mwpf`mwpf::plugin::Plug..</text></g><g><title>mwpf`weak_table::ptr_weak_hash_set::_&lt;impl core::iter::traits::collect::FromIterator&lt;&lt;T as weak_table::traits::WeakElement&gt;::Strong&gt; for weak_table::PtrWeakHashSet&lt;T,S&gt;&gt;::from_iter (1 samples, 0.06%)</title><rect x="83.6268%" y="309" width="0.0587%" height="15" fill="rgb(214,1,49)" fg:x="1425" fg:w="1"/><text x="83.8768%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.06%)</title><rect x="83.6268%" y="293" width="0.0587%" height="15" fill="rgb(226,163,40)" fg:x="1425" fg:w="1"/><text x="83.8768%" y="303.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="83.6268%" y="277" width="0.0587%" height="15" fill="rgb(239,212,28)" fg:x="1425" fg:w="1"/><text x="83.8768%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.06%)</title><rect x="83.8615%" y="309" width="0.0587%" height="15" fill="rgb(220,20,13)" fg:x="1429" fg:w="1"/><text x="84.1115%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.06%)</title><rect x="83.8615%" y="293" width="0.0587%" height="15" fill="rgb(210,164,35)" fg:x="1429" fg:w="1"/><text x="84.1115%" y="303.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (1 samples, 0.06%)</title><rect x="83.9202%" y="293" width="0.0587%" height="15" fill="rgb(248,109,41)" fg:x="1430" fg:w="1"/><text x="84.1702%" y="303.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (3 samples, 0.18%)</title><rect x="84.1549%" y="261" width="0.1761%" height="15" fill="rgb(238,23,50)" fg:x="1434" fg:w="3"/><text x="84.4049%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (23 samples, 1.35%)</title><rect x="83.9789%" y="293" width="1.3498%" height="15" fill="rgb(211,48,49)" fg:x="1431" fg:w="23"/><text x="84.2289%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (20 samples, 1.17%)</title><rect x="84.1549%" y="277" width="1.1737%" height="15" fill="rgb(223,36,21)" fg:x="1434" fg:w="20"/><text x="84.4049%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (17 samples, 1.00%)</title><rect x="84.3310%" y="261" width="0.9977%" height="15" fill="rgb(207,123,46)" fg:x="1437" fg:w="17"/><text x="84.5810%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (26 samples, 1.53%)</title><rect x="83.9202%" y="309" width="1.5258%" height="15" fill="rgb(240,218,32)" fg:x="1430" fg:w="26"/><text x="84.1702%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (2 samples, 0.12%)</title><rect x="85.3286%" y="293" width="0.1174%" height="15" fill="rgb(252,5,43)" fg:x="1454" fg:w="2"/><text x="85.5786%" y="303.50"></text></g><g><title>mwpf`DYLD-STUB$$free (1 samples, 0.06%)</title><rect x="85.4460%" y="309" width="0.0587%" height="15" fill="rgb(252,84,19)" fg:x="1456" fg:w="1"/><text x="85.6960%" y="319.50"></text></g><g><title>mwpf`HEkk::~HEkk (2 samples, 0.12%)</title><rect x="85.5047%" y="277" width="0.1174%" height="15" fill="rgb(243,152,39)" fg:x="1457" fg:w="2"/><text x="85.7547%" y="287.50"></text></g><g><title>mwpf`HSimplexNla::~HSimplexNla (2 samples, 0.12%)</title><rect x="85.5047%" y="261" width="0.1174%" height="15" fill="rgb(234,160,15)" fg:x="1457" fg:w="2"/><text x="85.7547%" y="271.50"></text></g><g><title>mwpf`HFactor::~HFactor (2 samples, 0.12%)</title><rect x="85.5047%" y="245" width="0.1174%" height="15" fill="rgb(237,34,20)" fg:x="1457" fg:w="2"/><text x="85.7547%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.12%)</title><rect x="85.5047%" y="229" width="0.1174%" height="15" fill="rgb(229,97,13)" fg:x="1457" fg:w="2"/><text x="85.7547%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.12%)</title><rect x="85.5047%" y="213" width="0.1174%" height="15" fill="rgb(234,71,50)" fg:x="1457" fg:w="2"/><text x="85.7547%" y="223.50"></text></g><g><title>mwpf`Highs::~Highs (3 samples, 0.18%)</title><rect x="85.5047%" y="309" width="0.1761%" height="15" fill="rgb(253,155,4)" fg:x="1457" fg:w="3"/><text x="85.7547%" y="319.50"></text></g><g><title>mwpf`Highs::~Highs (3 samples, 0.18%)</title><rect x="85.5047%" y="293" width="0.1761%" height="15" fill="rgb(222,185,37)" fg:x="1457" fg:w="3"/><text x="85.7547%" y="303.50"></text></g><g><title>mwpf`PresolveComponentData::~PresolveComponentData (1 samples, 0.06%)</title><rect x="85.6221%" y="277" width="0.0587%" height="15" fill="rgb(251,177,13)" fg:x="1459" fg:w="1"/><text x="85.8721%" y="287.50"></text></g><g><title>mwpf`HighsLp::~HighsLp (1 samples, 0.06%)</title><rect x="85.6221%" y="261" width="0.0587%" height="15" fill="rgb(250,179,40)" fg:x="1459" fg:w="1"/><text x="85.8721%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.06%)</title><rect x="85.6221%" y="245" width="0.0587%" height="15" fill="rgb(242,44,2)" fg:x="1459" fg:w="1"/><text x="85.8721%" y="255.50"></text></g><g><title>mwpf`core::iter::traits::iterator::Iterator::cmp_by (3 samples, 0.18%)</title><rect x="85.6808%" y="277" width="0.1761%" height="15" fill="rgb(216,177,13)" fg:x="1460" fg:w="3"/><text x="85.9308%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="85.8568%" y="261" width="0.0587%" height="15" fill="rgb(216,106,43)" fg:x="1463" fg:w="1"/><text x="86.1068%" y="271.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="85.9742%" y="245" width="0.0587%" height="15" fill="rgb(216,183,2)" fg:x="1465" fg:w="1"/><text x="86.2242%" y="255.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (12 samples, 0.70%)</title><rect x="85.8568%" y="277" width="0.7042%" height="15" fill="rgb(249,75,3)" fg:x="1463" fg:w="12"/><text x="86.1068%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (11 samples, 0.65%)</title><rect x="85.9155%" y="261" width="0.6455%" height="15" fill="rgb(219,67,39)" fg:x="1464" fg:w="11"/><text x="86.1655%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (9 samples, 0.53%)</title><rect x="86.0329%" y="245" width="0.5282%" height="15" fill="rgb(253,228,2)" fg:x="1466" fg:w="9"/><text x="86.2829%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (16 samples, 0.94%)</title><rect x="85.6808%" y="309" width="0.9390%" height="15" fill="rgb(235,138,27)" fg:x="1460" fg:w="16"/><text x="85.9308%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (16 samples, 0.94%)</title><rect x="85.6808%" y="293" width="0.9390%" height="15" fill="rgb(236,97,51)" fg:x="1460" fg:w="16"/><text x="85.9308%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.06%)</title><rect x="86.5610%" y="277" width="0.0587%" height="15" fill="rgb(240,80,30)" fg:x="1475" fg:w="1"/><text x="86.8110%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.06%)</title><rect x="86.6784%" y="293" width="0.0587%" height="15" fill="rgb(230,178,19)" fg:x="1477" fg:w="1"/><text x="86.9284%" y="303.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.23%)</title><rect x="86.6197%" y="309" width="0.2347%" height="15" fill="rgb(210,190,27)" fg:x="1476" fg:w="4"/><text x="86.8697%" y="319.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (2 samples, 0.12%)</title><rect x="86.7371%" y="293" width="0.1174%" height="15" fill="rgb(222,107,31)" fg:x="1478" fg:w="2"/><text x="86.9871%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.12%)</title><rect x="86.7371%" y="277" width="0.1174%" height="15" fill="rgb(216,127,34)" fg:x="1478" fg:w="2"/><text x="86.9871%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.12%)</title><rect x="86.7371%" y="261" width="0.1174%" height="15" fill="rgb(234,116,52)" fg:x="1478" fg:w="2"/><text x="86.9871%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.12%)</title><rect x="86.7371%" y="245" width="0.1174%" height="15" fill="rgb(222,124,15)" fg:x="1478" fg:w="2"/><text x="86.9871%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.12%)</title><rect x="86.7371%" y="229" width="0.1174%" height="15" fill="rgb(231,179,28)" fg:x="1478" fg:w="2"/><text x="86.9871%" y="239.50"></text></g><g><title>mwpf`&lt;(ExtendA,ExtendB) as core::iter::traits::collect::Extend&lt;(A,B)&gt;&gt;::extend (1 samples, 0.06%)</title><rect x="86.8545%" y="293" width="0.0587%" height="15" fill="rgb(226,93,45)" fg:x="1480" fg:w="1"/><text x="87.1045%" y="303.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="86.8545%" y="277" width="0.0587%" height="15" fill="rgb(215,8,51)" fg:x="1480" fg:w="1"/><text x="87.1045%" y="287.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="86.8545%" y="261" width="0.0587%" height="15" fill="rgb(223,106,5)" fg:x="1480" fg:w="1"/><text x="87.1045%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="86.8545%" y="245" width="0.0587%" height="15" fill="rgb(250,191,5)" fg:x="1480" fg:w="1"/><text x="87.1045%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="86.8545%" y="229" width="0.0587%" height="15" fill="rgb(242,132,44)" fg:x="1480" fg:w="1"/><text x="87.1045%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.06%)</title><rect x="86.8545%" y="213" width="0.0587%" height="15" fill="rgb(251,152,29)" fg:x="1480" fg:w="1"/><text x="87.1045%" y="223.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.06%)</title><rect x="86.9131%" y="245" width="0.0587%" height="15" fill="rgb(218,179,5)" fg:x="1481" fg:w="1"/><text x="87.1631%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="86.9131%" y="229" width="0.0587%" height="15" fill="rgb(227,67,19)" fg:x="1481" fg:w="1"/><text x="87.1631%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="86.9131%" y="213" width="0.0587%" height="15" fill="rgb(233,119,31)" fg:x="1481" fg:w="1"/><text x="87.1631%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.12%)</title><rect x="86.9718%" y="245" width="0.1174%" height="15" fill="rgb(241,120,22)" fg:x="1482" fg:w="2"/><text x="87.2218%" y="255.50"></text></g><g><title>mwpf`HighsSparseMatrix::HighsSparseMatrix (1 samples, 0.06%)</title><rect x="87.0892%" y="245" width="0.0587%" height="15" fill="rgb(224,102,30)" fg:x="1484" fg:w="1"/><text x="87.3392%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.06%)</title><rect x="87.0892%" y="229" width="0.0587%" height="15" fill="rgb(210,164,37)" fg:x="1484" fg:w="1"/><text x="87.3392%" y="239.50"></text></g><g><title>mwpf`highs::Model::add_row (7 samples, 0.41%)</title><rect x="86.8545%" y="309" width="0.4108%" height="15" fill="rgb(226,191,16)" fg:x="1480" fg:w="7"/><text x="87.1045%" y="319.50"></text></g><g><title>mwpf`Highs::addRow (6 samples, 0.35%)</title><rect x="86.9131%" y="293" width="0.3521%" height="15" fill="rgb(214,40,45)" fg:x="1481" fg:w="6"/><text x="87.1631%" y="303.50"></text></g><g><title>mwpf`Highs::addRows (6 samples, 0.35%)</title><rect x="86.9131%" y="277" width="0.3521%" height="15" fill="rgb(244,29,26)" fg:x="1481" fg:w="6"/><text x="87.1631%" y="287.50"></text></g><g><title>mwpf`Highs::addRowsInterface (6 samples, 0.35%)</title><rect x="86.9131%" y="261" width="0.3521%" height="15" fill="rgb(216,16,5)" fg:x="1481" fg:w="6"/><text x="87.1631%" y="271.50"></text></g><g><title>mwpf`HighsSparseMatrix::assess(HighsLogOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2 samples, 0.12%)</title><rect x="87.1479%" y="245" width="0.1174%" height="15" fill="rgb(249,76,35)" fg:x="1485" fg:w="2"/><text x="87.3979%" y="255.50"></text></g><g><title>mwpf`assessMatrix(HighsLogOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, int, int, bool, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;double, std::__1::allocator (2 samples, 0.12%)</title><rect x="87.1479%" y="229" width="0.1174%" height="15" fill="rgb(207,11,44)" fg:x="1485" fg:w="2"/><text x="87.3979%" y="239.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.06%)</title><rect x="87.2066%" y="213" width="0.0587%" height="15" fill="rgb(228,190,49)" fg:x="1486" fg:w="1"/><text x="87.4566%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="87.2066%" y="197" width="0.0587%" height="15" fill="rgb(214,173,12)" fg:x="1486" fg:w="1"/><text x="87.4566%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.06%)</title><rect x="87.2066%" y="181" width="0.0587%" height="15" fill="rgb(218,26,35)" fg:x="1486" fg:w="1"/><text x="87.4566%" y="191.50"></text></g><g><title>mwpf`HEkk::computeFactor (1 samples, 0.06%)</title><rect x="87.2653%" y="181" width="0.0587%" height="15" fill="rgb(220,200,19)" fg:x="1487" fg:w="1"/><text x="87.5153%" y="191.50"></text></g><g><title>mwpf`HSimplexNla::invert (1 samples, 0.06%)</title><rect x="87.2653%" y="165" width="0.0587%" height="15" fill="rgb(239,95,49)" fg:x="1487" fg:w="1"/><text x="87.5153%" y="175.50"></text></g><g><title>mwpf`HFactor::build (1 samples, 0.06%)</title><rect x="87.2653%" y="149" width="0.0587%" height="15" fill="rgb(235,85,53)" fg:x="1487" fg:w="1"/><text x="87.5153%" y="159.50"></text></g><g><title>mwpf`HFactor::buildFinish (1 samples, 0.06%)</title><rect x="87.2653%" y="133" width="0.0587%" height="15" fill="rgb(233,133,31)" fg:x="1487" fg:w="1"/><text x="87.5153%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.06%)</title><rect x="87.2653%" y="117" width="0.0587%" height="15" fill="rgb(218,25,20)" fg:x="1487" fg:w="1"/><text x="87.5153%" y="127.50"></text></g><g><title>mwpf`HEkk::initialiseSimplexLpBasisAndFactor (2 samples, 0.12%)</title><rect x="87.2653%" y="197" width="0.1174%" height="15" fill="rgb(252,210,38)" fg:x="1487" fg:w="2"/><text x="87.5153%" y="207.50"></text></g><g><title>mwpf`HSimplexNla::setup (1 samples, 0.06%)</title><rect x="87.3239%" y="181" width="0.0587%" height="15" fill="rgb(242,134,21)" fg:x="1488" fg:w="1"/><text x="87.5739%" y="191.50"></text></g><g><title>mwpf`HFactor::setupGeneral (1 samples, 0.06%)</title><rect x="87.3239%" y="165" width="0.0587%" height="15" fill="rgb(213,28,48)" fg:x="1488" fg:w="1"/><text x="87.5739%" y="175.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::__append (1 samples, 0.06%)</title><rect x="87.3239%" y="149" width="0.0587%" height="15" fill="rgb(250,196,2)" fg:x="1488" fg:w="1"/><text x="87.5739%" y="159.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (1 samples, 0.06%)</title><rect x="87.3239%" y="133" width="0.0587%" height="15" fill="rgb(227,5,17)" fg:x="1488" fg:w="1"/><text x="87.5739%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.06%)</title><rect x="87.3239%" y="117" width="0.0587%" height="15" fill="rgb(221,226,24)" fg:x="1488" fg:w="1"/><text x="87.5739%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.06%)</title><rect x="87.3239%" y="101" width="0.0587%" height="15" fill="rgb(211,5,48)" fg:x="1488" fg:w="1"/><text x="87.5739%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.06%)</title><rect x="87.3239%" y="85" width="0.0587%" height="15" fill="rgb(219,150,6)" fg:x="1488" fg:w="1"/><text x="87.5739%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.06%)</title><rect x="87.3239%" y="69" width="0.0587%" height="15" fill="rgb(251,46,16)" fg:x="1488" fg:w="1"/><text x="87.5739%" y="79.50"></text></g><g><title>mwpf`HEkk::initialiseForSolve (3 samples, 0.18%)</title><rect x="87.2653%" y="213" width="0.1761%" height="15" fill="rgb(220,204,40)" fg:x="1487" fg:w="3"/><text x="87.5153%" y="223.50"></text></g><g><title>mwpf`HighsRandom::drawUniform (1 samples, 0.06%)</title><rect x="87.3826%" y="197" width="0.0587%" height="15" fill="rgb(211,85,2)" fg:x="1489" fg:w="1"/><text x="87.6326%" y="207.50"></text></g><g><title>mwpf`HEkkDual::iterate (1 samples, 0.06%)</title><rect x="87.4413%" y="181" width="0.0587%" height="15" fill="rgb(229,17,7)" fg:x="1490" fg:w="1"/><text x="87.6913%" y="191.50"></text></g><g><title>mwpf`HEkkDual::updatePivots (1 samples, 0.06%)</title><rect x="87.4413%" y="165" width="0.0587%" height="15" fill="rgb(239,72,28)" fg:x="1490" fg:w="1"/><text x="87.6913%" y="175.50"></text></g><g><title>mwpf`HEkk::updateFactor(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.06%)</title><rect x="87.4413%" y="149" width="0.0587%" height="15" fill="rgb(230,47,54)" fg:x="1490" fg:w="1"/><text x="87.6913%" y="159.50"></text></g><g><title>mwpf`HSimplexNla::update(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.06%)</title><rect x="87.4413%" y="133" width="0.0587%" height="15" fill="rgb(214,50,8)" fg:x="1490" fg:w="1"/><text x="87.6913%" y="143.50"></text></g><g><title>mwpf`HFactor::update(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.06%)</title><rect x="87.4413%" y="117" width="0.0587%" height="15" fill="rgb(216,198,43)" fg:x="1490" fg:w="1"/><text x="87.6913%" y="127.50"></text></g><g><title>mwpf`HFactor::updateFT(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.06%)</title><rect x="87.4413%" y="101" width="0.0587%" height="15" fill="rgb(234,20,35)" fg:x="1490" fg:w="1"/><text x="87.6913%" y="111.50"></text></g><g><title>mwpf`HEkkDual::solvePhase1 (2 samples, 0.12%)</title><rect x="87.4413%" y="197" width="0.1174%" height="15" fill="rgb(254,45,19)" fg:x="1490" fg:w="2"/><text x="87.6913%" y="207.50"></text></g><g><title>mwpf`HEkkDual::rebuild (1 samples, 0.06%)</title><rect x="87.5000%" y="181" width="0.0587%" height="15" fill="rgb(219,14,44)" fg:x="1491" fg:w="1"/><text x="87.7500%" y="191.50"></text></g><g><title>mwpf`HEkkDual::reportRebuild (1 samples, 0.06%)</title><rect x="87.5000%" y="165" width="0.0587%" height="15" fill="rgb(217,220,26)" fg:x="1491" fg:w="1"/><text x="87.7500%" y="175.50"></text></g><g><title>mwpf`HighsSimplexAnalysis::userInvertReport (1 samples, 0.06%)</title><rect x="87.5000%" y="149" width="0.0587%" height="15" fill="rgb(213,158,28)" fg:x="1491" fg:w="1"/><text x="87.7500%" y="159.50"></text></g><g><title>mwpf`HighsSimplexAnalysis::reportIterationObjective (1 samples, 0.06%)</title><rect x="87.5000%" y="133" width="0.0587%" height="15" fill="rgb(252,51,52)" fg:x="1491" fg:w="1"/><text x="87.7500%" y="143.50"></text></g><g><title>mwpf`std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt;&gt;&amp; std::__1::__put_character_sequence&lt;char, std::__1::char_traits&lt;char&gt;&gt;(std::__1::basic_ostream&lt;char, std::__1::char_traits (1 samples, 0.06%)</title><rect x="87.5000%" y="117" width="0.0587%" height="15" fill="rgb(246,89,16)" fg:x="1491" fg:w="1"/><text x="87.7500%" y="127.50"></text></g><g><title>mwpf`std::__1::ostreambuf_iterator&lt;char, std::__1::char_traits&lt;char&gt;&gt; std::__1::__pad_and_output&lt;char, std::__1::char_traits&lt;char&gt;&gt;(std::__1::ostreambuf_iterator&lt;char, std::__1::char_traits (1 samples, 0.06%)</title><rect x="87.5000%" y="101" width="0.0587%" height="15" fill="rgb(216,158,49)" fg:x="1491" fg:w="1"/><text x="87.7500%" y="111.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_streambuf&lt;char, std::__1::char_traits&lt;char&gt;&gt;::xsputn (1 samples, 0.06%)</title><rect x="87.5000%" y="85" width="0.0587%" height="15" fill="rgb(236,107,19)" fg:x="1491" fg:w="1"/><text x="87.7500%" y="95.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_stringbuf&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::overflow (1 samples, 0.06%)</title><rect x="87.5000%" y="69" width="0.0587%" height="15" fill="rgb(228,185,30)" fg:x="1491" fg:w="1"/><text x="87.7500%" y="79.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::push_back (1 samples, 0.06%)</title><rect x="87.5000%" y="53" width="0.0587%" height="15" fill="rgb(246,134,8)" fg:x="1491" fg:w="1"/><text x="87.7500%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.06%)</title><rect x="87.5000%" y="37" width="0.0587%" height="15" fill="rgb(214,143,50)" fg:x="1491" fg:w="1"/><text x="87.7500%" y="47.50"></text></g><g><title>mwpf`HEkkDual::chooseRow (1 samples, 0.06%)</title><rect x="87.5587%" y="165" width="0.0587%" height="15" fill="rgb(228,75,8)" fg:x="1492" fg:w="1"/><text x="87.8087%" y="175.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (1 samples, 0.06%)</title><rect x="87.5587%" y="149" width="0.0587%" height="15" fill="rgb(207,175,4)" fg:x="1492" fg:w="1"/><text x="87.8087%" y="159.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (1 samples, 0.06%)</title><rect x="87.5587%" y="133" width="0.0587%" height="15" fill="rgb(205,108,24)" fg:x="1492" fg:w="1"/><text x="87.8087%" y="143.50"></text></g><g><title>mwpf`HFactor::btranU(HVectorBase (1 samples, 0.06%)</title><rect x="87.5587%" y="117" width="0.0587%" height="15" fill="rgb(244,120,49)" fg:x="1492" fg:w="1"/><text x="87.8087%" y="127.50"></text></g><g><title>mwpf`HEkkDual::updateFtran (1 samples, 0.06%)</title><rect x="87.6174%" y="165" width="0.0587%" height="15" fill="rgb(223,47,38)" fg:x="1493" fg:w="1"/><text x="87.8674%" y="175.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (1 samples, 0.06%)</title><rect x="87.6174%" y="149" width="0.0587%" height="15" fill="rgb(229,179,11)" fg:x="1493" fg:w="1"/><text x="87.8674%" y="159.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (1 samples, 0.06%)</title><rect x="87.6174%" y="133" width="0.0587%" height="15" fill="rgb(231,122,1)" fg:x="1493" fg:w="1"/><text x="87.8674%" y="143.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (1 samples, 0.06%)</title><rect x="87.6761%" y="133" width="0.0587%" height="15" fill="rgb(245,119,9)" fg:x="1494" fg:w="1"/><text x="87.9261%" y="143.50"></text></g><g><title>mwpf`HFactor::ftranU(HVectorBase (1 samples, 0.06%)</title><rect x="87.6761%" y="117" width="0.0587%" height="15" fill="rgb(241,163,25)" fg:x="1494" fg:w="1"/><text x="87.9261%" y="127.50"></text></g><g><title>mwpf`HEkkDual::updateFtranDSE(HVectorBase (2 samples, 0.12%)</title><rect x="87.6761%" y="165" width="0.1174%" height="15" fill="rgb(217,214,3)" fg:x="1494" fg:w="2"/><text x="87.9261%" y="175.50"></text></g><g><title>mwpf`HSimplexNla::ftranInScaledSpace(HVectorBase (2 samples, 0.12%)</title><rect x="87.6761%" y="149" width="0.1174%" height="15" fill="rgb(240,86,28)" fg:x="1494" fg:w="2"/><text x="87.9261%" y="159.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (1 samples, 0.06%)</title><rect x="87.7347%" y="133" width="0.0587%" height="15" fill="rgb(215,47,9)" fg:x="1495" fg:w="1"/><text x="87.9847%" y="143.50"></text></g><g><title>mwpf`HEkkDual::iterate (5 samples, 0.29%)</title><rect x="87.5587%" y="181" width="0.2934%" height="15" fill="rgb(252,25,45)" fg:x="1492" fg:w="5"/><text x="87.8087%" y="191.50"></text></g><g><title>mwpf`HEkkDual::updatePivots (1 samples, 0.06%)</title><rect x="87.7934%" y="165" width="0.0587%" height="15" fill="rgb(251,164,9)" fg:x="1496" fg:w="1"/><text x="88.0434%" y="175.50"></text></g><g><title>mwpf`HEkk::updateFactor(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.06%)</title><rect x="87.7934%" y="149" width="0.0587%" height="15" fill="rgb(233,194,0)" fg:x="1496" fg:w="1"/><text x="88.0434%" y="159.50"></text></g><g><title>mwpf`HSimplexNla::update(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.06%)</title><rect x="87.7934%" y="133" width="0.0587%" height="15" fill="rgb(249,111,24)" fg:x="1496" fg:w="1"/><text x="88.0434%" y="143.50"></text></g><g><title>mwpf`HFactor::update(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.06%)</title><rect x="87.7934%" y="117" width="0.0587%" height="15" fill="rgb(250,223,3)" fg:x="1496" fg:w="1"/><text x="88.0434%" y="127.50"></text></g><g><title>mwpf`HFactor::updateFT(HVectorBase&lt;double&gt;*, HVectorBase (1 samples, 0.06%)</title><rect x="87.7934%" y="101" width="0.0587%" height="15" fill="rgb(236,178,37)" fg:x="1496" fg:w="1"/><text x="88.0434%" y="111.50"></text></g><g><title>mwpf`HEkk::computeDual (1 samples, 0.06%)</title><rect x="87.8521%" y="165" width="0.0587%" height="15" fill="rgb(241,158,50)" fg:x="1497" fg:w="1"/><text x="88.1021%" y="175.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::setup (1 samples, 0.06%)</title><rect x="87.8521%" y="149" width="0.0587%" height="15" fill="rgb(213,121,41)" fg:x="1497" fg:w="1"/><text x="88.1021%" y="159.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::__append (1 samples, 0.06%)</title><rect x="87.8521%" y="133" width="0.0587%" height="15" fill="rgb(240,92,3)" fg:x="1497" fg:w="1"/><text x="88.1021%" y="143.50"></text></g><g><title>libc++abi.dylib`DYLD-STUB$$malloc (1 samples, 0.06%)</title><rect x="87.8521%" y="117" width="0.0587%" height="15" fill="rgb(205,123,3)" fg:x="1497" fg:w="1"/><text x="88.1021%" y="127.50"></text></g><g><title>mwpf`HEkkDual::solve (9 samples, 0.53%)</title><rect x="87.4413%" y="213" width="0.5282%" height="15" fill="rgb(205,97,47)" fg:x="1490" fg:w="9"/><text x="87.6913%" y="223.50"></text></g><g><title>mwpf`HEkkDual::solvePhase2 (7 samples, 0.41%)</title><rect x="87.5587%" y="197" width="0.4108%" height="15" fill="rgb(247,152,14)" fg:x="1492" fg:w="7"/><text x="87.8087%" y="207.50"></text></g><g><title>mwpf`HEkkDual::rebuild (2 samples, 0.12%)</title><rect x="87.8521%" y="181" width="0.1174%" height="15" fill="rgb(248,195,53)" fg:x="1497" fg:w="2"/><text x="88.1021%" y="191.50"></text></g><g><title>mwpf`HEkk::rebuildRefactor (1 samples, 0.06%)</title><rect x="87.9108%" y="165" width="0.0587%" height="15" fill="rgb(226,201,16)" fg:x="1498" fg:w="1"/><text x="88.1608%" y="175.50"></text></g><g><title>mwpf`HEkk::factorSolveError (1 samples, 0.06%)</title><rect x="87.9108%" y="149" width="0.0587%" height="15" fill="rgb(205,98,0)" fg:x="1498" fg:w="1"/><text x="88.1608%" y="159.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (1 samples, 0.06%)</title><rect x="87.9108%" y="133" width="0.0587%" height="15" fill="rgb(214,191,48)" fg:x="1498" fg:w="1"/><text x="88.1608%" y="143.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (1 samples, 0.06%)</title><rect x="87.9108%" y="117" width="0.0587%" height="15" fill="rgb(237,112,39)" fg:x="1498" fg:w="1"/><text x="88.1608%" y="127.50"></text></g><g><title>mwpf`HEkk::solve (13 samples, 0.76%)</title><rect x="87.2653%" y="229" width="0.7629%" height="15" fill="rgb(247,203,27)" fg:x="1487" fg:w="13"/><text x="87.5153%" y="239.50"></text></g><g><title>mwpf`HEkkPrimal::solve (1 samples, 0.06%)</title><rect x="87.9695%" y="213" width="0.0587%" height="15" fill="rgb(235,124,28)" fg:x="1499" fg:w="1"/><text x="88.2195%" y="223.50"></text></g><g><title>mwpf`HEkkPrimal::solvePhase2 (1 samples, 0.06%)</title><rect x="87.9695%" y="197" width="0.0587%" height="15" fill="rgb(208,207,46)" fg:x="1499" fg:w="1"/><text x="88.2195%" y="207.50"></text></g><g><title>mwpf`HEkkPrimal::iterate (1 samples, 0.06%)</title><rect x="87.9695%" y="181" width="0.0587%" height="15" fill="rgb(234,176,4)" fg:x="1499" fg:w="1"/><text x="88.2195%" y="191.50"></text></g><g><title>mwpf`HEkkPrimal::chooseRow (1 samples, 0.06%)</title><rect x="87.9695%" y="165" width="0.0587%" height="15" fill="rgb(230,133,28)" fg:x="1499" fg:w="1"/><text x="88.2195%" y="175.50"></text></g><g><title>mwpf`Highs::callSolveLp(HighsLp&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (14 samples, 0.82%)</title><rect x="87.2653%" y="277" width="0.8216%" height="15" fill="rgb(211,137,40)" fg:x="1487" fg:w="14"/><text x="87.5153%" y="287.50"></text></g><g><title>mwpf`solveLp(HighsLpSolverObject&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (14 samples, 0.82%)</title><rect x="87.2653%" y="261" width="0.8216%" height="15" fill="rgb(254,35,13)" fg:x="1487" fg:w="14"/><text x="87.5153%" y="271.50"></text></g><g><title>mwpf`solveLpSimplex(HighsLpSolverObject&amp;) (14 samples, 0.82%)</title><rect x="87.2653%" y="245" width="0.8216%" height="15" fill="rgb(225,49,51)" fg:x="1487" fg:w="14"/><text x="87.5153%" y="255.50"></text></g><g><title>mwpf`considerScaling(HighsOptions const&amp;, HighsLp&amp;) (1 samples, 0.06%)</title><rect x="88.0282%" y="229" width="0.0587%" height="15" fill="rgb(251,10,15)" fg:x="1500" fg:w="1"/><text x="88.2782%" y="239.50"></text></g><g><title>mwpf`HighsSparseMatrix::range (1 samples, 0.06%)</title><rect x="88.0282%" y="213" width="0.0587%" height="15" fill="rgb(228,207,15)" fg:x="1500" fg:w="1"/><text x="88.2782%" y="223.50"></text></g><g><title>libsystem_m.dylib`frexp (2 samples, 0.12%)</title><rect x="88.0869%" y="213" width="0.1174%" height="15" fill="rgb(241,99,19)" fg:x="1501" fg:w="2"/><text x="88.3369%" y="223.50"></text></g><g><title>mwpf`HighsHashHelpers::sparse_combine (2 samples, 0.12%)</title><rect x="88.2042%" y="213" width="0.1174%" height="15" fill="rgb(207,104,49)" fg:x="1503" fg:w="2"/><text x="88.4542%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="88.4977%" y="197" width="0.0587%" height="15" fill="rgb(234,99,18)" fg:x="1508" fg:w="1"/><text x="88.7477%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="88.4977%" y="181" width="0.0587%" height="15" fill="rgb(213,191,49)" fg:x="1508" fg:w="1"/><text x="88.7477%" y="191.50"></text></g><g><title>mwpf`HighsLinearSumBounds::remove (1 samples, 0.06%)</title><rect x="88.5563%" y="197" width="0.0587%" height="15" fill="rgb(210,226,19)" fg:x="1509" fg:w="1"/><text x="88.8063%" y="207.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSliceInOrder&gt;::iterator::operator++ (1 samples, 0.06%)</title><rect x="88.6150%" y="197" width="0.0587%" height="15" fill="rgb(229,97,18)" fg:x="1510" fg:w="1"/><text x="88.8650%" y="207.50"></text></g><g><title>mwpf`presolve::HPresolve::detectParallelRowsAndCols (7 samples, 0.41%)</title><rect x="88.3216%" y="213" width="0.4108%" height="15" fill="rgb(211,167,15)" fg:x="1505" fg:w="7"/><text x="88.5716%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::unlink (1 samples, 0.06%)</title><rect x="88.6737%" y="197" width="0.0587%" height="15" fill="rgb(210,169,34)" fg:x="1511" fg:w="1"/><text x="88.9237%" y="207.50"></text></g><g><title>mwpf`HighsLinearSumBounds::getResidualSumLowerOrig (1 samples, 0.06%)</title><rect x="88.7324%" y="165" width="0.0587%" height="15" fill="rgb(241,121,31)" fg:x="1512" fg:w="1"/><text x="88.9824%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::fastPresolveLoop (2 samples, 0.12%)</title><rect x="88.7324%" y="213" width="0.1174%" height="15" fill="rgb(232,40,11)" fg:x="1512" fg:w="2"/><text x="88.9824%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::presolveChangedRows (2 samples, 0.12%)</title><rect x="88.7324%" y="197" width="0.1174%" height="15" fill="rgb(205,86,26)" fg:x="1512" fg:w="2"/><text x="88.9824%" y="207.50"></text></g><g><title>mwpf`presolve::HPresolve::rowPresolve (2 samples, 0.12%)</title><rect x="88.7324%" y="181" width="0.1174%" height="15" fill="rgb(231,126,28)" fg:x="1512" fg:w="2"/><text x="88.9824%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::updateColImpliedBounds (1 samples, 0.06%)</title><rect x="88.7911%" y="165" width="0.0587%" height="15" fill="rgb(219,221,18)" fg:x="1513" fg:w="1"/><text x="89.0411%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::findNonzero (2 samples, 0.12%)</title><rect x="88.8498%" y="213" width="0.1174%" height="15" fill="rgb(211,40,0)" fg:x="1514" fg:w="2"/><text x="89.0998%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::fromCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (1 samples, 0.06%)</title><rect x="88.9671%" y="213" width="0.0587%" height="15" fill="rgb(239,85,43)" fg:x="1516" fg:w="1"/><text x="89.2171%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::link (1 samples, 0.06%)</title><rect x="88.9671%" y="197" width="0.0587%" height="15" fill="rgb(231,55,21)" fg:x="1516" fg:w="1"/><text x="89.2171%" y="207.50"></text></g><g><title>mwpf`presolve::HPresolve::initialRowAndColPresolve (1 samples, 0.06%)</title><rect x="89.0258%" y="213" width="0.0587%" height="15" fill="rgb(225,184,43)" fg:x="1517" fg:w="1"/><text x="89.2758%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::rowPresolve (1 samples, 0.06%)</title><rect x="89.0258%" y="197" width="0.0587%" height="15" fill="rgb(251,158,41)" fg:x="1517" fg:w="1"/><text x="89.2758%" y="207.50"></text></g><g><title>mwpf`presolve::HPresolve::updateColImpliedBounds (1 samples, 0.06%)</title><rect x="89.0258%" y="181" width="0.0587%" height="15" fill="rgb(234,159,37)" fg:x="1517" fg:w="1"/><text x="89.2758%" y="191.50"></text></g><g><title>mwpf`HighsLinearSumBounds::updatedImplVarLower (1 samples, 0.06%)</title><rect x="89.0258%" y="165" width="0.0587%" height="15" fill="rgb(216,204,22)" fg:x="1517" fg:w="1"/><text x="89.2758%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::run (18 samples, 1.06%)</title><rect x="88.0869%" y="245" width="1.0563%" height="15" fill="rgb(214,17,3)" fg:x="1501" fg:w="18"/><text x="88.3369%" y="255.50"></text></g><g><title>mwpf`presolve::HPresolve::presolve (18 samples, 1.06%)</title><rect x="88.0869%" y="229" width="1.0563%" height="15" fill="rgb(212,111,17)" fg:x="1501" fg:w="18"/><text x="88.3369%" y="239.50"></text></g><g><title>mwpf`presolve::HPresolve::toCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator (1 samples, 0.06%)</title><rect x="89.0845%" y="213" width="0.0587%" height="15" fill="rgb(221,157,24)" fg:x="1518" fg:w="1"/><text x="89.3345%" y="223.50"></text></g><g><title>mwpf`HighsLinearSumBounds::add (1 samples, 0.06%)</title><rect x="89.1432%" y="213" width="0.0587%" height="15" fill="rgb(252,16,13)" fg:x="1519" fg:w="1"/><text x="89.3932%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::setInput (2 samples, 0.12%)</title><rect x="89.1432%" y="245" width="0.1174%" height="15" fill="rgb(221,62,2)" fg:x="1519" fg:w="2"/><text x="89.3932%" y="255.50"></text></g><g><title>mwpf`presolve::HPresolve::fromCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (2 samples, 0.12%)</title><rect x="89.1432%" y="229" width="0.1174%" height="15" fill="rgb(247,87,22)" fg:x="1519" fg:w="2"/><text x="89.3932%" y="239.50"></text></g><g><title>mwpf`presolve::HPresolve::link (1 samples, 0.06%)</title><rect x="89.2019%" y="213" width="0.0587%" height="15" fill="rgb(215,73,9)" fg:x="1520" fg:w="1"/><text x="89.4519%" y="223.50"></text></g><g><title>mwpf`highs::Model::solve (35 samples, 2.05%)</title><rect x="87.2653%" y="309" width="2.0540%" height="15" fill="rgb(207,175,33)" fg:x="1487" fg:w="35"/><text x="87.5153%" y="319.50">m..</text></g><g><title>mwpf`Highs::run (35 samples, 2.05%)</title><rect x="87.2653%" y="293" width="2.0540%" height="15" fill="rgb(243,129,54)" fg:x="1487" fg:w="35"/><text x="87.5153%" y="303.50">m..</text></g><g><title>mwpf`Highs::runPresolve (21 samples, 1.23%)</title><rect x="88.0869%" y="277" width="1.2324%" height="15" fill="rgb(227,119,45)" fg:x="1501" fg:w="21"/><text x="88.3369%" y="287.50"></text></g><g><title>mwpf`PresolveComponent::run (21 samples, 1.23%)</title><rect x="88.0869%" y="261" width="1.2324%" height="15" fill="rgb(205,109,36)" fg:x="1501" fg:w="21"/><text x="88.3369%" y="271.50"></text></g><g><title>mwpf`presolve::HPresolve::~HPresolve (1 samples, 0.06%)</title><rect x="89.2606%" y="245" width="0.0587%" height="15" fill="rgb(205,6,39)" fg:x="1521" fg:w="1"/><text x="89.5106%" y="255.50"></text></g><g><title>mwpf`HighsLinearSumBounds::~HighsLinearSumBounds (1 samples, 0.06%)</title><rect x="89.2606%" y="229" width="0.0587%" height="15" fill="rgb(221,32,16)" fg:x="1521" fg:w="1"/><text x="89.5106%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.06%)</title><rect x="89.2606%" y="213" width="0.0587%" height="15" fill="rgb(228,144,50)" fg:x="1521" fg:w="1"/><text x="89.5106%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.06%)</title><rect x="89.2606%" y="197" width="0.0587%" height="15" fill="rgb(229,201,53)" fg:x="1521" fg:w="1"/><text x="89.5106%" y="207.50"></text></g><g><title>mwpf`highs::Problem&lt;MATRIX&gt;::try_optimise (1 samples, 0.06%)</title><rect x="89.3192%" y="309" width="0.0587%" height="15" fill="rgb(249,153,27)" fg:x="1522" fg:w="1"/><text x="89.5692%" y="319.50"></text></g><g><title>mwpf`Highs_create (1 samples, 0.06%)</title><rect x="89.3192%" y="293" width="0.0587%" height="15" fill="rgb(227,106,25)" fg:x="1522" fg:w="1"/><text x="89.5692%" y="303.50"></text></g><g><title>mwpf`Highs::Highs (1 samples, 0.06%)</title><rect x="89.3192%" y="277" width="0.0587%" height="15" fill="rgb(230,65,29)" fg:x="1522" fg:w="1"/><text x="89.5692%" y="287.50"></text></g><g><title>mwpf`HighsOptions::initRecords (1 samples, 0.06%)</title><rect x="89.3192%" y="261" width="0.0587%" height="15" fill="rgb(221,57,46)" fg:x="1522" fg:w="1"/><text x="89.5692%" y="271.50"></text></g><g><title>mwpf`OptionRecordDouble::OptionRecordDouble(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1 samples, 0.06%)</title><rect x="89.3192%" y="245" width="0.0587%" height="15" fill="rgb(229,161,17)" fg:x="1522" fg:w="1"/><text x="89.5692%" y="255.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;&amp; std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__assign_no_alias&lt;true&gt; (1 samples, 0.06%)</title><rect x="89.3192%" y="229" width="0.0587%" height="15" fill="rgb(222,213,11)" fg:x="1522" fg:w="1"/><text x="89.5692%" y="239.50"></text></g><g><title>libc++.1.dylib`std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;::__grow_by_and_replace (1 samples, 0.06%)</title><rect x="89.3192%" y="213" width="0.0587%" height="15" fill="rgb(235,35,13)" fg:x="1522" fg:w="1"/><text x="89.5692%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="89.3192%" y="197" width="0.0587%" height="15" fill="rgb(233,158,34)" fg:x="1522" fg:w="1"/><text x="89.5692%" y="207.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="89.3779%" y="293" width="0.0587%" height="15" fill="rgb(215,151,48)" fg:x="1523" fg:w="1"/><text x="89.6279%" y="303.50"></text></g><g><title>mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize (99 samples, 5.81%)</title><rect x="83.6854%" y="325" width="5.8099%" height="15" fill="rgb(229,84,14)" fg:x="1426" fg:w="99"/><text x="83.9354%" y="335.50">mwpf`mw..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::iter::traits::collect::FromIterator&lt;(&lt;K as weak_table::traits::WeakElement&gt;::Strong,V)&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::from_iter (2 samples, 0.12%)</title><rect x="89.3779%" y="309" width="0.1174%" height="15" fill="rgb(229,68,14)" fg:x="1523" fg:w="2"/><text x="89.6279%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="89.4366%" y="293" width="0.0587%" height="15" fill="rgb(243,106,26)" fg:x="1524" fg:w="1"/><text x="89.6866%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (1 samples, 0.06%)</title><rect x="89.4366%" y="277" width="0.0587%" height="15" fill="rgb(206,45,38)" fg:x="1524" fg:w="1"/><text x="89.6866%" y="287.50"></text></g><g><title>mwpf`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.94%)</title><rect x="89.4953%" y="309" width="0.9390%" height="15" fill="rgb(226,6,15)" fg:x="1525" fg:w="16"/><text x="89.7453%" y="319.50"></text></g><g><title>mwpf`hashbrown::rustc_entry::_&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (14 samples, 0.82%)</title><rect x="89.6127%" y="293" width="0.8216%" height="15" fill="rgb(232,22,54)" fg:x="1527" fg:w="14"/><text x="89.8627%" y="303.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="90.3756%" y="277" width="0.0587%" height="15" fill="rgb(229,222,32)" fg:x="1540" fg:w="1"/><text x="90.6256%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="90.4343%" y="309" width="0.0587%" height="15" fill="rgb(228,62,29)" fg:x="1541" fg:w="1"/><text x="90.6843%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune (384 samples, 22.54%)</title><rect x="68.0164%" y="341" width="22.5352%" height="15" fill="rgb(251,103,34)" fg:x="1159" fg:w="384"/><text x="68.2664%" y="351.50">mwpf`&lt;mwpf::primal_module_serial::Pr..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::iter::traits::collect::FromIterator&lt;(&lt;K as weak_table::traits::WeakElement&gt;::Strong,V)&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::from_iter (18 samples, 1.06%)</title><rect x="89.4953%" y="325" width="1.0563%" height="15" fill="rgb(233,12,30)" fg:x="1525" fg:w="18"/><text x="89.7453%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.06%)</title><rect x="90.4930%" y="309" width="0.0587%" height="15" fill="rgb(238,52,0)" fg:x="1542" fg:w="1"/><text x="90.7430%" y="319.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (1 samples, 0.06%)</title><rect x="90.4930%" y="293" width="0.0587%" height="15" fill="rgb(223,98,5)" fg:x="1542" fg:w="1"/><text x="90.7430%" y="303.50"></text></g><g><title>mwpf`mwpf::dual_module::DualModuleImpl::get_conflicts_tune (1 samples, 0.06%)</title><rect x="90.5516%" y="341" width="0.0587%" height="15" fill="rgb(228,75,37)" fg:x="1543" fg:w="1"/><text x="90.8016%" y="351.50"></text></g><g><title>mwpf`alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (1 samples, 0.06%)</title><rect x="90.5516%" y="325" width="0.0587%" height="15" fill="rgb(205,115,49)" fg:x="1543" fg:w="1"/><text x="90.8016%" y="335.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.06%)</title><rect x="90.5516%" y="309" width="0.0587%" height="15" fill="rgb(250,154,43)" fg:x="1543" fg:w="1"/><text x="90.8016%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (2 samples, 0.12%)</title><rect x="90.6690%" y="293" width="0.1174%" height="15" fill="rgb(226,43,29)" fg:x="1545" fg:w="2"/><text x="90.9190%" y="303.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="90.7864%" y="277" width="0.0587%" height="15" fill="rgb(249,228,39)" fg:x="1547" fg:w="1"/><text x="91.0364%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.06%)</title><rect x="90.8451%" y="277" width="0.0587%" height="15" fill="rgb(216,79,43)" fg:x="1548" fg:w="1"/><text x="91.0951%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="90.8451%" y="261" width="0.0587%" height="15" fill="rgb(228,95,12)" fg:x="1548" fg:w="1"/><text x="91.0951%" y="271.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="90.9038%" y="277" width="0.0587%" height="15" fill="rgb(249,221,15)" fg:x="1549" fg:w="1"/><text x="91.1538%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyInnerMap&lt;K,V&gt;&gt;::steal (1 samples, 0.06%)</title><rect x="90.9038%" y="261" width="0.0587%" height="15" fill="rgb(233,34,13)" fg:x="1549" fg:w="1"/><text x="91.1538%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (6 samples, 0.35%)</title><rect x="90.6690%" y="309" width="0.3521%" height="15" fill="rgb(214,103,39)" fg:x="1545" fg:w="6"/><text x="90.9190%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (4 samples, 0.23%)</title><rect x="90.7864%" y="293" width="0.2347%" height="15" fill="rgb(251,126,39)" fg:x="1547" fg:w="4"/><text x="91.0364%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="90.9624%" y="277" width="0.0587%" height="15" fill="rgb(214,216,36)" fg:x="1550" fg:w="1"/><text x="91.2124%" y="287.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="91.0211%" y="309" width="0.0587%" height="15" fill="rgb(220,221,8)" fg:x="1551" fg:w="1"/><text x="91.2711%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (8 samples, 0.47%)</title><rect x="90.6690%" y="325" width="0.4695%" height="15" fill="rgb(240,216,3)" fg:x="1545" fg:w="8"/><text x="90.9190%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (1 samples, 0.06%)</title><rect x="91.0798%" y="309" width="0.0587%" height="15" fill="rgb(232,218,17)" fg:x="1552" fg:w="1"/><text x="91.3298%" y="319.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (1 samples, 0.06%)</title><rect x="91.0798%" y="293" width="0.0587%" height="15" fill="rgb(229,163,45)" fg:x="1552" fg:w="1"/><text x="91.3298%" y="303.50"></text></g><g><title>mwpf`&lt;weak_table::weak_key_hash_map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.12%)</title><rect x="91.1385%" y="325" width="0.1174%" height="15" fill="rgb(231,110,42)" fg:x="1553" fg:w="2"/><text x="91.3885%" y="335.50"></text></g><g><title>mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::append (1 samples, 0.06%)</title><rect x="91.2559%" y="325" width="0.0587%" height="15" fill="rgb(208,170,48)" fg:x="1555" fg:w="1"/><text x="91.5059%" y="335.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::append_from_sorted_iters (1 samples, 0.06%)</title><rect x="91.2559%" y="309" width="0.0587%" height="15" fill="rgb(239,116,25)" fg:x="1555" fg:w="1"/><text x="91.5059%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::append::MergeIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="91.2559%" y="293" width="0.0587%" height="15" fill="rgb(219,200,50)" fg:x="1555" fg:w="1"/><text x="91.5059%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.06%)</title><rect x="91.2559%" y="277" width="0.0587%" height="15" fill="rgb(245,200,0)" fg:x="1555" fg:w="1"/><text x="91.5059%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_tune (405 samples, 23.77%)</title><rect x="67.6056%" y="357" width="23.7676%" height="15" fill="rgb(245,119,33)" fg:x="1152" fg:w="405"/><text x="67.8556%" y="367.50">mwpf`&lt;mwpf::primal_module_serial::Prim..</text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::union (13 samples, 0.76%)</title><rect x="90.6103%" y="341" width="0.7629%" height="15" fill="rgb(231,125,12)" fg:x="1544" fg:w="13"/><text x="90.8603%" y="351.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (1 samples, 0.06%)</title><rect x="91.3146%" y="325" width="0.0587%" height="15" fill="rgb(216,96,41)" fg:x="1556" fg:w="1"/><text x="91.5646%" y="335.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::calculate_cluster_affinity (2 samples, 0.12%)</title><rect x="91.4906%" y="341" width="0.1174%" height="15" fill="rgb(248,43,45)" fg:x="1559" fg:w="2"/><text x="91.7406%" y="351.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::update_sorted_clusters_aff (6 samples, 0.35%)</title><rect x="91.3732%" y="357" width="0.3521%" height="15" fill="rgb(217,222,7)" fg:x="1557" fg:w="6"/><text x="91.6232%" y="367.50"></text></g><g><title>mwpf`alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (2 samples, 0.12%)</title><rect x="91.6080%" y="341" width="0.1174%" height="15" fill="rgb(233,28,6)" fg:x="1561" fg:w="2"/><text x="91.8580%" y="351.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.06%)</title><rect x="91.6667%" y="325" width="0.0587%" height="15" fill="rgb(231,218,15)" fg:x="1562" fg:w="1"/><text x="91.9167%" y="335.50"></text></g><g><title>mwpf`DYLD-STUB$$free (1 samples, 0.06%)</title><rect x="91.7254%" y="357" width="0.0587%" height="15" fill="rgb(226,171,48)" fg:x="1563" fg:w="1"/><text x="91.9754%" y="367.50"></text></g><g><title>mwpf`__rust_alloc (1 samples, 0.06%)</title><rect x="91.7840%" y="357" width="0.0587%" height="15" fill="rgb(235,201,9)" fg:x="1564" fg:w="1"/><text x="92.0340%" y="367.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.06%)</title><rect x="91.8427%" y="357" width="0.0587%" height="15" fill="rgb(217,80,15)" fg:x="1565" fg:w="1"/><text x="92.0927%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="91.8427%" y="341" width="0.0587%" height="15" fill="rgb(219,152,8)" fg:x="1565" fg:w="1"/><text x="92.0927%" y="351.50"></text></g><g><title>mwpf`alloc::collections::btree::set::BTreeSet&lt;T,A&gt;::insert (1 samples, 0.06%)</title><rect x="91.9014%" y="357" width="0.0587%" height="15" fill="rgb(243,107,38)" fg:x="1566" fg:w="1"/><text x="92.1514%" y="367.50"></text></g><g><title>mwpf`mwpf::dual_module::DualModuleImpl::get_conflicts_tune (2 samples, 0.12%)</title><rect x="91.9601%" y="357" width="0.1174%" height="15" fill="rgb(231,17,5)" fg:x="1567" fg:w="2"/><text x="92.2101%" y="367.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.12%)</title><rect x="91.9601%" y="341" width="0.1174%" height="15" fill="rgb(209,25,54)" fg:x="1567" fg:w="2"/><text x="92.2101%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.06%)</title><rect x="92.1362%" y="341" width="0.0587%" height="15" fill="rgb(219,0,2)" fg:x="1570" fg:w="1"/><text x="92.3862%" y="351.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::Obstacle as core::hash::Hash&gt;::hash (1 samples, 0.06%)</title><rect x="92.6056%" y="309" width="0.0587%" height="15" fill="rgb(246,9,5)" fg:x="1578" fg:w="1"/><text x="92.8556%" y="319.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="92.7230%" y="293" width="0.0587%" height="15" fill="rgb(226,159,4)" fg:x="1580" fg:w="1"/><text x="92.9730%" y="303.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (47 samples, 2.76%)</title><rect x="92.6643%" y="309" width="2.7582%" height="15" fill="rgb(219,175,34)" fg:x="1579" fg:w="47"/><text x="92.9143%" y="319.50">mw..</text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (45 samples, 2.64%)</title><rect x="92.7817%" y="293" width="2.6408%" height="15" fill="rgb(236,10,46)" fg:x="1581" fg:w="45"/><text x="93.0317%" y="303.50">mw..</text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node (58 samples, 3.40%)</title><rect x="92.1948%" y="341" width="3.4038%" height="15" fill="rgb(240,211,16)" fg:x="1571" fg:w="58"/><text x="92.4448%" y="351.50">mwp..</text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (53 samples, 3.11%)</title><rect x="92.4883%" y="325" width="3.1103%" height="15" fill="rgb(205,3,43)" fg:x="1576" fg:w="53"/><text x="92.7383%" y="335.50">mwp..</text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_unique (3 samples, 0.18%)</title><rect x="95.4225%" y="309" width="0.1761%" height="15" fill="rgb(245,7,22)" fg:x="1626" fg:w="3"/><text x="95.6725%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (1 samples, 0.06%)</title><rect x="96.3615%" y="309" width="0.0587%" height="15" fill="rgb(239,132,32)" fg:x="1642" fg:w="1"/><text x="96.6115%" y="319.50"></text></g><g><title>mwpf`core::hash::Hasher::write_usize (5 samples, 0.29%)</title><rect x="96.4202%" y="293" width="0.2934%" height="15" fill="rgb(228,202,34)" fg:x="1643" fg:w="5"/><text x="96.6702%" y="303.50"></text></g><g><title>mwpf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (34 samples, 2.00%)</title><rect x="95.5986%" y="341" width="1.9953%" height="15" fill="rgb(254,200,22)" fg:x="1629" fg:w="34"/><text x="95.8486%" y="351.50">m..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (29 samples, 1.70%)</title><rect x="95.8920%" y="325" width="1.7019%" height="15" fill="rgb(219,10,39)" fg:x="1634" fg:w="29"/><text x="96.1420%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::get (20 samples, 1.17%)</title><rect x="96.4202%" y="309" width="1.1737%" height="15" fill="rgb(226,210,39)" fg:x="1643" fg:w="20"/><text x="96.6702%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::find_bucket (15 samples, 0.88%)</title><rect x="96.7136%" y="293" width="0.8803%" height="15" fill="rgb(208,219,16)" fg:x="1648" fg:w="15"/><text x="96.9636%" y="303.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="97.7113%" y="309" width="0.0587%" height="15" fill="rgb(216,158,51)" fg:x="1665" fg:w="1"/><text x="97.9613%" y="319.50"></text></g><g><title>mwpf`mwpf::decoding_hypergraph::DecodingHyperGraph::set_syndrome (4 samples, 0.23%)</title><rect x="97.5939%" y="341" width="0.2347%" height="15" fill="rgb(233,14,44)" fg:x="1663" fg:w="4"/><text x="97.8439%" y="351.50"></text></g><g><title>mwpf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.23%)</title><rect x="97.5939%" y="325" width="0.2347%" height="15" fill="rgb(237,97,39)" fg:x="1663" fg:w="4"/><text x="97.8439%" y="335.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="97.7700%" y="309" width="0.0587%" height="15" fill="rgb(218,198,43)" fg:x="1666" fg:w="1"/><text x="98.0200%" y="319.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_raw (5 samples, 0.29%)</title><rect x="98.0047%" y="325" width="0.2934%" height="15" fill="rgb(231,104,20)" fg:x="1670" fg:w="5"/><text x="98.2547%" y="335.50"></text></g><g><title>mwpf`&lt;alloc::boxed::Box&lt;[T],A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.29%)</title><rect x="98.0047%" y="309" width="0.2934%" height="15" fill="rgb(254,36,13)" fg:x="1670" fg:w="5"/><text x="98.2547%" y="319.50"></text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (1 samples, 0.06%)</title><rect x="98.2981%" y="325" width="0.0587%" height="15" fill="rgb(248,14,50)" fg:x="1675" fg:w="1"/><text x="98.5481%" y="335.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="98.3568%" y="309" width="0.0587%" height="15" fill="rgb(217,107,29)" fg:x="1676" fg:w="1"/><text x="98.6068%" y="319.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (13 samples, 0.76%)</title><rect x="97.8286%" y="341" width="0.7629%" height="15" fill="rgb(251,169,33)" fg:x="1667" fg:w="13"/><text x="98.0786%" y="351.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (4 samples, 0.23%)</title><rect x="98.3568%" y="325" width="0.2347%" height="15" fill="rgb(217,108,32)" fg:x="1676" fg:w="4"/><text x="98.6068%" y="335.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::entry_no_grow (3 samples, 0.18%)</title><rect x="98.4155%" y="309" width="0.1761%" height="15" fill="rgb(219,66,42)" fg:x="1677" fg:w="3"/><text x="98.6655%" y="319.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::InnerEntry&lt;K,V&gt;::bucket_status (3 samples, 0.18%)</title><rect x="98.4155%" y="293" width="0.1761%" height="15" fill="rgb(206,180,7)" fg:x="1677" fg:w="3"/><text x="98.6655%" y="303.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl core::cmp::PartialEq&lt;weak_table::WeakKeyHashMap&lt;K,V1,S1&gt;&gt; for weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::eq (1 samples, 0.06%)</title><rect x="98.5915%" y="341" width="0.0587%" height="15" fill="rgb(208,226,31)" fg:x="1680" fg:w="1"/><text x="98.8415%" y="351.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::load (113 samples, 6.63%)</title><rect x="92.0775%" y="357" width="6.6315%" height="15" fill="rgb(218,26,49)" fg:x="1569" fg:w="113"/><text x="92.3275%" y="367.50">mwpf`mwpf..</text></g><g><title>mwpf`weak_table::weak_key_hash_map::_&lt;impl weak_table::WeakKeyHashMap&lt;K,V,S&gt;&gt;::insert (1 samples, 0.06%)</title><rect x="98.6502%" y="341" width="0.0587%" height="15" fill="rgb(233,197,48)" fg:x="1681" fg:w="1"/><text x="98.9002%" y="351.50"></text></g><g><title>mwpf`weak_table::weak_key_hash_map::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.06%)</title><rect x="98.6502%" y="325" width="0.0587%" height="15" fill="rgb(252,181,51)" fg:x="1681" fg:w="1"/><text x="98.9002%" y="335.50"></text></g><g><title>mwpf`mwpf::dual_module_pq::Obstacle::is_valid (1 samples, 0.06%)</title><rect x="98.7089%" y="357" width="0.0587%" height="15" fill="rgb(253,90,19)" fg:x="1682" fg:w="1"/><text x="98.9589%" y="367.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (1 samples, 0.06%)</title><rect x="98.7676%" y="357" width="0.0587%" height="15" fill="rgb(215,171,30)" fg:x="1683" fg:w="1"/><text x="99.0176%" y="367.50"></text></g><g><title>mwpf`&lt;mwpf::mwpf_solver::SolverSerialPlugins as mwpf::mwpf_solver::PrimalDualSolver&gt;::solve_visualizer (1,628 samples, 95.54%)</title><rect x="3.3451%" y="389" width="95.5399%" height="15" fill="rgb(214,222,9)" fg:x="57" fg:w="1628"/><text x="3.5951%" y="399.50">mwpf`&lt;mwpf::mwpf_solver::SolverSerialPlugins as mwpf::mwpf_solver::PrimalDualSolver&gt;::solve_visualizer</text></g><g><title>mwpf`mwpf::primal_module::PrimalModuleImpl::solve_visualizer (1,627 samples, 95.48%)</title><rect x="3.4038%" y="373" width="95.4812%" height="15" fill="rgb(223,3,22)" fg:x="58" fg:w="1627"/><text x="3.6538%" y="383.50">mwpf`mwpf::primal_module::PrimalModuleImpl::solve_visualizer</text></g><g><title>mwpf`weak_table::util::new_boxed_option_slice (1 samples, 0.06%)</title><rect x="98.8263%" y="357" width="0.0587%" height="15" fill="rgb(225,196,46)" fg:x="1684" fg:w="1"/><text x="99.0763%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.12%)</title><rect x="99.0610%" y="325" width="0.1174%" height="15" fill="rgb(209,110,37)" fg:x="1688" fg:w="2"/><text x="99.3110%" y="335.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcRwLock&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::clear (6 samples, 0.35%)</title><rect x="98.8850%" y="389" width="0.3521%" height="15" fill="rgb(249,89,12)" fg:x="1685" fg:w="6"/><text x="99.1350%" y="399.50"></text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::clear (6 samples, 0.35%)</title><rect x="98.8850%" y="373" width="0.3521%" height="15" fill="rgb(226,27,33)" fg:x="1685" fg:w="6"/><text x="99.1350%" y="383.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.35%)</title><rect x="98.8850%" y="357" width="0.3521%" height="15" fill="rgb(213,82,22)" fg:x="1685" fg:w="6"/><text x="99.1350%" y="367.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::invalid_subgraph::InvalidSubgraph&gt; (6 samples, 0.35%)</title><rect x="98.8850%" y="341" width="0.3521%" height="15" fill="rgb(248,140,0)" fg:x="1685" fg:w="6"/><text x="99.1350%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.06%)</title><rect x="99.1784%" y="325" width="0.0587%" height="15" fill="rgb(228,106,3)" fg:x="1690" fg:w="1"/><text x="99.4284%" y="335.50"></text></g><g><title>mwpf`mwpf::example_codes::ExampleCode::generate_random_errors (3 samples, 0.18%)</title><rect x="99.2371%" y="389" width="0.1761%" height="15" fill="rgb(209,23,37)" fg:x="1691" fg:w="3"/><text x="99.4871%" y="399.50"></text></g><g><title>mwpf`mwpf::example_codes::ExampleCode::get_syndrome (2 samples, 0.12%)</title><rect x="99.2958%" y="373" width="0.1174%" height="15" fill="rgb(241,93,50)" fg:x="1692" fg:w="2"/><text x="99.5458%" y="383.50"></text></g><g><title>mwpf`core::fmt::float::_&lt;impl core::fmt::LowerExp for f64&gt;::fmt (1 samples, 0.06%)</title><rect x="99.4131%" y="357" width="0.0587%" height="15" fill="rgb(253,46,43)" fg:x="1694" fg:w="1"/><text x="99.6631%" y="367.50"></text></g><g><title>mwpf`mwpf::util::BenchmarkProfiler::brief (2 samples, 0.12%)</title><rect x="99.4131%" y="389" width="0.1174%" height="15" fill="rgb(226,206,43)" fg:x="1694" fg:w="2"/><text x="99.6631%" y="399.50"></text></g><g><title>mwpf`alloc::fmt::format::format_inner (2 samples, 0.12%)</title><rect x="99.4131%" y="373" width="0.1174%" height="15" fill="rgb(217,54,7)" fg:x="1694" fg:w="2"/><text x="99.6631%" y="383.50"></text></g><g><title>mwpf`core::fmt::write (1 samples, 0.06%)</title><rect x="99.4718%" y="357" width="0.0587%" height="15" fill="rgb(223,5,52)" fg:x="1695" fg:w="1"/><text x="99.7218%" y="367.50"></text></g><g><title>mwpf`core::fmt::float::float_to_exponential_common_exact (1 samples, 0.06%)</title><rect x="99.4718%" y="341" width="0.0587%" height="15" fill="rgb(206,52,46)" fg:x="1695" fg:w="1"/><text x="99.7218%" y="351.50"></text></g><g><title>mwpf`core::num::flt2dec::strategy::grisu::format_exact_opt (1 samples, 0.06%)</title><rect x="99.4718%" y="325" width="0.0587%" height="15" fill="rgb(253,136,11)" fg:x="1695" fg:w="1"/><text x="99.7218%" y="335.50"></text></g><g><title>mwpf`mwpf::util::BenchmarkProfilerEntry::record_event (1 samples, 0.06%)</title><rect x="99.5305%" y="389" width="0.0587%" height="15" fill="rgb(208,106,33)" fg:x="1696" fg:w="1"/><text x="99.7805%" y="399.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.06%)</title><rect x="99.5305%" y="373" width="0.0587%" height="15" fill="rgb(206,54,4)" fg:x="1696" fg:w="1"/><text x="99.7805%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.06%)</title><rect x="99.5305%" y="357" width="0.0587%" height="15" fill="rgb(213,3,15)" fg:x="1696" fg:w="1"/><text x="99.7805%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.06%)</title><rect x="99.5892%" y="373" width="0.0587%" height="15" fill="rgb(252,211,39)" fg:x="1697" fg:w="1"/><text x="99.8392%" y="383.50"></text></g><g><title>mwpf`&lt;std::io::stdio::Stderr as std::io::Write&gt;::write_all (1 samples, 0.06%)</title><rect x="99.6479%" y="373" width="0.0587%" height="15" fill="rgb(223,6,36)" fg:x="1698" fg:w="1"/><text x="99.8979%" y="383.50"></text></g><g><title>mwpf`&lt;&amp;std::io::stdio::Stderr as std::io::Write&gt;::write_all (1 samples, 0.06%)</title><rect x="99.6479%" y="357" width="0.0587%" height="15" fill="rgb(252,169,45)" fg:x="1698" fg:w="1"/><text x="99.8979%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`write (1 samples, 0.06%)</title><rect x="99.6479%" y="341" width="0.0587%" height="15" fill="rgb(212,48,26)" fg:x="1698" fg:w="1"/><text x="99.8979%" y="351.50"></text></g><g><title>mwpf`alloc::fmt::format::format_inner (1 samples, 0.06%)</title><rect x="99.7066%" y="373" width="0.0587%" height="15" fill="rgb(251,102,48)" fg:x="1699" fg:w="1"/><text x="99.9566%" y="383.50"></text></g><g><title>mwpf`core::fmt::write (1 samples, 0.06%)</title><rect x="99.7066%" y="357" width="0.0587%" height="15" fill="rgb(243,208,16)" fg:x="1699" fg:w="1"/><text x="99.9566%" y="367.50"></text></g><g><title>mwpf`core::fmt::float::float_to_decimal_common_exact (1 samples, 0.06%)</title><rect x="99.7066%" y="341" width="0.0587%" height="15" fill="rgb(219,96,24)" fg:x="1699" fg:w="1"/><text x="99.9566%" y="351.50"></text></g><g><title>mwpf`core::num::flt2dec::strategy::dragon::format_exact (1 samples, 0.06%)</title><rect x="99.7066%" y="325" width="0.0587%" height="15" fill="rgb(219,33,29)" fg:x="1699" fg:w="1"/><text x="99.9566%" y="335.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.06%)</title><rect x="99.7653%" y="373" width="0.0587%" height="15" fill="rgb(223,176,5)" fg:x="1700" fg:w="1"/><text x="100.0153%" y="383.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="99.7653%" y="357" width="0.0587%" height="15" fill="rgb(228,140,14)" fg:x="1700" fg:w="1"/><text x="100.0153%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.06%)</title><rect x="99.7653%" y="341" width="0.0587%" height="15" fill="rgb(217,179,31)" fg:x="1700" fg:w="1"/><text x="100.0153%" y="351.50"></text></g><g><title>dyld`start (1,703 samples, 99.94%)</title><rect x="0.0000%" y="517" width="99.9413%" height="15" fill="rgb(230,9,30)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="527.50">dyld`start</text></g><g><title>mwpf`main (1,703 samples, 99.94%)</title><rect x="0.0000%" y="501" width="99.9413%" height="15" fill="rgb(230,136,20)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="511.50">mwpf`main</text></g><g><title>mwpf`std::rt::lang_start (1,703 samples, 99.94%)</title><rect x="0.0000%" y="485" width="99.9413%" height="15" fill="rgb(215,210,22)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="495.50">mwpf`std::rt::lang_start</text></g><g><title>mwpf`std::rt::lang_start_internal (1,703 samples, 99.94%)</title><rect x="0.0000%" y="469" width="99.9413%" height="15" fill="rgb(218,43,5)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="479.50">mwpf`std::rt::lang_start_internal</text></g><g><title>mwpf`std::rt::lang_start::_{{closure}} (1,703 samples, 99.94%)</title><rect x="0.0000%" y="453" width="99.9413%" height="15" fill="rgb(216,11,5)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="463.50">mwpf`std::rt::lang_start::_{{closure}}</text></g><g><title>mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace (1,703 samples, 99.94%)</title><rect x="0.0000%" y="437" width="99.9413%" height="15" fill="rgb(209,82,29)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="447.50">mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mwpf`mwpf::main (1,703 samples, 99.94%)</title><rect x="0.0000%" y="421" width="99.9413%" height="15" fill="rgb(244,115,12)" fg:x="0" fg:w="1703"/><text x="0.2500%" y="431.50">mwpf`mwpf::main</text></g><g><title>mwpf`mwpf::cli::Cli::run (1,702 samples, 99.88%)</title><rect x="0.0587%" y="405" width="99.8826%" height="15" fill="rgb(222,82,18)" fg:x="1" fg:w="1702"/><text x="0.3087%" y="415.50">mwpf`mwpf::cli::Cli::run</text></g><g><title>mwpf`pbr::pb::ProgressBar&lt;T&gt;::draw (6 samples, 0.35%)</title><rect x="99.5892%" y="389" width="0.3521%" height="15" fill="rgb(249,227,8)" fg:x="1697" fg:w="6"/><text x="99.8392%" y="399.50"></text></g><g><title>mwpf`pbr::tty::unix::terminal_size (2 samples, 0.12%)</title><rect x="99.8239%" y="373" width="0.1174%" height="15" fill="rgb(253,141,45)" fg:x="1701" fg:w="2"/><text x="100.0739%" y="383.50"></text></g><g><title>libsystem_c.dylib`isatty (2 samples, 0.12%)</title><rect x="99.8239%" y="357" width="0.1174%" height="15" fill="rgb(234,184,4)" fg:x="1701" fg:w="2"/><text x="100.0739%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__ioctl (2 samples, 0.12%)</title><rect x="99.8239%" y="341" width="0.1174%" height="15" fill="rgb(218,194,23)" fg:x="1701" fg:w="2"/><text x="100.0739%" y="351.50"></text></g><g><title>all (1,704 samples, 100%)</title><rect x="0.0000%" y="533" width="100.0000%" height="15" fill="rgb(235,66,41)" fg:x="0" fg:w="1704"/><text x="0.2500%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.06%)</title><rect x="99.9413%" y="517" width="0.0587%" height="15" fill="rgb(245,217,1)" fg:x="1703" fg:w="1"/><text x="100.1913%" y="527.50"></text></g></svg></svg>