<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="21424"><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (13 samples, 0.06%)</title><rect x="0.0233%" y="261" width="0.0607%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="13"/><text x="0.2733%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.03%)</title><rect x="0.2054%" y="229" width="0.0327%" height="15" fill="rgb(217,0,24)" fg:x="44" fg:w="7"/><text x="0.4554%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (5 samples, 0.02%)</title><rect x="0.2381%" y="229" width="0.0233%" height="15" fill="rgb(221,193,54)" fg:x="51" fg:w="5"/><text x="0.4881%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (5 samples, 0.02%)</title><rect x="0.2381%" y="213" width="0.0233%" height="15" fill="rgb(248,212,6)" fg:x="51" fg:w="5"/><text x="0.4881%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.02%)</title><rect x="0.2381%" y="197" width="0.0233%" height="15" fill="rgb(208,68,35)" fg:x="51" fg:w="5"/><text x="0.4881%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::mwpf_solver::SolverSerialJointSingleHair as mwpf::mwpf_solver::PrimalDualSolver&gt;::clear (57 samples, 0.27%)</title><rect x="0.0093%" y="341" width="0.2661%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="57"/><text x="0.2593%" y="351.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::clear (56 samples, 0.26%)</title><rect x="0.0140%" y="325" width="0.2614%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="56"/><text x="0.2640%" y="335.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (56 samples, 0.26%)</title><rect x="0.0140%" y="309" width="0.2614%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="56"/><text x="0.2640%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.26%)</title><rect x="0.0187%" y="293" width="0.2567%" height="15" fill="rgb(218,30,26)" fg:x="4" fg:w="55"/><text x="0.2687%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.26%)</title><rect x="0.0187%" y="277" width="0.2567%" height="15" fill="rgb(220,122,19)" fg:x="4" fg:w="55"/><text x="0.2687%" y="287.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (41 samples, 0.19%)</title><rect x="0.0840%" y="261" width="0.1914%" height="15" fill="rgb(250,228,42)" fg:x="18" fg:w="41"/><text x="0.3340%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (35 samples, 0.16%)</title><rect x="0.1120%" y="245" width="0.1634%" height="15" fill="rgb(240,193,28)" fg:x="24" fg:w="35"/><text x="0.3620%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.01%)</title><rect x="0.2614%" y="229" width="0.0140%" height="15" fill="rgb(216,20,37)" fg:x="56" fg:w="3"/><text x="0.5114%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::compute_maximum_update_length (16 samples, 0.07%)</title><rect x="0.2801%" y="309" width="0.0747%" height="15" fill="rgb(206,188,39)" fg:x="60" fg:w="16"/><text x="0.5301%" y="319.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::pop_event (16 samples, 0.07%)</title><rect x="0.2801%" y="293" width="0.0747%" height="15" fill="rgb(217,207,13)" fg:x="60" fg:w="16"/><text x="0.5301%" y="303.50"></text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (16 samples, 0.07%)</title><rect x="0.2801%" y="277" width="0.0747%" height="15" fill="rgb(231,73,38)" fg:x="60" fg:w="16"/><text x="0.5301%" y="287.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (79 samples, 0.37%)</title><rect x="0.3687%" y="261" width="0.3687%" height="15" fill="rgb(225,20,46)" fg:x="79" fg:w="79"/><text x="0.6187%" y="271.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (79 samples, 0.37%)</title><rect x="0.3687%" y="245" width="0.3687%" height="15" fill="rgb(210,31,41)" fg:x="79" fg:w="79"/><text x="0.6187%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::set_grow_rate (81 samples, 0.38%)</title><rect x="0.3641%" y="293" width="0.3781%" height="15" fill="rgb(221,200,47)" fg:x="78" fg:w="81"/><text x="0.6141%" y="303.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (80 samples, 0.37%)</title><rect x="0.3687%" y="277" width="0.3734%" height="15" fill="rgb(226,26,5)" fg:x="79" fg:w="80"/><text x="0.6187%" y="287.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (20 samples, 0.09%)</title><rect x="0.7468%" y="245" width="0.0934%" height="15" fill="rgb(249,33,26)" fg:x="160" fg:w="20"/><text x="0.9968%" y="255.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (20 samples, 0.09%)</title><rect x="0.7468%" y="229" width="0.0934%" height="15" fill="rgb(235,183,28)" fg:x="160" fg:w="20"/><text x="0.9968%" y="239.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_or_create_node (23 samples, 0.11%)</title><rect x="0.7422%" y="293" width="0.1074%" height="15" fill="rgb(221,5,38)" fg:x="159" fg:w="23"/><text x="0.9922%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node (23 samples, 0.11%)</title><rect x="0.7422%" y="277" width="0.1074%" height="15" fill="rgb(247,18,42)" fg:x="159" fg:w="23"/><text x="0.9922%" y="287.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (22 samples, 0.10%)</title><rect x="0.7468%" y="261" width="0.1027%" height="15" fill="rgb(241,131,45)" fg:x="160" fg:w="22"/><text x="0.9968%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (3 samples, 0.01%)</title><rect x="0.8495%" y="261" width="0.0140%" height="15" fill="rgb(249,31,29)" fg:x="182" fg:w="3"/><text x="1.0995%" y="271.50"></text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (3 samples, 0.01%)</title><rect x="0.8495%" y="245" width="0.0140%" height="15" fill="rgb(225,111,53)" fg:x="182" fg:w="3"/><text x="1.0995%" y="255.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (4 samples, 0.02%)</title><rect x="0.8495%" y="293" width="0.0187%" height="15" fill="rgb(238,160,17)" fg:x="182" fg:w="4"/><text x="1.0995%" y="303.50"></text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (4 samples, 0.02%)</title><rect x="0.8495%" y="277" width="0.0187%" height="15" fill="rgb(214,148,48)" fg:x="182" fg:w="4"/><text x="1.0995%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve (112 samples, 0.52%)</title><rect x="0.3594%" y="309" width="0.5228%" height="15" fill="rgb(232,36,49)" fg:x="77" fg:w="112"/><text x="0.6094%" y="319.50"></text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::union (3 samples, 0.01%)</title><rect x="0.8682%" y="293" width="0.0140%" height="15" fill="rgb(209,103,24)" fg:x="186" fg:w="3"/><text x="1.1182%" y="303.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (13 samples, 0.06%)</title><rect x="0.9149%" y="245" width="0.0607%" height="15" fill="rgb(229,88,8)" fg:x="196" fg:w="13"/><text x="1.1649%" y="255.50"></text></g><g><title>mwpf`mwpf::matrix::hair::HairView&lt;M&gt;::new (3 samples, 0.01%)</title><rect x="0.9755%" y="245" width="0.0140%" height="15" fill="rgb(213,181,19)" fg:x="209" fg:w="3"/><text x="1.2255%" y="255.50"></text></g><g><title>mwpf`mwpf::matrix::interface::MatrixTail::set_tail_edges (3 samples, 0.01%)</title><rect x="0.9755%" y="229" width="0.0140%" height="15" fill="rgb(254,191,54)" fg:x="209" fg:w="3"/><text x="1.2255%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_single_hair::PluginSingleHair as mwpf::plugin::PluginImpl&gt;::find_relaxers (35 samples, 0.16%)</title><rect x="0.9009%" y="261" width="0.1634%" height="15" fill="rgb(241,83,37)" fg:x="193" fg:w="35"/><text x="1.1509%" y="271.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (16 samples, 0.07%)</title><rect x="0.9895%" y="245" width="0.0747%" height="15" fill="rgb(233,36,39)" fg:x="212" fg:w="16"/><text x="1.2395%" y="255.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (39 samples, 0.18%)</title><rect x="0.8869%" y="293" width="0.1820%" height="15" fill="rgb(226,3,54)" fg:x="190" fg:w="39"/><text x="1.1369%" y="303.50"></text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (36 samples, 0.17%)</title><rect x="0.9009%" y="277" width="0.1680%" height="15" fill="rgb(245,192,40)" fg:x="193" fg:w="36"/><text x="1.1509%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune (45 samples, 0.21%)</title><rect x="0.8822%" y="309" width="0.2100%" height="15" fill="rgb(238,167,29)" fg:x="189" fg:w="45"/><text x="1.1322%" y="319.50"></text></g><g><title>mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize (5 samples, 0.02%)</title><rect x="1.0689%" y="293" width="0.0233%" height="15" fill="rgb(232,182,51)" fg:x="229" fg:w="5"/><text x="1.3189%" y="303.50"></text></g><g><title>mwpf`highs::Model::solve (4 samples, 0.02%)</title><rect x="1.0736%" y="277" width="0.0187%" height="15" fill="rgb(231,60,39)" fg:x="230" fg:w="4"/><text x="1.3236%" y="287.50"></text></g><g><title>mwpf`Highs::run (4 samples, 0.02%)</title><rect x="1.0736%" y="261" width="0.0187%" height="15" fill="rgb(208,69,12)" fg:x="230" fg:w="4"/><text x="1.3236%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (12 samples, 0.06%)</title><rect x="1.1109%" y="261" width="0.0560%" height="15" fill="rgb(235,93,37)" fg:x="238" fg:w="12"/><text x="1.3609%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.06%)</title><rect x="1.1109%" y="245" width="0.0560%" height="15" fill="rgb(213,116,39)" fg:x="238" fg:w="12"/><text x="1.3609%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (41 samples, 0.19%)</title><rect x="1.1669%" y="261" width="0.1914%" height="15" fill="rgb(222,207,29)" fg:x="250" fg:w="41"/><text x="1.4169%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.02%)</title><rect x="1.7504%" y="245" width="0.0233%" height="15" fill="rgb(206,96,30)" fg:x="375" fg:w="5"/><text x="2.0004%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.02%)</title><rect x="1.7504%" y="229" width="0.0233%" height="15" fill="rgb(218,138,4)" fg:x="375" fg:w="5"/><text x="2.0004%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.08%)</title><rect x="1.7737%" y="245" width="0.0794%" height="15" fill="rgb(250,191,14)" fg:x="380" fg:w="17"/><text x="2.0237%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.02%)</title><rect x="4.6863%" y="229" width="0.0233%" height="15" fill="rgb(239,60,40)" fg:x="1004" fg:w="5"/><text x="4.9363%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (111 samples, 0.52%)</title><rect x="4.7097%" y="229" width="0.5181%" height="15" fill="rgb(206,27,48)" fg:x="1009" fg:w="111"/><text x="4.9597%" y="239.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (99 samples, 0.46%)</title><rect x="5.2278%" y="229" width="0.4621%" height="15" fill="rgb(225,35,8)" fg:x="1120" fg:w="99"/><text x="5.4778%" y="239.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (84 samples, 0.39%)</title><rect x="5.6899%" y="229" width="0.3921%" height="15" fill="rgb(250,213,24)" fg:x="1219" fg:w="84"/><text x="5.9399%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (37 samples, 0.17%)</title><rect x="7.1275%" y="213" width="0.1727%" height="15" fill="rgb(247,123,22)" fg:x="1527" fg:w="37"/><text x="7.3775%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (36 samples, 0.17%)</title><rect x="7.1322%" y="197" width="0.1680%" height="15" fill="rgb(231,138,38)" fg:x="1528" fg:w="36"/><text x="7.3822%" y="207.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (218 samples, 1.02%)</title><rect x="7.3002%" y="213" width="1.0176%" height="15" fill="rgb(231,145,46)" fg:x="1564" fg:w="218"/><text x="7.5502%" y="223.50"></text></g><g><title>mwpf`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,564 samples, 7.30%)</title><rect x="1.8531%" y="245" width="7.3002%" height="15" fill="rgb(251,118,11)" fg:x="397" fg:w="1564"/><text x="2.1031%" y="255.50">mwpf`&lt;iter..</text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (658 samples, 3.07%)</title><rect x="6.0820%" y="229" width="3.0713%" height="15" fill="rgb(217,147,25)" fg:x="1303" fg:w="658"/><text x="6.3320%" y="239.50">mwp..</text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (179 samples, 0.84%)</title><rect x="8.3178%" y="213" width="0.8355%" height="15" fill="rgb(247,81,37)" fg:x="1782" fg:w="179"/><text x="8.5678%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.04%)</title><rect x="9.1533%" y="181" width="0.0373%" height="15" fill="rgb(209,12,38)" fg:x="1961" fg:w="8"/><text x="9.4033%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.03%)</title><rect x="9.1580%" y="165" width="0.0327%" height="15" fill="rgb(227,1,9)" fg:x="1962" fg:w="7"/><text x="9.4080%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.03%)</title><rect x="9.1580%" y="149" width="0.0327%" height="15" fill="rgb(248,47,43)" fg:x="1962" fg:w="7"/><text x="9.4080%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (39 samples, 0.18%)</title><rect x="9.1533%" y="213" width="0.1820%" height="15" fill="rgb(221,10,30)" fg:x="1961" fg:w="39"/><text x="9.4033%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (39 samples, 0.18%)</title><rect x="9.1533%" y="197" width="0.1820%" height="15" fill="rgb(210,229,1)" fg:x="1961" fg:w="39"/><text x="9.4033%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (31 samples, 0.14%)</title><rect x="9.1906%" y="181" width="0.1447%" height="15" fill="rgb(222,148,37)" fg:x="1969" fg:w="31"/><text x="9.4406%" y="191.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (40 samples, 0.19%)</title><rect x="9.1533%" y="245" width="0.1867%" height="15" fill="rgb(234,67,33)" fg:x="1961" fg:w="40"/><text x="9.4033%" y="255.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (40 samples, 0.19%)</title><rect x="9.1533%" y="229" width="0.1867%" height="15" fill="rgb(247,98,35)" fg:x="1961" fg:w="40"/><text x="9.4033%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,779 samples, 8.30%)</title><rect x="1.3583%" y="261" width="8.3038%" height="15" fill="rgb(247,138,52)" fg:x="291" fg:w="1779"/><text x="1.6083%" y="271.50">mwpf`&lt;alloc:..</text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (69 samples, 0.32%)</title><rect x="9.3400%" y="245" width="0.3221%" height="15" fill="rgb(213,79,30)" fg:x="2001" fg:w="69"/><text x="9.5900%" y="255.50"></text></g><g><title>mwpf`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (118 samples, 0.55%)</title><rect x="9.6667%" y="261" width="0.5508%" height="15" fill="rgb(246,177,23)" fg:x="2071" fg:w="118"/><text x="9.9167%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (76 samples, 0.35%)</title><rect x="10.2175%" y="261" width="0.3547%" height="15" fill="rgb(230,62,27)" fg:x="2189" fg:w="76"/><text x="10.4675%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (6 samples, 0.03%)</title><rect x="10.5442%" y="245" width="0.0280%" height="15" fill="rgb(216,154,8)" fg:x="2259" fg:w="6"/><text x="10.7942%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.03%)</title><rect x="10.5442%" y="229" width="0.0280%" height="15" fill="rgb(244,35,45)" fg:x="2259" fg:w="6"/><text x="10.7942%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2,811 samples, 13.12%)</title><rect x="1.1109%" y="277" width="13.1208%" height="15" fill="rgb(251,115,12)" fg:x="238" fg:w="2811"/><text x="1.3609%" y="287.50">mwpf`&lt;alloc::collect..</text></g><g><title>mwpf`core::slice::sort::merge_sort (784 samples, 3.66%)</title><rect x="10.5723%" y="261" width="3.6594%" height="15" fill="rgb(240,54,50)" fg:x="2265" fg:w="784"/><text x="10.8223%" y="271.50">mwpf..</text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.06%)</title><rect x="14.2317%" y="277" width="0.0607%" height="15" fill="rgb(233,84,52)" fg:x="3049" fg:w="13"/><text x="14.4817%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node_tune (5 samples, 0.02%)</title><rect x="14.3064%" y="261" width="0.0233%" height="15" fill="rgb(207,117,47)" fg:x="3065" fg:w="5"/><text x="14.5564%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="14.3157%" y="245" width="0.0140%" height="15" fill="rgb(249,43,39)" fg:x="3067" fg:w="3"/><text x="14.5657%" y="255.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_or_create_node_tune (6 samples, 0.03%)</title><rect x="14.3064%" y="277" width="0.0280%" height="15" fill="rgb(209,38,44)" fg:x="3065" fg:w="6"/><text x="14.5564%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.01%)</title><rect x="14.3811%" y="213" width="0.0140%" height="15" fill="rgb(236,212,23)" fg:x="3081" fg:w="3"/><text x="14.6311%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.01%)</title><rect x="14.3951%" y="213" width="0.0140%" height="15" fill="rgb(242,79,21)" fg:x="3084" fg:w="3"/><text x="14.6451%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.01%)</title><rect x="14.3951%" y="197" width="0.0140%" height="15" fill="rgb(211,96,35)" fg:x="3084" fg:w="3"/><text x="14.6451%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.01%)</title><rect x="14.4091%" y="213" width="0.0140%" height="15" fill="rgb(253,215,40)" fg:x="3087" fg:w="3"/><text x="14.6591%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.09%)</title><rect x="14.3344%" y="245" width="0.0934%" height="15" fill="rgb(211,81,21)" fg:x="3071" fg:w="20"/><text x="14.5844%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 samples, 0.08%)</title><rect x="14.3437%" y="229" width="0.0840%" height="15" fill="rgb(208,190,38)" fg:x="3073" fg:w="18"/><text x="14.5937%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.13%)</title><rect x="14.3344%" y="261" width="0.1260%" height="15" fill="rgb(235,213,38)" fg:x="3071" fg:w="27"/><text x="14.5844%" y="271.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.02%)</title><rect x="14.4371%" y="245" width="0.0233%" height="15" fill="rgb(237,122,38)" fg:x="3093" fg:w="5"/><text x="14.6871%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.02%)</title><rect x="14.4417%" y="229" width="0.0187%" height="15" fill="rgb(244,218,35)" fg:x="3094" fg:w="4"/><text x="14.6917%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.01%)</title><rect x="14.4884%" y="197" width="0.0140%" height="15" fill="rgb(240,68,47)" fg:x="3104" fg:w="3"/><text x="14.7384%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.07%)</title><rect x="14.4884%" y="213" width="0.0747%" height="15" fill="rgb(210,16,53)" fg:x="3104" fg:w="16"/><text x="14.7384%" y="223.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (13 samples, 0.06%)</title><rect x="14.5024%" y="197" width="0.0607%" height="15" fill="rgb(235,124,12)" fg:x="3107" fg:w="13"/><text x="14.7524%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (10 samples, 0.05%)</title><rect x="14.5164%" y="181" width="0.0467%" height="15" fill="rgb(224,169,11)" fg:x="3110" fg:w="10"/><text x="14.7664%" y="191.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer_forest::RelaxerForest&gt; (25 samples, 0.12%)</title><rect x="14.4651%" y="261" width="0.1167%" height="15" fill="rgb(250,166,2)" fg:x="3099" fg:w="25"/><text x="14.7151%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.12%)</title><rect x="14.4651%" y="245" width="0.1167%" height="15" fill="rgb(242,216,29)" fg:x="3099" fg:w="25"/><text x="14.7151%" y="255.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (23 samples, 0.11%)</title><rect x="14.4744%" y="229" width="0.1074%" height="15" fill="rgb(230,116,27)" fg:x="3101" fg:w="23"/><text x="14.7244%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.02%)</title><rect x="14.5631%" y="213" width="0.0187%" height="15" fill="rgb(228,99,48)" fg:x="3120" fg:w="4"/><text x="14.8131%" y="223.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (9 samples, 0.04%)</title><rect x="14.5818%" y="261" width="0.0420%" height="15" fill="rgb(253,11,6)" fg:x="3124" fg:w="9"/><text x="14.8318%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (7 samples, 0.03%)</title><rect x="14.5911%" y="245" width="0.0327%" height="15" fill="rgb(247,143,39)" fg:x="3126" fg:w="7"/><text x="14.8411%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="14.6238%" y="245" width="0.0187%" height="15" fill="rgb(236,97,10)" fg:x="3133" fg:w="4"/><text x="14.8738%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (7 samples, 0.03%)</title><rect x="14.6425%" y="245" width="0.0327%" height="15" fill="rgb(233,208,19)" fg:x="3137" fg:w="7"/><text x="14.8925%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.01%)</title><rect x="15.1839%" y="213" width="0.0140%" height="15" fill="rgb(216,164,2)" fg:x="3253" fg:w="3"/><text x="15.4339%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (8 samples, 0.04%)</title><rect x="15.1652%" y="229" width="0.0373%" height="15" fill="rgb(220,129,5)" fg:x="3249" fg:w="8"/><text x="15.4152%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.05%)</title><rect x="15.2026%" y="229" width="0.0467%" height="15" fill="rgb(242,17,10)" fg:x="3257" fg:w="10"/><text x="15.4526%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (7 samples, 0.03%)</title><rect x="15.2166%" y="213" width="0.0327%" height="15" fill="rgb(242,107,0)" fg:x="3260" fg:w="7"/><text x="15.4666%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::convert::From&lt;[(K,V) (3 samples, 0.01%)</title><rect x="15.2493%" y="229" width="0.0140%" height="15" fill="rgb(251,28,31)" fg:x="3267" fg:w="3"/><text x="15.4993%" y="239.50"></text></g><g><title> N]&gt;&gt;::from (3 samples, 0.01%)</title><rect x="15.2493%" y="213" width="0.0140%" height="15" fill="rgb(233,223,10)" fg:x="3267" fg:w="3"/><text x="15.4993%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.13%)</title><rect x="15.2633%" y="229" width="0.1307%" height="15" fill="rgb(215,21,27)" fg:x="3270" fg:w="28"/><text x="15.5133%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (5 samples, 0.02%)</title><rect x="15.4126%" y="213" width="0.0233%" height="15" fill="rgb(232,23,21)" fg:x="3302" fg:w="5"/><text x="15.6626%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (22 samples, 0.10%)</title><rect x="15.3940%" y="229" width="0.1027%" height="15" fill="rgb(244,5,23)" fg:x="3298" fg:w="22"/><text x="15.6440%" y="239.50"></text></g><g><title>mwpf`core::slice::sort::merge_sort (13 samples, 0.06%)</title><rect x="15.4360%" y="213" width="0.0607%" height="15" fill="rgb(226,81,46)" fg:x="3307" fg:w="13"/><text x="15.6860%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="15.4966%" y="229" width="0.0140%" height="15" fill="rgb(247,70,30)" fg:x="3320" fg:w="3"/><text x="15.7466%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (9 samples, 0.04%)</title><rect x="15.5106%" y="229" width="0.0420%" height="15" fill="rgb(212,68,19)" fg:x="3323" fg:w="9"/><text x="15.7606%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (5 samples, 0.02%)</title><rect x="15.5527%" y="229" width="0.0233%" height="15" fill="rgb(240,187,13)" fg:x="3332" fg:w="5"/><text x="15.8027%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (40 samples, 0.19%)</title><rect x="15.5760%" y="229" width="0.1867%" height="15" fill="rgb(223,113,26)" fg:x="3337" fg:w="40"/><text x="15.8260%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::remove::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::remove_kv_tracking (7 samples, 0.03%)</title><rect x="15.7627%" y="229" width="0.0327%" height="15" fill="rgb(206,192,2)" fg:x="3377" fg:w="7"/><text x="16.0127%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (6 samples, 0.03%)</title><rect x="15.7674%" y="213" width="0.0280%" height="15" fill="rgb(241,108,4)" fg:x="3378" fg:w="6"/><text x="16.0174%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.01%)</title><rect x="20.1596%" y="213" width="0.0140%" height="15" fill="rgb(247,173,49)" fg:x="4319" fg:w="3"/><text x="20.4096%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.03%)</title><rect x="20.1736%" y="213" width="0.0327%" height="15" fill="rgb(224,114,35)" fg:x="4322" fg:w="7"/><text x="20.4236%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (86 samples, 0.40%)</title><rect x="20.2063%" y="213" width="0.4014%" height="15" fill="rgb(245,159,27)" fg:x="4329" fg:w="86"/><text x="20.4563%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.02%)</title><rect x="20.6731%" y="197" width="0.0233%" height="15" fill="rgb(245,172,44)" fg:x="4429" fg:w="5"/><text x="20.9231%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.03%)</title><rect x="20.8551%" y="181" width="0.0280%" height="15" fill="rgb(236,23,11)" fg:x="4468" fg:w="6"/><text x="21.1051%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.30%)</title><rect x="20.6077%" y="213" width="0.3034%" height="15" fill="rgb(205,117,38)" fg:x="4415" fg:w="65"/><text x="20.8577%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (45 samples, 0.21%)</title><rect x="20.7011%" y="197" width="0.2100%" height="15" fill="rgb(237,72,25)" fg:x="4435" fg:w="45"/><text x="20.9511%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.03%)</title><rect x="20.8831%" y="181" width="0.0280%" height="15" fill="rgb(244,70,9)" fg:x="4474" fg:w="6"/><text x="21.1331%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="20.9111%" y="213" width="0.0140%" height="15" fill="rgb(217,125,39)" fg:x="4480" fg:w="3"/><text x="21.1611%" y="223.50"></text></g><g><title>mwpf`DYLD-STUB$$memmove (7 samples, 0.03%)</title><rect x="20.9251%" y="213" width="0.0327%" height="15" fill="rgb(235,36,10)" fg:x="4483" fg:w="7"/><text x="21.1751%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (10 samples, 0.05%)</title><rect x="20.9671%" y="213" width="0.0467%" height="15" fill="rgb(251,123,47)" fg:x="4492" fg:w="10"/><text x="21.2171%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (35 samples, 0.16%)</title><rect x="21.0138%" y="213" width="0.1634%" height="15" fill="rgb(221,13,13)" fg:x="4502" fg:w="35"/><text x="21.2638%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (6 samples, 0.03%)</title><rect x="21.1492%" y="197" width="0.0280%" height="15" fill="rgb(238,131,9)" fg:x="4531" fg:w="6"/><text x="21.3992%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (5 samples, 0.02%)</title><rect x="21.1538%" y="181" width="0.0233%" height="15" fill="rgb(211,50,8)" fg:x="4532" fg:w="5"/><text x="21.4038%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (6 samples, 0.03%)</title><rect x="21.2192%" y="165" width="0.0280%" height="15" fill="rgb(245,182,24)" fg:x="4546" fg:w="6"/><text x="21.4692%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.01%)</title><rect x="21.2332%" y="149" width="0.0140%" height="15" fill="rgb(242,14,37)" fg:x="4549" fg:w="3"/><text x="21.4832%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.02%)</title><rect x="21.2939%" y="149" width="0.0187%" height="15" fill="rgb(246,228,12)" fg:x="4562" fg:w="4"/><text x="21.5439%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (5 samples, 0.02%)</title><rect x="21.3125%" y="149" width="0.0233%" height="15" fill="rgb(213,55,15)" fg:x="4566" fg:w="5"/><text x="21.5625%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.02%)</title><rect x="21.3172%" y="133" width="0.0187%" height="15" fill="rgb(209,9,3)" fg:x="4567" fg:w="4"/><text x="21.5672%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.05%)</title><rect x="21.3359%" y="149" width="0.0467%" height="15" fill="rgb(230,59,30)" fg:x="4571" fg:w="10"/><text x="21.5859%" y="159.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (77 samples, 0.36%)</title><rect x="21.1772%" y="197" width="0.3594%" height="15" fill="rgb(209,121,21)" fg:x="4537" fg:w="77"/><text x="21.4272%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (73 samples, 0.34%)</title><rect x="21.1959%" y="181" width="0.3407%" height="15" fill="rgb(220,109,13)" fg:x="4541" fg:w="73"/><text x="21.4459%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (61 samples, 0.28%)</title><rect x="21.2519%" y="165" width="0.2847%" height="15" fill="rgb(232,18,1)" fg:x="4553" fg:w="61"/><text x="21.5019%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (33 samples, 0.15%)</title><rect x="21.3826%" y="149" width="0.1540%" height="15" fill="rgb(215,41,42)" fg:x="4581" fg:w="33"/><text x="21.6326%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (18 samples, 0.08%)</title><rect x="21.4526%" y="133" width="0.0840%" height="15" fill="rgb(224,123,36)" fg:x="4596" fg:w="18"/><text x="21.7026%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (10 samples, 0.05%)</title><rect x="21.4899%" y="117" width="0.0467%" height="15" fill="rgb(240,125,3)" fg:x="4604" fg:w="10"/><text x="21.7399%" y="127.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.03%)</title><rect x="21.5366%" y="197" width="0.0327%" height="15" fill="rgb(205,98,50)" fg:x="4614" fg:w="7"/><text x="21.7866%" y="207.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (35 samples, 0.16%)</title><rect x="21.5693%" y="197" width="0.1634%" height="15" fill="rgb(205,185,37)" fg:x="4621" fg:w="35"/><text x="21.8193%" y="207.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (1,293 samples, 6.04%)</title><rect x="15.7954%" y="229" width="6.0353%" height="15" fill="rgb(238,207,15)" fg:x="3384" fg:w="1293"/><text x="16.0454%" y="239.50">mwpf`mwp..</text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_raw (140 samples, 0.65%)</title><rect x="21.1772%" y="213" width="0.6535%" height="15" fill="rgb(213,199,42)" fg:x="4537" fg:w="140"/><text x="21.4272%" y="223.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::update_hash (21 samples, 0.10%)</title><rect x="21.7326%" y="197" width="0.0980%" height="15" fill="rgb(235,201,11)" fg:x="4656" fg:w="21"/><text x="21.9826%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.09%)</title><rect x="21.7373%" y="181" width="0.0934%" height="15" fill="rgb(207,46,11)" fg:x="4657" fg:w="20"/><text x="21.9873%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (32 samples, 0.15%)</title><rect x="22.4655%" y="197" width="0.1494%" height="15" fill="rgb(241,35,35)" fg:x="4813" fg:w="32"/><text x="22.7155%" y="207.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (160 samples, 0.75%)</title><rect x="21.8867%" y="213" width="0.7468%" height="15" fill="rgb(243,32,47)" fg:x="4689" fg:w="160"/><text x="22.1367%" y="223.50"></text></g><g><title>mwpf`mwpf::matrix::row::ParityRow::xor_two_rows (4 samples, 0.02%)</title><rect x="22.6148%" y="197" width="0.0187%" height="15" fill="rgb(247,202,23)" fg:x="4845" fg:w="4"/><text x="22.8648%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="23.9498%" y="181" width="0.0140%" height="15" fill="rgb(219,102,11)" fg:x="5131" fg:w="3"/><text x="24.1998%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.02%)</title><rect x="24.0198%" y="165" width="0.0187%" height="15" fill="rgb(243,110,44)" fg:x="5146" fg:w="4"/><text x="24.2698%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (32 samples, 0.15%)</title><rect x="23.9124%" y="197" width="0.1494%" height="15" fill="rgb(222,74,54)" fg:x="5123" fg:w="32"/><text x="24.1624%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (20 samples, 0.09%)</title><rect x="23.9684%" y="181" width="0.0934%" height="15" fill="rgb(216,99,12)" fg:x="5135" fg:w="20"/><text x="24.2184%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.02%)</title><rect x="24.0385%" y="165" width="0.0233%" height="15" fill="rgb(226,22,26)" fg:x="5150" fg:w="5"/><text x="24.2885%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.07%)</title><rect x="24.0618%" y="197" width="0.0653%" height="15" fill="rgb(217,163,10)" fg:x="5155" fg:w="14"/><text x="24.3118%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (6 samples, 0.03%)</title><rect x="24.1271%" y="197" width="0.0280%" height="15" fill="rgb(213,25,53)" fg:x="5169" fg:w="6"/><text x="24.3771%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.02%)</title><rect x="24.1832%" y="181" width="0.0187%" height="15" fill="rgb(252,105,26)" fg:x="5181" fg:w="4"/><text x="24.4332%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.01%)</title><rect x="24.2018%" y="181" width="0.0140%" height="15" fill="rgb(220,39,43)" fg:x="5185" fg:w="3"/><text x="24.4518%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (27 samples, 0.13%)</title><rect x="24.1552%" y="197" width="0.1260%" height="15" fill="rgb(229,68,48)" fg:x="5175" fg:w="27"/><text x="24.4052%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (11 samples, 0.05%)</title><rect x="24.2298%" y="181" width="0.0513%" height="15" fill="rgb(252,8,32)" fg:x="5191" fg:w="11"/><text x="24.4798%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.01%)</title><rect x="24.2672%" y="165" width="0.0140%" height="15" fill="rgb(223,20,43)" fg:x="5199" fg:w="3"/><text x="24.5172%" y="175.50"></text></g><g><title>mwpf`mwpf::matrix::hair::HairView&lt;M&gt;::new (537 samples, 2.51%)</title><rect x="21.8307%" y="229" width="2.5065%" height="15" fill="rgb(229,81,49)" fg:x="4677" fg:w="537"/><text x="22.0807%" y="239.50">mw..</text></g><g><title>mwpf`mwpf::matrix::interface::MatrixTail::set_tail_edges (365 samples, 1.70%)</title><rect x="22.6335%" y="213" width="1.7037%" height="15" fill="rgb(236,28,36)" fg:x="4849" fg:w="365"/><text x="22.8835%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (12 samples, 0.06%)</title><rect x="24.2812%" y="197" width="0.0560%" height="15" fill="rgb(249,185,26)" fg:x="5202" fg:w="12"/><text x="24.5312%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.02%)</title><rect x="30.8859%" y="213" width="0.0187%" height="15" fill="rgb(249,174,33)" fg:x="6617" fg:w="4"/><text x="31.1359%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.02%)</title><rect x="30.9046%" y="213" width="0.0233%" height="15" fill="rgb(233,201,37)" fg:x="6621" fg:w="5"/><text x="31.1546%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (18 samples, 0.08%)</title><rect x="30.9279%" y="213" width="0.0840%" height="15" fill="rgb(221,78,26)" fg:x="6626" fg:w="18"/><text x="31.1779%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 0.29%)</title><rect x="31.0119%" y="213" width="0.2894%" height="15" fill="rgb(250,127,30)" fg:x="6644" fg:w="62"/><text x="31.2619%" y="223.50"></text></g><g><title>mwpf`__rdl_alloc (3 samples, 0.01%)</title><rect x="31.3060%" y="213" width="0.0140%" height="15" fill="rgb(230,49,44)" fg:x="6707" fg:w="3"/><text x="31.5560%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (20 samples, 0.09%)</title><rect x="31.4507%" y="197" width="0.0934%" height="15" fill="rgb(229,67,23)" fg:x="6738" fg:w="20"/><text x="31.7007%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4 samples, 0.02%)</title><rect x="31.5627%" y="165" width="0.0187%" height="15" fill="rgb(249,83,47)" fg:x="6762" fg:w="4"/><text x="31.8127%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.05%)</title><rect x="31.5441%" y="197" width="0.0467%" height="15" fill="rgb(215,43,3)" fg:x="6758" fg:w="10"/><text x="31.7941%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.04%)</title><rect x="31.5487%" y="181" width="0.0420%" height="15" fill="rgb(238,154,13)" fg:x="6759" fg:w="9"/><text x="31.7987%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (67 samples, 0.31%)</title><rect x="31.3200%" y="213" width="0.3127%" height="15" fill="rgb(219,56,2)" fg:x="6710" fg:w="67"/><text x="31.5700%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.03%)</title><rect x="31.6047%" y="197" width="0.0280%" height="15" fill="rgb(233,0,4)" fg:x="6771" fg:w="6"/><text x="31.8547%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.02%)</title><rect x="31.6421%" y="197" width="0.0233%" height="15" fill="rgb(235,30,7)" fg:x="6779" fg:w="5"/><text x="31.8921%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.01%)</title><rect x="31.7214%" y="181" width="0.0140%" height="15" fill="rgb(250,79,13)" fg:x="6796" fg:w="3"/><text x="31.9714%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.01%)</title><rect x="31.7214%" y="165" width="0.0140%" height="15" fill="rgb(211,146,34)" fg:x="6796" fg:w="3"/><text x="31.9714%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (25 samples, 0.12%)</title><rect x="31.6327%" y="213" width="0.1167%" height="15" fill="rgb(228,22,38)" fg:x="6777" fg:w="25"/><text x="31.8827%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (15 samples, 0.07%)</title><rect x="31.6794%" y="197" width="0.0700%" height="15" fill="rgb(235,168,5)" fg:x="6787" fg:w="15"/><text x="31.9294%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="31.7354%" y="181" width="0.0140%" height="15" fill="rgb(221,155,16)" fg:x="6799" fg:w="3"/><text x="31.9854%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="31.7354%" y="165" width="0.0140%" height="15" fill="rgb(215,215,53)" fg:x="6799" fg:w="3"/><text x="31.9854%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (27 samples, 0.13%)</title><rect x="31.8988%" y="197" width="0.1260%" height="15" fill="rgb(223,4,10)" fg:x="6834" fg:w="27"/><text x="32.1488%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (17 samples, 0.08%)</title><rect x="31.9455%" y="181" width="0.0794%" height="15" fill="rgb(234,103,6)" fg:x="6844" fg:w="17"/><text x="32.1955%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (4 samples, 0.02%)</title><rect x="32.0342%" y="165" width="0.0187%" height="15" fill="rgb(227,97,0)" fg:x="6863" fg:w="4"/><text x="32.2842%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_single_hair::PluginSingleHair as mwpf::plugin::PluginImpl&gt;::find_relaxers (3,726 samples, 17.39%)</title><rect x="14.6751%" y="245" width="17.3917%" height="15" fill="rgb(234,150,53)" fg:x="3144" fg:w="3726"/><text x="14.9251%" y="255.50">mwpf`&lt;mwpf::plugin_single_h..</text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (1,656 samples, 7.73%)</title><rect x="24.3372%" y="229" width="7.7296%" height="15" fill="rgb(228,201,54)" fg:x="5214" fg:w="1656"/><text x="24.5872%" y="239.50">mwpf`mwpf::..</text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (68 samples, 0.32%)</title><rect x="31.7494%" y="213" width="0.3174%" height="15" fill="rgb(222,22,37)" fg:x="6802" fg:w="68"/><text x="31.9994%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.04%)</title><rect x="32.0248%" y="197" width="0.0420%" height="15" fill="rgb(237,53,32)" fg:x="6861" fg:w="9"/><text x="32.2748%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.03%)</title><rect x="32.0342%" y="181" width="0.0327%" height="15" fill="rgb(233,25,53)" fg:x="6863" fg:w="7"/><text x="32.2842%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="32.0528%" y="165" width="0.0140%" height="15" fill="rgb(210,40,34)" fg:x="6867" fg:w="3"/><text x="32.3028%" y="175.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete_ptr (17 samples, 0.08%)</title><rect x="32.0668%" y="213" width="0.0794%" height="15" fill="rgb(241,220,44)" fg:x="6870" fg:w="17"/><text x="32.3168%" y="223.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (17 samples, 0.08%)</title><rect x="32.0668%" y="197" width="0.0794%" height="15" fill="rgb(235,28,35)" fg:x="6870" fg:w="17"/><text x="32.3168%" y="207.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (3 samples, 0.01%)</title><rect x="32.1462%" y="213" width="0.0140%" height="15" fill="rgb(210,56,17)" fg:x="6887" fg:w="3"/><text x="32.3962%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (3 samples, 0.01%)</title><rect x="32.1462%" y="197" width="0.0140%" height="15" fill="rgb(224,130,29)" fg:x="6887" fg:w="3"/><text x="32.3962%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (44 samples, 0.21%)</title><rect x="32.0668%" y="245" width="0.2054%" height="15" fill="rgb(235,212,8)" fg:x="6870" fg:w="44"/><text x="32.3168%" y="255.50"></text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (44 samples, 0.21%)</title><rect x="32.0668%" y="229" width="0.2054%" height="15" fill="rgb(223,33,50)" fg:x="6870" fg:w="44"/><text x="32.3168%" y="239.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (24 samples, 0.11%)</title><rect x="32.1602%" y="213" width="0.1120%" height="15" fill="rgb(219,149,13)" fg:x="6890" fg:w="24"/><text x="32.4102%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.01%)</title><rect x="32.3049%" y="229" width="0.0140%" height="15" fill="rgb(250,156,29)" fg:x="6921" fg:w="3"/><text x="32.5549%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.02%)</title><rect x="32.3282%" y="197" width="0.0187%" height="15" fill="rgb(216,193,19)" fg:x="6926" fg:w="4"/><text x="32.5782%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="32.4029%" y="181" width="0.0140%" height="15" fill="rgb(216,135,14)" fg:x="6942" fg:w="3"/><text x="32.6529%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.02%)</title><rect x="32.5103%" y="165" width="0.0233%" height="15" fill="rgb(241,47,5)" fg:x="6965" fg:w="5"/><text x="32.7603%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.01%)</title><rect x="32.5336%" y="165" width="0.0140%" height="15" fill="rgb(233,42,35)" fg:x="6970" fg:w="3"/><text x="32.7836%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (3 samples, 0.01%)</title><rect x="32.5336%" y="149" width="0.0140%" height="15" fill="rgb(231,13,6)" fg:x="6970" fg:w="3"/><text x="32.7836%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.01%)</title><rect x="32.5336%" y="133" width="0.0140%" height="15" fill="rgb(207,181,40)" fg:x="6970" fg:w="3"/><text x="32.7836%" y="143.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.23%)</title><rect x="32.3282%" y="213" width="0.2334%" height="15" fill="rgb(254,173,49)" fg:x="6926" fg:w="50"/><text x="32.5782%" y="223.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (46 samples, 0.21%)</title><rect x="32.3469%" y="197" width="0.2147%" height="15" fill="rgb(221,1,38)" fg:x="6930" fg:w="46"/><text x="32.5969%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (31 samples, 0.14%)</title><rect x="32.4169%" y="181" width="0.1447%" height="15" fill="rgb(206,124,46)" fg:x="6945" fg:w="31"/><text x="32.6669%" y="191.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::add (74 samples, 0.35%)</title><rect x="32.2769%" y="245" width="0.3454%" height="15" fill="rgb(249,21,11)" fg:x="6915" fg:w="74"/><text x="32.5269%" y="255.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (65 samples, 0.30%)</title><rect x="32.3189%" y="229" width="0.3034%" height="15" fill="rgb(222,201,40)" fg:x="6924" fg:w="65"/><text x="32.5689%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (12 samples, 0.06%)</title><rect x="32.5663%" y="213" width="0.0560%" height="15" fill="rgb(235,61,29)" fg:x="6977" fg:w="12"/><text x="32.8163%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (6 samples, 0.03%)</title><rect x="32.5943%" y="197" width="0.0280%" height="15" fill="rgb(219,207,3)" fg:x="6983" fg:w="6"/><text x="32.8443%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.01%)</title><rect x="32.6550%" y="213" width="0.0140%" height="15" fill="rgb(222,56,46)" fg:x="6996" fg:w="3"/><text x="32.9050%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (10 samples, 0.05%)</title><rect x="32.6690%" y="213" width="0.0467%" height="15" fill="rgb(239,76,54)" fg:x="6999" fg:w="10"/><text x="32.9190%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (10 samples, 0.05%)</title><rect x="32.6690%" y="197" width="0.0467%" height="15" fill="rgb(231,124,27)" fg:x="6999" fg:w="10"/><text x="32.9190%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.04%)</title><rect x="32.6736%" y="181" width="0.0420%" height="15" fill="rgb(249,195,6)" fg:x="7000" fg:w="9"/><text x="32.9236%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.05%)</title><rect x="33.5138%" y="197" width="0.0513%" height="15" fill="rgb(237,174,47)" fg:x="7180" fg:w="11"/><text x="33.7638%" y="207.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (181 samples, 0.84%)</title><rect x="32.7250%" y="213" width="0.8448%" height="15" fill="rgb(206,201,31)" fg:x="7011" fg:w="181"/><text x="32.9750%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.03%)</title><rect x="33.6538%" y="197" width="0.0327%" height="15" fill="rgb(231,57,52)" fg:x="7210" fg:w="7"/><text x="33.9038%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (7 samples, 0.03%)</title><rect x="33.7005%" y="197" width="0.0327%" height="15" fill="rgb(248,177,22)" fg:x="7220" fg:w="7"/><text x="33.9505%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (8 samples, 0.04%)</title><rect x="35.5956%" y="181" width="0.0373%" height="15" fill="rgb(215,211,37)" fg:x="7626" fg:w="8"/><text x="35.8456%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.06%)</title><rect x="35.6329%" y="181" width="0.0560%" height="15" fill="rgb(241,128,51)" fg:x="7634" fg:w="12"/><text x="35.8829%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.02%)</title><rect x="35.7263%" y="165" width="0.0187%" height="15" fill="rgb(227,165,31)" fg:x="7654" fg:w="4"/><text x="35.9763%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 samples, 0.07%)</title><rect x="35.6983%" y="181" width="0.0700%" height="15" fill="rgb(228,167,24)" fg:x="7648" fg:w="15"/><text x="35.9483%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.02%)</title><rect x="35.7496%" y="165" width="0.0187%" height="15" fill="rgb(228,143,12)" fg:x="7659" fg:w="4"/><text x="35.9996%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.02%)</title><rect x="35.7496%" y="149" width="0.0187%" height="15" fill="rgb(249,149,8)" fg:x="7659" fg:w="4"/><text x="35.9996%" y="159.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (11 samples, 0.05%)</title><rect x="35.7683%" y="181" width="0.0513%" height="15" fill="rgb(243,35,44)" fg:x="7663" fg:w="11"/><text x="36.0183%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (9 samples, 0.04%)</title><rect x="35.7776%" y="165" width="0.0420%" height="15" fill="rgb(246,89,9)" fg:x="7665" fg:w="9"/><text x="36.0276%" y="175.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (4,620 samples, 21.56%)</title><rect x="14.3344%" y="277" width="21.5646%" height="15" fill="rgb(233,213,13)" fg:x="3071" fg:w="4620"/><text x="14.5844%" y="287.50">mwpf`mwpf::plugin::PluginManager::..</text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (4,558 samples, 21.28%)</title><rect x="14.6238%" y="261" width="21.2752%" height="15" fill="rgb(233,141,41)" fg:x="3133" fg:w="4558"/><text x="14.8738%" y="271.50">mwpf`mwpf::plugin::PluginEntry::ex..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (702 samples, 3.28%)</title><rect x="32.6223%" y="245" width="3.2767%" height="15" fill="rgb(239,167,4)" fg:x="6989" fg:w="702"/><text x="32.8723%" y="255.50">mwp..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (701 samples, 3.27%)</title><rect x="32.6270%" y="229" width="3.2720%" height="15" fill="rgb(209,217,16)" fg:x="6990" fg:w="701"/><text x="32.8770%" y="239.50">mwp..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (499 samples, 2.33%)</title><rect x="33.5698%" y="213" width="2.3292%" height="15" fill="rgb(219,88,35)" fg:x="7192" fg:w="499"/><text x="33.8198%" y="223.50">m..</text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (464 samples, 2.17%)</title><rect x="33.7332%" y="197" width="2.1658%" height="15" fill="rgb(220,193,23)" fg:x="7227" fg:w="464"/><text x="33.9832%" y="207.50">m..</text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (17 samples, 0.08%)</title><rect x="35.8196%" y="181" width="0.0794%" height="15" fill="rgb(230,90,52)" fg:x="7674" fg:w="17"/><text x="36.0696%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (4 samples, 0.02%)</title><rect x="35.8803%" y="165" width="0.0187%" height="15" fill="rgb(252,106,19)" fg:x="7687" fg:w="4"/><text x="36.1303%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.02%)</title><rect x="35.8803%" y="149" width="0.0187%" height="15" fill="rgb(206,74,20)" fg:x="7687" fg:w="4"/><text x="36.1303%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.01%)</title><rect x="39.6004%" y="261" width="0.0140%" height="15" fill="rgb(230,138,44)" fg:x="8484" fg:w="3"/><text x="39.8504%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_small (4 samples, 0.02%)</title><rect x="39.6145%" y="261" width="0.0187%" height="15" fill="rgb(235,182,43)" fg:x="8487" fg:w="4"/><text x="39.8645%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (13 samples, 0.06%)</title><rect x="39.6331%" y="261" width="0.0607%" height="15" fill="rgb(242,16,51)" fg:x="8491" fg:w="13"/><text x="39.8831%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.05%)</title><rect x="39.6425%" y="245" width="0.0513%" height="15" fill="rgb(248,9,4)" fg:x="8493" fg:w="11"/><text x="39.8925%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (6 samples, 0.03%)</title><rect x="39.6938%" y="245" width="0.0280%" height="15" fill="rgb(210,31,22)" fg:x="8504" fg:w="6"/><text x="39.9438%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.01%)</title><rect x="39.7265%" y="245" width="0.0140%" height="15" fill="rgb(239,54,39)" fg:x="8511" fg:w="3"/><text x="39.9765%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.06%)</title><rect x="39.6938%" y="261" width="0.0560%" height="15" fill="rgb(230,99,41)" fg:x="8504" fg:w="12"/><text x="39.9438%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (35 samples, 0.16%)</title><rect x="39.7498%" y="229" width="0.1634%" height="15" fill="rgb(253,106,12)" fg:x="8516" fg:w="35"/><text x="39.9998%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (35 samples, 0.16%)</title><rect x="39.7498%" y="213" width="0.1634%" height="15" fill="rgb(213,46,41)" fg:x="8516" fg:w="35"/><text x="39.9998%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (38 samples, 0.18%)</title><rect x="39.7498%" y="261" width="0.1774%" height="15" fill="rgb(215,133,35)" fg:x="8516" fg:w="38"/><text x="39.9998%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (38 samples, 0.18%)</title><rect x="39.7498%" y="245" width="0.1774%" height="15" fill="rgb(213,28,5)" fg:x="8516" fg:w="38"/><text x="39.9998%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 0.36%)</title><rect x="39.9272%" y="261" width="0.3594%" height="15" fill="rgb(215,77,49)" fg:x="8554" fg:w="77"/><text x="40.1772%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (18 samples, 0.08%)</title><rect x="40.2913%" y="213" width="0.0840%" height="15" fill="rgb(248,100,22)" fg:x="8632" fg:w="18"/><text x="40.5413%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (18 samples, 0.08%)</title><rect x="40.2913%" y="197" width="0.0840%" height="15" fill="rgb(208,67,9)" fg:x="8632" fg:w="18"/><text x="40.5413%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (23 samples, 0.11%)</title><rect x="40.3753%" y="165" width="0.1074%" height="15" fill="rgb(219,133,21)" fg:x="8650" fg:w="23"/><text x="40.6253%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (25 samples, 0.12%)</title><rect x="40.3753%" y="181" width="0.1167%" height="15" fill="rgb(246,46,29)" fg:x="8650" fg:w="25"/><text x="40.6253%" y="191.50"></text></g><g><title>mwpf`HFactor::~HFactor (157 samples, 0.73%)</title><rect x="40.3753%" y="197" width="0.7328%" height="15" fill="rgb(246,185,52)" fg:x="8650" fg:w="157"/><text x="40.6253%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (132 samples, 0.62%)</title><rect x="40.4920%" y="181" width="0.6161%" height="15" fill="rgb(252,136,11)" fg:x="8675" fg:w="132"/><text x="40.7420%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (132 samples, 0.62%)</title><rect x="40.4920%" y="165" width="0.6161%" height="15" fill="rgb(219,138,53)" fg:x="8675" fg:w="132"/><text x="40.7420%" y="175.50"></text></g><g><title>mwpf`HEkk::~HEkk (176 samples, 0.82%)</title><rect x="40.2913%" y="229" width="0.8215%" height="15" fill="rgb(211,51,23)" fg:x="8632" fg:w="176"/><text x="40.5413%" y="239.50"></text></g><g><title>mwpf`HSimplexNla::~HSimplexNla (158 samples, 0.74%)</title><rect x="40.3753%" y="213" width="0.7375%" height="15" fill="rgb(247,221,28)" fg:x="8650" fg:w="158"/><text x="40.6253%" y="223.50"></text></g><g><title>mwpf`HighsLp::~HighsLp (53 samples, 0.25%)</title><rect x="41.1128%" y="229" width="0.2474%" height="15" fill="rgb(251,222,45)" fg:x="8808" fg:w="53"/><text x="41.3628%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (53 samples, 0.25%)</title><rect x="41.1128%" y="213" width="0.2474%" height="15" fill="rgb(217,162,53)" fg:x="8808" fg:w="53"/><text x="41.3628%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (53 samples, 0.25%)</title><rect x="41.1128%" y="197" width="0.2474%" height="15" fill="rgb(229,93,14)" fg:x="8808" fg:w="53"/><text x="41.3628%" y="207.50"></text></g><g><title>mwpf`HighsLp::~HighsLp (6 samples, 0.03%)</title><rect x="41.3695%" y="213" width="0.0280%" height="15" fill="rgb(209,67,49)" fg:x="8863" fg:w="6"/><text x="41.6195%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (6 samples, 0.03%)</title><rect x="41.3695%" y="197" width="0.0280%" height="15" fill="rgb(213,87,29)" fg:x="8863" fg:w="6"/><text x="41.6195%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.03%)</title><rect x="41.3695%" y="181" width="0.0280%" height="15" fill="rgb(205,151,52)" fg:x="8863" fg:w="6"/><text x="41.6195%" y="191.50"></text></g><g><title>mwpf`Highs::~Highs (238 samples, 1.11%)</title><rect x="40.2913%" y="245" width="1.1109%" height="15" fill="rgb(253,215,39)" fg:x="8632" fg:w="238"/><text x="40.5413%" y="255.50"></text></g><g><title>mwpf`PresolveComponentData::~PresolveComponentData (8 samples, 0.04%)</title><rect x="41.3648%" y="229" width="0.0373%" height="15" fill="rgb(221,220,41)" fg:x="8862" fg:w="8"/><text x="41.6148%" y="239.50"></text></g><g><title>mwpf`Highs::~Highs (239 samples, 1.12%)</title><rect x="40.2913%" y="261" width="1.1156%" height="15" fill="rgb(218,133,21)" fg:x="8632" fg:w="239"/><text x="40.5413%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.02%)</title><rect x="41.4302%" y="245" width="0.0233%" height="15" fill="rgb(221,193,43)" fg:x="8876" fg:w="5"/><text x="41.6802%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.02%)</title><rect x="41.4768%" y="229" width="0.0187%" height="15" fill="rgb(240,128,52)" fg:x="8886" fg:w="4"/><text x="41.7268%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (9 samples, 0.04%)</title><rect x="41.5002%" y="229" width="0.0420%" height="15" fill="rgb(253,114,12)" fg:x="8891" fg:w="9"/><text x="41.7502%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.01%)</title><rect x="41.6122%" y="197" width="0.0140%" height="15" fill="rgb(215,223,47)" fg:x="8915" fg:w="3"/><text x="41.8622%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.02%)</title><rect x="41.6402%" y="197" width="0.0187%" height="15" fill="rgb(248,225,23)" fg:x="8921" fg:w="4"/><text x="41.8902%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (5 samples, 0.02%)</title><rect x="41.6589%" y="197" width="0.0233%" height="15" fill="rgb(250,108,0)" fg:x="8925" fg:w="5"/><text x="41.9089%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.04%)</title><rect x="41.7009%" y="181" width="0.0373%" height="15" fill="rgb(228,208,7)" fg:x="8934" fg:w="8"/><text x="41.9509%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.03%)</title><rect x="41.7476%" y="181" width="0.0280%" height="15" fill="rgb(244,45,10)" fg:x="8944" fg:w="6"/><text x="41.9976%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.02%)</title><rect x="41.7522%" y="165" width="0.0233%" height="15" fill="rgb(207,125,25)" fg:x="8945" fg:w="5"/><text x="42.0022%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="41.7616%" y="149" width="0.0140%" height="15" fill="rgb(210,195,18)" fg:x="8947" fg:w="3"/><text x="42.0116%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (24 samples, 0.11%)</title><rect x="41.6822%" y="197" width="0.1120%" height="15" fill="rgb(249,80,12)" fg:x="8930" fg:w="24"/><text x="41.9322%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.02%)</title><rect x="41.7756%" y="181" width="0.0187%" height="15" fill="rgb(221,65,9)" fg:x="8950" fg:w="4"/><text x="42.0256%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (4 samples, 0.02%)</title><rect x="41.8129%" y="181" width="0.0187%" height="15" fill="rgb(235,49,36)" fg:x="8958" fg:w="4"/><text x="42.0629%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (4 samples, 0.02%)</title><rect x="41.8129%" y="165" width="0.0187%" height="15" fill="rgb(225,32,20)" fg:x="8958" fg:w="4"/><text x="42.0629%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="41.8596%" y="149" width="0.0140%" height="15" fill="rgb(215,141,46)" fg:x="8968" fg:w="3"/><text x="42.1096%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.05%)</title><rect x="41.8316%" y="181" width="0.0467%" height="15" fill="rgb(250,160,47)" fg:x="8962" fg:w="10"/><text x="42.0816%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.04%)</title><rect x="41.8363%" y="165" width="0.0420%" height="15" fill="rgb(216,222,40)" fg:x="8963" fg:w="9"/><text x="42.0863%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (4 samples, 0.02%)</title><rect x="41.8876%" y="181" width="0.0187%" height="15" fill="rgb(234,217,39)" fg:x="8974" fg:w="4"/><text x="42.1376%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.02%)</title><rect x="41.9389%" y="133" width="0.0233%" height="15" fill="rgb(207,178,40)" fg:x="8985" fg:w="5"/><text x="42.1889%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22 samples, 0.10%)</title><rect x="41.9063%" y="181" width="0.1027%" height="15" fill="rgb(221,136,13)" fg:x="8978" fg:w="22"/><text x="42.1563%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (18 samples, 0.08%)</title><rect x="41.9249%" y="165" width="0.0840%" height="15" fill="rgb(249,199,10)" fg:x="8982" fg:w="18"/><text x="42.1749%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (16 samples, 0.07%)</title><rect x="41.9343%" y="149" width="0.0747%" height="15" fill="rgb(249,222,13)" fg:x="8984" fg:w="16"/><text x="42.1843%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (9 samples, 0.04%)</title><rect x="41.9670%" y="133" width="0.0420%" height="15" fill="rgb(244,185,38)" fg:x="8991" fg:w="9"/><text x="42.2170%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (6 samples, 0.03%)</title><rect x="42.0090%" y="181" width="0.0280%" height="15" fill="rgb(236,202,9)" fg:x="9000" fg:w="6"/><text x="42.2590%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.03%)</title><rect x="42.0090%" y="165" width="0.0280%" height="15" fill="rgb(250,229,37)" fg:x="9000" fg:w="6"/><text x="42.2590%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (54 samples, 0.25%)</title><rect x="41.7989%" y="197" width="0.2521%" height="15" fill="rgb(206,174,23)" fg:x="8955" fg:w="54"/><text x="42.0489%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (117 samples, 0.55%)</title><rect x="41.5795%" y="213" width="0.5461%" height="15" fill="rgb(211,33,43)" fg:x="8908" fg:w="117"/><text x="41.8295%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (16 samples, 0.07%)</title><rect x="42.0510%" y="197" width="0.0747%" height="15" fill="rgb(245,58,50)" fg:x="9009" fg:w="16"/><text x="42.3010%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (129 samples, 0.60%)</title><rect x="41.5422%" y="229" width="0.6021%" height="15" fill="rgb(244,68,36)" fg:x="8900" fg:w="129"/><text x="41.7922%" y="239.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (158 samples, 0.74%)</title><rect x="41.4162%" y="261" width="0.7375%" height="15" fill="rgb(232,229,15)" fg:x="8873" fg:w="158"/><text x="41.6662%" y="271.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (147 samples, 0.69%)</title><rect x="41.4675%" y="245" width="0.6861%" height="15" fill="rgb(254,30,23)" fg:x="8884" fg:w="147"/><text x="41.7175%" y="255.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (5 samples, 0.02%)</title><rect x="42.1537%" y="261" width="0.0233%" height="15" fill="rgb(235,160,14)" fg:x="9031" fg:w="5"/><text x="42.4037%" y="271.50"></text></g><g><title>mwpf`HEkk::addCols (3 samples, 0.01%)</title><rect x="42.2190%" y="197" width="0.0140%" height="15" fill="rgb(212,155,44)" fg:x="9045" fg:w="3"/><text x="42.4690%" y="207.50"></text></g><g><title>mwpf`Highs::addColsInterface (13 samples, 0.06%)</title><rect x="42.2003%" y="213" width="0.0607%" height="15" fill="rgb(226,2,50)" fg:x="9041" fg:w="13"/><text x="42.4503%" y="223.50"></text></g><g><title>mwpf`HighsModel::clear (4 samples, 0.02%)</title><rect x="42.2610%" y="213" width="0.0187%" height="15" fill="rgb(234,177,6)" fg:x="9054" fg:w="4"/><text x="42.5110%" y="223.50"></text></g><g><title>mwpf`HighsLp::clear (4 samples, 0.02%)</title><rect x="42.2610%" y="197" width="0.0187%" height="15" fill="rgb(217,24,9)" fg:x="9054" fg:w="4"/><text x="42.5110%" y="207.50"></text></g><g><title>mwpf`highs::Model::add_col (24 samples, 0.11%)</title><rect x="42.1817%" y="261" width="0.1120%" height="15" fill="rgb(220,13,46)" fg:x="9037" fg:w="24"/><text x="42.4317%" y="271.50"></text></g><g><title>mwpf`Highs::addCol (24 samples, 0.11%)</title><rect x="42.1817%" y="245" width="0.1120%" height="15" fill="rgb(239,221,27)" fg:x="9037" fg:w="24"/><text x="42.4317%" y="255.50"></text></g><g><title>mwpf`Highs::addCols (24 samples, 0.11%)</title><rect x="42.1817%" y="229" width="0.1120%" height="15" fill="rgb(222,198,25)" fg:x="9037" fg:w="24"/><text x="42.4317%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.01%)</title><rect x="42.3030%" y="245" width="0.0140%" height="15" fill="rgb(211,99,13)" fg:x="9063" fg:w="3"/><text x="42.5530%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (5 samples, 0.02%)</title><rect x="42.3264%" y="229" width="0.0233%" height="15" fill="rgb(232,111,31)" fg:x="9068" fg:w="5"/><text x="42.5764%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.04%)</title><rect x="42.3170%" y="245" width="0.0373%" height="15" fill="rgb(245,82,37)" fg:x="9066" fg:w="8"/><text x="42.5670%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.02%)</title><rect x="42.6624%" y="181" width="0.0233%" height="15" fill="rgb(227,149,46)" fg:x="9140" fg:w="5"/><text x="42.9124%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (3 samples, 0.01%)</title><rect x="42.6718%" y="165" width="0.0140%" height="15" fill="rgb(218,36,50)" fg:x="9142" fg:w="3"/><text x="42.9218%" y="175.50"></text></g><g><title>mwpf`&lt;(ExtendA,ExtendB) as core::iter::traits::collect::Extend&lt;(A,B)&gt;&gt;::extend (68 samples, 0.32%)</title><rect x="42.3730%" y="245" width="0.3174%" height="15" fill="rgb(226,80,48)" fg:x="9078" fg:w="68"/><text x="42.6230%" y="255.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.04%)</title><rect x="42.6531%" y="229" width="0.0373%" height="15" fill="rgb(238,224,15)" fg:x="9138" fg:w="8"/><text x="42.9031%" y="239.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (6 samples, 0.03%)</title><rect x="42.6624%" y="213" width="0.0280%" height="15" fill="rgb(241,136,10)" fg:x="9140" fg:w="6"/><text x="42.9124%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.03%)</title><rect x="42.6624%" y="197" width="0.0280%" height="15" fill="rgb(208,32,45)" fg:x="9140" fg:w="6"/><text x="42.9124%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.03%)</title><rect x="42.7184%" y="213" width="0.0280%" height="15" fill="rgb(207,135,9)" fg:x="9152" fg:w="6"/><text x="42.9684%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (13 samples, 0.06%)</title><rect x="42.7465%" y="213" width="0.0607%" height="15" fill="rgb(206,86,44)" fg:x="9158" fg:w="13"/><text x="42.9965%" y="223.50"></text></g><g><title>mwpf`DYLD-STUB$$operator new(unsigned long) (3 samples, 0.01%)</title><rect x="42.8118%" y="213" width="0.0140%" height="15" fill="rgb(245,177,15)" fg:x="9172" fg:w="3"/><text x="43.0618%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.01%)</title><rect x="42.8445%" y="165" width="0.0140%" height="15" fill="rgb(206,64,50)" fg:x="9179" fg:w="3"/><text x="43.0945%" y="175.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (8 samples, 0.04%)</title><rect x="42.8398%" y="197" width="0.0373%" height="15" fill="rgb(234,36,40)" fg:x="9178" fg:w="8"/><text x="43.0898%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.04%)</title><rect x="42.8398%" y="181" width="0.0373%" height="15" fill="rgb(213,64,8)" fg:x="9178" fg:w="8"/><text x="43.0898%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="42.8631%" y="165" width="0.0140%" height="15" fill="rgb(210,75,36)" fg:x="9183" fg:w="3"/><text x="43.1131%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.02%)</title><rect x="42.8865%" y="197" width="0.0233%" height="15" fill="rgb(229,88,21)" fg:x="9188" fg:w="5"/><text x="43.1365%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.01%)</title><rect x="42.9098%" y="197" width="0.0140%" height="15" fill="rgb(252,204,47)" fg:x="9193" fg:w="3"/><text x="43.1598%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.01%)</title><rect x="42.9378%" y="181" width="0.0140%" height="15" fill="rgb(208,77,27)" fg:x="9199" fg:w="3"/><text x="43.1878%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.04%)</title><rect x="42.9238%" y="197" width="0.0373%" height="15" fill="rgb(221,76,26)" fg:x="9196" fg:w="8"/><text x="43.1738%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.03%)</title><rect x="42.9612%" y="197" width="0.0280%" height="15" fill="rgb(225,139,18)" fg:x="9204" fg:w="6"/><text x="43.2112%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.02%)</title><rect x="42.9658%" y="181" width="0.0233%" height="15" fill="rgb(230,137,11)" fg:x="9205" fg:w="5"/><text x="43.2158%" y="191.50"></text></g><g><title>mwpf`HEkk::clearEkkDataInfo (5 samples, 0.02%)</title><rect x="43.0312%" y="165" width="0.0233%" height="15" fill="rgb(212,28,1)" fg:x="9219" fg:w="5"/><text x="43.2812%" y="175.50"></text></g><g><title>mwpf`HighsLp::clear (3 samples, 0.01%)</title><rect x="43.0545%" y="165" width="0.0140%" height="15" fill="rgb(248,164,17)" fg:x="9224" fg:w="3"/><text x="43.3045%" y="175.50"></text></g><g><title>mwpf`HEkk::clear (13 samples, 0.06%)</title><rect x="43.0125%" y="181" width="0.0607%" height="15" fill="rgb(222,171,42)" fg:x="9215" fg:w="13"/><text x="43.2625%" y="191.50"></text></g><g><title>mwpf`HEkk::addRows (14 samples, 0.07%)</title><rect x="43.0125%" y="197" width="0.0653%" height="15" fill="rgb(243,84,45)" fg:x="9215" fg:w="14"/><text x="43.2625%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.02%)</title><rect x="43.1292%" y="149" width="0.0187%" height="15" fill="rgb(252,49,23)" fg:x="9240" fg:w="4"/><text x="43.3792%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (4 samples, 0.02%)</title><rect x="43.1292%" y="133" width="0.0187%" height="15" fill="rgb(215,19,7)" fg:x="9240" fg:w="4"/><text x="43.3792%" y="143.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (6 samples, 0.03%)</title><rect x="43.1292%" y="181" width="0.0280%" height="15" fill="rgb(238,81,41)" fg:x="9240" fg:w="6"/><text x="43.3792%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.03%)</title><rect x="43.1292%" y="165" width="0.0280%" height="15" fill="rgb(210,199,37)" fg:x="9240" fg:w="6"/><text x="43.3792%" y="175.50"></text></g><g><title>mwpf`HighsSparseMatrix::HighsSparseMatrix (19 samples, 0.09%)</title><rect x="43.0779%" y="197" width="0.0887%" height="15" fill="rgb(244,192,49)" fg:x="9229" fg:w="19"/><text x="43.3279%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (11 samples, 0.05%)</title><rect x="43.2646%" y="181" width="0.0513%" height="15" fill="rgb(226,211,11)" fg:x="9269" fg:w="11"/><text x="43.5146%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (11 samples, 0.05%)</title><rect x="43.2646%" y="165" width="0.0513%" height="15" fill="rgb(236,162,54)" fg:x="9269" fg:w="11"/><text x="43.5146%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (67 samples, 0.31%)</title><rect x="43.3206%" y="181" width="0.3127%" height="15" fill="rgb(220,229,9)" fg:x="9281" fg:w="67"/><text x="43.5706%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (53 samples, 0.25%)</title><rect x="43.6333%" y="181" width="0.2474%" height="15" fill="rgb(250,87,22)" fg:x="9348" fg:w="53"/><text x="43.8833%" y="191.50"></text></g><g><title>mwpf`HighsSparseMatrix::addRows (154 samples, 0.72%)</title><rect x="43.1665%" y="197" width="0.7188%" height="15" fill="rgb(239,43,17)" fg:x="9248" fg:w="154"/><text x="43.4165%" y="207.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (10 samples, 0.05%)</title><rect x="45.1176%" y="165" width="0.0467%" height="15" fill="rgb(231,177,25)" fg:x="9666" fg:w="10"/><text x="45.3676%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.05%)</title><rect x="45.1176%" y="149" width="0.0467%" height="15" fill="rgb(219,179,1)" fg:x="9666" fg:w="10"/><text x="45.3676%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.05%)</title><rect x="45.1176%" y="133" width="0.0467%" height="15" fill="rgb(238,219,53)" fg:x="9666" fg:w="10"/><text x="45.3676%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.03%)</title><rect x="45.1316%" y="117" width="0.0327%" height="15" fill="rgb(232,167,36)" fg:x="9669" fg:w="7"/><text x="45.3816%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.03%)</title><rect x="45.1643%" y="165" width="0.0280%" height="15" fill="rgb(244,19,51)" fg:x="9676" fg:w="6"/><text x="45.4143%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.02%)</title><rect x="45.1923%" y="165" width="0.0187%" height="15" fill="rgb(224,6,22)" fg:x="9682" fg:w="4"/><text x="45.4423%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (3 samples, 0.01%)</title><rect x="45.2156%" y="165" width="0.0140%" height="15" fill="rgb(224,145,5)" fg:x="9687" fg:w="3"/><text x="45.4656%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.02%)</title><rect x="45.2390%" y="165" width="0.0187%" height="15" fill="rgb(234,130,49)" fg:x="9692" fg:w="4"/><text x="45.4890%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.02%)</title><rect x="46.4993%" y="149" width="0.0187%" height="15" fill="rgb(254,6,2)" fg:x="9962" fg:w="4"/><text x="46.7493%" y="159.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (3 samples, 0.01%)</title><rect x="46.7326%" y="133" width="0.0140%" height="15" fill="rgb(208,96,46)" fg:x="10012" fg:w="3"/><text x="46.9826%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.01%)</title><rect x="46.7326%" y="117" width="0.0140%" height="15" fill="rgb(239,3,39)" fg:x="10012" fg:w="3"/><text x="46.9826%" y="127.50"></text></g><g><title>mwpf`HighsHashTable&lt;int, void&gt;::growTable (237 samples, 1.11%)</title><rect x="46.5226%" y="149" width="1.1062%" height="15" fill="rgb(233,210,1)" fg:x="9967" fg:w="237"/><text x="46.7726%" y="159.50"></text></g><g><title>mwpf`bool HighsHashTable&lt;int, void&gt;::insert&lt;HighsHashTableEntry&lt;int, void&gt;&gt;(HighsHashTableEntry (182 samples, 0.85%)</title><rect x="46.7793%" y="133" width="0.8495%" height="15" fill="rgb(244,137,37)" fg:x="10022" fg:w="182"/><text x="47.0293%" y="143.50"></text></g><g><title>mwpf`assessMatrix(HighsLogOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, int, int, bool, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;double, std::__1::allocator (816 samples, 3.81%)</title><rect x="43.9134%" y="181" width="3.8088%" height="15" fill="rgb(240,136,2)" fg:x="9408" fg:w="816"/><text x="44.1634%" y="191.50">mwpf..</text></g><g><title>mwpf`bool HighsHashTable&lt;int, void&gt;::insert&lt;int&gt; (524 samples, 2.45%)</title><rect x="45.2763%" y="165" width="2.4459%" height="15" fill="rgb(239,18,37)" fg:x="9700" fg:w="524"/><text x="45.5263%" y="175.50">mw..</text></g><g><title>mwpf`bool HighsHashTable&lt;int, void&gt;::insert&lt;HighsHashTableEntry&lt;int, void&gt;&gt;(HighsHashTableEntry (20 samples, 0.09%)</title><rect x="47.6288%" y="149" width="0.0934%" height="15" fill="rgb(218,185,22)" fg:x="10204" fg:w="20"/><text x="47.8788%" y="159.50"></text></g><g><title>mwpf`HighsSparseMatrix::assess(HighsLogOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (841 samples, 3.93%)</title><rect x="43.8854%" y="197" width="3.9255%" height="15" fill="rgb(225,218,4)" fg:x="9402" fg:w="841"/><text x="44.1354%" y="207.50">mwpf..</text></g><g><title>mwpf`bool HighsHashTable&lt;int, void&gt;::insert&lt;int&gt; (18 samples, 0.08%)</title><rect x="47.7268%" y="181" width="0.0840%" height="15" fill="rgb(230,182,32)" fg:x="10225" fg:w="18"/><text x="47.9768%" y="191.50"></text></g><g><title>mwpf`HighsSparseMatrix::clear (3 samples, 0.01%)</title><rect x="47.8109%" y="197" width="0.0140%" height="15" fill="rgb(242,56,43)" fg:x="10243" fg:w="3"/><text x="48.0609%" y="207.50"></text></g><g><title>mwpf`Highs::addRowsInterface (1,079 samples, 5.04%)</title><rect x="42.8258%" y="213" width="5.0364%" height="15" fill="rgb(233,99,24)" fg:x="9175" fg:w="1079"/><text x="43.0758%" y="223.50">mwpf`H..</text></g><g><title>mwpf`Highs::forceHighsSolutionBasisSize (3 samples, 0.01%)</title><rect x="47.8622%" y="197" width="0.0140%" height="15" fill="rgb(234,209,42)" fg:x="10254" fg:w="3"/><text x="48.1122%" y="207.50"></text></g><g><title>mwpf`Highs::returnFromHighs (5 samples, 0.02%)</title><rect x="47.8622%" y="213" width="0.0233%" height="15" fill="rgb(227,7,12)" fg:x="10254" fg:w="5"/><text x="48.1122%" y="223.50"></text></g><g><title>mwpf`HighsModel::clear (9 samples, 0.04%)</title><rect x="47.8996%" y="213" width="0.0420%" height="15" fill="rgb(245,203,43)" fg:x="10262" fg:w="9"/><text x="48.1496%" y="223.50"></text></g><g><title>mwpf`HighsLp::clear (9 samples, 0.04%)</title><rect x="47.8996%" y="197" width="0.0420%" height="15" fill="rgb(238,205,33)" fg:x="10262" fg:w="9"/><text x="48.1496%" y="207.50"></text></g><g><title>mwpf`HighsLp::clear (4 samples, 0.02%)</title><rect x="47.9602%" y="197" width="0.0187%" height="15" fill="rgb(231,56,7)" fg:x="10275" fg:w="4"/><text x="48.2102%" y="207.50"></text></g><g><title>mwpf`PresolveComponentData::clear (8 samples, 0.04%)</title><rect x="47.9462%" y="213" width="0.0373%" height="15" fill="rgb(244,186,29)" fg:x="10272" fg:w="8"/><text x="48.1962%" y="223.50"></text></g><g><title>mwpf`Highs::addRow (1,138 samples, 5.31%)</title><rect x="42.6904%" y="245" width="5.3118%" height="15" fill="rgb(234,111,31)" fg:x="9146" fg:w="1138"/><text x="42.9404%" y="255.50">mwpf`Hi..</text></g><g><title>mwpf`Highs::addRows (1,138 samples, 5.31%)</title><rect x="42.6904%" y="229" width="5.3118%" height="15" fill="rgb(241,149,10)" fg:x="9146" fg:w="1138"/><text x="42.9404%" y="239.50">mwpf`Hi..</text></g><g><title>mwpf`interpretCallStatus(HighsLogOptions, HighsStatus, HighsStatus, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.01%)</title><rect x="47.9882%" y="213" width="0.0140%" height="15" fill="rgb(249,206,44)" fg:x="10281" fg:w="3"/><text x="48.2382%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.02%)</title><rect x="48.1236%" y="229" width="0.0233%" height="15" fill="rgb(251,153,30)" fg:x="10310" fg:w="5"/><text x="48.3736%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (4 samples, 0.02%)</title><rect x="48.1283%" y="213" width="0.0187%" height="15" fill="rgb(239,152,38)" fg:x="10311" fg:w="4"/><text x="48.3783%" y="223.50"></text></g><g><title>mwpf`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (31 samples, 0.14%)</title><rect x="48.0069%" y="245" width="0.1447%" height="15" fill="rgb(249,139,47)" fg:x="10285" fg:w="31"/><text x="48.2569%" y="255.50"></text></g><g><title>mwpf`highs::Model::add_row (1,256 samples, 5.86%)</title><rect x="42.2937%" y="261" width="5.8626%" height="15" fill="rgb(244,64,35)" fg:x="9061" fg:w="1256"/><text x="42.5437%" y="271.50">mwpf`hi..</text></g><g><title>mwpf`HEkk::moveLp (9 samples, 0.04%)</title><rect x="48.1656%" y="181" width="0.0420%" height="15" fill="rgb(216,46,15)" fg:x="10319" fg:w="9"/><text x="48.4156%" y="191.50"></text></g><g><title>mwpf`HighsRandom::drawUniform (9 samples, 0.04%)</title><rect x="48.1656%" y="165" width="0.0420%" height="15" fill="rgb(250,74,19)" fg:x="10319" fg:w="9"/><text x="48.4156%" y="175.50"></text></g><g><title>mwpf`HEkk::allocateWorkAndBaseArrays (3 samples, 0.01%)</title><rect x="48.2216%" y="149" width="0.0140%" height="15" fill="rgb(249,42,33)" fg:x="10331" fg:w="3"/><text x="48.4716%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.01%)</title><rect x="48.2216%" y="133" width="0.0140%" height="15" fill="rgb(242,149,17)" fg:x="10331" fg:w="3"/><text x="48.4716%" y="143.50"></text></g><g><title>mwpf`HEkk::fullBtran(HVectorBase (4 samples, 0.02%)</title><rect x="48.2356%" y="133" width="0.0187%" height="15" fill="rgb(244,29,21)" fg:x="10334" fg:w="4"/><text x="48.4856%" y="143.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (4 samples, 0.02%)</title><rect x="48.2356%" y="117" width="0.0187%" height="15" fill="rgb(220,130,37)" fg:x="10334" fg:w="4"/><text x="48.4856%" y="127.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (4 samples, 0.02%)</title><rect x="48.2356%" y="101" width="0.0187%" height="15" fill="rgb(211,67,2)" fg:x="10334" fg:w="4"/><text x="48.4856%" y="111.50"></text></g><g><title>mwpf`HFactor::btranL(HVectorBase (4 samples, 0.02%)</title><rect x="48.2356%" y="85" width="0.0187%" height="15" fill="rgb(235,68,52)" fg:x="10334" fg:w="4"/><text x="48.4856%" y="95.50"></text></g><g><title>mwpf`HEkk::computeDual (82 samples, 0.38%)</title><rect x="48.2356%" y="149" width="0.3827%" height="15" fill="rgb(246,142,3)" fg:x="10334" fg:w="82"/><text x="48.4856%" y="159.50"></text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (78 samples, 0.36%)</title><rect x="48.2543%" y="133" width="0.3641%" height="15" fill="rgb(241,25,7)" fg:x="10338" fg:w="78"/><text x="48.5043%" y="143.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (78 samples, 0.36%)</title><rect x="48.2543%" y="117" width="0.3641%" height="15" fill="rgb(242,119,39)" fg:x="10338" fg:w="78"/><text x="48.5043%" y="127.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (6 samples, 0.03%)</title><rect x="48.6277%" y="117" width="0.0280%" height="15" fill="rgb(241,98,45)" fg:x="10418" fg:w="6"/><text x="48.8777%" y="127.50"></text></g><g><title>mwpf`solveHyper(int, int const*, int const*, double const*, int const*, int const*, int const*, double const*, HVectorBase&lt;double&gt;*) (6 samples, 0.03%)</title><rect x="48.6277%" y="101" width="0.0280%" height="15" fill="rgb(254,28,30)" fg:x="10418" fg:w="6"/><text x="48.8777%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (7 samples, 0.03%)</title><rect x="48.6277%" y="133" width="0.0327%" height="15" fill="rgb(241,142,54)" fg:x="10418" fg:w="7"/><text x="48.8777%" y="143.50"></text></g><g><title>mwpf`HEkk::computePrimal (10 samples, 0.05%)</title><rect x="48.6184%" y="149" width="0.0467%" height="15" fill="rgb(222,85,15)" fg:x="10416" fg:w="10"/><text x="48.8684%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (14 samples, 0.07%)</title><rect x="48.9638%" y="69" width="0.0653%" height="15" fill="rgb(210,85,47)" fg:x="10490" fg:w="14"/><text x="49.2138%" y="79.50"></text></g><g><title>mwpf`HFactor::buildFinish (79 samples, 0.37%)</title><rect x="48.6697%" y="85" width="0.3687%" height="15" fill="rgb(224,206,25)" fg:x="10427" fg:w="79"/><text x="48.9197%" y="95.50"></text></g><g><title>mwpf`HFactor::buildKernel (43 samples, 0.20%)</title><rect x="49.0385%" y="85" width="0.2007%" height="15" fill="rgb(243,201,19)" fg:x="10506" fg:w="43"/><text x="49.2885%" y="95.50"></text></g><g><title>mwpf`HFactor::buildSimple (117 samples, 0.55%)</title><rect x="49.2392%" y="85" width="0.5461%" height="15" fill="rgb(236,59,4)" fg:x="10549" fg:w="117"/><text x="49.4892%" y="95.50"></text></g><g><title>mwpf`HEkk::computeFactor (240 samples, 1.12%)</title><rect x="48.6697%" y="133" width="1.1202%" height="15" fill="rgb(254,179,45)" fg:x="10427" fg:w="240"/><text x="48.9197%" y="143.50"></text></g><g><title>mwpf`HSimplexNla::invert (240 samples, 1.12%)</title><rect x="48.6697%" y="117" width="1.1202%" height="15" fill="rgb(226,14,10)" fg:x="10427" fg:w="240"/><text x="48.9197%" y="127.50"></text></g><g><title>mwpf`HFactor::build (240 samples, 1.12%)</title><rect x="48.6697%" y="101" width="1.1202%" height="15" fill="rgb(244,27,41)" fg:x="10427" fg:w="240"/><text x="48.9197%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.01%)</title><rect x="49.7900%" y="117" width="0.0140%" height="15" fill="rgb(235,35,32)" fg:x="10667" fg:w="3"/><text x="50.0400%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (3 samples, 0.01%)</title><rect x="49.8086%" y="101" width="0.0140%" height="15" fill="rgb(218,68,31)" fg:x="10671" fg:w="3"/><text x="50.0586%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.01%)</title><rect x="49.8086%" y="85" width="0.0140%" height="15" fill="rgb(207,120,37)" fg:x="10671" fg:w="3"/><text x="50.0586%" y="95.50"></text></g><g><title>libsystem_platform.dylib`__bzero (140 samples, 0.65%)</title><rect x="49.8226%" y="101" width="0.6535%" height="15" fill="rgb(227,98,0)" fg:x="10674" fg:w="140"/><text x="50.0726%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.02%)</title><rect x="50.4761%" y="101" width="0.0187%" height="15" fill="rgb(207,7,3)" fg:x="10814" fg:w="4"/><text x="50.7261%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.01%)</title><rect x="50.4948%" y="101" width="0.0140%" height="15" fill="rgb(206,98,19)" fg:x="10818" fg:w="3"/><text x="50.7448%" y="111.50"></text></g><g><title>mwpf`HEkk::initialiseSimplexLpBasisAndFactor (396 samples, 1.85%)</title><rect x="48.6697%" y="149" width="1.8484%" height="15" fill="rgb(217,5,26)" fg:x="10427" fg:w="396"/><text x="48.9197%" y="159.50">m..</text></g><g><title>mwpf`HSimplexNla::setup (156 samples, 0.73%)</title><rect x="49.7900%" y="133" width="0.7282%" height="15" fill="rgb(235,190,38)" fg:x="10667" fg:w="156"/><text x="50.0400%" y="143.50"></text></g><g><title>mwpf`HFactor::setupGeneral (153 samples, 0.71%)</title><rect x="49.8040%" y="117" width="0.7142%" height="15" fill="rgb(247,86,24)" fg:x="10670" fg:w="153"/><text x="50.0540%" y="127.50"></text></g><g><title>mwpf`HEkk::initialiseSimplexLpRandomVectors (3 samples, 0.01%)</title><rect x="50.5181%" y="149" width="0.0140%" height="15" fill="rgb(205,101,16)" fg:x="10823" fg:w="3"/><text x="50.7681%" y="159.50"></text></g><g><title>mwpf`HighsRandom::drawUniform (9 samples, 0.04%)</title><rect x="50.5321%" y="149" width="0.0420%" height="15" fill="rgb(246,168,33)" fg:x="10826" fg:w="9"/><text x="50.7821%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (33 samples, 0.15%)</title><rect x="51.3069%" y="133" width="0.1540%" height="15" fill="rgb(231,114,1)" fg:x="10992" fg:w="33"/><text x="51.5569%" y="143.50"></text></g><g><title>mwpf`HEkk::initialiseForSolve (699 samples, 3.26%)</title><rect x="48.2123%" y="165" width="3.2627%" height="15" fill="rgb(207,184,53)" fg:x="10329" fg:w="699"/><text x="48.4623%" y="175.50">mwp..</text></g><g><title>mwpf`HighsSparseMatrix::createRowwisePartitioned (193 samples, 0.90%)</title><rect x="50.5741%" y="149" width="0.9009%" height="15" fill="rgb(224,95,51)" fg:x="10835" fg:w="193"/><text x="50.8241%" y="159.50"></text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (3 samples, 0.01%)</title><rect x="51.4796%" y="133" width="0.0140%" height="15" fill="rgb(212,188,45)" fg:x="11029" fg:w="3"/><text x="51.7296%" y="143.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (3 samples, 0.01%)</title><rect x="51.4796%" y="117" width="0.0140%" height="15" fill="rgb(223,154,38)" fg:x="11029" fg:w="3"/><text x="51.7296%" y="127.50"></text></g><g><title>mwpf`HEkk::computeDual (4 samples, 0.02%)</title><rect x="51.4796%" y="149" width="0.0187%" height="15" fill="rgb(251,22,52)" fg:x="11029" fg:w="4"/><text x="51.7296%" y="159.50"></text></g><g><title>mwpf`HEkk::tableauRowPrice(bool, HVectorBase&lt;double&gt; const&amp;, HVectorBase (5 samples, 0.02%)</title><rect x="51.5077%" y="101" width="0.0233%" height="15" fill="rgb(229,209,22)" fg:x="11035" fg:w="5"/><text x="51.7577%" y="111.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByRowWithSwitch(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (4 samples, 0.02%)</title><rect x="51.5123%" y="85" width="0.0187%" height="15" fill="rgb(234,138,34)" fg:x="11036" fg:w="4"/><text x="51.7623%" y="95.50"></text></g><g><title>mwpf`HEkkDual::chooseColumn(HVectorBase (6 samples, 0.03%)</title><rect x="51.5077%" y="117" width="0.0280%" height="15" fill="rgb(212,95,11)" fg:x="11035" fg:w="6"/><text x="51.7577%" y="127.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (3 samples, 0.01%)</title><rect x="51.5590%" y="85" width="0.0140%" height="15" fill="rgb(240,179,47)" fg:x="11046" fg:w="3"/><text x="51.8090%" y="95.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (4 samples, 0.02%)</title><rect x="51.5590%" y="101" width="0.0187%" height="15" fill="rgb(240,163,11)" fg:x="11046" fg:w="4"/><text x="51.8090%" y="111.50"></text></g><g><title>mwpf`HEkkDual::updateFtranBFRT (8 samples, 0.04%)</title><rect x="51.5497%" y="117" width="0.0373%" height="15" fill="rgb(236,37,12)" fg:x="11044" fg:w="8"/><text x="51.7997%" y="127.50"></text></g><g><title>mwpf`HEkkDual::updatePivots (3 samples, 0.01%)</title><rect x="51.5917%" y="117" width="0.0140%" height="15" fill="rgb(232,164,16)" fg:x="11053" fg:w="3"/><text x="51.8417%" y="127.50"></text></g><g><title>mwpf`HighsSparseMatrix::update (3 samples, 0.01%)</title><rect x="51.5917%" y="101" width="0.0140%" height="15" fill="rgb(244,205,15)" fg:x="11053" fg:w="3"/><text x="51.8417%" y="111.50"></text></g><g><title>mwpf`HEkkDual::iterate (24 samples, 0.11%)</title><rect x="51.5077%" y="133" width="0.1120%" height="15" fill="rgb(223,117,47)" fg:x="11035" fg:w="24"/><text x="51.7577%" y="143.50"></text></g><g><title>mwpf`HEkk::computeDual (8 samples, 0.04%)</title><rect x="51.6197%" y="117" width="0.0373%" height="15" fill="rgb(244,107,35)" fg:x="11059" fg:w="8"/><text x="51.8697%" y="127.50"></text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (8 samples, 0.04%)</title><rect x="51.6197%" y="101" width="0.0373%" height="15" fill="rgb(205,140,8)" fg:x="11059" fg:w="8"/><text x="51.8697%" y="111.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (8 samples, 0.04%)</title><rect x="51.6197%" y="85" width="0.0373%" height="15" fill="rgb(228,84,46)" fg:x="11059" fg:w="8"/><text x="51.8697%" y="95.50"></text></g><g><title>mwpf`HEkkDual::solvePhase1 (43 samples, 0.20%)</title><rect x="51.5030%" y="149" width="0.2007%" height="15" fill="rgb(254,188,9)" fg:x="11034" fg:w="43"/><text x="51.7530%" y="159.50"></text></g><g><title>mwpf`HEkkDual::rebuild (18 samples, 0.08%)</title><rect x="51.6197%" y="133" width="0.0840%" height="15" fill="rgb(206,112,54)" fg:x="11059" fg:w="18"/><text x="51.8697%" y="143.50"></text></g><g><title>mwpf`HEkk::bailout (9 samples, 0.04%)</title><rect x="51.7037%" y="133" width="0.0420%" height="15" fill="rgb(216,84,49)" fg:x="11077" fg:w="9"/><text x="51.9537%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::chrono::steady_clock::now (9 samples, 0.04%)</title><rect x="51.7037%" y="117" width="0.0420%" height="15" fill="rgb(214,194,35)" fg:x="11077" fg:w="9"/><text x="51.9537%" y="127.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (9 samples, 0.04%)</title><rect x="51.7037%" y="101" width="0.0420%" height="15" fill="rgb(249,28,3)" fg:x="11077" fg:w="9"/><text x="51.9537%" y="111.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (9 samples, 0.04%)</title><rect x="51.7037%" y="85" width="0.0420%" height="15" fill="rgb(222,56,52)" fg:x="11077" fg:w="9"/><text x="51.9537%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_continuous_time (9 samples, 0.04%)</title><rect x="51.7037%" y="69" width="0.0420%" height="15" fill="rgb(245,217,50)" fg:x="11077" fg:w="9"/><text x="51.9537%" y="79.50"></text></g><g><title>mwpf`HEkk::factorSolveError (3 samples, 0.01%)</title><rect x="51.7457%" y="117" width="0.0140%" height="15" fill="rgb(213,201,24)" fg:x="11086" fg:w="3"/><text x="51.9957%" y="127.50"></text></g><g><title>mwpf`HEkk::rebuildRefactor (4 samples, 0.02%)</title><rect x="51.7457%" y="133" width="0.0187%" height="15" fill="rgb(248,116,28)" fg:x="11086" fg:w="4"/><text x="51.9957%" y="143.50"></text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (6 samples, 0.03%)</title><rect x="51.7644%" y="101" width="0.0280%" height="15" fill="rgb(219,72,43)" fg:x="11090" fg:w="6"/><text x="52.0144%" y="111.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (6 samples, 0.03%)</title><rect x="51.7644%" y="85" width="0.0280%" height="15" fill="rgb(209,138,14)" fg:x="11090" fg:w="6"/><text x="52.0144%" y="95.50"></text></g><g><title>mwpf`HEkk::computeDual (8 samples, 0.04%)</title><rect x="51.7644%" y="117" width="0.0373%" height="15" fill="rgb(222,18,33)" fg:x="11090" fg:w="8"/><text x="52.0144%" y="127.50"></text></g><g><title>mwpf`HEkkDual::cleanup (9 samples, 0.04%)</title><rect x="51.7644%" y="133" width="0.0420%" height="15" fill="rgb(213,199,7)" fg:x="11090" fg:w="9"/><text x="52.0144%" y="143.50"></text></g><g><title>mwpf`HEkk::getValueScale(int, std::__1::vector&lt;double, std::__1::allocator (12 samples, 0.06%)</title><rect x="51.8157%" y="117" width="0.0560%" height="15" fill="rgb(250,110,10)" fg:x="11101" fg:w="12"/><text x="52.0657%" y="127.50"></text></g><g><title>mwpf`HEkk::tableauRowPrice(bool, HVectorBase&lt;double&gt; const&amp;, HVectorBase (134 samples, 0.63%)</title><rect x="51.8717%" y="101" width="0.6255%" height="15" fill="rgb(248,123,6)" fg:x="11113" fg:w="134"/><text x="52.1217%" y="111.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByRowWithSwitch(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (132 samples, 0.62%)</title><rect x="51.8811%" y="85" width="0.6161%" height="15" fill="rgb(206,91,31)" fg:x="11115" fg:w="132"/><text x="52.1311%" y="95.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByRowDenseResult(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, HVectorBase (119 samples, 0.56%)</title><rect x="51.9417%" y="69" width="0.5555%" height="15" fill="rgb(211,154,13)" fg:x="11128" fg:w="119"/><text x="52.1917%" y="79.50"></text></g><g><title>mwpf`HEkkDual::chooseColumn(HVectorBase (154 samples, 0.72%)</title><rect x="51.8717%" y="117" width="0.7188%" height="15" fill="rgb(225,148,7)" fg:x="11113" fg:w="154"/><text x="52.1217%" y="127.50"></text></g><g><title>mwpf`HEkkDualRow::chooseFinal (20 samples, 0.09%)</title><rect x="52.4972%" y="101" width="0.0934%" height="15" fill="rgb(220,160,43)" fg:x="11247" fg:w="20"/><text x="52.7472%" y="111.50"></text></g><g><title>mwpf`HEkkDualRow::chooseFinalWorkGroupQuad (4 samples, 0.02%)</title><rect x="52.5719%" y="85" width="0.0187%" height="15" fill="rgb(213,52,39)" fg:x="11263" fg:w="4"/><text x="52.8219%" y="95.50"></text></g><g><title>mwpf`HEkkDualRHS::chooseNormal (22 samples, 0.10%)</title><rect x="52.5906%" y="101" width="0.1027%" height="15" fill="rgb(243,137,7)" fg:x="11267" fg:w="22"/><text x="52.8406%" y="111.50"></text></g><g><title>mwpf`HFactor::btranL(HVectorBase (21 samples, 0.10%)</title><rect x="52.6932%" y="69" width="0.0980%" height="15" fill="rgb(230,79,13)" fg:x="11289" fg:w="21"/><text x="52.9432%" y="79.50"></text></g><g><title>mwpf`HFactor::btranU(HVectorBase (51 samples, 0.24%)</title><rect x="52.7913%" y="69" width="0.2381%" height="15" fill="rgb(247,105,23)" fg:x="11310" fg:w="51"/><text x="53.0413%" y="79.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::tight (3 samples, 0.01%)</title><rect x="53.0386%" y="69" width="0.0140%" height="15" fill="rgb(223,179,41)" fg:x="11363" fg:w="3"/><text x="53.2886%" y="79.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (82 samples, 0.38%)</title><rect x="52.6932%" y="85" width="0.3827%" height="15" fill="rgb(218,9,34)" fg:x="11289" fg:w="82"/><text x="52.9432%" y="95.50"></text></g><g><title>mwpf`solveHyper(int, int const*, int const*, double const*, int const*, int const*, int const*, double const*, HVectorBase&lt;double&gt;*) (5 samples, 0.02%)</title><rect x="53.0527%" y="69" width="0.0233%" height="15" fill="rgb(222,106,8)" fg:x="11366" fg:w="5"/><text x="53.3027%" y="79.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (88 samples, 0.41%)</title><rect x="52.6932%" y="101" width="0.4108%" height="15" fill="rgb(211,220,0)" fg:x="11289" fg:w="88"/><text x="52.9432%" y="111.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (6 samples, 0.03%)</title><rect x="53.0760%" y="85" width="0.0280%" height="15" fill="rgb(229,52,16)" fg:x="11371" fg:w="6"/><text x="53.3260%" y="95.50"></text></g><g><title>mwpf`HEkkDual::chooseRow (112 samples, 0.52%)</title><rect x="52.5906%" y="117" width="0.5228%" height="15" fill="rgb(212,155,18)" fg:x="11267" fg:w="112"/><text x="52.8406%" y="127.50"></text></g><g><title>mwpf`HEkkDual::updateDual (12 samples, 0.06%)</title><rect x="53.1227%" y="117" width="0.0560%" height="15" fill="rgb(242,21,14)" fg:x="11381" fg:w="12"/><text x="53.3727%" y="127.50"></text></g><g><title>mwpf`HEkkDualRow::updateDual (12 samples, 0.06%)</title><rect x="53.1227%" y="101" width="0.0560%" height="15" fill="rgb(222,19,48)" fg:x="11381" fg:w="12"/><text x="53.3727%" y="111.50"></text></g><g><title>mwpf`HFactor::ftranFT(HVectorBase (15 samples, 0.07%)</title><rect x="53.1833%" y="69" width="0.0700%" height="15" fill="rgb(232,45,27)" fg:x="11394" fg:w="15"/><text x="53.4333%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranL(HVectorBase (23 samples, 0.11%)</title><rect x="53.2534%" y="69" width="0.1074%" height="15" fill="rgb(249,103,42)" fg:x="11409" fg:w="23"/><text x="53.5034%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranU(HVectorBase (123 samples, 0.57%)</title><rect x="53.3607%" y="69" width="0.5741%" height="15" fill="rgb(246,81,33)" fg:x="11432" fg:w="123"/><text x="53.6107%" y="79.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::pack (12 samples, 0.06%)</title><rect x="53.9348%" y="69" width="0.0560%" height="15" fill="rgb(252,33,42)" fg:x="11555" fg:w="12"/><text x="54.1848%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (176 samples, 0.82%)</title><rect x="53.1833%" y="85" width="0.8215%" height="15" fill="rgb(209,212,41)" fg:x="11394" fg:w="176"/><text x="53.4333%" y="95.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::tight (3 samples, 0.01%)</title><rect x="53.9909%" y="69" width="0.0140%" height="15" fill="rgb(207,154,6)" fg:x="11567" fg:w="3"/><text x="54.2409%" y="79.50"></text></g><g><title>mwpf`HEkkDual::updateFtran (189 samples, 0.88%)</title><rect x="53.1787%" y="117" width="0.8822%" height="15" fill="rgb(223,64,47)" fg:x="11393" fg:w="189"/><text x="53.4287%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (188 samples, 0.88%)</title><rect x="53.1833%" y="101" width="0.8775%" height="15" fill="rgb(211,161,38)" fg:x="11394" fg:w="188"/><text x="53.4333%" y="111.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (12 samples, 0.06%)</title><rect x="54.0049%" y="85" width="0.0560%" height="15" fill="rgb(219,138,40)" fg:x="11570" fg:w="12"/><text x="54.2549%" y="95.50"></text></g><g><title>mwpf`HFactor::ftranFT(HVectorBase (24 samples, 0.11%)</title><rect x="54.0609%" y="69" width="0.1120%" height="15" fill="rgb(241,228,46)" fg:x="11582" fg:w="24"/><text x="54.3109%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranL(HVectorBase (16 samples, 0.07%)</title><rect x="54.1729%" y="69" width="0.0747%" height="15" fill="rgb(223,209,38)" fg:x="11606" fg:w="16"/><text x="54.4229%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranU(HVectorBase (112 samples, 0.52%)</title><rect x="54.2476%" y="69" width="0.5228%" height="15" fill="rgb(236,164,45)" fg:x="11622" fg:w="112"/><text x="54.4976%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (155 samples, 0.72%)</title><rect x="54.0609%" y="85" width="0.7235%" height="15" fill="rgb(231,15,5)" fg:x="11582" fg:w="155"/><text x="54.3109%" y="95.50"></text></g><g><title>mwpf`HEkkDual::updateFtranDSE(HVectorBase (164 samples, 0.77%)</title><rect x="54.0609%" y="117" width="0.7655%" height="15" fill="rgb(252,35,15)" fg:x="11582" fg:w="164"/><text x="54.3109%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::ftranInScaledSpace(HVectorBase (164 samples, 0.77%)</title><rect x="54.0609%" y="101" width="0.7655%" height="15" fill="rgb(248,181,18)" fg:x="11582" fg:w="164"/><text x="54.3109%" y="111.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (9 samples, 0.04%)</title><rect x="54.7844%" y="85" width="0.0420%" height="15" fill="rgb(233,39,42)" fg:x="11737" fg:w="9"/><text x="55.0344%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.02%)</title><rect x="54.8310%" y="53" width="0.0233%" height="15" fill="rgb(238,110,33)" fg:x="11747" fg:w="5"/><text x="55.0810%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.01%)</title><rect x="55.1578%" y="37" width="0.0140%" height="15" fill="rgb(233,195,10)" fg:x="11817" fg:w="3"/><text x="55.4078%" y="47.50"></text></g><g><title>mwpf`HFactor::updateFT(HVectorBase&lt;double&gt;*, HVectorBase (68 samples, 0.32%)</title><rect x="54.8590%" y="53" width="0.3174%" height="15" fill="rgb(254,105,3)" fg:x="11753" fg:w="68"/><text x="55.1090%" y="63.50"></text></g><g><title>mwpf`HFactor::update(HVectorBase&lt;double&gt;*, HVectorBase (75 samples, 0.35%)</title><rect x="54.8310%" y="69" width="0.3501%" height="15" fill="rgb(221,225,9)" fg:x="11747" fg:w="75"/><text x="55.0810%" y="79.50"></text></g><g><title>mwpf`HEkk::updateFactor(HVectorBase&lt;double&gt;*, HVectorBase (77 samples, 0.36%)</title><rect x="54.8264%" y="101" width="0.3594%" height="15" fill="rgb(224,227,45)" fg:x="11746" fg:w="77"/><text x="55.0764%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::update(HVectorBase&lt;double&gt;*, HVectorBase (76 samples, 0.35%)</title><rect x="54.8310%" y="85" width="0.3547%" height="15" fill="rgb(229,198,43)" fg:x="11747" fg:w="76"/><text x="55.0810%" y="95.50"></text></g><g><title>mwpf`HEkk::updatePivots (3 samples, 0.01%)</title><rect x="55.1858%" y="101" width="0.0140%" height="15" fill="rgb(206,209,35)" fg:x="11823" fg:w="3"/><text x="55.4358%" y="111.50"></text></g><g><title>mwpf`HEkkDual::updatePivots (210 samples, 0.98%)</title><rect x="54.8264%" y="117" width="0.9802%" height="15" fill="rgb(245,195,53)" fg:x="11746" fg:w="210"/><text x="55.0764%" y="127.50"></text></g><g><title>mwpf`HighsSparseMatrix::update (130 samples, 0.61%)</title><rect x="55.1998%" y="101" width="0.6068%" height="15" fill="rgb(240,92,26)" fg:x="11826" fg:w="130"/><text x="55.4498%" y="111.50"></text></g><g><title>mwpf`HEkk::updateDualSteepestEdgeWeights(int, int, HVectorBase (6 samples, 0.03%)</title><rect x="55.8066%" y="101" width="0.0280%" height="15" fill="rgb(207,40,23)" fg:x="11956" fg:w="6"/><text x="56.0566%" y="111.50"></text></g><g><title>mwpf`HEkkDualRHS::updateInfeasList(HVectorBase (7 samples, 0.03%)</title><rect x="55.8346%" y="101" width="0.0327%" height="15" fill="rgb(223,111,35)" fg:x="11962" fg:w="7"/><text x="56.0846%" y="111.50"></text></g><g><title>mwpf`HEkkDualRHS::updatePrimal(HVectorBase (5 samples, 0.02%)</title><rect x="55.8673%" y="101" width="0.0233%" height="15" fill="rgb(229,147,28)" fg:x="11969" fg:w="5"/><text x="56.1173%" y="111.50"></text></g><g><title>mwpf`HEkkDual::updatePrimal(HVectorBase (21 samples, 0.10%)</title><rect x="55.8066%" y="117" width="0.0980%" height="15" fill="rgb(211,29,28)" fg:x="11956" fg:w="21"/><text x="56.0566%" y="127.50"></text></g><g><title>mwpf`HEkkDualRow::chooseMakepack(HVectorBase (22 samples, 0.10%)</title><rect x="55.9046%" y="117" width="0.1027%" height="15" fill="rgb(228,72,33)" fg:x="11977" fg:w="22"/><text x="56.1546%" y="127.50"></text></g><g><title>mwpf`HEkkDualRow::choosePossible (52 samples, 0.24%)</title><rect x="56.0073%" y="117" width="0.2427%" height="15" fill="rgb(205,214,31)" fg:x="11999" fg:w="52"/><text x="56.2573%" y="127.50"></text></g><g><title>mwpf`HEkkDual::iterate (967 samples, 4.51%)</title><rect x="51.8064%" y="133" width="4.5136%" height="15" fill="rgb(224,111,15)" fg:x="11099" fg:w="967"/><text x="52.0564%" y="143.50">mwpf`..</text></g><g><title>mwpf`HighsSparseMatrix::collectAj(HVectorBase (12 samples, 0.06%)</title><rect x="56.2640%" y="117" width="0.0560%" height="15" fill="rgb(253,21,26)" fg:x="12054" fg:w="12"/><text x="56.5140%" y="127.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (6 samples, 0.03%)</title><rect x="56.3247%" y="69" width="0.0280%" height="15" fill="rgb(245,139,43)" fg:x="12067" fg:w="6"/><text x="56.5747%" y="79.50"></text></g><g><title>mwpf`HFactor::btranU(HVectorBase (6 samples, 0.03%)</title><rect x="56.3247%" y="53" width="0.0280%" height="15" fill="rgb(252,170,7)" fg:x="12067" fg:w="6"/><text x="56.5747%" y="63.50"></text></g><g><title>mwpf`HEkk::fullBtran(HVectorBase (7 samples, 0.03%)</title><rect x="56.3247%" y="101" width="0.0327%" height="15" fill="rgb(231,118,14)" fg:x="12067" fg:w="7"/><text x="56.5747%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (7 samples, 0.03%)</title><rect x="56.3247%" y="85" width="0.0327%" height="15" fill="rgb(238,83,0)" fg:x="12067" fg:w="7"/><text x="56.5747%" y="95.50"></text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (26 samples, 0.12%)</title><rect x="56.3574%" y="101" width="0.1214%" height="15" fill="rgb(221,39,39)" fg:x="12074" fg:w="26"/><text x="56.6074%" y="111.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (26 samples, 0.12%)</title><rect x="56.3574%" y="85" width="0.1214%" height="15" fill="rgb(222,119,46)" fg:x="12074" fg:w="26"/><text x="56.6074%" y="95.50"></text></g><g><title>mwpf`HEkk::computeDual (34 samples, 0.16%)</title><rect x="56.3247%" y="117" width="0.1587%" height="15" fill="rgb(222,165,49)" fg:x="12067" fg:w="34"/><text x="56.5747%" y="127.50"></text></g><g><title>mwpf`HEkk::computeDualObjectiveValue (3 samples, 0.01%)</title><rect x="56.4834%" y="117" width="0.0140%" height="15" fill="rgb(219,113,52)" fg:x="12101" fg:w="3"/><text x="56.7334%" y="127.50"></text></g><g><title>mwpf`HEkk::computePrimal (5 samples, 0.02%)</title><rect x="56.4974%" y="117" width="0.0233%" height="15" fill="rgb(214,7,15)" fg:x="12104" fg:w="5"/><text x="56.7474%" y="127.50"></text></g><g><title>mwpf`HFactor::buildFinish (7 samples, 0.03%)</title><rect x="56.5301%" y="53" width="0.0327%" height="15" fill="rgb(235,32,4)" fg:x="12111" fg:w="7"/><text x="56.7801%" y="63.50"></text></g><g><title>mwpf`HFactor::buildKernel (87 samples, 0.41%)</title><rect x="56.5627%" y="53" width="0.4061%" height="15" fill="rgb(238,90,54)" fg:x="12118" fg:w="87"/><text x="56.8127%" y="63.50"></text></g><g><title>mwpf`HEkk::computeFactor (119 samples, 0.56%)</title><rect x="56.5301%" y="101" width="0.5555%" height="15" fill="rgb(213,208,19)" fg:x="12111" fg:w="119"/><text x="56.7801%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::invert (119 samples, 0.56%)</title><rect x="56.5301%" y="85" width="0.5555%" height="15" fill="rgb(233,156,4)" fg:x="12111" fg:w="119"/><text x="56.7801%" y="95.50"></text></g><g><title>mwpf`HFactor::build (119 samples, 0.56%)</title><rect x="56.5301%" y="69" width="0.5555%" height="15" fill="rgb(207,194,5)" fg:x="12111" fg:w="119"/><text x="56.7801%" y="79.50"></text></g><g><title>mwpf`HFactor::buildSimple (25 samples, 0.12%)</title><rect x="56.9688%" y="53" width="0.1167%" height="15" fill="rgb(206,111,30)" fg:x="12205" fg:w="25"/><text x="57.2188%" y="63.50"></text></g><g><title>mwpf`HEkk::getNonsingularInverse (120 samples, 0.56%)</title><rect x="56.5301%" y="117" width="0.5601%" height="15" fill="rgb(243,70,54)" fg:x="12111" fg:w="120"/><text x="56.7801%" y="127.50"></text></g><g><title>mwpf`HEkk::rebuildRefactor (4 samples, 0.02%)</title><rect x="57.0902%" y="117" width="0.0187%" height="15" fill="rgb(242,28,8)" fg:x="12231" fg:w="4"/><text x="57.3402%" y="127.50"></text></g><g><title>mwpf`HEkk::factorSolveError (4 samples, 0.02%)</title><rect x="57.0902%" y="101" width="0.0187%" height="15" fill="rgb(219,106,18)" fg:x="12231" fg:w="4"/><text x="57.3402%" y="111.50"></text></g><g><title>mwpf`HEkkDual::solve (1,213 samples, 5.66%)</title><rect x="51.4796%" y="165" width="5.6619%" height="15" fill="rgb(244,222,10)" fg:x="11029" fg:w="1213"/><text x="51.7296%" y="175.50">mwpf`HE..</text></g><g><title>mwpf`HEkkDual::solvePhase2 (1,165 samples, 5.44%)</title><rect x="51.7037%" y="149" width="5.4378%" height="15" fill="rgb(236,179,52)" fg:x="11077" fg:w="1165"/><text x="51.9537%" y="159.50">mwpf`HE..</text></g><g><title>mwpf`HEkkDual::rebuild (176 samples, 0.82%)</title><rect x="56.3200%" y="133" width="0.8215%" height="15" fill="rgb(213,23,39)" fg:x="12066" fg:w="176"/><text x="56.5700%" y="143.50"></text></g><g><title>mwpf`HighsSparseMatrix::collectAj(HVectorBase (3 samples, 0.01%)</title><rect x="57.1275%" y="117" width="0.0140%" height="15" fill="rgb(238,48,10)" fg:x="12239" fg:w="3"/><text x="57.3775%" y="127.50"></text></g><g><title>mwpf`HighsLp::HighsLp (62 samples, 0.29%)</title><rect x="57.3142%" y="149" width="0.2894%" height="15" fill="rgb(251,196,23)" fg:x="12279" fg:w="62"/><text x="57.5642%" y="159.50"></text></g><g><title>mwpf`HighsSparseMatrix::HighsSparseMatrix (61 samples, 0.28%)</title><rect x="57.3189%" y="133" width="0.2847%" height="15" fill="rgb(250,152,24)" fg:x="12280" fg:w="61"/><text x="57.5689%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (16 samples, 0.07%)</title><rect x="57.6036%" y="133" width="0.0747%" height="15" fill="rgb(209,150,17)" fg:x="12341" fg:w="16"/><text x="57.8536%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (16 samples, 0.07%)</title><rect x="57.6036%" y="117" width="0.0747%" height="15" fill="rgb(234,202,34)" fg:x="12341" fg:w="16"/><text x="57.8536%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::debugCheckData(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (116 samples, 0.54%)</title><rect x="57.1415%" y="165" width="0.5414%" height="15" fill="rgb(253,148,53)" fg:x="12242" fg:w="116"/><text x="57.3915%" y="175.50"></text></g><g><title>mwpf`HighsLp::~HighsLp (17 samples, 0.08%)</title><rect x="57.6036%" y="149" width="0.0794%" height="15" fill="rgb(218,129,16)" fg:x="12341" fg:w="17"/><text x="57.8536%" y="159.50"></text></g><g><title>mwpf`HEkk::solve (2,030 samples, 9.48%)</title><rect x="48.2123%" y="181" width="9.4754%" height="15" fill="rgb(216,85,19)" fg:x="10329" fg:w="2030"/><text x="48.4623%" y="191.50">mwpf`HEkk::sol..</text></g><g><title>mwpf`HighsHashHelpers::sparse_combine (5 samples, 0.02%)</title><rect x="57.6876%" y="181" width="0.0233%" height="15" fill="rgb(235,228,7)" fg:x="12359" fg:w="5"/><text x="57.9376%" y="191.50"></text></g><g><title>mwpf`Highs::callSolveLp(HighsLp&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2,337 samples, 10.91%)</title><rect x="48.1609%" y="229" width="10.9083%" height="15" fill="rgb(245,175,0)" fg:x="10318" fg:w="2337"/><text x="48.4109%" y="239.50">mwpf`Highs::call..</text></g><g><title>mwpf`solveLp(HighsLpSolverObject&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (2,337 samples, 10.91%)</title><rect x="48.1609%" y="213" width="10.9083%" height="15" fill="rgb(208,168,36)" fg:x="10318" fg:w="2337"/><text x="48.4109%" y="223.50">mwpf`solveLp(Hig..</text></g><g><title>mwpf`solveLpSimplex(HighsLpSolverObject&amp;) (2,337 samples, 10.91%)</title><rect x="48.1609%" y="197" width="10.9083%" height="15" fill="rgb(246,171,24)" fg:x="10318" fg:w="2337"/><text x="48.4109%" y="207.50">mwpf`solveLpSimp..</text></g><g><title>mwpf`considerScaling(HighsOptions const&amp;, HighsLp&amp;) (291 samples, 1.36%)</title><rect x="57.7110%" y="181" width="1.3583%" height="15" fill="rgb(215,142,24)" fg:x="12364" fg:w="291"/><text x="57.9610%" y="191.50"></text></g><g><title>mwpf`HighsSparseMatrix::range (291 samples, 1.36%)</title><rect x="57.7110%" y="165" width="1.3583%" height="15" fill="rgb(250,187,7)" fg:x="12364" fg:w="291"/><text x="57.9610%" y="175.50"></text></g><g><title>mwpf`Highs::returnFromRun (3 samples, 0.01%)</title><rect x="59.0693%" y="229" width="0.0140%" height="15" fill="rgb(228,66,33)" fg:x="12655" fg:w="3"/><text x="59.3193%" y="239.50"></text></g><g><title>mwpf`calculateRowValuesQuad(HighsLp const&amp;, HighsSolution&amp;, int) (78 samples, 0.36%)</title><rect x="59.0833%" y="213" width="0.3641%" height="15" fill="rgb(234,215,21)" fg:x="12658" fg:w="78"/><text x="59.3333%" y="223.50"></text></g><g><title>mwpf`Highs::runPostsolve (81 samples, 0.38%)</title><rect x="59.0833%" y="229" width="0.3781%" height="15" fill="rgb(222,191,20)" fg:x="12658" fg:w="81"/><text x="59.3333%" y="239.50"></text></g><g><title>mwpf`PresolveComponent::init (42 samples, 0.20%)</title><rect x="59.4614%" y="213" width="0.1960%" height="15" fill="rgb(245,79,54)" fg:x="12739" fg:w="42"/><text x="59.7114%" y="223.50"></text></g><g><title>mwpf`HighsLp::operator= (42 samples, 0.20%)</title><rect x="59.4614%" y="197" width="0.1960%" height="15" fill="rgb(240,10,37)" fg:x="12739" fg:w="42"/><text x="59.7114%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (42 samples, 0.20%)</title><rect x="59.4614%" y="181" width="0.1960%" height="15" fill="rgb(214,192,32)" fg:x="12739" fg:w="42"/><text x="59.7114%" y="191.50"></text></g><g><title>libsystem_m.dylib`frexp (191 samples, 0.89%)</title><rect x="59.6574%" y="165" width="0.8915%" height="15" fill="rgb(209,36,54)" fg:x="12781" fg:w="191"/><text x="59.9074%" y="175.50"></text></g><g><title>libsystem_m.dylib`ldexp (79 samples, 0.37%)</title><rect x="60.5489%" y="165" width="0.3687%" height="15" fill="rgb(220,10,11)" fg:x="12972" fg:w="79"/><text x="60.7989%" y="175.50"></text></g><g><title>mwpf`DYLD-STUB$$frexp (45 samples, 0.21%)</title><rect x="60.9223%" y="165" width="0.2100%" height="15" fill="rgb(221,106,17)" fg:x="13052" fg:w="45"/><text x="61.1723%" y="175.50"></text></g><g><title>mwpf`DYLD-STUB$$ldexp (47 samples, 0.22%)</title><rect x="61.1324%" y="165" width="0.2194%" height="15" fill="rgb(251,142,44)" fg:x="13097" fg:w="47"/><text x="61.3824%" y="175.50"></text></g><g><title>mwpf`HighsHashHelpers::sparse_combine (1,403 samples, 6.55%)</title><rect x="61.3518%" y="165" width="6.5487%" height="15" fill="rgb(238,13,15)" fg:x="13144" fg:w="1403"/><text x="61.6018%" y="175.50">mwpf`High..</text></g><g><title>libsystem_malloc.dylib`free_medium (7 samples, 0.03%)</title><rect x="75.1447%" y="149" width="0.0327%" height="15" fill="rgb(208,107,27)" fg:x="16099" fg:w="7"/><text x="75.3947%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (6 samples, 0.03%)</title><rect x="75.1494%" y="133" width="0.0280%" height="15" fill="rgb(205,136,37)" fg:x="16100" fg:w="6"/><text x="75.3994%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.01%)</title><rect x="75.1774%" y="149" width="0.0140%" height="15" fill="rgb(250,205,27)" fg:x="16106" fg:w="3"/><text x="75.4274%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (22 samples, 0.10%)</title><rect x="75.1914%" y="149" width="0.1027%" height="15" fill="rgb(210,80,43)" fg:x="16109" fg:w="22"/><text x="75.4414%" y="159.50"></text></g><g><title>mwpf`HighsLinearSumBounds::remove (320 samples, 1.49%)</title><rect x="75.2941%" y="149" width="1.4937%" height="15" fill="rgb(247,160,36)" fg:x="16131" fg:w="320"/><text x="75.5441%" y="159.50"></text></g><g><title>mwpf`HighsLinearSumBounds::updatedImplVarLower (71 samples, 0.33%)</title><rect x="76.7877%" y="149" width="0.3314%" height="15" fill="rgb(234,13,49)" fg:x="16451" fg:w="71"/><text x="77.0377%" y="159.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSliceInOrder&gt;::iterator::operator++ (28 samples, 0.13%)</title><rect x="77.1191%" y="149" width="0.1307%" height="15" fill="rgb(234,122,0)" fg:x="16522" fg:w="28"/><text x="77.3691%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::changeImplColLower (24 samples, 0.11%)</title><rect x="77.2498%" y="149" width="0.1120%" height="15" fill="rgb(207,146,38)" fg:x="16550" fg:w="24"/><text x="77.4998%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (14 samples, 0.07%)</title><rect x="77.2965%" y="133" width="0.0653%" height="15" fill="rgb(207,177,25)" fg:x="16560" fg:w="14"/><text x="77.5465%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::unlink (3 samples, 0.01%)</title><rect x="77.3665%" y="133" width="0.0140%" height="15" fill="rgb(211,178,42)" fg:x="16575" fg:w="3"/><text x="77.6165%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::fixColToLower (7 samples, 0.03%)</title><rect x="77.3618%" y="149" width="0.0327%" height="15" fill="rgb(230,69,54)" fg:x="16574" fg:w="7"/><text x="77.6118%" y="159.50"></text></g><g><title>mwpf`void presolve::HighsPostsolveStack::fixedColAtLower&lt;HighsTripletListSlice&gt;(int, double, double, HighsMatrixSlice (3 samples, 0.01%)</title><rect x="77.3805%" y="133" width="0.0140%" height="15" fill="rgb(214,135,41)" fg:x="16578" fg:w="3"/><text x="77.6305%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedCol (38 samples, 0.18%)</title><rect x="77.3945%" y="149" width="0.1774%" height="15" fill="rgb(237,67,25)" fg:x="16581" fg:w="38"/><text x="77.6445%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (36 samples, 0.17%)</title><rect x="77.5719%" y="149" width="0.1680%" height="15" fill="rgb(222,189,50)" fg:x="16619" fg:w="36"/><text x="77.8219%" y="159.50"></text></g><g><title>mwpf`HighsLinearSumBounds::updatedVarLower (91 samples, 0.42%)</title><rect x="77.7399%" y="133" width="0.4248%" height="15" fill="rgb(245,148,34)" fg:x="16655" fg:w="91"/><text x="77.9899%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (25 samples, 0.12%)</title><rect x="78.1647%" y="133" width="0.1167%" height="15" fill="rgb(222,29,6)" fg:x="16746" fg:w="25"/><text x="78.4147%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::removeRowSingletons (156 samples, 0.73%)</title><rect x="77.7399%" y="149" width="0.7282%" height="15" fill="rgb(221,189,43)" fg:x="16655" fg:w="156"/><text x="77.9899%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::singletonRow (39 samples, 0.18%)</title><rect x="78.2860%" y="133" width="0.1820%" height="15" fill="rgb(207,36,27)" fg:x="16772" fg:w="39"/><text x="78.5360%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (13 samples, 0.06%)</title><rect x="78.4074%" y="117" width="0.0607%" height="15" fill="rgb(217,90,24)" fg:x="16798" fg:w="13"/><text x="78.6574%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (4 samples, 0.02%)</title><rect x="78.5054%" y="133" width="0.0187%" height="15" fill="rgb(224,66,35)" fg:x="16819" fg:w="4"/><text x="78.7554%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.02%)</title><rect x="78.5241%" y="133" width="0.0187%" height="15" fill="rgb(221,13,50)" fg:x="16823" fg:w="4"/><text x="78.7741%" y="143.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (6 samples, 0.03%)</title><rect x="79.0235%" y="117" width="0.0280%" height="15" fill="rgb(236,68,49)" fg:x="16930" fg:w="6"/><text x="79.2735%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.03%)</title><rect x="79.0235%" y="101" width="0.0280%" height="15" fill="rgb(229,146,28)" fg:x="16930" fg:w="6"/><text x="79.2735%" y="111.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSliceInOrder&gt;::iterator::iterator (114 samples, 0.53%)</title><rect x="78.5568%" y="133" width="0.5321%" height="15" fill="rgb(225,31,38)" fg:x="16830" fg:w="114"/><text x="78.8068%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::storeRow (155 samples, 0.72%)</title><rect x="78.4681%" y="149" width="0.7235%" height="15" fill="rgb(250,208,3)" fg:x="16811" fg:w="155"/><text x="78.7181%" y="159.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSliceInOrder&gt;::iterator::operator++ (22 samples, 0.10%)</title><rect x="79.0889%" y="133" width="0.1027%" height="15" fill="rgb(246,54,23)" fg:x="16944" fg:w="22"/><text x="79.3389%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedCol (24 samples, 0.11%)</title><rect x="83.9853%" y="133" width="0.1120%" height="15" fill="rgb(243,76,11)" fg:x="17993" fg:w="24"/><text x="84.2353%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::unlink (1,073 samples, 5.01%)</title><rect x="79.1916%" y="149" width="5.0084%" height="15" fill="rgb(245,21,50)" fg:x="16966" fg:w="1073"/><text x="79.4416%" y="159.50">mwpf`p..</text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (22 samples, 0.10%)</title><rect x="84.0973%" y="133" width="0.1027%" height="15" fill="rgb(228,9,43)" fg:x="18017" fg:w="22"/><text x="84.3473%" y="143.50"></text></g><g><title>mwpf`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;&gt;&gt;::__node_insert_multi(std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, void*&gt;*&gt;, std::__1::__hash_node&lt;std::__1::__hash_value_type (3 samples, 0.01%)</title><rect x="84.2000%" y="149" width="0.0140%" height="15" fill="rgb(208,100,47)" fg:x="18039" fg:w="3"/><text x="84.4500%" y="159.50"></text></g><g><title>mwpf`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;&gt;&gt;::__node_insert_multi(std::__1::__hash_node&lt;std::__1::__hash_value_type (3 samples, 0.01%)</title><rect x="84.2000%" y="133" width="0.0140%" height="15" fill="rgb(232,26,8)" fg:x="18039" fg:w="3"/><text x="84.4500%" y="143.50"></text></g><g><title>mwpf`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;&gt;&gt;::__node_insert_multi_prepare(unsigned long, std::__1::__hash_value_type (3 samples, 0.01%)</title><rect x="84.2000%" y="117" width="0.0140%" height="15" fill="rgb(216,166,38)" fg:x="18039" fg:w="3"/><text x="84.4500%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::detectParallelRowsAndCols (3,496 samples, 16.32%)</title><rect x="67.9005%" y="165" width="16.3181%" height="15" fill="rgb(251,202,51)" fg:x="14547" fg:w="3496"/><text x="68.1505%" y="175.50">mwpf`presolve::HPresolve:..</text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSlicePreOrder&gt;::iterator::operator++ (13 samples, 0.06%)</title><rect x="84.2233%" y="133" width="0.0607%" height="15" fill="rgb(254,216,34)" fg:x="18044" fg:w="13"/><text x="84.4733%" y="143.50"></text></g><g><title>mwpf`HighsLinearSumBounds::getResidualSumLowerOrig (23 samples, 0.11%)</title><rect x="84.2933%" y="117" width="0.1074%" height="15" fill="rgb(251,32,27)" fg:x="18059" fg:w="23"/><text x="84.5433%" y="127.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSlicePreOrder&gt;::iterator::operator++ (12 samples, 0.06%)</title><rect x="84.4007%" y="117" width="0.0560%" height="15" fill="rgb(208,127,28)" fg:x="18082" fg:w="12"/><text x="84.6507%" y="127.50"></text></g><g><title>mwpf`HighsLinearSumBounds::updatedImplVarUpper (41 samples, 0.19%)</title><rect x="84.9515%" y="101" width="0.1914%" height="15" fill="rgb(224,137,22)" fg:x="18200" fg:w="41"/><text x="85.2015%" y="111.50"></text></g><g><title>mwpf`presolve::HPresolve::changeImplColUpper (26 samples, 0.12%)</title><rect x="85.1428%" y="101" width="0.1214%" height="15" fill="rgb(254,70,32)" fg:x="18241" fg:w="26"/><text x="85.3928%" y="111.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (10 samples, 0.05%)</title><rect x="85.2175%" y="85" width="0.0467%" height="15" fill="rgb(229,75,37)" fg:x="18257" fg:w="10"/><text x="85.4675%" y="95.50"></text></g><g><title>mwpf`presolve::HPresolve::rowPresolve (214 samples, 1.00%)</title><rect x="84.2840%" y="133" width="0.9989%" height="15" fill="rgb(252,64,23)" fg:x="18057" fg:w="214"/><text x="84.5340%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::updateColImpliedBounds (177 samples, 0.83%)</title><rect x="84.4567%" y="117" width="0.8262%" height="15" fill="rgb(232,162,48)" fg:x="18094" fg:w="177"/><text x="84.7067%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (4 samples, 0.02%)</title><rect x="85.2642%" y="101" width="0.0187%" height="15" fill="rgb(246,160,12)" fg:x="18267" fg:w="4"/><text x="85.5142%" y="111.50"></text></g><g><title>mwpf`presolve::HPresolve::fastPresolveLoop (238 samples, 1.11%)</title><rect x="84.2186%" y="165" width="1.1109%" height="15" fill="rgb(247,166,0)" fg:x="18043" fg:w="238"/><text x="84.4686%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::presolveChangedRows (238 samples, 1.11%)</title><rect x="84.2186%" y="149" width="1.1109%" height="15" fill="rgb(249,219,21)" fg:x="18043" fg:w="238"/><text x="84.4686%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::updateColImpliedBounds (10 samples, 0.05%)</title><rect x="85.2829%" y="133" width="0.0467%" height="15" fill="rgb(205,209,3)" fg:x="18271" fg:w="10"/><text x="85.5329%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::findNonzero (508 samples, 2.37%)</title><rect x="85.3295%" y="165" width="2.3712%" height="15" fill="rgb(243,44,1)" fg:x="18281" fg:w="508"/><text x="85.5795%" y="175.50">mw..</text></g><g><title>mwpf`HighsLinearSumBounds::add (53 samples, 0.25%)</title><rect x="87.7054%" y="149" width="0.2474%" height="15" fill="rgb(206,159,16)" fg:x="18790" fg:w="53"/><text x="87.9554%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::link (30 samples, 0.14%)</title><rect x="87.9528%" y="149" width="0.1400%" height="15" fill="rgb(244,77,30)" fg:x="18843" fg:w="30"/><text x="88.2028%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::fromCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (86 samples, 0.40%)</title><rect x="87.7007%" y="165" width="0.4014%" height="15" fill="rgb(218,69,12)" fg:x="18789" fg:w="86"/><text x="87.9507%" y="175.50"></text></g><g><title>mwpf`HighsLinearSumBounds::getResidualSumLowerOrig (51 samples, 0.24%)</title><rect x="88.2142%" y="133" width="0.2381%" height="15" fill="rgb(212,87,7)" fg:x="18899" fg:w="51"/><text x="88.4642%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::colPresolve (190 samples, 0.89%)</title><rect x="88.1021%" y="149" width="0.8869%" height="15" fill="rgb(245,114,25)" fg:x="18875" fg:w="190"/><text x="88.3521%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::updateRowDualImpliedBounds (115 samples, 0.54%)</title><rect x="88.4522%" y="133" width="0.5368%" height="15" fill="rgb(210,61,42)" fg:x="18950" fg:w="115"/><text x="88.7022%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::chrono::steady_clock::now (4 samples, 0.02%)</title><rect x="88.9937%" y="133" width="0.0187%" height="15" fill="rgb(211,52,33)" fg:x="19066" fg:w="4"/><text x="89.2437%" y="143.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (4 samples, 0.02%)</title><rect x="88.9937%" y="117" width="0.0187%" height="15" fill="rgb(234,58,33)" fg:x="19066" fg:w="4"/><text x="89.2437%" y="127.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (4 samples, 0.02%)</title><rect x="88.9937%" y="101" width="0.0187%" height="15" fill="rgb(220,115,36)" fg:x="19066" fg:w="4"/><text x="89.2437%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`mach_continuous_time (4 samples, 0.02%)</title><rect x="88.9937%" y="85" width="0.0187%" height="15" fill="rgb(243,153,54)" fg:x="19066" fg:w="4"/><text x="89.2437%" y="95.50"></text></g><g><title>mwpf`HighsLinearSumBounds::updatedImplVarLower (26 samples, 0.12%)</title><rect x="89.0170%" y="117" width="0.1214%" height="15" fill="rgb(251,47,18)" fg:x="19071" fg:w="26"/><text x="89.2670%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::changeImplColLower (49 samples, 0.23%)</title><rect x="89.1383%" y="117" width="0.2287%" height="15" fill="rgb(242,102,42)" fg:x="19097" fg:w="49"/><text x="89.3883%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (17 samples, 0.08%)</title><rect x="89.2877%" y="101" width="0.0794%" height="15" fill="rgb(234,31,38)" fg:x="19129" fg:w="17"/><text x="89.5377%" y="111.50"></text></g><g><title>mwpf`presolve::HPresolve::rowPresolve (104 samples, 0.49%)</title><rect x="88.9890%" y="149" width="0.4854%" height="15" fill="rgb(221,117,51)" fg:x="19065" fg:w="104"/><text x="89.2390%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::updateColImpliedBounds (99 samples, 0.46%)</title><rect x="89.0123%" y="133" width="0.4621%" height="15" fill="rgb(212,20,18)" fg:x="19070" fg:w="99"/><text x="89.2623%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (23 samples, 0.11%)</title><rect x="89.3671%" y="117" width="0.1074%" height="15" fill="rgb(245,133,36)" fg:x="19146" fg:w="23"/><text x="89.6171%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::initialRowAndColPresolve (328 samples, 1.53%)</title><rect x="88.1021%" y="165" width="1.5310%" height="15" fill="rgb(212,6,19)" fg:x="18875" fg:w="328"/><text x="88.3521%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::updateRowDualImpliedBounds (34 samples, 0.16%)</title><rect x="89.4744%" y="149" width="0.1587%" height="15" fill="rgb(218,1,36)" fg:x="19169" fg:w="34"/><text x="89.7244%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::shrinkProblem (52 samples, 0.24%)</title><rect x="89.6331%" y="165" width="0.2427%" height="15" fill="rgb(246,84,54)" fg:x="19203" fg:w="52"/><text x="89.8831%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::toCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator (59 samples, 0.28%)</title><rect x="89.8758%" y="165" width="0.2754%" height="15" fill="rgb(242,110,6)" fg:x="19255" fg:w="59"/><text x="90.1258%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::unlink (81 samples, 0.38%)</title><rect x="90.1512%" y="165" width="0.3781%" height="15" fill="rgb(214,47,5)" fg:x="19314" fg:w="81"/><text x="90.4012%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::presolve (6,616 samples, 30.88%)</title><rect x="59.6574%" y="181" width="30.8813%" height="15" fill="rgb(218,159,25)" fg:x="12781" fg:w="6616"/><text x="59.9074%" y="191.50">mwpf`presolve::HPresolve::presolve</text></g><g><title>mwpf`presolve::HPresolve::shrinkProblem (6 samples, 0.03%)</title><rect x="90.5386%" y="181" width="0.0280%" height="15" fill="rgb(215,211,28)" fg:x="19397" fg:w="6"/><text x="90.7886%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::run (6,630 samples, 30.95%)</title><rect x="59.6574%" y="197" width="30.9466%" height="15" fill="rgb(238,59,32)" fg:x="12781" fg:w="6630"/><text x="59.9074%" y="207.50">mwpf`presolve::HPresolve::run</text></g><g><title>mwpf`presolve::HPresolve::toCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator (8 samples, 0.04%)</title><rect x="90.5667%" y="181" width="0.0373%" height="15" fill="rgb(226,82,3)" fg:x="19403" fg:w="8"/><text x="90.8167%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (60 samples, 0.28%)</title><rect x="90.6600%" y="165" width="0.2801%" height="15" fill="rgb(240,164,32)" fg:x="19423" fg:w="60"/><text x="90.9100%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (27 samples, 0.13%)</title><rect x="90.9401%" y="165" width="0.1260%" height="15" fill="rgb(232,46,7)" fg:x="19483" fg:w="27"/><text x="91.1901%" y="175.50"></text></g><g><title>mwpf`HighsLinearSumBounds::add (571 samples, 2.67%)</title><rect x="91.0661%" y="165" width="2.6652%" height="15" fill="rgb(229,129,53)" fg:x="19510" fg:w="571"/><text x="91.3161%" y="175.50">mw..</text></g><g><title>mwpf`presolve::HPresolve::link (379 samples, 1.77%)</title><rect x="93.7360%" y="165" width="1.7690%" height="15" fill="rgb(234,188,29)" fg:x="20082" fg:w="379"/><text x="93.9860%" y="175.50"></text></g><g><title>mwpf`std::__1::enable_if&lt;__is_cpp17_forward_iterator&lt;std::__1::__wrap_iter&lt;int*&gt;&gt;::value &amp;&amp; is_constructible&lt;int, std::__1::iterator_traits&lt;std::__1::__wrap_iter&lt;int*&gt;&gt;::reference&gt;::value, std::__1::__wrap_iter&lt;int*&gt;&gt;::type std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::insert&lt;std::__1::__wrap_iter&lt;int*&gt;&gt;(std::__1::__wrap_iter&lt;int const*&gt;, std::__1::__wrap_iter&lt;int*&gt;, std::__1::__wrap_iter (18 samples, 0.08%)</title><rect x="95.5050%" y="165" width="0.0840%" height="15" fill="rgb(246,141,4)" fg:x="20461" fg:w="18"/><text x="95.7550%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::fromCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (1,080 samples, 5.04%)</title><rect x="90.6040%" y="181" width="5.0411%" height="15" fill="rgb(229,23,39)" fg:x="19411" fg:w="1080"/><text x="90.8540%" y="191.50">mwpf`p..</text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::insert(std::__1::__wrap_iter (12 samples, 0.06%)</title><rect x="95.5891%" y="165" width="0.0560%" height="15" fill="rgb(206,12,3)" fg:x="20479" fg:w="12"/><text x="95.8391%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::setInput (1,101 samples, 5.14%)</title><rect x="90.6040%" y="197" width="5.1391%" height="15" fill="rgb(252,226,20)" fg:x="19411" fg:w="1101"/><text x="90.8540%" y="207.50">mwpf`p..</text></g><g><title>mwpf`presolve::HPresolve::link (21 samples, 0.10%)</title><rect x="95.6451%" y="181" width="0.0980%" height="15" fill="rgb(216,123,35)" fg:x="20491" fg:w="21"/><text x="95.8951%" y="191.50"></text></g><g><title>mwpf`Highs::runPresolve (7,860 samples, 36.69%)</title><rect x="59.4614%" y="229" width="36.6878%" height="15" fill="rgb(212,68,40)" fg:x="12739" fg:w="7860"/><text x="59.7114%" y="239.50">mwpf`Highs::runPresolve</text></g><g><title>mwpf`PresolveComponent::run (7,818 samples, 36.49%)</title><rect x="59.6574%" y="213" width="36.4918%" height="15" fill="rgb(254,125,32)" fg:x="12781" fg:w="7818"/><text x="59.9074%" y="223.50">mwpf`PresolveComponent::run</text></g><g><title>mwpf`presolve::HPresolve::~HPresolve (87 samples, 0.41%)</title><rect x="95.7431%" y="197" width="0.4061%" height="15" fill="rgb(253,97,22)" fg:x="20512" fg:w="87"/><text x="95.9931%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (87 samples, 0.41%)</title><rect x="95.7431%" y="181" width="0.4061%" height="15" fill="rgb(241,101,14)" fg:x="20512" fg:w="87"/><text x="95.9931%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (87 samples, 0.41%)</title><rect x="95.7431%" y="165" width="0.4061%" height="15" fill="rgb(238,103,29)" fg:x="20512" fg:w="87"/><text x="95.9931%" y="175.50"></text></g><g><title>mwpf`HighsOptions::HighsOptions (4 samples, 0.02%)</title><rect x="96.1492%" y="229" width="0.0187%" height="15" fill="rgb(233,195,47)" fg:x="20599" fg:w="4"/><text x="96.3992%" y="239.50"></text></g><g><title>mwpf`HighsOptions::initRecords (4 samples, 0.02%)</title><rect x="96.1492%" y="213" width="0.0187%" height="15" fill="rgb(246,218,30)" fg:x="20599" fg:w="4"/><text x="96.3992%" y="223.50"></text></g><g><title>mwpf`HighsSparseMatrix::assessSmallValues (7 samples, 0.03%)</title><rect x="96.1678%" y="229" width="0.0327%" height="15" fill="rgb(219,145,47)" fg:x="20603" fg:w="7"/><text x="96.4178%" y="239.50"></text></g><g><title>mwpf`HighsSparseMatrix::ensureColwise (160 samples, 0.75%)</title><rect x="96.2005%" y="229" width="0.7468%" height="15" fill="rgb(243,12,26)" fg:x="20610" fg:w="160"/><text x="96.4505%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (30 samples, 0.14%)</title><rect x="96.8073%" y="213" width="0.1400%" height="15" fill="rgb(214,87,16)" fg:x="20740" fg:w="30"/><text x="97.0573%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.14%)</title><rect x="96.8073%" y="197" width="0.1400%" height="15" fill="rgb(208,99,42)" fg:x="20740" fg:w="30"/><text x="97.0573%" y="207.50"></text></g><g><title>mwpf`Highs::run (10,455 samples, 48.80%)</title><rect x="48.1563%" y="245" width="48.8004%" height="15" fill="rgb(253,99,2)" fg:x="10317" fg:w="10455"/><text x="48.4063%" y="255.50">mwpf`Highs::run</text></g><g><title>mwpf`highs::Model::solve (10,478 samples, 48.91%)</title><rect x="48.1563%" y="261" width="48.9078%" height="15" fill="rgb(220,168,23)" fg:x="10317" fg:w="10478"/><text x="48.4063%" y="271.50">mwpf`highs::Model::solve</text></g><g><title>mwpf`HighsSparseMatrix::hasLargeValue (23 samples, 0.11%)</title><rect x="96.9567%" y="245" width="0.1074%" height="15" fill="rgb(242,38,24)" fg:x="20772" fg:w="23"/><text x="97.2067%" y="255.50"></text></g><g><title>mwpf`HighsOptions::initRecords (8 samples, 0.04%)</title><rect x="97.0687%" y="213" width="0.0373%" height="15" fill="rgb(225,182,9)" fg:x="20796" fg:w="8"/><text x="97.3187%" y="223.50"></text></g><g><title>mwpf`highs::Problem&lt;MATRIX&gt;::try_optimise (10 samples, 0.05%)</title><rect x="97.0640%" y="261" width="0.0467%" height="15" fill="rgb(243,178,37)" fg:x="20795" fg:w="10"/><text x="97.3140%" y="271.50"></text></g><g><title>mwpf`Highs_create (10 samples, 0.05%)</title><rect x="97.0640%" y="245" width="0.0467%" height="15" fill="rgb(232,139,19)" fg:x="20795" fg:w="10"/><text x="97.3140%" y="255.50"></text></g><g><title>mwpf`Highs::Highs (10 samples, 0.05%)</title><rect x="97.0640%" y="229" width="0.0467%" height="15" fill="rgb(225,201,24)" fg:x="20795" fg:w="10"/><text x="97.3140%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.11%)</title><rect x="98.3523%" y="245" width="0.1074%" height="15" fill="rgb(221,47,46)" fg:x="21071" fg:w="23"/><text x="98.6023%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune (20,860 samples, 97.37%)</title><rect x="1.1109%" y="293" width="97.3674%" height="15" fill="rgb(249,23,13)" fg:x="238" fg:w="20860"/><text x="1.3609%" y="303.50">mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune</text></g><g><title>mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize (13,407 samples, 62.58%)</title><rect x="35.8990%" y="277" width="62.5794%" height="15" fill="rgb(219,9,5)" fg:x="7691" fg:w="13407"/><text x="36.1490%" y="287.50">mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize</text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (293 samples, 1.37%)</title><rect x="97.1107%" y="261" width="1.3676%" height="15" fill="rgb(254,171,16)" fg:x="20805" fg:w="293"/><text x="97.3607%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.07%)</title><rect x="99.6593%" y="277" width="0.0747%" height="15" fill="rgb(230,171,20)" fg:x="21351" fg:w="16"/><text x="99.9093%" y="287.50"></text></g><g><title>mwpf`mwpf::dual_module::DualModuleImpl::get_conflicts_tune (269 samples, 1.26%)</title><rect x="98.4877%" y="293" width="1.2556%" height="15" fill="rgb(210,71,41)" fg:x="21100" fg:w="269"/><text x="98.7377%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_tune (21,138 samples, 98.67%)</title><rect x="1.0922%" y="309" width="98.6650%" height="15" fill="rgb(206,173,20)" fg:x="234" fg:w="21138"/><text x="1.3422%" y="319.50">mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_tune</text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::union (3 samples, 0.01%)</title><rect x="99.7433%" y="293" width="0.0140%" height="15" fill="rgb(233,88,34)" fg:x="21369" fg:w="3"/><text x="99.9933%" y="303.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::load (10 samples, 0.05%)</title><rect x="99.7573%" y="309" width="0.0467%" height="15" fill="rgb(223,209,46)" fg:x="21372" fg:w="10"/><text x="100.0073%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node (10 samples, 0.05%)</title><rect x="99.7573%" y="293" width="0.0467%" height="15" fill="rgb(250,43,18)" fg:x="21372" fg:w="10"/><text x="100.0073%" y="303.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (10 samples, 0.05%)</title><rect x="99.7573%" y="277" width="0.0467%" height="15" fill="rgb(208,13,10)" fg:x="21372" fg:w="10"/><text x="100.0073%" y="287.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (10 samples, 0.05%)</title><rect x="99.7573%" y="261" width="0.0467%" height="15" fill="rgb(212,200,36)" fg:x="21372" fg:w="10"/><text x="100.0073%" y="271.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (10 samples, 0.05%)</title><rect x="99.7573%" y="245" width="0.0467%" height="15" fill="rgb(225,90,30)" fg:x="21372" fg:w="10"/><text x="100.0073%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::mwpf_solver::SolverSerialPlugins as mwpf::mwpf_solver::PrimalDualSolver&gt;::solve_visualizer (21,324 samples, 99.53%)</title><rect x="0.2754%" y="341" width="99.5332%" height="15" fill="rgb(236,182,39)" fg:x="59" fg:w="21324"/><text x="0.5254%" y="351.50">mwpf`&lt;mwpf::mwpf_solver::SolverSerialPlugins as mwpf::mwpf_solver::PrimalDualSolver&gt;::solve_visualizer</text></g><g><title>mwpf`mwpf::primal_module::PrimalModuleImpl::solve_visualizer (21,324 samples, 99.53%)</title><rect x="0.2754%" y="325" width="99.5332%" height="15" fill="rgb(212,144,35)" fg:x="59" fg:w="21324"/><text x="0.5254%" y="335.50">mwpf`mwpf::primal_module::PrimalModuleImpl::solve_visualizer</text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.01%)</title><rect x="99.8133%" y="309" width="0.0140%" height="15" fill="rgb(228,63,44)" fg:x="21384" fg:w="3"/><text x="100.0633%" y="319.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;qecp::model_hypergraph::ModelHyperedgeGroup&gt; (3 samples, 0.01%)</title><rect x="99.8133%" y="293" width="0.0140%" height="15" fill="rgb(228,109,6)" fg:x="21384" fg:w="3"/><text x="100.0633%" y="303.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.01%)</title><rect x="99.8133%" y="277" width="0.0140%" height="15" fill="rgb(238,117,24)" fg:x="21384" fg:w="3"/><text x="100.0633%" y="287.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::example_codes::QECPlaygroundCode&gt; (4 samples, 0.02%)</title><rect x="99.8133%" y="341" width="0.0187%" height="15" fill="rgb(242,26,26)" fg:x="21384" fg:w="4"/><text x="100.0633%" y="351.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.02%)</title><rect x="99.8133%" y="325" width="0.0187%" height="15" fill="rgb(221,92,48)" fg:x="21384" fg:w="4"/><text x="100.0633%" y="335.50"></text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::clear (5 samples, 0.02%)</title><rect x="99.8413%" y="341" width="0.0233%" height="15" fill="rgb(209,209,32)" fg:x="21390" fg:w="5"/><text x="100.0913%" y="351.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.02%)</title><rect x="99.8413%" y="325" width="0.0233%" height="15" fill="rgb(221,70,22)" fg:x="21390" fg:w="5"/><text x="100.0913%" y="335.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (5 samples, 0.02%)</title><rect x="99.8413%" y="309" width="0.0233%" height="15" fill="rgb(248,145,5)" fg:x="21390" fg:w="5"/><text x="100.0913%" y="319.50"></text></g><g><title>dyld`start (21,419 samples, 99.98%)</title><rect x="0.0000%" y="469" width="99.9767%" height="15" fill="rgb(226,116,26)" fg:x="0" fg:w="21419"/><text x="0.2500%" y="479.50">dyld`start</text></g><g><title>mwpf`main (21,418 samples, 99.97%)</title><rect x="0.0047%" y="453" width="99.9720%" height="15" fill="rgb(244,5,17)" fg:x="1" fg:w="21418"/><text x="0.2547%" y="463.50">mwpf`main</text></g><g><title>mwpf`std::rt::lang_start (21,418 samples, 99.97%)</title><rect x="0.0047%" y="437" width="99.9720%" height="15" fill="rgb(252,159,33)" fg:x="1" fg:w="21418"/><text x="0.2547%" y="447.50">mwpf`std::rt::lang_start</text></g><g><title>mwpf`std::rt::lang_start_internal (21,418 samples, 99.97%)</title><rect x="0.0047%" y="421" width="99.9720%" height="15" fill="rgb(206,71,0)" fg:x="1" fg:w="21418"/><text x="0.2547%" y="431.50">mwpf`std::rt::lang_start_internal</text></g><g><title>mwpf`std::rt::lang_start::_{{closure}} (21,418 samples, 99.97%)</title><rect x="0.0047%" y="405" width="99.9720%" height="15" fill="rgb(233,118,54)" fg:x="1" fg:w="21418"/><text x="0.2547%" y="415.50">mwpf`std::rt::lang_start::_{{closure}}</text></g><g><title>mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace (21,418 samples, 99.97%)</title><rect x="0.0047%" y="389" width="99.9720%" height="15" fill="rgb(234,83,48)" fg:x="1" fg:w="21418"/><text x="0.2547%" y="399.50">mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mwpf`mwpf::main (21,418 samples, 99.97%)</title><rect x="0.0047%" y="373" width="99.9720%" height="15" fill="rgb(228,3,54)" fg:x="1" fg:w="21418"/><text x="0.2547%" y="383.50">mwpf`mwpf::main</text></g><g><title>mwpf`mwpf::cli::Cli::run (21,417 samples, 99.97%)</title><rect x="0.0093%" y="357" width="99.9673%" height="15" fill="rgb(226,155,13)" fg:x="2" fg:w="21417"/><text x="0.2593%" y="367.50">mwpf`mwpf::cli::Cli::run</text></g><g><title>mwpf`mwpf::example_codes::QECPlaygroundCode::new (23 samples, 0.11%)</title><rect x="99.8693%" y="341" width="0.1074%" height="15" fill="rgb(241,28,37)" fg:x="21396" fg:w="23"/><text x="100.1193%" y="351.50"></text></g><g><title>mwpf`qecp::model_hypergraph::ModelHypergraph::build (23 samples, 0.11%)</title><rect x="99.8693%" y="325" width="0.1074%" height="15" fill="rgb(233,93,10)" fg:x="21396" fg:w="23"/><text x="100.1193%" y="335.50"></text></g><g><title>mwpf`qecp::model_hypergraph::ModelHypergraph::build_with_weight_function_region (23 samples, 0.11%)</title><rect x="99.8693%" y="309" width="0.1074%" height="15" fill="rgb(225,113,19)" fg:x="21396" fg:w="23"/><text x="100.1193%" y="319.50"></text></g><g><title>mwpf`qecp::simulator::Simulator::fast_measurement_given_few_errors (14 samples, 0.07%)</title><rect x="99.9113%" y="293" width="0.0653%" height="15" fill="rgb(241,2,18)" fg:x="21405" fg:w="14"/><text x="100.1613%" y="303.50"></text></g><g><title>mwpf`qecp::simulator::Simulator::propagate_error_from (5 samples, 0.02%)</title><rect x="99.9533%" y="277" width="0.0233%" height="15" fill="rgb(228,207,21)" fg:x="21414" fg:w="5"/><text x="100.2033%" y="287.50"></text></g><g><title>all (21,424 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(213,211,35)" fg:x="0" fg:w="21424"/><text x="0.2500%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`__exit (5 samples, 0.02%)</title><rect x="99.9767%" y="469" width="0.0233%" height="15" fill="rgb(209,83,10)" fg:x="21419" fg:w="5"/><text x="100.2267%" y="479.50"></text></g></svg></svg>