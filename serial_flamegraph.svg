<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="28480"><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (8 samples, 0.03%)</title><rect x="0.0140%" y="261" width="0.0281%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="8"/><text x="0.2640%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="0.0562%" y="245" width="0.0105%" height="15" fill="rgb(217,0,24)" fg:x="16" fg:w="3"/><text x="0.3062%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.03%)</title><rect x="0.1334%" y="229" width="0.0281%" height="15" fill="rgb(221,193,54)" fg:x="38" fg:w="8"/><text x="0.3834%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (4 samples, 0.01%)</title><rect x="0.1615%" y="229" width="0.0140%" height="15" fill="rgb(248,212,6)" fg:x="46" fg:w="4"/><text x="0.4115%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (4 samples, 0.01%)</title><rect x="0.1615%" y="213" width="0.0140%" height="15" fill="rgb(208,68,35)" fg:x="46" fg:w="4"/><text x="0.4115%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.01%)</title><rect x="0.1615%" y="197" width="0.0140%" height="15" fill="rgb(232,128,0)" fg:x="46" fg:w="4"/><text x="0.4115%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (52 samples, 0.18%)</title><rect x="0.0105%" y="277" width="0.1826%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="52"/><text x="0.2605%" y="287.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (43 samples, 0.15%)</title><rect x="0.0421%" y="261" width="0.1510%" height="15" fill="rgb(228,23,34)" fg:x="12" fg:w="43"/><text x="0.2921%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (36 samples, 0.13%)</title><rect x="0.0667%" y="245" width="0.1264%" height="15" fill="rgb(218,30,26)" fg:x="19" fg:w="36"/><text x="0.3167%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.02%)</title><rect x="0.1756%" y="229" width="0.0176%" height="15" fill="rgb(220,122,19)" fg:x="50" fg:w="5"/><text x="0.4256%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::mwpf_solver::SolverSerialJointSingleHair as mwpf::mwpf_solver::PrimalDualSolver&gt;::clear (55 samples, 0.19%)</title><rect x="0.0070%" y="341" width="0.1931%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="55"/><text x="0.2570%" y="351.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::clear (54 samples, 0.19%)</title><rect x="0.0105%" y="325" width="0.1896%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="54"/><text x="0.2605%" y="335.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (54 samples, 0.19%)</title><rect x="0.0105%" y="309" width="0.1896%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="54"/><text x="0.2605%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (54 samples, 0.19%)</title><rect x="0.0105%" y="293" width="0.1896%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="54"/><text x="0.2605%" y="303.50"></text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (15 samples, 0.05%)</title><rect x="0.2001%" y="277" width="0.0527%" height="15" fill="rgb(217,207,13)" fg:x="57" fg:w="15"/><text x="0.4501%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::compute_maximum_update_length (16 samples, 0.06%)</title><rect x="0.2001%" y="309" width="0.0562%" height="15" fill="rgb(231,73,38)" fg:x="57" fg:w="16"/><text x="0.4501%" y="319.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::pop_event (16 samples, 0.06%)</title><rect x="0.2001%" y="293" width="0.0562%" height="15" fill="rgb(225,20,46)" fg:x="57" fg:w="16"/><text x="0.4501%" y="303.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (76 samples, 0.27%)</title><rect x="0.2633%" y="261" width="0.2669%" height="15" fill="rgb(210,31,41)" fg:x="75" fg:w="76"/><text x="0.5133%" y="271.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (76 samples, 0.27%)</title><rect x="0.2633%" y="245" width="0.2669%" height="15" fill="rgb(221,200,47)" fg:x="75" fg:w="76"/><text x="0.5133%" y="255.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (78 samples, 0.27%)</title><rect x="0.2598%" y="277" width="0.2739%" height="15" fill="rgb(226,26,5)" fg:x="74" fg:w="78"/><text x="0.5098%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::set_grow_rate (79 samples, 0.28%)</title><rect x="0.2598%" y="293" width="0.2774%" height="15" fill="rgb(249,33,26)" fg:x="74" fg:w="79"/><text x="0.5098%" y="303.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (20 samples, 0.07%)</title><rect x="0.5407%" y="245" width="0.0702%" height="15" fill="rgb(235,183,28)" fg:x="154" fg:w="20"/><text x="0.7907%" y="255.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (20 samples, 0.07%)</title><rect x="0.5407%" y="229" width="0.0702%" height="15" fill="rgb(221,5,38)" fg:x="154" fg:w="20"/><text x="0.7907%" y="239.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_or_create_node (22 samples, 0.08%)</title><rect x="0.5372%" y="293" width="0.0772%" height="15" fill="rgb(247,18,42)" fg:x="153" fg:w="22"/><text x="0.7872%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node (22 samples, 0.08%)</title><rect x="0.5372%" y="277" width="0.0772%" height="15" fill="rgb(241,131,45)" fg:x="153" fg:w="22"/><text x="0.7872%" y="287.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (22 samples, 0.08%)</title><rect x="0.5372%" y="261" width="0.0772%" height="15" fill="rgb(249,31,29)" fg:x="153" fg:w="22"/><text x="0.7872%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve (103 samples, 0.36%)</title><rect x="0.2563%" y="309" width="0.3617%" height="15" fill="rgb(225,111,53)" fg:x="73" fg:w="103"/><text x="0.5063%" y="319.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (16 samples, 0.06%)</title><rect x="0.6320%" y="245" width="0.0562%" height="15" fill="rgb(238,160,17)" fg:x="180" fg:w="16"/><text x="0.8820%" y="255.50"></text></g><g><title>mwpf`mwpf::matrix::hair::HairView&lt;M&gt;::new (5 samples, 0.02%)</title><rect x="0.6882%" y="245" width="0.0176%" height="15" fill="rgb(214,148,48)" fg:x="196" fg:w="5"/><text x="0.9382%" y="255.50"></text></g><g><title>mwpf`mwpf::matrix::interface::MatrixTail::set_tail_edges (4 samples, 0.01%)</title><rect x="0.6917%" y="229" width="0.0140%" height="15" fill="rgb(232,36,49)" fg:x="197" fg:w="4"/><text x="0.9417%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_single_hair::PluginSingleHair as mwpf::plugin::PluginImpl&gt;::find_relaxers (39 samples, 0.14%)</title><rect x="0.6250%" y="261" width="0.1369%" height="15" fill="rgb(209,103,24)" fg:x="178" fg:w="39"/><text x="0.8750%" y="271.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (16 samples, 0.06%)</title><rect x="0.7058%" y="245" width="0.0562%" height="15" fill="rgb(229,88,8)" fg:x="201" fg:w="16"/><text x="0.9558%" y="255.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (42 samples, 0.15%)</title><rect x="0.6215%" y="293" width="0.1475%" height="15" fill="rgb(213,181,19)" fg:x="177" fg:w="42"/><text x="0.8715%" y="303.50"></text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (41 samples, 0.14%)</title><rect x="0.6250%" y="277" width="0.1440%" height="15" fill="rgb(254,191,54)" fg:x="178" fg:w="41"/><text x="0.8750%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune (48 samples, 0.17%)</title><rect x="0.6180%" y="309" width="0.1685%" height="15" fill="rgb(241,83,37)" fg:x="176" fg:w="48"/><text x="0.8680%" y="319.50"></text></g><g><title>mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize (5 samples, 0.02%)</title><rect x="0.7690%" y="293" width="0.0176%" height="15" fill="rgb(233,36,39)" fg:x="219" fg:w="5"/><text x="1.0190%" y="303.50"></text></g><g><title>mwpf`highs::Model::solve (4 samples, 0.01%)</title><rect x="0.7725%" y="277" width="0.0140%" height="15" fill="rgb(226,3,54)" fg:x="220" fg:w="4"/><text x="1.0225%" y="287.50"></text></g><g><title>mwpf`Highs::run (4 samples, 0.01%)</title><rect x="0.7725%" y="261" width="0.0140%" height="15" fill="rgb(245,192,40)" fg:x="220" fg:w="4"/><text x="1.0225%" y="271.50"></text></g><g><title>mwpf`Highs::runPresolve (3 samples, 0.01%)</title><rect x="0.7760%" y="245" width="0.0105%" height="15" fill="rgb(238,167,29)" fg:x="221" fg:w="3"/><text x="1.0260%" y="255.50"></text></g><g><title>mwpf`PresolveComponent::run (3 samples, 0.01%)</title><rect x="0.7760%" y="229" width="0.0105%" height="15" fill="rgb(232,182,51)" fg:x="221" fg:w="3"/><text x="1.0260%" y="239.50"></text></g><g><title>mwpf`presolve::HPresolve::run (3 samples, 0.01%)</title><rect x="0.7760%" y="213" width="0.0105%" height="15" fill="rgb(231,60,39)" fg:x="221" fg:w="3"/><text x="1.0260%" y="223.50"></text></g><g><title>mwpf`presolve::HPresolve::presolve (3 samples, 0.01%)</title><rect x="0.7760%" y="197" width="0.0105%" height="15" fill="rgb(208,69,12)" fg:x="221" fg:w="3"/><text x="1.0260%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="0.8006%" y="293" width="0.0140%" height="15" fill="rgb(235,93,37)" fg:x="228" fg:w="4"/><text x="1.0506%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (9 samples, 0.03%)</title><rect x="0.8287%" y="261" width="0.0316%" height="15" fill="rgb(213,116,39)" fg:x="236" fg:w="9"/><text x="1.0787%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.03%)</title><rect x="0.8287%" y="245" width="0.0316%" height="15" fill="rgb(222,207,29)" fg:x="236" fg:w="9"/><text x="1.0787%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (46 samples, 0.16%)</title><rect x="0.8603%" y="261" width="0.1615%" height="15" fill="rgb(206,96,30)" fg:x="245" fg:w="46"/><text x="1.1103%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (4 samples, 0.01%)</title><rect x="1.5204%" y="245" width="0.0140%" height="15" fill="rgb(218,138,4)" fg:x="433" fg:w="4"/><text x="1.7704%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.01%)</title><rect x="1.5204%" y="229" width="0.0140%" height="15" fill="rgb(250,191,14)" fg:x="433" fg:w="4"/><text x="1.7704%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.10%)</title><rect x="1.5344%" y="245" width="0.0983%" height="15" fill="rgb(239,60,40)" fg:x="437" fg:w="28"/><text x="1.7844%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.02%)</title><rect x="4.4593%" y="229" width="0.0246%" height="15" fill="rgb(206,27,48)" fg:x="1270" fg:w="7"/><text x="4.7093%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (173 samples, 0.61%)</title><rect x="4.4838%" y="229" width="0.6074%" height="15" fill="rgb(225,35,8)" fg:x="1277" fg:w="173"/><text x="4.7338%" y="239.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (113 samples, 0.40%)</title><rect x="5.0913%" y="229" width="0.3968%" height="15" fill="rgb(250,213,24)" fg:x="1450" fg:w="113"/><text x="5.3413%" y="239.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (100 samples, 0.35%)</title><rect x="5.4881%" y="229" width="0.3511%" height="15" fill="rgb(247,123,22)" fg:x="1563" fg:w="100"/><text x="5.7381%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (57 samples, 0.20%)</title><rect x="6.6608%" y="213" width="0.2001%" height="15" fill="rgb(231,138,38)" fg:x="1897" fg:w="57"/><text x="6.9108%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (57 samples, 0.20%)</title><rect x="6.6608%" y="197" width="0.2001%" height="15" fill="rgb(231,145,46)" fg:x="1897" fg:w="57"/><text x="6.9108%" y="207.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (279 samples, 0.98%)</title><rect x="6.8610%" y="213" width="0.9796%" height="15" fill="rgb(251,118,11)" fg:x="1954" fg:w="279"/><text x="7.1110%" y="223.50"></text></g><g><title>mwpf`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,005 samples, 7.04%)</title><rect x="1.6327%" y="245" width="7.0400%" height="15" fill="rgb(217,147,25)" fg:x="465" fg:w="2005"/><text x="1.8827%" y="255.50">mwpf`&lt;ite..</text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (807 samples, 2.83%)</title><rect x="5.8392%" y="229" width="2.8336%" height="15" fill="rgb(247,81,37)" fg:x="1663" fg:w="807"/><text x="6.0892%" y="239.50">mw..</text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (237 samples, 0.83%)</title><rect x="7.8406%" y="213" width="0.8322%" height="15" fill="rgb(209,12,38)" fg:x="2233" fg:w="237"/><text x="8.0906%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (5 samples, 0.02%)</title><rect x="8.6728%" y="165" width="0.0176%" height="15" fill="rgb(227,1,9)" fg:x="2470" fg:w="5"/><text x="8.9228%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (5 samples, 0.02%)</title><rect x="8.6728%" y="149" width="0.0176%" height="15" fill="rgb(248,47,43)" fg:x="2470" fg:w="5"/><text x="8.9228%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (13 samples, 0.05%)</title><rect x="8.6728%" y="181" width="0.0456%" height="15" fill="rgb(221,10,30)" fg:x="2470" fg:w="13"/><text x="8.9228%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (8 samples, 0.03%)</title><rect x="8.6903%" y="165" width="0.0281%" height="15" fill="rgb(210,229,1)" fg:x="2475" fg:w="8"/><text x="8.9403%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.03%)</title><rect x="8.6903%" y="149" width="0.0281%" height="15" fill="rgb(222,148,37)" fg:x="2475" fg:w="8"/><text x="8.9403%" y="159.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (66 samples, 0.23%)</title><rect x="8.6728%" y="245" width="0.2317%" height="15" fill="rgb(234,67,33)" fg:x="2470" fg:w="66"/><text x="8.9228%" y="255.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (66 samples, 0.23%)</title><rect x="8.6728%" y="229" width="0.2317%" height="15" fill="rgb(247,98,35)" fg:x="2470" fg:w="66"/><text x="8.9228%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (66 samples, 0.23%)</title><rect x="8.6728%" y="213" width="0.2317%" height="15" fill="rgb(247,138,52)" fg:x="2470" fg:w="66"/><text x="8.9228%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (66 samples, 0.23%)</title><rect x="8.6728%" y="197" width="0.2317%" height="15" fill="rgb(213,79,30)" fg:x="2470" fg:w="66"/><text x="8.9228%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (53 samples, 0.19%)</title><rect x="8.7184%" y="181" width="0.1861%" height="15" fill="rgb(246,177,23)" fg:x="2483" fg:w="53"/><text x="8.9684%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,368 samples, 8.31%)</title><rect x="1.0218%" y="261" width="8.3146%" height="15" fill="rgb(230,62,27)" fg:x="291" fg:w="2368"/><text x="1.2718%" y="271.50">mwpf`&lt;alloc:..</text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (123 samples, 0.43%)</title><rect x="8.9045%" y="245" width="0.4319%" height="15" fill="rgb(216,154,8)" fg:x="2536" fg:w="123"/><text x="9.1545%" y="255.50"></text></g><g><title>mwpf`&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (172 samples, 0.60%)</title><rect x="9.3364%" y="261" width="0.6039%" height="15" fill="rgb(244,35,45)" fg:x="2659" fg:w="172"/><text x="9.5864%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (114 samples, 0.40%)</title><rect x="9.9403%" y="261" width="0.4003%" height="15" fill="rgb(251,115,12)" fg:x="2831" fg:w="114"/><text x="10.1903%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (12 samples, 0.04%)</title><rect x="10.2985%" y="245" width="0.0421%" height="15" fill="rgb(240,54,50)" fg:x="2933" fg:w="12"/><text x="10.5485%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.04%)</title><rect x="10.2985%" y="229" width="0.0421%" height="15" fill="rgb(233,84,52)" fg:x="2933" fg:w="12"/><text x="10.5485%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3,851 samples, 13.52%)</title><rect x="0.8251%" y="277" width="13.5218%" height="15" fill="rgb(207,117,47)" fg:x="235" fg:w="3851"/><text x="1.0751%" y="287.50">mwpf`&lt;alloc::collect..</text></g><g><title>mwpf`core::slice::sort::merge_sort (1,141 samples, 4.01%)</title><rect x="10.3406%" y="261" width="4.0063%" height="15" fill="rgb(249,43,39)" fg:x="2945" fg:w="1141"/><text x="10.5906%" y="271.50">mwpf..</text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.08%)</title><rect x="14.3469%" y="277" width="0.0843%" height="15" fill="rgb(209,38,44)" fg:x="4086" fg:w="24"/><text x="14.5969%" y="287.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.01%)</title><rect x="14.4452%" y="277" width="0.0105%" height="15" fill="rgb(236,212,23)" fg:x="4114" fg:w="3"/><text x="14.6952%" y="287.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_or_create_node_tune (9 samples, 0.03%)</title><rect x="14.4558%" y="277" width="0.0316%" height="15" fill="rgb(242,79,21)" fg:x="4117" fg:w="9"/><text x="14.7058%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node_tune (9 samples, 0.03%)</title><rect x="14.4558%" y="261" width="0.0316%" height="15" fill="rgb(211,96,35)" fg:x="4117" fg:w="9"/><text x="14.7058%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.01%)</title><rect x="14.5471%" y="213" width="0.0140%" height="15" fill="rgb(253,215,40)" fg:x="4143" fg:w="4"/><text x="14.7971%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.01%)</title><rect x="14.5471%" y="197" width="0.0140%" height="15" fill="rgb(211,81,21)" fg:x="4143" fg:w="4"/><text x="14.7971%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 0.08%)</title><rect x="14.4944%" y="245" width="0.0772%" height="15" fill="rgb(208,190,38)" fg:x="4128" fg:w="22"/><text x="14.7444%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (14 samples, 0.05%)</title><rect x="14.5225%" y="229" width="0.0492%" height="15" fill="rgb(235,213,38)" fg:x="4136" fg:w="14"/><text x="14.7725%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (7 samples, 0.02%)</title><rect x="14.5716%" y="245" width="0.0246%" height="15" fill="rgb(237,122,38)" fg:x="4150" fg:w="7"/><text x="14.8216%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.01%)</title><rect x="14.6103%" y="213" width="0.0105%" height="15" fill="rgb(244,218,35)" fg:x="4161" fg:w="3"/><text x="14.8603%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.01%)</title><rect x="14.6208%" y="213" width="0.0105%" height="15" fill="rgb(240,68,47)" fg:x="4164" fg:w="3"/><text x="14.8708%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (5 samples, 0.02%)</title><rect x="14.6313%" y="213" width="0.0176%" height="15" fill="rgb(210,16,53)" fg:x="4167" fg:w="5"/><text x="14.8813%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (5 samples, 0.02%)</title><rect x="14.6313%" y="197" width="0.0176%" height="15" fill="rgb(235,124,12)" fg:x="4167" fg:w="5"/><text x="14.8813%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.02%)</title><rect x="14.6313%" y="181" width="0.0176%" height="15" fill="rgb(224,169,11)" fg:x="4167" fg:w="5"/><text x="14.8813%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (45 samples, 0.16%)</title><rect x="14.4944%" y="261" width="0.1580%" height="15" fill="rgb(250,166,2)" fg:x="4128" fg:w="45"/><text x="14.7444%" y="271.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (16 samples, 0.06%)</title><rect x="14.5962%" y="245" width="0.0562%" height="15" fill="rgb(242,216,29)" fg:x="4157" fg:w="16"/><text x="14.8462%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (16 samples, 0.06%)</title><rect x="14.5962%" y="229" width="0.0562%" height="15" fill="rgb(230,116,27)" fg:x="4157" fg:w="16"/><text x="14.8462%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.01%)</title><rect x="14.6699%" y="197" width="0.0105%" height="15" fill="rgb(228,99,48)" fg:x="4178" fg:w="3"/><text x="14.9199%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.04%)</title><rect x="14.6699%" y="213" width="0.0421%" height="15" fill="rgb(253,11,6)" fg:x="4178" fg:w="12"/><text x="14.9199%" y="223.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (9 samples, 0.03%)</title><rect x="14.6805%" y="197" width="0.0316%" height="15" fill="rgb(247,143,39)" fg:x="4181" fg:w="9"/><text x="14.9305%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (8 samples, 0.03%)</title><rect x="14.6840%" y="181" width="0.0281%" height="15" fill="rgb(236,97,10)" fg:x="4182" fg:w="8"/><text x="14.9340%" y="191.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer_forest::RelaxerForest&gt; (21 samples, 0.07%)</title><rect x="14.6594%" y="261" width="0.0737%" height="15" fill="rgb(233,208,19)" fg:x="4175" fg:w="21"/><text x="14.9094%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.07%)</title><rect x="14.6594%" y="245" width="0.0737%" height="15" fill="rgb(216,164,2)" fg:x="4175" fg:w="21"/><text x="14.9094%" y="255.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (20 samples, 0.07%)</title><rect x="14.6629%" y="229" width="0.0702%" height="15" fill="rgb(220,129,5)" fg:x="4176" fg:w="20"/><text x="14.9129%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (6 samples, 0.02%)</title><rect x="14.7121%" y="213" width="0.0211%" height="15" fill="rgb(242,17,10)" fg:x="4190" fg:w="6"/><text x="14.9621%" y="223.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (4 samples, 0.01%)</title><rect x="14.7331%" y="261" width="0.0140%" height="15" fill="rgb(242,107,0)" fg:x="4196" fg:w="4"/><text x="14.9831%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (4 samples, 0.01%)</title><rect x="14.7331%" y="245" width="0.0140%" height="15" fill="rgb(251,28,31)" fg:x="4196" fg:w="4"/><text x="14.9831%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.02%)</title><rect x="14.7612%" y="245" width="0.0246%" height="15" fill="rgb(233,223,10)" fg:x="4204" fg:w="7"/><text x="15.0112%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (7 samples, 0.02%)</title><rect x="14.7858%" y="245" width="0.0246%" height="15" fill="rgb(215,21,27)" fg:x="4211" fg:w="7"/><text x="15.0358%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.02%)</title><rect x="15.2247%" y="229" width="0.0176%" height="15" fill="rgb(232,23,21)" fg:x="4336" fg:w="5"/><text x="15.4747%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.01%)</title><rect x="15.2317%" y="213" width="0.0105%" height="15" fill="rgb(244,5,23)" fg:x="4338" fg:w="3"/><text x="15.4817%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.05%)</title><rect x="15.2423%" y="229" width="0.0492%" height="15" fill="rgb(226,81,46)" fg:x="4341" fg:w="14"/><text x="15.4923%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (11 samples, 0.04%)</title><rect x="15.2528%" y="213" width="0.0386%" height="15" fill="rgb(247,70,30)" fg:x="4344" fg:w="11"/><text x="15.5028%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.01%)</title><rect x="15.2809%" y="197" width="0.0105%" height="15" fill="rgb(212,68,19)" fg:x="4352" fg:w="3"/><text x="15.5309%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.13%)</title><rect x="15.2985%" y="229" width="0.1334%" height="15" fill="rgb(240,187,13)" fg:x="4357" fg:w="38"/><text x="15.5485%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.01%)</title><rect x="15.4389%" y="213" width="0.0105%" height="15" fill="rgb(223,113,26)" fg:x="4397" fg:w="3"/><text x="15.6889%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (5 samples, 0.02%)</title><rect x="15.4494%" y="213" width="0.0176%" height="15" fill="rgb(206,192,2)" fg:x="4400" fg:w="5"/><text x="15.6994%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (29 samples, 0.10%)</title><rect x="15.4319%" y="229" width="0.1018%" height="15" fill="rgb(241,108,4)" fg:x="4395" fg:w="29"/><text x="15.6819%" y="239.50"></text></g><g><title>mwpf`core::slice::sort::merge_sort (19 samples, 0.07%)</title><rect x="15.4670%" y="213" width="0.0667%" height="15" fill="rgb(247,173,49)" fg:x="4405" fg:w="19"/><text x="15.7170%" y="223.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (3 samples, 0.01%)</title><rect x="15.5232%" y="197" width="0.0105%" height="15" fill="rgb(224,114,35)" fg:x="4421" fg:w="3"/><text x="15.7732%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (17 samples, 0.06%)</title><rect x="15.5442%" y="229" width="0.0597%" height="15" fill="rgb(245,159,27)" fg:x="4427" fg:w="17"/><text x="15.7942%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (7 samples, 0.02%)</title><rect x="15.6039%" y="229" width="0.0246%" height="15" fill="rgb(245,172,44)" fg:x="4444" fg:w="7"/><text x="15.8539%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (49 samples, 0.17%)</title><rect x="15.6285%" y="229" width="0.1721%" height="15" fill="rgb(236,23,11)" fg:x="4451" fg:w="49"/><text x="15.8785%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.02%)</title><rect x="19.5260%" y="213" width="0.0211%" height="15" fill="rgb(205,117,38)" fg:x="5561" fg:w="6"/><text x="19.7760%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (9 samples, 0.03%)</title><rect x="19.5471%" y="213" width="0.0316%" height="15" fill="rgb(237,72,25)" fg:x="5567" fg:w="9"/><text x="19.7971%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (116 samples, 0.41%)</title><rect x="19.5787%" y="213" width="0.4073%" height="15" fill="rgb(244,70,9)" fg:x="5576" fg:w="116"/><text x="19.8287%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="20.0562%" y="197" width="0.0105%" height="15" fill="rgb(217,125,39)" fg:x="5712" fg:w="3"/><text x="20.3062%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (11 samples, 0.04%)</title><rect x="20.1650%" y="181" width="0.0386%" height="15" fill="rgb(235,36,10)" fg:x="5743" fg:w="11"/><text x="20.4150%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (68 samples, 0.24%)</title><rect x="19.9860%" y="213" width="0.2388%" height="15" fill="rgb(251,123,47)" fg:x="5692" fg:w="68"/><text x="20.2360%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (43 samples, 0.15%)</title><rect x="20.0737%" y="197" width="0.1510%" height="15" fill="rgb(221,13,13)" fg:x="5717" fg:w="43"/><text x="20.3237%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.02%)</title><rect x="20.2037%" y="181" width="0.0211%" height="15" fill="rgb(238,131,9)" fg:x="5754" fg:w="6"/><text x="20.4537%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="20.2247%" y="213" width="0.0140%" height="15" fill="rgb(211,50,8)" fg:x="5760" fg:w="4"/><text x="20.4747%" y="223.50"></text></g><g><title>mwpf`DYLD-STUB$$memmove (5 samples, 0.02%)</title><rect x="20.2423%" y="213" width="0.0176%" height="15" fill="rgb(245,182,24)" fg:x="5765" fg:w="5"/><text x="20.4923%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (6 samples, 0.02%)</title><rect x="20.2669%" y="213" width="0.0211%" height="15" fill="rgb(242,14,37)" fg:x="5772" fg:w="6"/><text x="20.5169%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (58 samples, 0.20%)</title><rect x="20.2879%" y="213" width="0.2037%" height="15" fill="rgb(246,228,12)" fg:x="5778" fg:w="58"/><text x="20.5379%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (6 samples, 0.02%)</title><rect x="20.4705%" y="197" width="0.0211%" height="15" fill="rgb(213,55,15)" fg:x="5830" fg:w="6"/><text x="20.7205%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (6 samples, 0.02%)</title><rect x="20.4705%" y="181" width="0.0211%" height="15" fill="rgb(209,9,3)" fg:x="5830" fg:w="6"/><text x="20.7205%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (4 samples, 0.01%)</title><rect x="20.5197%" y="165" width="0.0140%" height="15" fill="rgb(230,59,30)" fg:x="5844" fg:w="4"/><text x="20.7697%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (6 samples, 0.02%)</title><rect x="20.5829%" y="149" width="0.0211%" height="15" fill="rgb(209,121,21)" fg:x="5862" fg:w="6"/><text x="20.8329%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (4 samples, 0.01%)</title><rect x="20.5899%" y="133" width="0.0140%" height="15" fill="rgb(220,109,13)" fg:x="5864" fg:w="4"/><text x="20.8399%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (7 samples, 0.02%)</title><rect x="20.6039%" y="149" width="0.0246%" height="15" fill="rgb(232,18,1)" fg:x="5868" fg:w="7"/><text x="20.8539%" y="159.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (74 samples, 0.26%)</title><rect x="20.5337%" y="165" width="0.2598%" height="15" fill="rgb(215,41,42)" fg:x="5848" fg:w="74"/><text x="20.7837%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (47 samples, 0.17%)</title><rect x="20.6285%" y="149" width="0.1650%" height="15" fill="rgb(224,123,36)" fg:x="5875" fg:w="47"/><text x="20.8785%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (23 samples, 0.08%)</title><rect x="20.7128%" y="133" width="0.0808%" height="15" fill="rgb(240,125,3)" fg:x="5899" fg:w="23"/><text x="20.9628%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (12 samples, 0.04%)</title><rect x="20.7514%" y="117" width="0.0421%" height="15" fill="rgb(205,98,50)" fg:x="5910" fg:w="12"/><text x="21.0014%" y="127.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (86 samples, 0.30%)</title><rect x="20.4951%" y="197" width="0.3020%" height="15" fill="rgb(205,185,37)" fg:x="5837" fg:w="86"/><text x="20.7451%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (83 samples, 0.29%)</title><rect x="20.5056%" y="181" width="0.2914%" height="15" fill="rgb(238,207,15)" fg:x="5840" fg:w="83"/><text x="20.7556%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="20.7971%" y="197" width="0.0211%" height="15" fill="rgb(213,199,42)" fg:x="5923" fg:w="6"/><text x="21.0471%" y="207.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (48 samples, 0.17%)</title><rect x="20.8181%" y="197" width="0.1685%" height="15" fill="rgb(235,201,11)" fg:x="5929" fg:w="48"/><text x="21.0681%" y="207.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (1,498 samples, 5.26%)</title><rect x="15.8146%" y="229" width="5.2598%" height="15" fill="rgb(207,46,11)" fg:x="4504" fg:w="1498"/><text x="16.0646%" y="239.50">mwpf`m..</text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_raw (166 samples, 0.58%)</title><rect x="20.4916%" y="213" width="0.5829%" height="15" fill="rgb(241,35,35)" fg:x="5836" fg:w="166"/><text x="20.7416%" y="223.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::update_hash (25 samples, 0.09%)</title><rect x="20.9867%" y="197" width="0.0878%" height="15" fill="rgb(243,32,47)" fg:x="5977" fg:w="25"/><text x="21.2367%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.08%)</title><rect x="20.9902%" y="181" width="0.0843%" height="15" fill="rgb(247,202,23)" fg:x="5978" fg:w="24"/><text x="21.2402%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (10 samples, 0.04%)</title><rect x="21.1166%" y="213" width="0.0351%" height="15" fill="rgb(219,102,11)" fg:x="6014" fg:w="10"/><text x="21.3666%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (42 samples, 0.15%)</title><rect x="21.6257%" y="197" width="0.1475%" height="15" fill="rgb(243,110,44)" fg:x="6159" fg:w="42"/><text x="21.8757%" y="207.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (183 samples, 0.64%)</title><rect x="21.1517%" y="213" width="0.6426%" height="15" fill="rgb(222,74,54)" fg:x="6024" fg:w="183"/><text x="21.4017%" y="223.50"></text></g><g><title>mwpf`mwpf::matrix::row::ParityRow::xor_two_rows (6 samples, 0.02%)</title><rect x="21.7732%" y="197" width="0.0211%" height="15" fill="rgb(216,99,12)" fg:x="6201" fg:w="6"/><text x="22.0232%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="22.9494%" y="181" width="0.0105%" height="15" fill="rgb(226,22,26)" fg:x="6536" fg:w="3"/><text x="23.1994%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (9 samples, 0.03%)</title><rect x="22.9986%" y="165" width="0.0316%" height="15" fill="rgb(217,163,10)" fg:x="6550" fg:w="9"/><text x="23.2486%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.01%)</title><rect x="23.0302%" y="165" width="0.0105%" height="15" fill="rgb(213,25,53)" fg:x="6559" fg:w="3"/><text x="23.2802%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (3 samples, 0.01%)</title><rect x="23.0302%" y="149" width="0.0105%" height="15" fill="rgb(252,105,26)" fg:x="6559" fg:w="3"/><text x="23.2802%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.01%)</title><rect x="23.0302%" y="133" width="0.0105%" height="15" fill="rgb(220,39,43)" fg:x="6559" fg:w="3"/><text x="23.2802%" y="143.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.14%)</title><rect x="22.9249%" y="197" width="0.1440%" height="15" fill="rgb(229,68,48)" fg:x="6529" fg:w="41"/><text x="23.1749%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (31 samples, 0.11%)</title><rect x="22.9600%" y="181" width="0.1088%" height="15" fill="rgb(252,8,32)" fg:x="6539" fg:w="31"/><text x="23.2100%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (7 samples, 0.02%)</title><rect x="23.0442%" y="165" width="0.0246%" height="15" fill="rgb(223,20,43)" fg:x="6563" fg:w="7"/><text x="23.2942%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.08%)</title><rect x="23.0688%" y="197" width="0.0808%" height="15" fill="rgb(229,81,49)" fg:x="6570" fg:w="23"/><text x="23.3188%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.01%)</title><rect x="23.1496%" y="197" width="0.0105%" height="15" fill="rgb(236,28,36)" fg:x="6593" fg:w="3"/><text x="23.3996%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (10 samples, 0.04%)</title><rect x="23.1882%" y="181" width="0.0351%" height="15" fill="rgb(249,185,26)" fg:x="6604" fg:w="10"/><text x="23.4382%" y="191.50"></text></g><g><title>mwpf`__rdl_alloc (4 samples, 0.01%)</title><rect x="23.2374%" y="181" width="0.0140%" height="15" fill="rgb(249,174,33)" fg:x="6618" fg:w="4"/><text x="23.4874%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (41 samples, 0.14%)</title><rect x="23.1601%" y="197" width="0.1440%" height="15" fill="rgb(233,201,37)" fg:x="6596" fg:w="41"/><text x="23.4101%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (15 samples, 0.05%)</title><rect x="23.2514%" y="181" width="0.0527%" height="15" fill="rgb(221,78,26)" fg:x="6622" fg:w="15"/><text x="23.5014%" y="191.50"></text></g><g><title>mwpf`mwpf::matrix::hair::HairView&lt;M&gt;::new (649 samples, 2.28%)</title><rect x="21.0744%" y="229" width="2.2788%" height="15" fill="rgb(250,127,30)" fg:x="6002" fg:w="649"/><text x="21.3244%" y="239.50">m..</text></g><g><title>mwpf`mwpf::matrix::interface::MatrixTail::set_tail_edges (444 samples, 1.56%)</title><rect x="21.7942%" y="213" width="1.5590%" height="15" fill="rgb(230,49,44)" fg:x="6207" fg:w="444"/><text x="22.0442%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (14 samples, 0.05%)</title><rect x="23.3041%" y="197" width="0.0492%" height="15" fill="rgb(229,67,23)" fg:x="6637" fg:w="14"/><text x="23.5541%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.02%)</title><rect x="29.1678%" y="213" width="0.0211%" height="15" fill="rgb(249,83,47)" fg:x="8307" fg:w="6"/><text x="29.4178%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.02%)</title><rect x="29.1889%" y="213" width="0.0176%" height="15" fill="rgb(215,43,3)" fg:x="8313" fg:w="5"/><text x="29.4389%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.02%)</title><rect x="29.2170%" y="213" width="0.0211%" height="15" fill="rgb(238,154,13)" fg:x="8321" fg:w="6"/><text x="29.4670%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (17 samples, 0.06%)</title><rect x="29.2416%" y="213" width="0.0597%" height="15" fill="rgb(219,56,2)" fg:x="8328" fg:w="17"/><text x="29.4916%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 0.22%)</title><rect x="29.3013%" y="213" width="0.2212%" height="15" fill="rgb(233,0,4)" fg:x="8345" fg:w="63"/><text x="29.5513%" y="223.50"></text></g><g><title>mwpf`DYLD-STUB$$free (4 samples, 0.01%)</title><rect x="29.5260%" y="213" width="0.0140%" height="15" fill="rgb(235,30,7)" fg:x="8409" fg:w="4"/><text x="29.7760%" y="223.50"></text></g><g><title>mwpf`__rdl_alloc (5 samples, 0.02%)</title><rect x="29.5541%" y="213" width="0.0176%" height="15" fill="rgb(250,79,13)" fg:x="8417" fg:w="5"/><text x="29.8041%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (12 samples, 0.04%)</title><rect x="29.6840%" y="197" width="0.0421%" height="15" fill="rgb(211,146,34)" fg:x="8454" fg:w="12"/><text x="29.9340%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3 samples, 0.01%)</title><rect x="29.7331%" y="165" width="0.0105%" height="15" fill="rgb(228,22,38)" fg:x="8468" fg:w="3"/><text x="29.9831%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.03%)</title><rect x="29.7261%" y="197" width="0.0281%" height="15" fill="rgb(235,168,5)" fg:x="8466" fg:w="8"/><text x="29.9761%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.02%)</title><rect x="29.7331%" y="181" width="0.0211%" height="15" fill="rgb(221,155,16)" fg:x="8468" fg:w="6"/><text x="29.9831%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3 samples, 0.01%)</title><rect x="29.7437%" y="165" width="0.0105%" height="15" fill="rgb(215,215,53)" fg:x="8471" fg:w="3"/><text x="29.9937%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (57 samples, 0.20%)</title><rect x="29.5716%" y="213" width="0.2001%" height="15" fill="rgb(223,4,10)" fg:x="8422" fg:w="57"/><text x="29.8216%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.01%)</title><rect x="29.7577%" y="197" width="0.0140%" height="15" fill="rgb(234,103,6)" fg:x="8475" fg:w="4"/><text x="30.0077%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5 samples, 0.02%)</title><rect x="29.7963%" y="197" width="0.0176%" height="15" fill="rgb(227,97,0)" fg:x="8486" fg:w="5"/><text x="30.0463%" y="207.50"></text></g><g><title>mwpf`DYLD-STUB$$malloc (3 samples, 0.01%)</title><rect x="29.8139%" y="197" width="0.0105%" height="15" fill="rgb(234,150,53)" fg:x="8491" fg:w="3"/><text x="30.0639%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (6 samples, 0.02%)</title><rect x="29.8666%" y="181" width="0.0211%" height="15" fill="rgb(228,201,54)" fg:x="8506" fg:w="6"/><text x="30.1166%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.01%)</title><rect x="29.8771%" y="165" width="0.0105%" height="15" fill="rgb(222,22,37)" fg:x="8509" fg:w="3"/><text x="30.1271%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (35 samples, 0.12%)</title><rect x="29.7718%" y="213" width="0.1229%" height="15" fill="rgb(237,53,32)" fg:x="8479" fg:w="35"/><text x="30.0218%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (18 samples, 0.06%)</title><rect x="29.8315%" y="197" width="0.0632%" height="15" fill="rgb(233,25,53)" fg:x="8496" fg:w="18"/><text x="30.0815%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (15 samples, 0.05%)</title><rect x="30.0316%" y="197" width="0.0527%" height="15" fill="rgb(210,40,34)" fg:x="8553" fg:w="15"/><text x="30.2816%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (12 samples, 0.04%)</title><rect x="30.0421%" y="181" width="0.0421%" height="15" fill="rgb(241,220,44)" fg:x="8556" fg:w="12"/><text x="30.2921%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_single_hair::PluginSingleHair as mwpf::plugin::PluginImpl&gt;::find_relaxers (4,353 samples, 15.28%)</title><rect x="14.8104%" y="245" width="15.2844%" height="15" fill="rgb(235,28,35)" fg:x="4218" fg:w="4353"/><text x="15.0604%" y="255.50">mwpf`&lt;mwpf::plugin_sing..</text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (1,920 samples, 6.74%)</title><rect x="23.3532%" y="229" width="6.7416%" height="15" fill="rgb(210,56,17)" fg:x="6651" fg:w="1920"/><text x="23.6032%" y="239.50">mwpf`mwpf..</text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (57 samples, 0.20%)</title><rect x="29.8947%" y="213" width="0.2001%" height="15" fill="rgb(224,130,29)" fg:x="8514" fg:w="57"/><text x="30.1447%" y="223.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete_ptr (23 samples, 0.08%)</title><rect x="30.0983%" y="213" width="0.0808%" height="15" fill="rgb(235,212,8)" fg:x="8572" fg:w="23"/><text x="30.3483%" y="223.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (23 samples, 0.08%)</title><rect x="30.0983%" y="197" width="0.0808%" height="15" fill="rgb(223,33,50)" fg:x="8572" fg:w="23"/><text x="30.3483%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.01%)</title><rect x="30.2598%" y="197" width="0.0105%" height="15" fill="rgb(219,149,13)" fg:x="8618" fg:w="3"/><text x="30.5098%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.01%)</title><rect x="30.2704%" y="197" width="0.0105%" height="15" fill="rgb(250,156,29)" fg:x="8621" fg:w="3"/><text x="30.5204%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (54 samples, 0.19%)</title><rect x="30.0948%" y="245" width="0.1896%" height="15" fill="rgb(216,193,19)" fg:x="8571" fg:w="54"/><text x="30.3448%" y="255.50"></text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (54 samples, 0.19%)</title><rect x="30.0948%" y="229" width="0.1896%" height="15" fill="rgb(216,135,14)" fg:x="8571" fg:w="54"/><text x="30.3448%" y="239.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (29 samples, 0.10%)</title><rect x="30.1826%" y="213" width="0.1018%" height="15" fill="rgb(241,47,5)" fg:x="8596" fg:w="29"/><text x="30.4326%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (5 samples, 0.02%)</title><rect x="30.3230%" y="197" width="0.0176%" height="15" fill="rgb(233,42,35)" fg:x="8636" fg:w="5"/><text x="30.5730%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.01%)</title><rect x="30.3617%" y="181" width="0.0105%" height="15" fill="rgb(231,13,6)" fg:x="8647" fg:w="3"/><text x="30.6117%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.01%)</title><rect x="30.3722%" y="181" width="0.0105%" height="15" fill="rgb(207,181,40)" fg:x="8650" fg:w="3"/><text x="30.6222%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.01%)</title><rect x="30.4986%" y="165" width="0.0140%" height="15" fill="rgb(254,173,49)" fg:x="8686" fg:w="4"/><text x="30.7486%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (4 samples, 0.01%)</title><rect x="30.5126%" y="165" width="0.0140%" height="15" fill="rgb(221,1,38)" fg:x="8690" fg:w="4"/><text x="30.7626%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (4 samples, 0.01%)</title><rect x="30.5126%" y="149" width="0.0140%" height="15" fill="rgb(206,124,46)" fg:x="8690" fg:w="4"/><text x="30.7626%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.01%)</title><rect x="30.5126%" y="133" width="0.0140%" height="15" fill="rgb(249,21,11)" fg:x="8690" fg:w="4"/><text x="30.7626%" y="143.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.21%)</title><rect x="30.3230%" y="213" width="0.2142%" height="15" fill="rgb(222,201,40)" fg:x="8636" fg:w="61"/><text x="30.5730%" y="223.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (56 samples, 0.20%)</title><rect x="30.3406%" y="197" width="0.1966%" height="15" fill="rgb(235,61,29)" fg:x="8641" fg:w="56"/><text x="30.5906%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (43 samples, 0.15%)</title><rect x="30.3862%" y="181" width="0.1510%" height="15" fill="rgb(219,207,3)" fg:x="8654" fg:w="43"/><text x="30.6362%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.01%)</title><rect x="30.5267%" y="165" width="0.0105%" height="15" fill="rgb(222,56,46)" fg:x="8694" fg:w="3"/><text x="30.7767%" y="175.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::add (79 samples, 0.28%)</title><rect x="30.2844%" y="245" width="0.2774%" height="15" fill="rgb(239,76,54)" fg:x="8625" fg:w="79"/><text x="30.5344%" y="255.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (72 samples, 0.25%)</title><rect x="30.3090%" y="229" width="0.2528%" height="15" fill="rgb(231,124,27)" fg:x="8632" fg:w="72"/><text x="30.5590%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (7 samples, 0.02%)</title><rect x="30.5372%" y="213" width="0.0246%" height="15" fill="rgb(249,195,6)" fg:x="8697" fg:w="7"/><text x="30.7872%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.01%)</title><rect x="30.5618%" y="229" width="0.0140%" height="15" fill="rgb(237,174,47)" fg:x="8704" fg:w="4"/><text x="30.8118%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.01%)</title><rect x="30.5653%" y="213" width="0.0105%" height="15" fill="rgb(206,201,31)" fg:x="8705" fg:w="3"/><text x="30.8153%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.01%)</title><rect x="30.5653%" y="197" width="0.0105%" height="15" fill="rgb(231,57,52)" fg:x="8705" fg:w="3"/><text x="30.8153%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.01%)</title><rect x="30.5653%" y="181" width="0.0105%" height="15" fill="rgb(248,177,22)" fg:x="8705" fg:w="3"/><text x="30.8153%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.01%)</title><rect x="30.5969%" y="213" width="0.0140%" height="15" fill="rgb(215,211,37)" fg:x="8714" fg:w="4"/><text x="30.8469%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (6 samples, 0.02%)</title><rect x="30.6145%" y="213" width="0.0211%" height="15" fill="rgb(241,128,51)" fg:x="8719" fg:w="6"/><text x="30.8645%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.02%)</title><rect x="30.6145%" y="197" width="0.0211%" height="15" fill="rgb(227,165,31)" fg:x="8719" fg:w="6"/><text x="30.8645%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.02%)</title><rect x="30.6180%" y="181" width="0.0176%" height="15" fill="rgb(228,167,24)" fg:x="8720" fg:w="5"/><text x="30.8680%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.06%)</title><rect x="31.2711%" y="197" width="0.0562%" height="15" fill="rgb(228,143,12)" fg:x="8906" fg:w="16"/><text x="31.5211%" y="207.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (201 samples, 0.71%)</title><rect x="30.6390%" y="213" width="0.7058%" height="15" fill="rgb(249,149,8)" fg:x="8726" fg:w="201"/><text x="30.8890%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.03%)</title><rect x="31.4185%" y="197" width="0.0316%" height="15" fill="rgb(243,35,44)" fg:x="8948" fg:w="9"/><text x="31.6685%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.01%)</title><rect x="31.4501%" y="197" width="0.0140%" height="15" fill="rgb(246,89,9)" fg:x="8957" fg:w="4"/><text x="31.7001%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.01%)</title><rect x="31.4712%" y="197" width="0.0140%" height="15" fill="rgb(233,213,13)" fg:x="8963" fg:w="4"/><text x="31.7212%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.01%)</title><rect x="32.9424%" y="181" width="0.0140%" height="15" fill="rgb(233,141,41)" fg:x="9382" fg:w="4"/><text x="33.1924%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.02%)</title><rect x="32.9565%" y="181" width="0.0246%" height="15" fill="rgb(239,167,4)" fg:x="9386" fg:w="7"/><text x="33.2065%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.05%)</title><rect x="32.9810%" y="181" width="0.0527%" height="15" fill="rgb(209,217,16)" fg:x="9393" fg:w="15"/><text x="33.2310%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (5 samples, 0.02%)</title><rect x="33.1004%" y="165" width="0.0176%" height="15" fill="rgb(219,88,35)" fg:x="9427" fg:w="5"/><text x="33.3504%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (24 samples, 0.08%)</title><rect x="33.0513%" y="181" width="0.0843%" height="15" fill="rgb(220,193,23)" fg:x="9413" fg:w="24"/><text x="33.3013%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.02%)</title><rect x="33.1390%" y="165" width="0.0176%" height="15" fill="rgb(230,90,52)" fg:x="9438" fg:w="5"/><text x="33.3890%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (10 samples, 0.04%)</title><rect x="33.1355%" y="181" width="0.0351%" height="15" fill="rgb(252,106,19)" fg:x="9437" fg:w="10"/><text x="33.3855%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (6 samples, 0.02%)</title><rect x="33.2058%" y="165" width="0.0211%" height="15" fill="rgb(206,74,20)" fg:x="9457" fg:w="6"/><text x="33.4558%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.01%)</title><rect x="33.2163%" y="149" width="0.0105%" height="15" fill="rgb(230,138,44)" fg:x="9460" fg:w="3"/><text x="33.4663%" y="159.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (5,341 samples, 18.75%)</title><rect x="14.4909%" y="277" width="18.7535%" height="15" fill="rgb(235,182,43)" fg:x="4127" fg:w="5341"/><text x="14.7409%" y="287.50">mwpf`mwpf::plugin::PluginMana..</text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (5,268 samples, 18.50%)</title><rect x="14.7472%" y="261" width="18.4972%" height="15" fill="rgb(242,16,51)" fg:x="4200" fg:w="5268"/><text x="14.9972%" y="271.50">mwpf`mwpf::plugin::PluginEntr..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (764 samples, 2.68%)</title><rect x="30.5618%" y="245" width="2.6826%" height="15" fill="rgb(248,9,4)" fg:x="8704" fg:w="764"/><text x="30.8118%" y="255.50">mw..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (760 samples, 2.67%)</title><rect x="30.5758%" y="229" width="2.6685%" height="15" fill="rgb(210,31,22)" fg:x="8708" fg:w="760"/><text x="30.8258%" y="239.50">mw..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (541 samples, 1.90%)</title><rect x="31.3448%" y="213" width="1.8996%" height="15" fill="rgb(239,54,39)" fg:x="8927" fg:w="541"/><text x="31.5948%" y="223.50">m..</text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (501 samples, 1.76%)</title><rect x="31.4853%" y="197" width="1.7591%" height="15" fill="rgb(230,99,41)" fg:x="8967" fg:w="501"/><text x="31.7353%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (21 samples, 0.07%)</title><rect x="33.1706%" y="181" width="0.0737%" height="15" fill="rgb(253,106,12)" fg:x="9447" fg:w="21"/><text x="33.4206%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.02%)</title><rect x="33.2268%" y="165" width="0.0176%" height="15" fill="rgb(213,46,41)" fg:x="9463" fg:w="5"/><text x="33.4768%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.02%)</title><rect x="33.2268%" y="149" width="0.0176%" height="15" fill="rgb(215,133,35)" fg:x="9463" fg:w="5"/><text x="33.4768%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.01%)</title><rect x="33.2303%" y="133" width="0.0140%" height="15" fill="rgb(213,28,5)" fg:x="9464" fg:w="4"/><text x="33.4803%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.03%)</title><rect x="36.8750%" y="245" width="0.0281%" height="15" fill="rgb(215,77,49)" fg:x="10502" fg:w="8"/><text x="37.1250%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.05%)</title><rect x="36.8715%" y="261" width="0.0456%" height="15" fill="rgb(248,100,22)" fg:x="10501" fg:w="13"/><text x="37.1215%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.01%)</title><rect x="36.9066%" y="245" width="0.0105%" height="15" fill="rgb(208,67,9)" fg:x="10511" fg:w="3"/><text x="37.1566%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (49 samples, 0.17%)</title><rect x="36.9277%" y="229" width="0.1721%" height="15" fill="rgb(219,133,21)" fg:x="10517" fg:w="49"/><text x="37.1777%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (49 samples, 0.17%)</title><rect x="36.9277%" y="213" width="0.1721%" height="15" fill="rgb(246,46,29)" fg:x="10517" fg:w="49"/><text x="37.1777%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (54 samples, 0.19%)</title><rect x="36.9171%" y="261" width="0.1896%" height="15" fill="rgb(246,185,52)" fg:x="10514" fg:w="54"/><text x="37.1671%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (52 samples, 0.18%)</title><rect x="36.9242%" y="245" width="0.1826%" height="15" fill="rgb(252,136,11)" fg:x="10516" fg:w="52"/><text x="37.1742%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (96 samples, 0.34%)</title><rect x="37.1067%" y="261" width="0.3371%" height="15" fill="rgb(219,138,53)" fg:x="10568" fg:w="96"/><text x="37.3567%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::invalid_subgraph::InvalidSubgraph as core::cmp::Ord&gt;::cmp (7 samples, 0.02%)</title><rect x="37.4438%" y="261" width="0.0246%" height="15" fill="rgb(211,51,23)" fg:x="10664" fg:w="7"/><text x="37.6938%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.02%)</title><rect x="37.4473%" y="245" width="0.0211%" height="15" fill="rgb(247,221,28)" fg:x="10665" fg:w="6"/><text x="37.6973%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (35 samples, 0.12%)</title><rect x="37.4754%" y="213" width="0.1229%" height="15" fill="rgb(251,222,45)" fg:x="10673" fg:w="35"/><text x="37.7254%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (35 samples, 0.12%)</title><rect x="37.4754%" y="197" width="0.1229%" height="15" fill="rgb(217,162,53)" fg:x="10673" fg:w="35"/><text x="37.7254%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (46 samples, 0.16%)</title><rect x="37.5983%" y="165" width="0.1615%" height="15" fill="rgb(229,93,14)" fg:x="10708" fg:w="46"/><text x="37.8483%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (48 samples, 0.17%)</title><rect x="37.5983%" y="181" width="0.1685%" height="15" fill="rgb(209,67,49)" fg:x="10708" fg:w="48"/><text x="37.8483%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (121 samples, 0.42%)</title><rect x="37.7669%" y="181" width="0.4249%" height="15" fill="rgb(213,87,29)" fg:x="10756" fg:w="121"/><text x="38.0169%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (121 samples, 0.42%)</title><rect x="37.7669%" y="165" width="0.4249%" height="15" fill="rgb(205,151,52)" fg:x="10756" fg:w="121"/><text x="38.0169%" y="175.50"></text></g><g><title>mwpf`HSimplexNla::~HSimplexNla (171 samples, 0.60%)</title><rect x="37.5983%" y="213" width="0.6004%" height="15" fill="rgb(253,215,39)" fg:x="10708" fg:w="171"/><text x="37.8483%" y="223.50"></text></g><g><title>mwpf`HFactor::~HFactor (171 samples, 0.60%)</title><rect x="37.5983%" y="197" width="0.6004%" height="15" fill="rgb(221,220,41)" fg:x="10708" fg:w="171"/><text x="37.8483%" y="207.50"></text></g><g><title>mwpf`HEkk::~HEkk (207 samples, 0.73%)</title><rect x="37.4754%" y="229" width="0.7268%" height="15" fill="rgb(218,133,21)" fg:x="10673" fg:w="207"/><text x="37.7254%" y="239.50"></text></g><g><title>mwpf`HighsLp::~HighsLp (49 samples, 0.17%)</title><rect x="38.2022%" y="229" width="0.1721%" height="15" fill="rgb(221,193,43)" fg:x="10880" fg:w="49"/><text x="38.4522%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (49 samples, 0.17%)</title><rect x="38.2022%" y="213" width="0.1721%" height="15" fill="rgb(240,128,52)" fg:x="10880" fg:w="49"/><text x="38.4522%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (49 samples, 0.17%)</title><rect x="38.2022%" y="197" width="0.1721%" height="15" fill="rgb(253,114,12)" fg:x="10880" fg:w="49"/><text x="38.4522%" y="207.50"></text></g><g><title>mwpf`HighsLp::~HighsLp (12 samples, 0.04%)</title><rect x="38.3743%" y="213" width="0.0421%" height="15" fill="rgb(215,223,47)" fg:x="10929" fg:w="12"/><text x="38.6243%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (12 samples, 0.04%)</title><rect x="38.3743%" y="197" width="0.0421%" height="15" fill="rgb(248,225,23)" fg:x="10929" fg:w="12"/><text x="38.6243%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (12 samples, 0.04%)</title><rect x="38.3743%" y="181" width="0.0421%" height="15" fill="rgb(250,108,0)" fg:x="10929" fg:w="12"/><text x="38.6243%" y="191.50"></text></g><g><title>mwpf`Highs::~Highs (273 samples, 0.96%)</title><rect x="37.4684%" y="261" width="0.9586%" height="15" fill="rgb(228,208,7)" fg:x="10671" fg:w="273"/><text x="37.7184%" y="271.50"></text></g><g><title>mwpf`Highs::~Highs (273 samples, 0.96%)</title><rect x="37.4684%" y="245" width="0.9586%" height="15" fill="rgb(244,45,10)" fg:x="10671" fg:w="273"/><text x="37.7184%" y="255.50"></text></g><g><title>mwpf`PresolveComponentData::~PresolveComponentData (15 samples, 0.05%)</title><rect x="38.3743%" y="229" width="0.0527%" height="15" fill="rgb(207,125,25)" fg:x="10929" fg:w="15"/><text x="38.6243%" y="239.50"></text></g><g><title>mwpf`presolve::HighsPostsolveStack::~HighsPostsolveStack (3 samples, 0.01%)</title><rect x="38.4164%" y="213" width="0.0105%" height="15" fill="rgb(210,195,18)" fg:x="10941" fg:w="3"/><text x="38.6664%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.01%)</title><rect x="38.4445%" y="245" width="0.0140%" height="15" fill="rgb(249,80,12)" fg:x="10949" fg:w="4"/><text x="38.6945%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.01%)</title><rect x="38.4621%" y="245" width="0.0105%" height="15" fill="rgb(221,65,9)" fg:x="10954" fg:w="3"/><text x="38.7121%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (7 samples, 0.02%)</title><rect x="38.4937%" y="229" width="0.0246%" height="15" fill="rgb(235,49,36)" fg:x="10963" fg:w="7"/><text x="38.7437%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.02%)</title><rect x="38.5779%" y="197" width="0.0176%" height="15" fill="rgb(225,32,20)" fg:x="10987" fg:w="5"/><text x="38.8279%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (3 samples, 0.01%)</title><rect x="38.5955%" y="197" width="0.0105%" height="15" fill="rgb(215,141,46)" fg:x="10992" fg:w="3"/><text x="38.8455%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.02%)</title><rect x="38.6236%" y="181" width="0.0246%" height="15" fill="rgb(250,160,47)" fg:x="11000" fg:w="7"/><text x="38.8736%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.01%)</title><rect x="38.6482%" y="181" width="0.0105%" height="15" fill="rgb(216,222,40)" fg:x="11007" fg:w="3"/><text x="38.8982%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.01%)</title><rect x="38.6587%" y="181" width="0.0105%" height="15" fill="rgb(234,217,39)" fg:x="11010" fg:w="3"/><text x="38.9087%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (3 samples, 0.01%)</title><rect x="38.6587%" y="165" width="0.0105%" height="15" fill="rgb(207,178,40)" fg:x="11010" fg:w="3"/><text x="38.9087%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.01%)</title><rect x="38.6587%" y="149" width="0.0105%" height="15" fill="rgb(221,136,13)" fg:x="11010" fg:w="3"/><text x="38.9087%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.04%)</title><rect x="38.6692%" y="181" width="0.0386%" height="15" fill="rgb(249,199,10)" fg:x="11013" fg:w="11"/><text x="38.9192%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.04%)</title><rect x="38.6692%" y="165" width="0.0386%" height="15" fill="rgb(249,222,13)" fg:x="11013" fg:w="11"/><text x="38.9192%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (4 samples, 0.01%)</title><rect x="38.6938%" y="149" width="0.0140%" height="15" fill="rgb(244,185,38)" fg:x="11020" fg:w="4"/><text x="38.9438%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (32 samples, 0.11%)</title><rect x="38.6060%" y="197" width="0.1124%" height="15" fill="rgb(236,202,9)" fg:x="10995" fg:w="32"/><text x="38.8560%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (4 samples, 0.01%)</title><rect x="38.7184%" y="197" width="0.0140%" height="15" fill="rgb(250,229,37)" fg:x="11027" fg:w="4"/><text x="38.9684%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.04%)</title><rect x="38.7395%" y="181" width="0.0351%" height="15" fill="rgb(206,174,23)" fg:x="11033" fg:w="10"/><text x="38.9895%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (4 samples, 0.01%)</title><rect x="38.7605%" y="165" width="0.0140%" height="15" fill="rgb(211,33,43)" fg:x="11039" fg:w="4"/><text x="39.0105%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.04%)</title><rect x="38.7746%" y="181" width="0.0386%" height="15" fill="rgb(245,58,50)" fg:x="11043" fg:w="11"/><text x="39.0246%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.03%)</title><rect x="38.7816%" y="165" width="0.0316%" height="15" fill="rgb(244,68,36)" fg:x="11045" fg:w="9"/><text x="39.0316%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.01%)</title><rect x="38.8167%" y="181" width="0.0105%" height="15" fill="rgb(232,229,15)" fg:x="11055" fg:w="3"/><text x="39.0667%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (5 samples, 0.02%)</title><rect x="38.8308%" y="181" width="0.0176%" height="15" fill="rgb(254,30,23)" fg:x="11059" fg:w="5"/><text x="39.0808%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (7 samples, 0.02%)</title><rect x="38.9045%" y="133" width="0.0246%" height="15" fill="rgb(235,160,14)" fg:x="11080" fg:w="7"/><text x="39.1545%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 0.09%)</title><rect x="38.8483%" y="181" width="0.0948%" height="15" fill="rgb(212,155,44)" fg:x="11064" fg:w="27"/><text x="39.0983%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (23 samples, 0.08%)</title><rect x="38.8624%" y="165" width="0.0808%" height="15" fill="rgb(226,2,50)" fg:x="11068" fg:w="23"/><text x="39.1124%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (17 samples, 0.06%)</title><rect x="38.8834%" y="149" width="0.0597%" height="15" fill="rgb(234,177,6)" fg:x="11074" fg:w="17"/><text x="39.1334%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (4 samples, 0.01%)</title><rect x="38.9291%" y="133" width="0.0140%" height="15" fill="rgb(217,24,9)" fg:x="11087" fg:w="4"/><text x="39.1791%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (60 samples, 0.21%)</title><rect x="38.7395%" y="197" width="0.2107%" height="15" fill="rgb(220,13,46)" fg:x="11033" fg:w="60"/><text x="38.9895%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (158 samples, 0.55%)</title><rect x="38.5428%" y="213" width="0.5548%" height="15" fill="rgb(239,221,27)" fg:x="10977" fg:w="158"/><text x="38.7928%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (42 samples, 0.15%)</title><rect x="38.9501%" y="197" width="0.1475%" height="15" fill="rgb(222,198,25)" fg:x="11093" fg:w="42"/><text x="39.2001%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (3 samples, 0.01%)</title><rect x="39.0976%" y="213" width="0.0105%" height="15" fill="rgb(211,99,13)" fg:x="11135" fg:w="3"/><text x="39.3476%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.01%)</title><rect x="39.1081%" y="213" width="0.0105%" height="15" fill="rgb(232,111,31)" fg:x="11138" fg:w="3"/><text x="39.3581%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (176 samples, 0.62%)</title><rect x="38.5183%" y="229" width="0.6180%" height="15" fill="rgb(245,82,37)" fg:x="10970" fg:w="176"/><text x="38.7683%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5 samples, 0.02%)</title><rect x="39.1187%" y="213" width="0.0176%" height="15" fill="rgb(227,149,46)" fg:x="11141" fg:w="5"/><text x="39.3687%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.02%)</title><rect x="39.1187%" y="197" width="0.0176%" height="15" fill="rgb(218,36,50)" fg:x="11141" fg:w="5"/><text x="39.3687%" y="207.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (200 samples, 0.70%)</title><rect x="38.4375%" y="261" width="0.7022%" height="15" fill="rgb(226,80,48)" fg:x="10947" fg:w="200"/><text x="38.6875%" y="271.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (186 samples, 0.65%)</title><rect x="38.4867%" y="245" width="0.6531%" height="15" fill="rgb(238,224,15)" fg:x="10961" fg:w="186"/><text x="38.7367%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.02%)</title><rect x="39.1608%" y="197" width="0.0246%" height="15" fill="rgb(241,136,10)" fg:x="11153" fg:w="7"/><text x="39.4108%" y="207.50"></text></g><g><title>mwpf`HEkk::addCols (6 samples, 0.02%)</title><rect x="39.1889%" y="197" width="0.0211%" height="15" fill="rgb(208,32,45)" fg:x="11161" fg:w="6"/><text x="39.4389%" y="207.50"></text></g><g><title>mwpf`HEkk::clear (6 samples, 0.02%)</title><rect x="39.1889%" y="181" width="0.0211%" height="15" fill="rgb(207,135,9)" fg:x="11161" fg:w="6"/><text x="39.4389%" y="191.50"></text></g><g><title>mwpf`HighsSparseMatrix::addCols (3 samples, 0.01%)</title><rect x="39.2135%" y="197" width="0.0105%" height="15" fill="rgb(206,86,44)" fg:x="11168" fg:w="3"/><text x="39.4635%" y="207.50"></text></g><g><title>mwpf`Highs::addColsInterface (31 samples, 0.11%)</title><rect x="39.1538%" y="213" width="0.1088%" height="15" fill="rgb(245,177,15)" fg:x="11151" fg:w="31"/><text x="39.4038%" y="223.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (3 samples, 0.01%)</title><rect x="39.2521%" y="197" width="0.0105%" height="15" fill="rgb(206,64,50)" fg:x="11179" fg:w="3"/><text x="39.5021%" y="207.50"></text></g><g><title>mwpf`PresolveComponentData::clear (5 samples, 0.02%)</title><rect x="39.2767%" y="213" width="0.0176%" height="15" fill="rgb(234,36,40)" fg:x="11186" fg:w="5"/><text x="39.5267%" y="223.50"></text></g><g><title>mwpf`Highs::addCols (44 samples, 0.15%)</title><rect x="39.1433%" y="229" width="0.1545%" height="15" fill="rgb(213,64,8)" fg:x="11148" fg:w="44"/><text x="39.3933%" y="239.50"></text></g><g><title>mwpf`highs::Model::add_col (46 samples, 0.16%)</title><rect x="39.1433%" y="261" width="0.1615%" height="15" fill="rgb(210,75,36)" fg:x="11148" fg:w="46"/><text x="39.3933%" y="271.50"></text></g><g><title>mwpf`Highs::addCol (46 samples, 0.16%)</title><rect x="39.1433%" y="245" width="0.1615%" height="15" fill="rgb(229,88,21)" fg:x="11148" fg:w="46"/><text x="39.3933%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_small (6 samples, 0.02%)</title><rect x="39.3153%" y="245" width="0.0211%" height="15" fill="rgb(252,204,47)" fg:x="11197" fg:w="6"/><text x="39.5653%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.01%)</title><rect x="39.3258%" y="229" width="0.0105%" height="15" fill="rgb(208,77,27)" fg:x="11200" fg:w="3"/><text x="39.5758%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.02%)</title><rect x="39.7086%" y="181" width="0.0211%" height="15" fill="rgb(221,76,26)" fg:x="11309" fg:w="6"/><text x="39.9586%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (5 samples, 0.02%)</title><rect x="39.7121%" y="165" width="0.0176%" height="15" fill="rgb(225,139,18)" fg:x="11310" fg:w="5"/><text x="39.9621%" y="175.50"></text></g><g><title>mwpf`&lt;(ExtendA,ExtendB) as core::iter::traits::collect::Extend&lt;(A,B)&gt;&gt;::extend (108 samples, 0.38%)</title><rect x="39.3539%" y="245" width="0.3792%" height="15" fill="rgb(230,137,11)" fg:x="11208" fg:w="108"/><text x="39.6039%" y="255.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.04%)</title><rect x="39.6945%" y="229" width="0.0386%" height="15" fill="rgb(212,28,1)" fg:x="11305" fg:w="11"/><text x="39.9445%" y="239.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (8 samples, 0.03%)</title><rect x="39.7051%" y="213" width="0.0281%" height="15" fill="rgb(248,164,17)" fg:x="11308" fg:w="8"/><text x="39.9551%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.02%)</title><rect x="39.7086%" y="197" width="0.0246%" height="15" fill="rgb(222,171,42)" fg:x="11309" fg:w="7"/><text x="39.9586%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.04%)</title><rect x="39.7437%" y="213" width="0.0386%" height="15" fill="rgb(243,84,45)" fg:x="11319" fg:w="11"/><text x="39.9937%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (20 samples, 0.07%)</title><rect x="39.7823%" y="213" width="0.0702%" height="15" fill="rgb(252,49,23)" fg:x="11330" fg:w="20"/><text x="40.0323%" y="223.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (8 samples, 0.03%)</title><rect x="39.8701%" y="197" width="0.0281%" height="15" fill="rgb(215,19,7)" fg:x="11355" fg:w="8"/><text x="40.1201%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.02%)</title><rect x="39.8736%" y="181" width="0.0246%" height="15" fill="rgb(238,81,41)" fg:x="11356" fg:w="7"/><text x="40.1236%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="39.8876%" y="165" width="0.0105%" height="15" fill="rgb(210,199,37)" fg:x="11360" fg:w="3"/><text x="40.1376%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.01%)</title><rect x="39.8982%" y="197" width="0.0140%" height="15" fill="rgb(244,192,49)" fg:x="11363" fg:w="4"/><text x="40.1482%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (13 samples, 0.05%)</title><rect x="39.9122%" y="197" width="0.0456%" height="15" fill="rgb(226,211,11)" fg:x="11367" fg:w="13"/><text x="40.1622%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (14 samples, 0.05%)</title><rect x="39.9649%" y="197" width="0.0492%" height="15" fill="rgb(236,162,54)" fg:x="11382" fg:w="14"/><text x="40.2149%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.02%)</title><rect x="40.0140%" y="197" width="0.0176%" height="15" fill="rgb(220,229,9)" fg:x="11396" fg:w="5"/><text x="40.2640%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.01%)</title><rect x="40.0211%" y="181" width="0.0105%" height="15" fill="rgb(250,87,22)" fg:x="11398" fg:w="3"/><text x="40.2711%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (5 samples, 0.02%)</title><rect x="40.0316%" y="197" width="0.0176%" height="15" fill="rgb(239,43,17)" fg:x="11401" fg:w="5"/><text x="40.2816%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.01%)</title><rect x="40.0597%" y="197" width="0.0105%" height="15" fill="rgb(231,177,25)" fg:x="11409" fg:w="3"/><text x="40.3097%" y="207.50"></text></g><g><title>mwpf`HighsLp::clear (3 samples, 0.01%)</title><rect x="40.1053%" y="165" width="0.0105%" height="15" fill="rgb(219,179,1)" fg:x="11422" fg:w="3"/><text x="40.3553%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.01%)</title><rect x="40.1053%" y="149" width="0.0105%" height="15" fill="rgb(238,219,53)" fg:x="11422" fg:w="3"/><text x="40.3553%" y="159.50"></text></g><g><title>mwpf`HEkk::clear (9 samples, 0.03%)</title><rect x="40.0878%" y="181" width="0.0316%" height="15" fill="rgb(232,167,36)" fg:x="11417" fg:w="9"/><text x="40.3378%" y="191.50"></text></g><g><title>mwpf`HEkk::addRows (13 samples, 0.05%)</title><rect x="40.0772%" y="197" width="0.0456%" height="15" fill="rgb(244,19,51)" fg:x="11414" fg:w="13"/><text x="40.3272%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (3 samples, 0.01%)</title><rect x="40.1721%" y="149" width="0.0105%" height="15" fill="rgb(224,6,22)" fg:x="11441" fg:w="3"/><text x="40.4221%" y="159.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (7 samples, 0.02%)</title><rect x="40.1685%" y="181" width="0.0246%" height="15" fill="rgb(224,145,5)" fg:x="11440" fg:w="7"/><text x="40.4185%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.02%)</title><rect x="40.1721%" y="165" width="0.0211%" height="15" fill="rgb(234,130,49)" fg:x="11441" fg:w="6"/><text x="40.4221%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.01%)</title><rect x="40.1826%" y="149" width="0.0105%" height="15" fill="rgb(254,6,2)" fg:x="11444" fg:w="3"/><text x="40.4326%" y="159.50"></text></g><g><title>mwpf`HighsSparseMatrix::HighsSparseMatrix (25 samples, 0.09%)</title><rect x="40.1264%" y="197" width="0.0878%" height="15" fill="rgb(208,96,46)" fg:x="11428" fg:w="25"/><text x="40.3764%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.01%)</title><rect x="40.2001%" y="181" width="0.0140%" height="15" fill="rgb(239,3,39)" fg:x="11449" fg:w="4"/><text x="40.4501%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (18 samples, 0.06%)</title><rect x="40.3020%" y="181" width="0.0632%" height="15" fill="rgb(233,210,1)" fg:x="11478" fg:w="18"/><text x="40.5520%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (18 samples, 0.06%)</title><rect x="40.3020%" y="165" width="0.0632%" height="15" fill="rgb(244,137,37)" fg:x="11478" fg:w="18"/><text x="40.5520%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (91 samples, 0.32%)</title><rect x="40.3687%" y="181" width="0.3195%" height="15" fill="rgb(240,136,2)" fg:x="11497" fg:w="91"/><text x="40.6187%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (96 samples, 0.34%)</title><rect x="40.6882%" y="181" width="0.3371%" height="15" fill="rgb(239,18,37)" fg:x="11588" fg:w="96"/><text x="40.9382%" y="191.50"></text></g><g><title>mwpf`std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;::__append (3 samples, 0.01%)</title><rect x="41.0253%" y="181" width="0.0105%" height="15" fill="rgb(218,185,22)" fg:x="11684" fg:w="3"/><text x="41.2753%" y="191.50"></text></g><g><title>mwpf`HighsSparseMatrix::addRows (236 samples, 0.83%)</title><rect x="40.2142%" y="197" width="0.8287%" height="15" fill="rgb(225,218,4)" fg:x="11453" fg:w="236"/><text x="40.4642%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.01%)</title><rect x="41.0534%" y="181" width="0.0105%" height="15" fill="rgb(230,182,32)" fg:x="11692" fg:w="3"/><text x="41.3034%" y="191.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (6 samples, 0.02%)</title><rect x="42.3315%" y="165" width="0.0211%" height="15" fill="rgb(242,56,43)" fg:x="12056" fg:w="6"/><text x="42.5815%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.02%)</title><rect x="42.3315%" y="149" width="0.0211%" height="15" fill="rgb(233,99,24)" fg:x="12056" fg:w="6"/><text x="42.5815%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.02%)</title><rect x="42.3350%" y="133" width="0.0176%" height="15" fill="rgb(234,209,42)" fg:x="12057" fg:w="5"/><text x="42.5850%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.01%)</title><rect x="42.3420%" y="117" width="0.0105%" height="15" fill="rgb(227,7,12)" fg:x="12059" fg:w="3"/><text x="42.5920%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.01%)</title><rect x="42.3525%" y="165" width="0.0140%" height="15" fill="rgb(245,203,43)" fg:x="12062" fg:w="4"/><text x="42.6025%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.01%)</title><rect x="42.3666%" y="165" width="0.0140%" height="15" fill="rgb(238,205,33)" fg:x="12066" fg:w="4"/><text x="42.6166%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (3 samples, 0.01%)</title><rect x="42.3806%" y="165" width="0.0105%" height="15" fill="rgb(231,56,7)" fg:x="12070" fg:w="3"/><text x="42.6306%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (5 samples, 0.02%)</title><rect x="42.3912%" y="165" width="0.0176%" height="15" fill="rgb(244,186,29)" fg:x="12073" fg:w="5"/><text x="42.6412%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (3 samples, 0.01%)</title><rect x="42.3982%" y="149" width="0.0105%" height="15" fill="rgb(234,111,31)" fg:x="12075" fg:w="3"/><text x="42.6482%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.01%)</title><rect x="42.4087%" y="165" width="0.0105%" height="15" fill="rgb(241,149,10)" fg:x="12078" fg:w="3"/><text x="42.6587%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.01%)</title><rect x="42.4192%" y="165" width="0.0105%" height="15" fill="rgb(249,206,44)" fg:x="12081" fg:w="3"/><text x="42.6692%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (4 samples, 0.01%)</title><rect x="43.6903%" y="149" width="0.0140%" height="15" fill="rgb(251,153,30)" fg:x="12443" fg:w="4"/><text x="43.9403%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.01%)</title><rect x="43.7149%" y="149" width="0.0140%" height="15" fill="rgb(239,152,38)" fg:x="12450" fg:w="4"/><text x="43.9649%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.01%)</title><rect x="43.7289%" y="149" width="0.0105%" height="15" fill="rgb(249,139,47)" fg:x="12454" fg:w="3"/><text x="43.9789%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (5 samples, 0.02%)</title><rect x="43.9572%" y="101" width="0.0176%" height="15" fill="rgb(244,64,35)" fg:x="12519" fg:w="5"/><text x="44.2072%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (3 samples, 0.01%)</title><rect x="43.9642%" y="85" width="0.0105%" height="15" fill="rgb(216,46,15)" fg:x="12521" fg:w="3"/><text x="44.2142%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (3 samples, 0.01%)</title><rect x="43.9642%" y="69" width="0.0105%" height="15" fill="rgb(250,74,19)" fg:x="12521" fg:w="3"/><text x="44.2142%" y="79.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (9 samples, 0.03%)</title><rect x="43.9501%" y="133" width="0.0316%" height="15" fill="rgb(249,42,33)" fg:x="12517" fg:w="9"/><text x="44.2001%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.03%)</title><rect x="43.9537%" y="117" width="0.0281%" height="15" fill="rgb(242,149,17)" fg:x="12518" fg:w="8"/><text x="44.2037%" y="127.50"></text></g><g><title>mwpf`HighsHashTable&lt;int, void&gt;::growTable (315 samples, 1.11%)</title><rect x="43.7395%" y="149" width="1.1060%" height="15" fill="rgb(244,29,21)" fg:x="12457" fg:w="315"/><text x="43.9895%" y="159.50"></text></g><g><title>mwpf`bool HighsHashTable&lt;int, void&gt;::insert&lt;HighsHashTableEntry&lt;int, void&gt;&gt;(HighsHashTableEntry (240 samples, 0.84%)</title><rect x="44.0028%" y="133" width="0.8427%" height="15" fill="rgb(220,130,37)" fg:x="12532" fg:w="240"/><text x="44.2528%" y="143.50"></text></g><g><title>mwpf`assessMatrix(HighsLogOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator&lt;char&gt;&gt;, int, int, bool, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;double, std::__1::allocator (1,100 samples, 3.86%)</title><rect x="41.0674%" y="181" width="3.8624%" height="15" fill="rgb(211,67,2)" fg:x="11696" fg:w="1100"/><text x="41.3174%" y="191.50">mwpf..</text></g><g><title>mwpf`bool HighsHashTable&lt;int, void&gt;::insert&lt;int&gt; (712 samples, 2.50%)</title><rect x="42.4298%" y="165" width="2.5000%" height="15" fill="rgb(235,68,52)" fg:x="12084" fg:w="712"/><text x="42.6798%" y="175.50">mw..</text></g><g><title>mwpf`bool HighsHashTable&lt;int, void&gt;::insert&lt;HighsHashTableEntry&lt;int, void&gt;&gt;(HighsHashTableEntry (24 samples, 0.08%)</title><rect x="44.8455%" y="149" width="0.0843%" height="15" fill="rgb(246,142,3)" fg:x="12772" fg:w="24"/><text x="45.0955%" y="159.50"></text></g><g><title>mwpf`HighsSparseMatrix::assess(HighsLogOptions const&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (1,142 samples, 4.01%)</title><rect x="41.0428%" y="197" width="4.0098%" height="15" fill="rgb(241,25,7)" fg:x="11689" fg:w="1142"/><text x="41.2928%" y="207.50">mwpf..</text></g><g><title>mwpf`bool HighsHashTable&lt;int, void&gt;::insert&lt;int&gt; (33 samples, 0.12%)</title><rect x="44.9368%" y="181" width="0.1159%" height="15" fill="rgb(242,119,39)" fg:x="12798" fg:w="33"/><text x="45.1868%" y="191.50"></text></g><g><title>mwpf`HighsSparseMatrix::clear (5 samples, 0.02%)</title><rect x="45.0527%" y="197" width="0.0176%" height="15" fill="rgb(241,98,45)" fg:x="12831" fg:w="5"/><text x="45.3027%" y="207.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::assign (3 samples, 0.01%)</title><rect x="45.0597%" y="181" width="0.0105%" height="15" fill="rgb(254,28,30)" fg:x="12833" fg:w="3"/><text x="45.3097%" y="191.50"></text></g><g><title>mwpf`appendRowsToLpVectors(HighsLp&amp;, int, std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt; const&amp;, std::__1::vector&lt;double, std::__1::allocator (3 samples, 0.01%)</title><rect x="45.0702%" y="197" width="0.0105%" height="15" fill="rgb(241,142,54)" fg:x="12836" fg:w="3"/><text x="45.3202%" y="207.50"></text></g><g><title>mwpf`Highs::addRowsInterface (1,495 samples, 5.25%)</title><rect x="39.8560%" y="213" width="5.2493%" height="15" fill="rgb(222,85,15)" fg:x="11351" fg:w="1495"/><text x="40.1060%" y="223.50">mwpf`H..</text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::__append (4 samples, 0.01%)</title><rect x="45.0913%" y="197" width="0.0140%" height="15" fill="rgb(210,85,47)" fg:x="12842" fg:w="4"/><text x="45.3413%" y="207.50"></text></g><g><title>mwpf`Highs::forceHighsSolutionBasisSize (6 samples, 0.02%)</title><rect x="45.1088%" y="197" width="0.0211%" height="15" fill="rgb(224,206,25)" fg:x="12847" fg:w="6"/><text x="45.3588%" y="207.50"></text></g><g><title>mwpf`Highs::returnFromHighs (11 samples, 0.04%)</title><rect x="45.1053%" y="213" width="0.0386%" height="15" fill="rgb(243,201,19)" fg:x="12846" fg:w="11"/><text x="45.3553%" y="223.50"></text></g><g><title>mwpf`lpDimensionsOk(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3 samples, 0.01%)</title><rect x="45.1334%" y="197" width="0.0105%" height="15" fill="rgb(236,59,4)" fg:x="12854" fg:w="3"/><text x="45.3834%" y="207.50"></text></g><g><title>mwpf`HighsModel::clear (7 samples, 0.02%)</title><rect x="45.1545%" y="213" width="0.0246%" height="15" fill="rgb(254,179,45)" fg:x="12860" fg:w="7"/><text x="45.4045%" y="223.50"></text></g><g><title>mwpf`HighsLp::clear (5 samples, 0.02%)</title><rect x="45.1615%" y="197" width="0.0176%" height="15" fill="rgb(226,14,10)" fg:x="12862" fg:w="5"/><text x="45.4115%" y="207.50"></text></g><g><title>mwpf`HighsBasis::clear (3 samples, 0.01%)</title><rect x="45.1931%" y="197" width="0.0105%" height="15" fill="rgb(244,27,41)" fg:x="12871" fg:w="3"/><text x="45.4431%" y="207.50"></text></g><g><title>mwpf`HighsLp::clear (6 samples, 0.02%)</title><rect x="45.2037%" y="197" width="0.0211%" height="15" fill="rgb(235,35,32)" fg:x="12874" fg:w="6"/><text x="45.4537%" y="207.50"></text></g><g><title>mwpf`PresolveComponentData::clear (14 samples, 0.05%)</title><rect x="45.1826%" y="213" width="0.0492%" height="15" fill="rgb(218,68,31)" fg:x="12868" fg:w="14"/><text x="45.4326%" y="223.50"></text></g><g><title>mwpf`Highs::addRows (1,568 samples, 5.51%)</title><rect x="39.7331%" y="229" width="5.5056%" height="15" fill="rgb(207,120,37)" fg:x="11316" fg:w="1568"/><text x="39.9831%" y="239.50">mwpf`Hi..</text></g><g><title>mwpf`Highs::addRow (1,570 samples, 5.51%)</title><rect x="39.7331%" y="245" width="5.5126%" height="15" fill="rgb(227,98,0)" fg:x="11316" fg:w="1570"/><text x="39.9831%" y="255.50">mwpf`Hi..</text></g><g><title>mwpf`highs::Model::add_row (1,740 samples, 6.11%)</title><rect x="39.3048%" y="261" width="6.1096%" height="15" fill="rgb(207,7,3)" fg:x="11194" fg:w="1740"/><text x="39.5548%" y="271.50">mwpf`hig..</text></g><g><title>mwpf`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (48 samples, 0.17%)</title><rect x="45.2458%" y="245" width="0.1685%" height="15" fill="rgb(206,98,19)" fg:x="12886" fg:w="48"/><text x="45.4958%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (4 samples, 0.01%)</title><rect x="45.4003%" y="229" width="0.0140%" height="15" fill="rgb(217,5,26)" fg:x="12930" fg:w="4"/><text x="45.6503%" y="239.50"></text></g><g><title>mwpf`HEkk::initialiseSimplexLpRandomVectors (3 samples, 0.01%)</title><rect x="45.4284%" y="165" width="0.0105%" height="15" fill="rgb(235,190,38)" fg:x="12938" fg:w="3"/><text x="45.6784%" y="175.50"></text></g><g><title>mwpf`HEkk::moveLp (10 samples, 0.04%)</title><rect x="45.4284%" y="181" width="0.0351%" height="15" fill="rgb(247,86,24)" fg:x="12938" fg:w="10"/><text x="45.6784%" y="191.50"></text></g><g><title>mwpf`HighsRandom::drawUniform (7 samples, 0.02%)</title><rect x="45.4389%" y="165" width="0.0246%" height="15" fill="rgb(205,101,16)" fg:x="12941" fg:w="7"/><text x="45.6889%" y="175.50"></text></g><g><title>mwpf`HEkk::allocateWorkAndBaseArrays (6 samples, 0.02%)</title><rect x="45.4740%" y="149" width="0.0211%" height="15" fill="rgb(246,168,33)" fg:x="12951" fg:w="6"/><text x="45.7240%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (6 samples, 0.02%)</title><rect x="45.4740%" y="133" width="0.0211%" height="15" fill="rgb(231,114,1)" fg:x="12951" fg:w="6"/><text x="45.7240%" y="143.50"></text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (108 samples, 0.38%)</title><rect x="45.4986%" y="133" width="0.3792%" height="15" fill="rgb(207,184,53)" fg:x="12958" fg:w="108"/><text x="45.7486%" y="143.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (108 samples, 0.38%)</title><rect x="45.4986%" y="117" width="0.3792%" height="15" fill="rgb(224,95,51)" fg:x="12958" fg:w="108"/><text x="45.7486%" y="127.50"></text></g><g><title>mwpf`HEkk::computeDual (111 samples, 0.39%)</title><rect x="45.4951%" y="149" width="0.3897%" height="15" fill="rgb(212,188,45)" fg:x="12957" fg:w="111"/><text x="45.7451%" y="159.50"></text></g><g><title>mwpf`HFactor::ftranU(HVectorBase (4 samples, 0.01%)</title><rect x="45.8919%" y="101" width="0.0140%" height="15" fill="rgb(223,154,38)" fg:x="13070" fg:w="4"/><text x="46.1419%" y="111.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (15 samples, 0.05%)</title><rect x="45.8919%" y="117" width="0.0527%" height="15" fill="rgb(251,22,52)" fg:x="13070" fg:w="15"/><text x="46.1419%" y="127.50"></text></g><g><title>mwpf`solveHyper(int, int const*, int const*, double const*, int const*, int const*, int const*, double const*, HVectorBase&lt;double&gt;*) (11 samples, 0.04%)</title><rect x="45.9059%" y="101" width="0.0386%" height="15" fill="rgb(229,209,22)" fg:x="13074" fg:w="11"/><text x="46.1559%" y="111.50"></text></g><g><title>mwpf`HEkk::computePrimal (18 samples, 0.06%)</title><rect x="45.8848%" y="149" width="0.0632%" height="15" fill="rgb(234,138,34)" fg:x="13068" fg:w="18"/><text x="46.1348%" y="159.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (16 samples, 0.06%)</title><rect x="45.8919%" y="133" width="0.0562%" height="15" fill="rgb(212,95,11)" fg:x="13070" fg:w="16"/><text x="46.1419%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (32 samples, 0.11%)</title><rect x="46.2886%" y="69" width="0.1124%" height="15" fill="rgb(240,179,47)" fg:x="13183" fg:w="32"/><text x="46.5386%" y="79.50"></text></g><g><title>mwpf`HFactor::buildFinish (127 samples, 0.45%)</title><rect x="45.9586%" y="85" width="0.4459%" height="15" fill="rgb(240,163,11)" fg:x="13089" fg:w="127"/><text x="46.2086%" y="95.50"></text></g><g><title>mwpf`HFactor::buildKernel (60 samples, 0.21%)</title><rect x="46.4045%" y="85" width="0.2107%" height="15" fill="rgb(236,37,12)" fg:x="13216" fg:w="60"/><text x="46.6545%" y="95.50"></text></g><g><title>mwpf`HFactor::buildSimple (160 samples, 0.56%)</title><rect x="46.6152%" y="85" width="0.5618%" height="15" fill="rgb(232,164,16)" fg:x="13276" fg:w="160"/><text x="46.8652%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (5 samples, 0.02%)</title><rect x="47.1594%" y="69" width="0.0176%" height="15" fill="rgb(244,205,15)" fg:x="13431" fg:w="5"/><text x="47.4094%" y="79.50"></text></g><g><title>mwpf`HEkk::computeFactor (348 samples, 1.22%)</title><rect x="45.9586%" y="133" width="1.2219%" height="15" fill="rgb(223,117,47)" fg:x="13089" fg:w="348"/><text x="46.2086%" y="143.50"></text></g><g><title>mwpf`HSimplexNla::invert (348 samples, 1.22%)</title><rect x="45.9586%" y="117" width="1.2219%" height="15" fill="rgb(244,107,35)" fg:x="13089" fg:w="348"/><text x="46.2086%" y="127.50"></text></g><g><title>mwpf`HFactor::build (348 samples, 1.22%)</title><rect x="45.9586%" y="101" width="1.2219%" height="15" fill="rgb(205,140,8)" fg:x="13089" fg:w="348"/><text x="46.2086%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.01%)</title><rect x="47.1875%" y="117" width="0.0140%" height="15" fill="rgb(228,84,46)" fg:x="13439" fg:w="4"/><text x="47.4375%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (5 samples, 0.02%)</title><rect x="47.2015%" y="101" width="0.0176%" height="15" fill="rgb(254,188,9)" fg:x="13443" fg:w="5"/><text x="47.4515%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`madvise (5 samples, 0.02%)</title><rect x="47.2015%" y="85" width="0.0176%" height="15" fill="rgb(206,112,54)" fg:x="13443" fg:w="5"/><text x="47.4515%" y="95.50"></text></g><g><title>libsystem_platform.dylib`__bzero (196 samples, 0.69%)</title><rect x="47.2191%" y="101" width="0.6882%" height="15" fill="rgb(216,84,49)" fg:x="13448" fg:w="196"/><text x="47.4691%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.01%)</title><rect x="47.9108%" y="101" width="0.0105%" height="15" fill="rgb(214,194,35)" fg:x="13645" fg:w="3"/><text x="48.1608%" y="111.50"></text></g><g><title>mwpf`HEkk::initialiseSimplexLpBasisAndFactor (560 samples, 1.97%)</title><rect x="45.9586%" y="149" width="1.9663%" height="15" fill="rgb(249,28,3)" fg:x="13089" fg:w="560"/><text x="46.2086%" y="159.50">m..</text></g><g><title>mwpf`HSimplexNla::setup (211 samples, 0.74%)</title><rect x="47.1840%" y="133" width="0.7409%" height="15" fill="rgb(222,56,52)" fg:x="13438" fg:w="211"/><text x="47.4340%" y="143.50"></text></g><g><title>mwpf`HFactor::setupGeneral (206 samples, 0.72%)</title><rect x="47.2015%" y="117" width="0.7233%" height="15" fill="rgb(245,217,50)" fg:x="13443" fg:w="206"/><text x="47.4515%" y="127.50"></text></g><g><title>mwpf`HighsRandom::drawUniform (4 samples, 0.01%)</title><rect x="47.9319%" y="149" width="0.0140%" height="15" fill="rgb(213,201,24)" fg:x="13651" fg:w="4"/><text x="48.1819%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (40 samples, 0.14%)</title><rect x="48.7360%" y="133" width="0.1404%" height="15" fill="rgb(248,116,28)" fg:x="13880" fg:w="40"/><text x="48.9860%" y="143.50"></text></g><g><title>mwpf`HighsSparseMatrix::createRowwisePartitioned (267 samples, 0.94%)</title><rect x="47.9529%" y="149" width="0.9375%" height="15" fill="rgb(219,72,43)" fg:x="13657" fg:w="267"/><text x="48.2029%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.01%)</title><rect x="48.8764%" y="133" width="0.0140%" height="15" fill="rgb(209,138,14)" fg:x="13920" fg:w="4"/><text x="49.1264%" y="143.50"></text></g><g><title>mwpf`HEkk::initialiseForSolve (976 samples, 3.43%)</title><rect x="45.4670%" y="165" width="3.4270%" height="15" fill="rgb(222,18,33)" fg:x="12949" fg:w="976"/><text x="45.7170%" y="175.50">mwp..</text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (5 samples, 0.02%)</title><rect x="48.8975%" y="133" width="0.0176%" height="15" fill="rgb(213,199,7)" fg:x="13926" fg:w="5"/><text x="49.1475%" y="143.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (4 samples, 0.01%)</title><rect x="48.9010%" y="117" width="0.0140%" height="15" fill="rgb(250,110,10)" fg:x="13927" fg:w="4"/><text x="49.1510%" y="127.50"></text></g><g><title>mwpf`HEkk::computeDual (6 samples, 0.02%)</title><rect x="48.8975%" y="149" width="0.0211%" height="15" fill="rgb(248,123,6)" fg:x="13926" fg:w="6"/><text x="49.1475%" y="159.50"></text></g><g><title>mwpf`HEkkDual::updateFtran (3 samples, 0.01%)</title><rect x="48.9466%" y="117" width="0.0105%" height="15" fill="rgb(206,91,31)" fg:x="13940" fg:w="3"/><text x="49.1966%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (3 samples, 0.01%)</title><rect x="48.9466%" y="101" width="0.0105%" height="15" fill="rgb(211,154,13)" fg:x="13940" fg:w="3"/><text x="49.1966%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (3 samples, 0.01%)</title><rect x="48.9607%" y="101" width="0.0105%" height="15" fill="rgb(225,148,7)" fg:x="13944" fg:w="3"/><text x="49.2107%" y="111.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (3 samples, 0.01%)</title><rect x="48.9607%" y="85" width="0.0105%" height="15" fill="rgb(220,160,43)" fg:x="13944" fg:w="3"/><text x="49.2107%" y="95.50"></text></g><g><title>mwpf`HFactor::ftranU(HVectorBase (3 samples, 0.01%)</title><rect x="48.9607%" y="69" width="0.0105%" height="15" fill="rgb(213,52,39)" fg:x="13944" fg:w="3"/><text x="49.2107%" y="79.50"></text></g><g><title>mwpf`HEkkDual::updateFtranBFRT (9 samples, 0.03%)</title><rect x="48.9572%" y="117" width="0.0316%" height="15" fill="rgb(243,137,7)" fg:x="13943" fg:w="9"/><text x="49.2072%" y="127.50"></text></g><g><title>mwpf`HighsSparseMatrix::collectAj(HVectorBase (5 samples, 0.02%)</title><rect x="48.9712%" y="101" width="0.0176%" height="15" fill="rgb(230,79,13)" fg:x="13947" fg:w="5"/><text x="49.2212%" y="111.50"></text></g><g><title>mwpf`HEkk::updateFactor(HVectorBase&lt;double&gt;*, HVectorBase (3 samples, 0.01%)</title><rect x="48.9888%" y="101" width="0.0105%" height="15" fill="rgb(247,105,23)" fg:x="13952" fg:w="3"/><text x="49.2388%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::update(HVectorBase&lt;double&gt;*, HVectorBase (3 samples, 0.01%)</title><rect x="48.9888%" y="85" width="0.0105%" height="15" fill="rgb(223,179,41)" fg:x="13952" fg:w="3"/><text x="49.2388%" y="95.50"></text></g><g><title>mwpf`HFactor::update(HVectorBase&lt;double&gt;*, HVectorBase (3 samples, 0.01%)</title><rect x="48.9888%" y="69" width="0.0105%" height="15" fill="rgb(218,9,34)" fg:x="13952" fg:w="3"/><text x="49.2388%" y="79.50"></text></g><g><title>mwpf`HFactor::updateFT(HVectorBase&lt;double&gt;*, HVectorBase (3 samples, 0.01%)</title><rect x="48.9888%" y="53" width="0.0105%" height="15" fill="rgb(222,106,8)" fg:x="13952" fg:w="3"/><text x="49.2388%" y="63.50"></text></g><g><title>mwpf`HEkkDual::updatePivots (7 samples, 0.02%)</title><rect x="48.9888%" y="117" width="0.0246%" height="15" fill="rgb(211,220,0)" fg:x="13952" fg:w="7"/><text x="49.2388%" y="127.50"></text></g><g><title>mwpf`HighsSparseMatrix::update (3 samples, 0.01%)</title><rect x="49.0028%" y="101" width="0.0105%" height="15" fill="rgb(229,52,16)" fg:x="13956" fg:w="3"/><text x="49.2528%" y="111.50"></text></g><g><title>mwpf`HEkkDual::iterate (27 samples, 0.09%)</title><rect x="48.9291%" y="133" width="0.0948%" height="15" fill="rgb(212,155,18)" fg:x="13935" fg:w="27"/><text x="49.1791%" y="143.50"></text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (13 samples, 0.05%)</title><rect x="49.0274%" y="101" width="0.0456%" height="15" fill="rgb(242,21,14)" fg:x="13963" fg:w="13"/><text x="49.2774%" y="111.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (13 samples, 0.05%)</title><rect x="49.0274%" y="85" width="0.0456%" height="15" fill="rgb(222,19,48)" fg:x="13963" fg:w="13"/><text x="49.2774%" y="95.50"></text></g><g><title>mwpf`HEkk::computeDual (15 samples, 0.05%)</title><rect x="49.0239%" y="117" width="0.0527%" height="15" fill="rgb(232,45,27)" fg:x="13962" fg:w="15"/><text x="49.2739%" y="127.50"></text></g><g><title>mwpf`HighsSparseMatrix::collectAj(HVectorBase (4 samples, 0.01%)</title><rect x="49.0871%" y="117" width="0.0140%" height="15" fill="rgb(249,103,42)" fg:x="13980" fg:w="4"/><text x="49.3371%" y="127.50"></text></g><g><title>mwpf`HEkkDual::solvePhase1 (51 samples, 0.18%)</title><rect x="48.9256%" y="149" width="0.1791%" height="15" fill="rgb(246,81,33)" fg:x="13934" fg:w="51"/><text x="49.1756%" y="159.50"></text></g><g><title>mwpf`HEkkDual::rebuild (23 samples, 0.08%)</title><rect x="49.0239%" y="133" width="0.0808%" height="15" fill="rgb(252,33,42)" fg:x="13962" fg:w="23"/><text x="49.2739%" y="143.50"></text></g><g><title>mwpf`HEkk::bailout (7 samples, 0.02%)</title><rect x="49.1046%" y="133" width="0.0246%" height="15" fill="rgb(209,212,41)" fg:x="13985" fg:w="7"/><text x="49.3546%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::chrono::steady_clock::now (7 samples, 0.02%)</title><rect x="49.1046%" y="117" width="0.0246%" height="15" fill="rgb(207,154,6)" fg:x="13985" fg:w="7"/><text x="49.3546%" y="127.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (7 samples, 0.02%)</title><rect x="49.1046%" y="101" width="0.0246%" height="15" fill="rgb(223,64,47)" fg:x="13985" fg:w="7"/><text x="49.3546%" y="111.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (6 samples, 0.02%)</title><rect x="49.1081%" y="85" width="0.0211%" height="15" fill="rgb(211,161,38)" fg:x="13986" fg:w="6"/><text x="49.3581%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_continuous_time (6 samples, 0.02%)</title><rect x="49.1081%" y="69" width="0.0211%" height="15" fill="rgb(219,138,40)" fg:x="13986" fg:w="6"/><text x="49.3581%" y="79.50"></text></g><g><title>mwpf`HEkk::rebuildRefactor (4 samples, 0.01%)</title><rect x="49.1292%" y="133" width="0.0140%" height="15" fill="rgb(241,228,46)" fg:x="13992" fg:w="4"/><text x="49.3792%" y="143.50"></text></g><g><title>mwpf`HEkk::factorSolveError (4 samples, 0.01%)</title><rect x="49.1292%" y="117" width="0.0140%" height="15" fill="rgb(223,209,38)" fg:x="13992" fg:w="4"/><text x="49.3792%" y="127.50"></text></g><g><title>mwpf`HEkkDual::cleanup (6 samples, 0.02%)</title><rect x="49.1433%" y="133" width="0.0211%" height="15" fill="rgb(236,164,45)" fg:x="13996" fg:w="6"/><text x="49.3933%" y="143.50"></text></g><g><title>mwpf`HEkk::computeDual (6 samples, 0.02%)</title><rect x="49.1433%" y="117" width="0.0211%" height="15" fill="rgb(231,15,5)" fg:x="13996" fg:w="6"/><text x="49.3933%" y="127.50"></text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (5 samples, 0.02%)</title><rect x="49.1468%" y="101" width="0.0176%" height="15" fill="rgb(252,35,15)" fg:x="13997" fg:w="5"/><text x="49.3968%" y="111.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (5 samples, 0.02%)</title><rect x="49.1468%" y="85" width="0.0176%" height="15" fill="rgb(248,181,18)" fg:x="13997" fg:w="5"/><text x="49.3968%" y="95.50"></text></g><g><title>mwpf`HEkk::getValueScale(int, std::__1::vector&lt;double, std::__1::allocator (13 samples, 0.05%)</title><rect x="49.1678%" y="117" width="0.0456%" height="15" fill="rgb(233,39,42)" fg:x="14003" fg:w="13"/><text x="49.4178%" y="127.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::clear (3 samples, 0.01%)</title><rect x="49.2170%" y="85" width="0.0105%" height="15" fill="rgb(238,110,33)" fg:x="14017" fg:w="3"/><text x="49.4670%" y="95.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByRowWithSwitch(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (225 samples, 0.79%)</title><rect x="49.2275%" y="85" width="0.7900%" height="15" fill="rgb(233,195,10)" fg:x="14020" fg:w="225"/><text x="49.4775%" y="95.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByRowDenseResult(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, HVectorBase (197 samples, 0.69%)</title><rect x="49.3258%" y="69" width="0.6917%" height="15" fill="rgb(254,105,3)" fg:x="14048" fg:w="197"/><text x="49.5758%" y="79.50"></text></g><g><title>mwpf`HEkk::tableauRowPrice(bool, HVectorBase&lt;double&gt; const&amp;, HVectorBase (229 samples, 0.80%)</title><rect x="49.2170%" y="101" width="0.8041%" height="15" fill="rgb(221,225,9)" fg:x="14017" fg:w="229"/><text x="49.4670%" y="111.50"></text></g><g><title>mwpf`HEkkDualRow::chooseFinal (27 samples, 0.09%)</title><rect x="50.0211%" y="101" width="0.0948%" height="15" fill="rgb(224,227,45)" fg:x="14246" fg:w="27"/><text x="50.2711%" y="111.50"></text></g><g><title>mwpf`HEkkDualRow::chooseFinalWorkGroupQuad (3 samples, 0.01%)</title><rect x="50.1053%" y="85" width="0.0105%" height="15" fill="rgb(229,198,43)" fg:x="14270" fg:w="3"/><text x="50.3553%" y="95.50"></text></g><g><title>mwpf`HEkkDual::chooseColumn(HVectorBase (257 samples, 0.90%)</title><rect x="49.2170%" y="117" width="0.9024%" height="15" fill="rgb(206,209,35)" fg:x="14017" fg:w="257"/><text x="49.4670%" y="127.50"></text></g><g><title>mwpf`HEkkDualRHS::chooseNormal (31 samples, 0.11%)</title><rect x="50.1194%" y="101" width="0.1088%" height="15" fill="rgb(245,195,53)" fg:x="14274" fg:w="31"/><text x="50.3694%" y="111.50"></text></g><g><title>mwpf`HFactor::btranL(HVectorBase (31 samples, 0.11%)</title><rect x="50.2282%" y="69" width="0.1088%" height="15" fill="rgb(240,92,26)" fg:x="14305" fg:w="31"/><text x="50.4782%" y="79.50"></text></g><g><title>mwpf`HFactor::btranU(HVectorBase (57 samples, 0.20%)</title><rect x="50.3371%" y="69" width="0.2001%" height="15" fill="rgb(207,40,23)" fg:x="14336" fg:w="57"/><text x="50.5871%" y="79.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (92 samples, 0.32%)</title><rect x="50.2282%" y="85" width="0.3230%" height="15" fill="rgb(223,111,35)" fg:x="14305" fg:w="92"/><text x="50.4782%" y="95.50"></text></g><g><title>mwpf`solveHyper(int, int const*, int const*, double const*, int const*, int const*, int const*, double const*, HVectorBase&lt;double&gt;*) (3 samples, 0.01%)</title><rect x="50.5407%" y="69" width="0.0105%" height="15" fill="rgb(229,147,28)" fg:x="14394" fg:w="3"/><text x="50.7907%" y="79.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (101 samples, 0.35%)</title><rect x="50.2282%" y="101" width="0.3546%" height="15" fill="rgb(211,29,28)" fg:x="14305" fg:w="101"/><text x="50.4782%" y="111.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (9 samples, 0.03%)</title><rect x="50.5513%" y="85" width="0.0316%" height="15" fill="rgb(228,72,33)" fg:x="14397" fg:w="9"/><text x="50.8013%" y="95.50"></text></g><g><title>mwpf`HEkkDual::chooseRow (134 samples, 0.47%)</title><rect x="50.1194%" y="117" width="0.4705%" height="15" fill="rgb(205,214,31)" fg:x="14274" fg:w="134"/><text x="50.3694%" y="127.50"></text></g><g><title>mwpf`HEkkDual::updateDual (15 samples, 0.05%)</title><rect x="50.5899%" y="117" width="0.0527%" height="15" fill="rgb(224,111,15)" fg:x="14408" fg:w="15"/><text x="50.8399%" y="127.50"></text></g><g><title>mwpf`HEkkDualRow::updateDual (15 samples, 0.05%)</title><rect x="50.5899%" y="101" width="0.0527%" height="15" fill="rgb(253,21,26)" fg:x="14408" fg:w="15"/><text x="50.8399%" y="111.50"></text></g><g><title>mwpf`HFactor::ftranFT(HVectorBase (22 samples, 0.08%)</title><rect x="50.6496%" y="69" width="0.0772%" height="15" fill="rgb(245,139,43)" fg:x="14425" fg:w="22"/><text x="50.8996%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranL(HVectorBase (29 samples, 0.10%)</title><rect x="50.7268%" y="69" width="0.1018%" height="15" fill="rgb(252,170,7)" fg:x="14447" fg:w="29"/><text x="50.9768%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranU(HVectorBase (150 samples, 0.53%)</title><rect x="50.8287%" y="69" width="0.5267%" height="15" fill="rgb(231,118,14)" fg:x="14476" fg:w="150"/><text x="51.0787%" y="79.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::pack (6 samples, 0.02%)</title><rect x="51.3553%" y="69" width="0.0211%" height="15" fill="rgb(238,83,0)" fg:x="14626" fg:w="6"/><text x="51.6053%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (210 samples, 0.74%)</title><rect x="50.6461%" y="85" width="0.7374%" height="15" fill="rgb(221,39,39)" fg:x="14424" fg:w="210"/><text x="50.8961%" y="95.50"></text></g><g><title>mwpf`HEkkDual::updateFtran (234 samples, 0.82%)</title><rect x="50.6426%" y="117" width="0.8216%" height="15" fill="rgb(222,119,46)" fg:x="14423" fg:w="234"/><text x="50.8926%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (234 samples, 0.82%)</title><rect x="50.6426%" y="101" width="0.8216%" height="15" fill="rgb(222,165,49)" fg:x="14423" fg:w="234"/><text x="50.8926%" y="111.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (22 samples, 0.08%)</title><rect x="51.3869%" y="85" width="0.0772%" height="15" fill="rgb(219,113,52)" fg:x="14635" fg:w="22"/><text x="51.6369%" y="95.50"></text></g><g><title>mwpf`HFactor::ftranFT(HVectorBase (30 samples, 0.11%)</title><rect x="51.4642%" y="69" width="0.1053%" height="15" fill="rgb(214,7,15)" fg:x="14657" fg:w="30"/><text x="51.7142%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranL(HVectorBase (28 samples, 0.10%)</title><rect x="51.5695%" y="69" width="0.0983%" height="15" fill="rgb(235,32,4)" fg:x="14687" fg:w="28"/><text x="51.8195%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranU(HVectorBase (168 samples, 0.59%)</title><rect x="51.6678%" y="69" width="0.5899%" height="15" fill="rgb(238,90,54)" fg:x="14715" fg:w="168"/><text x="51.9178%" y="79.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (229 samples, 0.80%)</title><rect x="51.4642%" y="85" width="0.8041%" height="15" fill="rgb(213,208,19)" fg:x="14657" fg:w="229"/><text x="51.7142%" y="95.50"></text></g><g><title>mwpf`HEkkDual::updateFtranDSE(HVectorBase (247 samples, 0.87%)</title><rect x="51.4642%" y="117" width="0.8673%" height="15" fill="rgb(233,156,4)" fg:x="14657" fg:w="247"/><text x="51.7142%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::ftranInScaledSpace(HVectorBase (247 samples, 0.87%)</title><rect x="51.4642%" y="101" width="0.8673%" height="15" fill="rgb(207,194,5)" fg:x="14657" fg:w="247"/><text x="51.7142%" y="111.50"></text></g><g><title>mwpf`HVectorBase&lt;double&gt;::reIndex (18 samples, 0.06%)</title><rect x="52.2683%" y="85" width="0.0632%" height="15" fill="rgb(206,111,30)" fg:x="14886" fg:w="18"/><text x="52.5183%" y="95.50"></text></g><g><title>mwpf`HFactor::updateFT(HVectorBase&lt;double&gt;*, HVectorBase (94 samples, 0.33%)</title><rect x="52.3350%" y="53" width="0.3301%" height="15" fill="rgb(243,70,54)" fg:x="14905" fg:w="94"/><text x="52.5850%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (8 samples, 0.03%)</title><rect x="52.6369%" y="37" width="0.0281%" height="15" fill="rgb(242,28,8)" fg:x="14991" fg:w="8"/><text x="52.8869%" y="47.50"></text></g><g><title>mwpf`HEkk::updateFactor(HVectorBase&lt;double&gt;*, HVectorBase (96 samples, 0.34%)</title><rect x="52.3315%" y="101" width="0.3371%" height="15" fill="rgb(219,106,18)" fg:x="14904" fg:w="96"/><text x="52.5815%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::update(HVectorBase&lt;double&gt;*, HVectorBase (96 samples, 0.34%)</title><rect x="52.3315%" y="85" width="0.3371%" height="15" fill="rgb(244,222,10)" fg:x="14904" fg:w="96"/><text x="52.5815%" y="95.50"></text></g><g><title>mwpf`HFactor::update(HVectorBase&lt;double&gt;*, HVectorBase (96 samples, 0.34%)</title><rect x="52.3315%" y="69" width="0.3371%" height="15" fill="rgb(236,179,52)" fg:x="14904" fg:w="96"/><text x="52.5815%" y="79.50"></text></g><g><title>mwpf`HEkk::updatePivots (5 samples, 0.02%)</title><rect x="52.6685%" y="101" width="0.0176%" height="15" fill="rgb(213,23,39)" fg:x="15000" fg:w="5"/><text x="52.9185%" y="111.50"></text></g><g><title>mwpf`bool HighsHashTable&lt;unsigned long long, void&gt;::insert&lt;unsigned long long&amp;&gt; (4 samples, 0.01%)</title><rect x="52.6721%" y="85" width="0.0140%" height="15" fill="rgb(238,48,10)" fg:x="15001" fg:w="4"/><text x="52.9221%" y="95.50"></text></g><g><title>mwpf`HEkkDual::updatePivots (277 samples, 0.97%)</title><rect x="52.3315%" y="117" width="0.9726%" height="15" fill="rgb(251,196,23)" fg:x="14904" fg:w="277"/><text x="52.5815%" y="127.50"></text></g><g><title>mwpf`HighsSparseMatrix::update (175 samples, 0.61%)</title><rect x="52.6896%" y="101" width="0.6145%" height="15" fill="rgb(250,152,24)" fg:x="15006" fg:w="175"/><text x="52.9396%" y="111.50"></text></g><g><title>mwpf`HEkk::updateDualSteepestEdgeWeights(int, int, HVectorBase (21 samples, 0.07%)</title><rect x="53.3041%" y="101" width="0.0737%" height="15" fill="rgb(209,150,17)" fg:x="15181" fg:w="21"/><text x="53.5541%" y="111.50"></text></g><g><title>mwpf`HEkkDualRHS::updatePrimal(HVectorBase (5 samples, 0.02%)</title><rect x="53.3848%" y="101" width="0.0176%" height="15" fill="rgb(234,202,34)" fg:x="15204" fg:w="5"/><text x="53.6348%" y="111.50"></text></g><g><title>mwpf`HEkkDual::updatePrimal(HVectorBase (36 samples, 0.13%)</title><rect x="53.3041%" y="117" width="0.1264%" height="15" fill="rgb(253,148,53)" fg:x="15181" fg:w="36"/><text x="53.5541%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::basicColScaleFactor (8 samples, 0.03%)</title><rect x="53.4024%" y="101" width="0.0281%" height="15" fill="rgb(218,129,16)" fg:x="15209" fg:w="8"/><text x="53.6524%" y="111.50"></text></g><g><title>mwpf`HEkkDualRow::chooseMakepack(HVectorBase (17 samples, 0.06%)</title><rect x="53.4305%" y="117" width="0.0597%" height="15" fill="rgb(216,85,19)" fg:x="15217" fg:w="17"/><text x="53.6805%" y="127.50"></text></g><g><title>mwpf`HEkkDualRow::choosePossible (86 samples, 0.30%)</title><rect x="53.4902%" y="117" width="0.3020%" height="15" fill="rgb(235,228,7)" fg:x="15234" fg:w="86"/><text x="53.7402%" y="127.50"></text></g><g><title>mwpf`HEkkDual::iterate (1,327 samples, 4.66%)</title><rect x="49.1643%" y="133" width="4.6594%" height="15" fill="rgb(245,175,0)" fg:x="14002" fg:w="1327"/><text x="49.4143%" y="143.50">mwpf`..</text></g><g><title>mwpf`HighsSparseMatrix::collectAj(HVectorBase (7 samples, 0.02%)</title><rect x="53.7992%" y="117" width="0.0246%" height="15" fill="rgb(208,168,36)" fg:x="15322" fg:w="7"/><text x="54.0492%" y="127.50"></text></g><g><title>mwpf`HFactor::btranL(HVectorBase (4 samples, 0.01%)</title><rect x="53.8237%" y="53" width="0.0140%" height="15" fill="rgb(246,171,24)" fg:x="15329" fg:w="4"/><text x="54.0737%" y="63.50"></text></g><g><title>mwpf`HFactor::btranU(HVectorBase (6 samples, 0.02%)</title><rect x="53.8378%" y="53" width="0.0211%" height="15" fill="rgb(215,142,24)" fg:x="15333" fg:w="6"/><text x="54.0878%" y="63.50"></text></g><g><title>mwpf`HEkk::fullBtran(HVectorBase (11 samples, 0.04%)</title><rect x="53.8237%" y="101" width="0.0386%" height="15" fill="rgb(250,187,7)" fg:x="15329" fg:w="11"/><text x="54.0737%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::btran(HVectorBase (11 samples, 0.04%)</title><rect x="53.8237%" y="85" width="0.0386%" height="15" fill="rgb(228,66,33)" fg:x="15329" fg:w="11"/><text x="54.0737%" y="95.50"></text></g><g><title>mwpf`HFactor::btranCall(HVectorBase (11 samples, 0.04%)</title><rect x="53.8237%" y="69" width="0.0386%" height="15" fill="rgb(234,215,21)" fg:x="15329" fg:w="11"/><text x="54.0737%" y="79.50"></text></g><g><title>mwpf`HEkk::fullPrice(HVectorBase&lt;double&gt; const&amp;, HVectorBase (51 samples, 0.18%)</title><rect x="53.8624%" y="101" width="0.1791%" height="15" fill="rgb(222,191,20)" fg:x="15340" fg:w="51"/><text x="54.1124%" y="111.50"></text></g><g><title>mwpf`HighsSparseMatrix::priceByColumn(bool, HVectorBase&lt;double&gt;&amp;, HVectorBase (51 samples, 0.18%)</title><rect x="53.8624%" y="85" width="0.1791%" height="15" fill="rgb(245,79,54)" fg:x="15340" fg:w="51"/><text x="54.1124%" y="95.50"></text></g><g><title>mwpf`HEkk::computeDual (63 samples, 0.22%)</title><rect x="53.8237%" y="117" width="0.2212%" height="15" fill="rgb(240,10,37)" fg:x="15329" fg:w="63"/><text x="54.0737%" y="127.50"></text></g><g><title>mwpf`HEkk::computeDualObjectiveValue (7 samples, 0.02%)</title><rect x="54.0449%" y="117" width="0.0246%" height="15" fill="rgb(214,192,32)" fg:x="15392" fg:w="7"/><text x="54.2949%" y="127.50"></text></g><g><title>mwpf`HEkk::computePrimal (10 samples, 0.04%)</title><rect x="54.0695%" y="117" width="0.0351%" height="15" fill="rgb(209,36,54)" fg:x="15399" fg:w="10"/><text x="54.3195%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::ftran(HVectorBase (7 samples, 0.02%)</title><rect x="54.0801%" y="101" width="0.0246%" height="15" fill="rgb(220,10,11)" fg:x="15402" fg:w="7"/><text x="54.3301%" y="111.50"></text></g><g><title>mwpf`HFactor::ftranCall(HVectorBase (7 samples, 0.02%)</title><rect x="54.0801%" y="85" width="0.0246%" height="15" fill="rgb(221,106,17)" fg:x="15402" fg:w="7"/><text x="54.3301%" y="95.50"></text></g><g><title>mwpf`HFactor::ftranU(HVectorBase (6 samples, 0.02%)</title><rect x="54.0836%" y="69" width="0.0211%" height="15" fill="rgb(251,142,44)" fg:x="15403" fg:w="6"/><text x="54.3336%" y="79.50"></text></g><g><title>mwpf`HFactor::buildFinish (4 samples, 0.01%)</title><rect x="54.1117%" y="53" width="0.0140%" height="15" fill="rgb(238,13,15)" fg:x="15411" fg:w="4"/><text x="54.3617%" y="63.50"></text></g><g><title>mwpf`HFactor::buildKernel (123 samples, 0.43%)</title><rect x="54.1257%" y="53" width="0.4319%" height="15" fill="rgb(208,107,27)" fg:x="15415" fg:w="123"/><text x="54.3757%" y="63.50"></text></g><g><title>mwpf`HFactor::buildSimple (25 samples, 0.09%)</title><rect x="54.5576%" y="53" width="0.0878%" height="15" fill="rgb(205,136,37)" fg:x="15538" fg:w="25"/><text x="54.8076%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (4 samples, 0.01%)</title><rect x="54.6313%" y="37" width="0.0140%" height="15" fill="rgb(250,205,27)" fg:x="15559" fg:w="4"/><text x="54.8813%" y="47.50"></text></g><g><title>mwpf`HEkk::getNonsingularInverse (154 samples, 0.54%)</title><rect x="54.1117%" y="117" width="0.5407%" height="15" fill="rgb(210,80,43)" fg:x="15411" fg:w="154"/><text x="54.3617%" y="127.50"></text></g><g><title>mwpf`HEkk::computeFactor (154 samples, 0.54%)</title><rect x="54.1117%" y="101" width="0.5407%" height="15" fill="rgb(247,160,36)" fg:x="15411" fg:w="154"/><text x="54.3617%" y="111.50"></text></g><g><title>mwpf`HSimplexNla::invert (154 samples, 0.54%)</title><rect x="54.1117%" y="85" width="0.5407%" height="15" fill="rgb(234,13,49)" fg:x="15411" fg:w="154"/><text x="54.3617%" y="95.50"></text></g><g><title>mwpf`HFactor::build (154 samples, 0.54%)</title><rect x="54.1117%" y="69" width="0.5407%" height="15" fill="rgb(234,122,0)" fg:x="15411" fg:w="154"/><text x="54.3617%" y="79.50"></text></g><g><title>mwpf`HEkk::rebuildRefactor (5 samples, 0.02%)</title><rect x="54.6524%" y="117" width="0.0176%" height="15" fill="rgb(207,146,38)" fg:x="15565" fg:w="5"/><text x="54.9024%" y="127.50"></text></g><g><title>mwpf`HEkk::factorSolveError (5 samples, 0.02%)</title><rect x="54.6524%" y="101" width="0.0176%" height="15" fill="rgb(207,177,25)" fg:x="15565" fg:w="5"/><text x="54.9024%" y="111.50"></text></g><g><title>mwpf`HEkkDual::rebuild (246 samples, 0.86%)</title><rect x="53.8237%" y="133" width="0.8638%" height="15" fill="rgb(211,178,42)" fg:x="15329" fg:w="246"/><text x="54.0737%" y="143.50"></text></g><g><title>mwpf`HEkkDual::solvePhase2 (1,592 samples, 5.59%)</title><rect x="49.1046%" y="149" width="5.5899%" height="15" fill="rgb(230,69,54)" fg:x="13985" fg:w="1592"/><text x="49.3546%" y="159.50">mwpf`HE..</text></g><g><title>mwpf`HEkkDual::solve (1,652 samples, 5.80%)</title><rect x="48.8975%" y="165" width="5.8006%" height="15" fill="rgb(214,135,41)" fg:x="13926" fg:w="1652"/><text x="49.1475%" y="175.50">mwpf`HE..</text></g><g><title>mwpf`HighsLp::HighsLp (80 samples, 0.28%)</title><rect x="54.9228%" y="149" width="0.2809%" height="15" fill="rgb(237,67,25)" fg:x="15642" fg:w="80"/><text x="55.1728%" y="159.50"></text></g><g><title>mwpf`HighsSparseMatrix::HighsSparseMatrix (80 samples, 0.28%)</title><rect x="54.9228%" y="133" width="0.2809%" height="15" fill="rgb(222,189,50)" fg:x="15642" fg:w="80"/><text x="55.1728%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (22 samples, 0.08%)</title><rect x="55.2037%" y="133" width="0.0772%" height="15" fill="rgb(245,148,34)" fg:x="15722" fg:w="22"/><text x="55.4537%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (22 samples, 0.08%)</title><rect x="55.2037%" y="117" width="0.0772%" height="15" fill="rgb(222,29,6)" fg:x="15722" fg:w="22"/><text x="55.4537%" y="127.50"></text></g><g><title>mwpf`HSimplexNla::debugCheckData(std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (167 samples, 0.59%)</title><rect x="54.6980%" y="165" width="0.5864%" height="15" fill="rgb(221,189,43)" fg:x="15578" fg:w="167"/><text x="54.9480%" y="175.50"></text></g><g><title>mwpf`HighsLp::~HighsLp (23 samples, 0.08%)</title><rect x="55.2037%" y="149" width="0.0808%" height="15" fill="rgb(207,36,27)" fg:x="15722" fg:w="23"/><text x="55.4537%" y="159.50"></text></g><g><title>mwpf`HEkk::solve (2,797 samples, 9.82%)</title><rect x="45.4670%" y="181" width="9.8209%" height="15" fill="rgb(217,90,24)" fg:x="12949" fg:w="2797"/><text x="45.7170%" y="191.50">mwpf`HEkk::sol..</text></g><g><title>mwpf`HighsHashHelpers::sparse_combine (3 samples, 0.01%)</title><rect x="55.2879%" y="181" width="0.0105%" height="15" fill="rgb(224,66,35)" fg:x="15746" fg:w="3"/><text x="55.5379%" y="191.50"></text></g><g><title>mwpf`Highs::callSolveLp(HighsLp&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3,224 samples, 11.32%)</title><rect x="45.4178%" y="229" width="11.3202%" height="15" fill="rgb(221,13,50)" fg:x="12935" fg:w="3224"/><text x="45.6678%" y="239.50">mwpf`Highs::callS..</text></g><g><title>mwpf`solveLp(HighsLpSolverObject&amp;, std::__1::basic_string&lt;char, std::__1::char_traits&lt;char&gt;, std::__1::allocator (3,224 samples, 11.32%)</title><rect x="45.4178%" y="213" width="11.3202%" height="15" fill="rgb(236,68,49)" fg:x="12935" fg:w="3224"/><text x="45.6678%" y="223.50">mwpf`solveLp(High..</text></g><g><title>mwpf`solveLpSimplex(HighsLpSolverObject&amp;) (3,224 samples, 11.32%)</title><rect x="45.4178%" y="197" width="11.3202%" height="15" fill="rgb(229,146,28)" fg:x="12935" fg:w="3224"/><text x="45.6678%" y="207.50">mwpf`solveLpSimpl..</text></g><g><title>mwpf`considerScaling(HighsOptions const&amp;, HighsLp&amp;) (410 samples, 1.44%)</title><rect x="55.2985%" y="181" width="1.4396%" height="15" fill="rgb(225,31,38)" fg:x="15749" fg:w="410"/><text x="55.5485%" y="191.50"></text></g><g><title>mwpf`HighsSparseMatrix::range (410 samples, 1.44%)</title><rect x="55.2985%" y="165" width="1.4396%" height="15" fill="rgb(250,208,3)" fg:x="15749" fg:w="410"/><text x="55.5485%" y="175.50"></text></g><g><title>mwpf`calculateRowValuesQuad(HighsLp const&amp;, HighsSolution&amp;, int) (103 samples, 0.36%)</title><rect x="56.7451%" y="213" width="0.3617%" height="15" fill="rgb(246,54,23)" fg:x="16161" fg:w="103"/><text x="56.9951%" y="223.50"></text></g><g><title>mwpf`Highs::runPostsolve (104 samples, 0.37%)</title><rect x="56.7451%" y="229" width="0.3652%" height="15" fill="rgb(243,76,11)" fg:x="16161" fg:w="104"/><text x="56.9951%" y="239.50"></text></g><g><title>mwpf`PresolveComponent::init (53 samples, 0.19%)</title><rect x="57.1138%" y="213" width="0.1861%" height="15" fill="rgb(245,21,50)" fg:x="16266" fg:w="53"/><text x="57.3638%" y="223.50"></text></g><g><title>mwpf`HighsLp::operator= (53 samples, 0.19%)</title><rect x="57.1138%" y="197" width="0.1861%" height="15" fill="rgb(228,9,43)" fg:x="16266" fg:w="53"/><text x="57.3638%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (53 samples, 0.19%)</title><rect x="57.1138%" y="181" width="0.1861%" height="15" fill="rgb(208,100,47)" fg:x="16266" fg:w="53"/><text x="57.3638%" y="191.50"></text></g><g><title>libsystem_m.dylib`frexp (243 samples, 0.85%)</title><rect x="57.3034%" y="165" width="0.8532%" height="15" fill="rgb(232,26,8)" fg:x="16320" fg:w="243"/><text x="57.5534%" y="175.50"></text></g><g><title>libsystem_m.dylib`ldexp (144 samples, 0.51%)</title><rect x="58.1566%" y="165" width="0.5056%" height="15" fill="rgb(216,166,38)" fg:x="16563" fg:w="144"/><text x="58.4066%" y="175.50"></text></g><g><title>mwpf`DYLD-STUB$$frexp (71 samples, 0.25%)</title><rect x="58.6692%" y="165" width="0.2493%" height="15" fill="rgb(251,202,51)" fg:x="16709" fg:w="71"/><text x="58.9192%" y="175.50"></text></g><g><title>mwpf`DYLD-STUB$$ldexp (97 samples, 0.34%)</title><rect x="58.9185%" y="165" width="0.3406%" height="15" fill="rgb(254,216,34)" fg:x="16780" fg:w="97"/><text x="59.1685%" y="175.50"></text></g><g><title>mwpf`HighsHashHelpers::sparse_combine (1,989 samples, 6.98%)</title><rect x="59.2591%" y="165" width="6.9838%" height="15" fill="rgb(251,32,27)" fg:x="16877" fg:w="1989"/><text x="59.5091%" y="175.50">mwpf`High..</text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.01%)</title><rect x="73.9782%" y="149" width="0.0105%" height="15" fill="rgb(208,127,28)" fg:x="21069" fg:w="3"/><text x="74.2282%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (15 samples, 0.05%)</title><rect x="73.9923%" y="149" width="0.0527%" height="15" fill="rgb(224,137,22)" fg:x="21073" fg:w="15"/><text x="74.2423%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 0.05%)</title><rect x="73.9958%" y="133" width="0.0492%" height="15" fill="rgb(254,70,32)" fg:x="21074" fg:w="14"/><text x="74.2458%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (28 samples, 0.10%)</title><rect x="74.0449%" y="149" width="0.0983%" height="15" fill="rgb(229,75,37)" fg:x="21088" fg:w="28"/><text x="74.2949%" y="159.50"></text></g><g><title>mwpf`HighsLinearSumBounds::remove (451 samples, 1.58%)</title><rect x="74.1433%" y="149" width="1.5836%" height="15" fill="rgb(252,64,23)" fg:x="21116" fg:w="451"/><text x="74.3933%" y="159.50"></text></g><g><title>mwpf`HighsLinearSumBounds::updatedImplVarLower (125 samples, 0.44%)</title><rect x="75.7268%" y="149" width="0.4389%" height="15" fill="rgb(232,162,48)" fg:x="21567" fg:w="125"/><text x="75.9768%" y="159.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSliceInOrder&gt;::iterator::operator++ (56 samples, 0.20%)</title><rect x="76.1657%" y="149" width="0.1966%" height="15" fill="rgb(246,160,12)" fg:x="21692" fg:w="56"/><text x="76.4157%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::changeImplColLower (39 samples, 0.14%)</title><rect x="76.3624%" y="149" width="0.1369%" height="15" fill="rgb(247,166,0)" fg:x="21748" fg:w="39"/><text x="76.6124%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (28 samples, 0.10%)</title><rect x="76.4010%" y="133" width="0.0983%" height="15" fill="rgb(249,219,21)" fg:x="21759" fg:w="28"/><text x="76.6510%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::unlink (6 samples, 0.02%)</title><rect x="76.5098%" y="133" width="0.0211%" height="15" fill="rgb(205,209,3)" fg:x="21790" fg:w="6"/><text x="76.7598%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::fixColToLower (11 samples, 0.04%)</title><rect x="76.4993%" y="149" width="0.0386%" height="15" fill="rgb(243,44,1)" fg:x="21787" fg:w="11"/><text x="76.7493%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedCol (52 samples, 0.18%)</title><rect x="76.5379%" y="149" width="0.1826%" height="15" fill="rgb(206,159,16)" fg:x="21798" fg:w="52"/><text x="76.7879%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (68 samples, 0.24%)</title><rect x="76.7205%" y="149" width="0.2388%" height="15" fill="rgb(244,77,30)" fg:x="21850" fg:w="68"/><text x="76.9705%" y="159.50"></text></g><g><title>mwpf`HighsLinearSumBounds::updatedVarLower (103 samples, 0.36%)</title><rect x="76.9628%" y="133" width="0.3617%" height="15" fill="rgb(218,69,12)" fg:x="21919" fg:w="103"/><text x="77.2128%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (38 samples, 0.13%)</title><rect x="77.3244%" y="133" width="0.1334%" height="15" fill="rgb(212,87,7)" fg:x="22022" fg:w="38"/><text x="77.5744%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::removeRowSingletons (205 samples, 0.72%)</title><rect x="76.9628%" y="149" width="0.7198%" height="15" fill="rgb(245,114,25)" fg:x="21919" fg:w="205"/><text x="77.2128%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::singletonRow (64 samples, 0.22%)</title><rect x="77.4579%" y="133" width="0.2247%" height="15" fill="rgb(210,61,42)" fg:x="22060" fg:w="64"/><text x="77.7079%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (27 samples, 0.09%)</title><rect x="77.5878%" y="117" width="0.0948%" height="15" fill="rgb(211,52,33)" fg:x="22097" fg:w="27"/><text x="77.8378%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (4 samples, 0.01%)</title><rect x="78.3919%" y="85" width="0.0140%" height="15" fill="rgb(234,58,33)" fg:x="22326" fg:w="4"/><text x="78.6419%" y="95.50"></text></g><g><title>libc++abi.dylib`operator new(unsigned long) (12 samples, 0.04%)</title><rect x="78.3848%" y="117" width="0.0421%" height="15" fill="rgb(220,115,36)" fg:x="22324" fg:w="12"/><text x="78.6348%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.04%)</title><rect x="78.3848%" y="101" width="0.0421%" height="15" fill="rgb(243,153,54)" fg:x="22324" fg:w="12"/><text x="78.6348%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.02%)</title><rect x="78.4059%" y="85" width="0.0211%" height="15" fill="rgb(251,47,18)" fg:x="22330" fg:w="6"/><text x="78.6559%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.02%)</title><rect x="78.4094%" y="69" width="0.0176%" height="15" fill="rgb(242,102,42)" fg:x="22331" fg:w="5"/><text x="78.6594%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.01%)</title><rect x="78.4340%" y="117" width="0.0140%" height="15" fill="rgb(234,31,38)" fg:x="22338" fg:w="4"/><text x="78.6840%" y="127.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSliceInOrder&gt;::iterator::iterator (201 samples, 0.71%)</title><rect x="77.7598%" y="133" width="0.7058%" height="15" fill="rgb(221,117,51)" fg:x="22146" fg:w="201"/><text x="78.0098%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::storeRow (265 samples, 0.93%)</title><rect x="77.6826%" y="149" width="0.9305%" height="15" fill="rgb(212,20,18)" fg:x="22124" fg:w="265"/><text x="77.9326%" y="159.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSliceInOrder&gt;::iterator::operator++ (42 samples, 0.15%)</title><rect x="78.4656%" y="133" width="0.1475%" height="15" fill="rgb(245,133,36)" fg:x="22347" fg:w="42"/><text x="78.7156%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedCol (16 samples, 0.06%)</title><rect x="83.6096%" y="133" width="0.0562%" height="15" fill="rgb(212,6,19)" fg:x="23812" fg:w="16"/><text x="83.8596%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::unlink (1,463 samples, 5.14%)</title><rect x="78.6131%" y="149" width="5.1369%" height="15" fill="rgb(218,1,36)" fg:x="22389" fg:w="1463"/><text x="78.8631%" y="159.50">mwpf`p..</text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (24 samples, 0.08%)</title><rect x="83.6657%" y="133" width="0.0843%" height="15" fill="rgb(246,84,54)" fg:x="23828" fg:w="24"/><text x="83.9157%" y="143.50"></text></g><g><title>mwpf`presolve::HighsPostsolveStack::duplicateRow (3 samples, 0.01%)</title><rect x="83.7500%" y="149" width="0.0105%" height="15" fill="rgb(242,110,6)" fg:x="23852" fg:w="3"/><text x="84.0000%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::detectParallelRowsAndCols (4,994 samples, 17.54%)</title><rect x="66.2430%" y="165" width="17.5351%" height="15" fill="rgb(214,47,5)" fg:x="18866" fg:w="4994"/><text x="66.4930%" y="175.50">mwpf`presolve::HPresolve::d..</text></g><g><title>mwpf`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;&gt;&gt;::__node_insert_multi(std::__1::__hash_const_iterator&lt;std::__1::__hash_node&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, void*&gt;*&gt;, std::__1::__hash_node&lt;std::__1::__hash_value_type (4 samples, 0.01%)</title><rect x="83.7640%" y="149" width="0.0140%" height="15" fill="rgb(218,159,25)" fg:x="23856" fg:w="4"/><text x="84.0140%" y="159.50"></text></g><g><title>mwpf`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;&gt;&gt;::__node_insert_multi(std::__1::__hash_node&lt;std::__1::__hash_value_type (4 samples, 0.01%)</title><rect x="83.7640%" y="133" width="0.0140%" height="15" fill="rgb(215,211,28)" fg:x="23856" fg:w="4"/><text x="84.0140%" y="143.50"></text></g><g><title>mwpf`std::__1::__hash_table&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::__unordered_map_hasher&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::hash&lt;unsigned long long&gt;, std::__1::equal_to&lt;unsigned long long&gt;, true&gt;, std::__1::__unordered_map_equal&lt;unsigned long long, std::__1::__hash_value_type&lt;unsigned long long, int&gt;, std::__1::equal_to&lt;unsigned long long&gt;, std::__1::hash&lt;unsigned long long&gt;, true&gt;, std::__1::allocator&lt;std::__1::__hash_value_type&lt;unsigned long long, int&gt;&gt;&gt;::__node_insert_multi_prepare(unsigned long, std::__1::__hash_value_type (3 samples, 0.01%)</title><rect x="83.7676%" y="117" width="0.0105%" height="15" fill="rgb(238,59,32)" fg:x="23857" fg:w="3"/><text x="84.0176%" y="127.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSlicePreOrder&gt;::iterator::operator++ (14 samples, 0.05%)</title><rect x="83.7816%" y="133" width="0.0492%" height="15" fill="rgb(226,82,3)" fg:x="23861" fg:w="14"/><text x="84.0316%" y="143.50"></text></g><g><title>mwpf`HighsLinearSumBounds::getResidualSumLowerOrig (48 samples, 0.17%)</title><rect x="83.8448%" y="117" width="0.1685%" height="15" fill="rgb(240,164,32)" fg:x="23879" fg:w="48"/><text x="84.0948%" y="127.50"></text></g><g><title>mwpf`HighsMatrixSlice&lt;HighsTripletTreeSlicePreOrder&gt;::iterator::operator++ (16 samples, 0.06%)</title><rect x="84.0133%" y="117" width="0.0562%" height="15" fill="rgb(232,46,7)" fg:x="23927" fg:w="16"/><text x="84.2633%" y="127.50"></text></g><g><title>mwpf`HighsLinearSumBounds::updatedImplVarUpper (52 samples, 0.18%)</title><rect x="84.5787%" y="101" width="0.1826%" height="15" fill="rgb(229,129,53)" fg:x="24088" fg:w="52"/><text x="84.8287%" y="111.50"></text></g><g><title>mwpf`presolve::HPresolve::changeImplColUpper (41 samples, 0.14%)</title><rect x="84.7612%" y="101" width="0.1440%" height="15" fill="rgb(234,188,29)" fg:x="24140" fg:w="41"/><text x="85.0112%" y="111.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (18 samples, 0.06%)</title><rect x="84.8420%" y="85" width="0.0632%" height="15" fill="rgb(246,141,4)" fg:x="24163" fg:w="18"/><text x="85.0920%" y="95.50"></text></g><g><title>mwpf`presolve::HPresolve::rowPresolve (322 samples, 1.13%)</title><rect x="83.8308%" y="133" width="1.1306%" height="15" fill="rgb(229,23,39)" fg:x="23875" fg:w="322"/><text x="84.0808%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::updateColImpliedBounds (253 samples, 0.89%)</title><rect x="84.0730%" y="117" width="0.8883%" height="15" fill="rgb(206,12,3)" fg:x="23944" fg:w="253"/><text x="84.3230%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (16 samples, 0.06%)</title><rect x="84.9052%" y="101" width="0.0562%" height="15" fill="rgb(252,226,20)" fg:x="24181" fg:w="16"/><text x="85.1552%" y="111.50"></text></g><g><title>mwpf`presolve::HPresolve::fastPresolveLoop (358 samples, 1.26%)</title><rect x="83.7781%" y="165" width="1.2570%" height="15" fill="rgb(216,123,35)" fg:x="23860" fg:w="358"/><text x="84.0281%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::presolveChangedRows (358 samples, 1.26%)</title><rect x="83.7781%" y="149" width="1.2570%" height="15" fill="rgb(212,68,40)" fg:x="23860" fg:w="358"/><text x="84.0281%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::updateColImpliedBounds (21 samples, 0.07%)</title><rect x="84.9614%" y="133" width="0.0737%" height="15" fill="rgb(254,125,32)" fg:x="24197" fg:w="21"/><text x="85.2114%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::findNonzero (768 samples, 2.70%)</title><rect x="85.0351%" y="165" width="2.6966%" height="15" fill="rgb(253,97,22)" fg:x="24218" fg:w="768"/><text x="85.2851%" y="175.50">mw..</text></g><g><title>mwpf`HighsLinearSumBounds::add (72 samples, 0.25%)</title><rect x="87.7353%" y="149" width="0.2528%" height="15" fill="rgb(241,101,14)" fg:x="24987" fg:w="72"/><text x="87.9853%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::link (41 samples, 0.14%)</title><rect x="87.9881%" y="149" width="0.1440%" height="15" fill="rgb(238,103,29)" fg:x="25059" fg:w="41"/><text x="88.2381%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::fromCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (117 samples, 0.41%)</title><rect x="87.7317%" y="165" width="0.4108%" height="15" fill="rgb(233,195,47)" fg:x="24986" fg:w="117"/><text x="87.9817%" y="175.50"></text></g><g><title>mwpf`HighsLinearSumBounds::getResidualSumLowerOrig (80 samples, 0.28%)</title><rect x="88.2409%" y="133" width="0.2809%" height="15" fill="rgb(246,218,30)" fg:x="25131" fg:w="80"/><text x="88.4909%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::colPresolve (268 samples, 0.94%)</title><rect x="88.1426%" y="149" width="0.9410%" height="15" fill="rgb(219,145,47)" fg:x="25103" fg:w="268"/><text x="88.3926%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::updateRowDualImpliedBounds (160 samples, 0.56%)</title><rect x="88.5218%" y="133" width="0.5618%" height="15" fill="rgb(243,12,26)" fg:x="25211" fg:w="160"/><text x="88.7718%" y="143.50"></text></g><g><title>libc++.1.dylib`std::__1::chrono::steady_clock::now (7 samples, 0.02%)</title><rect x="89.0836%" y="133" width="0.0246%" height="15" fill="rgb(214,87,16)" fg:x="25371" fg:w="7"/><text x="89.3336%" y="143.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (7 samples, 0.02%)</title><rect x="89.0836%" y="117" width="0.0246%" height="15" fill="rgb(208,99,42)" fg:x="25371" fg:w="7"/><text x="89.3336%" y="127.50"></text></g><g><title>libsystem_c.dylib`clock_gettime_nsec_np (7 samples, 0.02%)</title><rect x="89.0836%" y="101" width="0.0246%" height="15" fill="rgb(253,99,2)" fg:x="25371" fg:w="7"/><text x="89.3336%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`mach_continuous_time (7 samples, 0.02%)</title><rect x="89.0836%" y="85" width="0.0246%" height="15" fill="rgb(220,168,23)" fg:x="25371" fg:w="7"/><text x="89.3336%" y="95.50"></text></g><g><title>mwpf`HighsLinearSumBounds::updatedImplVarLower (52 samples, 0.18%)</title><rect x="89.1081%" y="117" width="0.1826%" height="15" fill="rgb(242,38,24)" fg:x="25378" fg:w="52"/><text x="89.3581%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::changeImplColLower (62 samples, 0.22%)</title><rect x="89.2907%" y="117" width="0.2177%" height="15" fill="rgb(225,182,9)" fg:x="25430" fg:w="62"/><text x="89.5407%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (16 samples, 0.06%)</title><rect x="89.4522%" y="101" width="0.0562%" height="15" fill="rgb(243,178,37)" fg:x="25476" fg:w="16"/><text x="89.7022%" y="111.50"></text></g><g><title>mwpf`presolve::HPresolve::rowPresolve (147 samples, 0.52%)</title><rect x="89.0836%" y="149" width="0.5162%" height="15" fill="rgb(232,139,19)" fg:x="25371" fg:w="147"/><text x="89.3336%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::updateColImpliedBounds (140 samples, 0.49%)</title><rect x="89.1081%" y="133" width="0.4916%" height="15" fill="rgb(225,201,24)" fg:x="25378" fg:w="140"/><text x="89.3581%" y="143.50"></text></g><g><title>mwpf`presolve::HPresolve::markChangedRow (26 samples, 0.09%)</title><rect x="89.5084%" y="117" width="0.0913%" height="15" fill="rgb(221,47,46)" fg:x="25492" fg:w="26"/><text x="89.7584%" y="127.50"></text></g><g><title>mwpf`presolve::HPresolve::initialRowAndColPresolve (463 samples, 1.63%)</title><rect x="88.1426%" y="165" width="1.6257%" height="15" fill="rgb(249,23,13)" fg:x="25103" fg:w="463"/><text x="88.3926%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::updateRowDualImpliedBounds (48 samples, 0.17%)</title><rect x="89.5997%" y="149" width="0.1685%" height="15" fill="rgb(219,9,5)" fg:x="25518" fg:w="48"/><text x="89.8497%" y="159.50"></text></g><g><title>mwpf`presolve::HPresolve::link (4 samples, 0.01%)</title><rect x="89.7683%" y="165" width="0.0140%" height="15" fill="rgb(254,171,16)" fg:x="25566" fg:w="4"/><text x="90.0183%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::shrinkProblem (67 samples, 0.24%)</title><rect x="89.7823%" y="165" width="0.2353%" height="15" fill="rgb(230,171,20)" fg:x="25570" fg:w="67"/><text x="90.0323%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::toCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator (80 samples, 0.28%)</title><rect x="90.0176%" y="165" width="0.2809%" height="15" fill="rgb(210,71,41)" fg:x="25637" fg:w="80"/><text x="90.2676%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::unlink (111 samples, 0.39%)</title><rect x="90.2985%" y="165" width="0.3897%" height="15" fill="rgb(206,173,20)" fg:x="25717" fg:w="111"/><text x="90.5485%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::presolve (9,510 samples, 33.39%)</title><rect x="57.2999%" y="181" width="33.3919%" height="15" fill="rgb(233,88,34)" fg:x="16319" fg:w="9510"/><text x="57.5499%" y="191.50">mwpf`presolve::HPresolve::presolve</text></g><g><title>mwpf`presolve::HPresolve::shrinkProblem (6 samples, 0.02%)</title><rect x="90.6917%" y="181" width="0.0211%" height="15" fill="rgb(223,209,46)" fg:x="25829" fg:w="6"/><text x="90.9417%" y="191.50"></text></g><g><title>mwpf`presolve::HPresolve::run (9,530 samples, 33.46%)</title><rect x="57.2999%" y="197" width="33.4621%" height="15" fill="rgb(250,43,18)" fg:x="16319" fg:w="9530"/><text x="57.5499%" y="207.50">mwpf`presolve::HPresolve::run</text></g><g><title>mwpf`presolve::HPresolve::toCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;&amp;, std::__1::vector&lt;int, std::__1::allocator (14 samples, 0.05%)</title><rect x="90.7128%" y="181" width="0.0492%" height="15" fill="rgb(208,13,10)" fg:x="25835" fg:w="14"/><text x="90.9628%" y="191.50"></text></g><g><title>libsystem_platform.dylib`__bzero (74 samples, 0.26%)</title><rect x="90.7865%" y="165" width="0.2598%" height="15" fill="rgb(212,200,36)" fg:x="25856" fg:w="74"/><text x="91.0365%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (39 samples, 0.14%)</title><rect x="91.0463%" y="165" width="0.1369%" height="15" fill="rgb(225,90,30)" fg:x="25930" fg:w="39"/><text x="91.2963%" y="175.50"></text></g><g><title>mwpf`HighsLinearSumBounds::add (794 samples, 2.79%)</title><rect x="91.1833%" y="165" width="2.7879%" height="15" fill="rgb(236,182,39)" fg:x="25969" fg:w="794"/><text x="91.4333%" y="175.50">mw..</text></g><g><title>mwpf`presolve::HPresolve::link (519 samples, 1.82%)</title><rect x="93.9782%" y="165" width="1.8223%" height="15" fill="rgb(212,144,35)" fg:x="26765" fg:w="519"/><text x="94.2282%" y="175.50">m..</text></g><g><title>mwpf`std::__1::enable_if&lt;__is_cpp17_forward_iterator&lt;std::__1::__wrap_iter&lt;int*&gt;&gt;::value &amp;&amp; is_constructible&lt;int, std::__1::iterator_traits&lt;std::__1::__wrap_iter&lt;int*&gt;&gt;::reference&gt;::value, std::__1::__wrap_iter&lt;int*&gt;&gt;::type std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::insert&lt;std::__1::__wrap_iter&lt;int*&gt;&gt;(std::__1::__wrap_iter&lt;int const*&gt;, std::__1::__wrap_iter&lt;int*&gt;, std::__1::__wrap_iter (32 samples, 0.11%)</title><rect x="95.8006%" y="165" width="0.1124%" height="15" fill="rgb(228,63,44)" fg:x="27284" fg:w="32"/><text x="96.0506%" y="175.50"></text></g><g><title>mwpf`std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt;::insert(std::__1::__wrap_iter (22 samples, 0.08%)</title><rect x="95.9199%" y="165" width="0.0772%" height="15" fill="rgb(228,109,6)" fg:x="27318" fg:w="22"/><text x="96.1699%" y="175.50"></text></g><g><title>mwpf`presolve::HPresolve::fromCSC(std::__1::vector&lt;double, std::__1::allocator&lt;double&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator&lt;int&gt;&gt; const&amp;, std::__1::vector&lt;int, std::__1::allocator (1,491 samples, 5.24%)</title><rect x="90.7654%" y="181" width="5.2353%" height="15" fill="rgb(238,117,24)" fg:x="25850" fg:w="1491"/><text x="91.0154%" y="191.50">mwpf`p..</text></g><g><title>mwpf`presolve::HPresolve::setInput (1,521 samples, 5.34%)</title><rect x="90.7619%" y="197" width="5.3406%" height="15" fill="rgb(242,26,26)" fg:x="25849" fg:w="1521"/><text x="91.0119%" y="207.50">mwpf`pr..</text></g><g><title>mwpf`presolve::HPresolve::link (29 samples, 0.10%)</title><rect x="96.0007%" y="181" width="0.1018%" height="15" fill="rgb(221,92,48)" fg:x="27341" fg:w="29"/><text x="96.2507%" y="191.50"></text></g><g><title>mwpf`PresolveComponent::run (11,156 samples, 39.17%)</title><rect x="57.2999%" y="213" width="39.1713%" height="15" fill="rgb(209,209,32)" fg:x="16319" fg:w="11156"/><text x="57.5499%" y="223.50">mwpf`PresolveComponent::run</text></g><g><title>mwpf`presolve::HPresolve::~HPresolve (105 samples, 0.37%)</title><rect x="96.1025%" y="197" width="0.3687%" height="15" fill="rgb(221,70,22)" fg:x="27370" fg:w="105"/><text x="96.3525%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (105 samples, 0.37%)</title><rect x="96.1025%" y="181" width="0.3687%" height="15" fill="rgb(248,145,5)" fg:x="27370" fg:w="105"/><text x="96.3525%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (105 samples, 0.37%)</title><rect x="96.1025%" y="165" width="0.3687%" height="15" fill="rgb(226,116,26)" fg:x="27370" fg:w="105"/><text x="96.3525%" y="175.50"></text></g><g><title>mwpf`Highs::runPresolve (11,212 samples, 39.37%)</title><rect x="57.1103%" y="229" width="39.3680%" height="15" fill="rgb(244,5,17)" fg:x="16265" fg:w="11212"/><text x="57.3603%" y="239.50">mwpf`Highs::runPresolve</text></g><g><title>mwpf`HighsSparseMatrix::assessSmallValues (8 samples, 0.03%)</title><rect x="96.4817%" y="229" width="0.0281%" height="15" fill="rgb(252,159,33)" fg:x="27478" fg:w="8"/><text x="96.7317%" y="239.50"></text></g><g><title>mwpf`HighsSparseMatrix::ensureColwise (246 samples, 0.86%)</title><rect x="96.5098%" y="229" width="0.8638%" height="15" fill="rgb(206,71,0)" fg:x="27486" fg:w="246"/><text x="96.7598%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (38 samples, 0.13%)</title><rect x="97.2402%" y="213" width="0.1334%" height="15" fill="rgb(233,118,54)" fg:x="27694" fg:w="38"/><text x="97.4902%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (38 samples, 0.13%)</title><rect x="97.2402%" y="197" width="0.1334%" height="15" fill="rgb(234,83,48)" fg:x="27694" fg:w="38"/><text x="97.4902%" y="207.50"></text></g><g><title>mwpf`Highs::run (14,803 samples, 51.98%)</title><rect x="45.4143%" y="245" width="51.9768%" height="15" fill="rgb(228,3,54)" fg:x="12934" fg:w="14803"/><text x="45.6643%" y="255.50">mwpf`Highs::run</text></g><g><title>mwpf`highs::Model::solve (14,829 samples, 52.07%)</title><rect x="45.4143%" y="261" width="52.0681%" height="15" fill="rgb(226,155,13)" fg:x="12934" fg:w="14829"/><text x="45.6643%" y="271.50">mwpf`highs::Model::solve</text></g><g><title>mwpf`HighsSparseMatrix::hasLargeValue (26 samples, 0.09%)</title><rect x="97.3912%" y="245" width="0.0913%" height="15" fill="rgb(241,28,37)" fg:x="27737" fg:w="26"/><text x="97.6412%" y="255.50"></text></g><g><title>mwpf`HighsOptions::initRecords (5 samples, 0.02%)</title><rect x="97.4895%" y="213" width="0.0176%" height="15" fill="rgb(233,93,10)" fg:x="27765" fg:w="5"/><text x="97.7395%" y="223.50"></text></g><g><title>mwpf`Highs_create (8 samples, 0.03%)</title><rect x="97.4824%" y="245" width="0.0281%" height="15" fill="rgb(225,113,19)" fg:x="27763" fg:w="8"/><text x="97.7324%" y="255.50"></text></g><g><title>mwpf`Highs::Highs (8 samples, 0.03%)</title><rect x="97.4824%" y="229" width="0.0281%" height="15" fill="rgb(241,2,18)" fg:x="27763" fg:w="8"/><text x="97.7324%" y="239.50"></text></g><g><title>mwpf`highs::Problem&lt;MATRIX&gt;::try_optimise (9 samples, 0.03%)</title><rect x="97.4824%" y="261" width="0.0316%" height="15" fill="rgb(228,207,21)" fg:x="27763" fg:w="9"/><text x="97.7324%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.08%)</title><rect x="98.6482%" y="245" width="0.0808%" height="15" fill="rgb(213,211,35)" fg:x="28095" fg:w="23"/><text x="98.8982%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune (27,886 samples, 97.91%)</title><rect x="0.8216%" y="293" width="97.9143%" height="15" fill="rgb(209,83,10)" fg:x="234" fg:w="27886"/><text x="1.0716%" y="303.50">mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_cluster_tune</text></g><g><title>mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize (18,652 samples, 65.49%)</title><rect x="33.2444%" y="277" width="65.4916%" height="15" fill="rgb(209,164,1)" fg:x="9468" fg:w="18652"/><text x="33.4944%" y="287.50">mwpf`mwpf::relaxer_optimizer::RelaxerOptimizer::optimize</text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (348 samples, 1.22%)</title><rect x="97.5140%" y="261" width="1.2219%" height="15" fill="rgb(213,184,43)" fg:x="27772" fg:w="348"/><text x="97.7640%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.01%)</title><rect x="99.7331%" y="277" width="0.0105%" height="15" fill="rgb(231,61,34)" fg:x="28404" fg:w="3"/><text x="99.9831%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.05%)</title><rect x="99.7437%" y="277" width="0.0456%" height="15" fill="rgb(235,75,3)" fg:x="28407" fg:w="13"/><text x="99.9937%" y="287.50"></text></g><g><title>mwpf`mwpf::dual_module::DualModuleImpl::get_conflicts_tune (302 samples, 1.06%)</title><rect x="98.7360%" y="293" width="1.0604%" height="15" fill="rgb(220,106,47)" fg:x="28120" fg:w="302"/><text x="98.9860%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_tune (28,204 samples, 99.03%)</title><rect x="0.7865%" y="309" width="99.0309%" height="15" fill="rgb(210,196,33)" fg:x="224" fg:w="28204"/><text x="1.0365%" y="319.50">mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve_tune</text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::union (6 samples, 0.02%)</title><rect x="99.7963%" y="293" width="0.0211%" height="15" fill="rgb(229,154,42)" fg:x="28422" fg:w="6"/><text x="100.0463%" y="303.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (8 samples, 0.03%)</title><rect x="99.8209%" y="261" width="0.0281%" height="15" fill="rgb(228,114,26)" fg:x="28429" fg:w="8"/><text x="100.0709%" y="271.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (8 samples, 0.03%)</title><rect x="99.8209%" y="245" width="0.0281%" height="15" fill="rgb(208,144,1)" fg:x="28429" fg:w="8"/><text x="100.0709%" y="255.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::load (10 samples, 0.04%)</title><rect x="99.8174%" y="309" width="0.0351%" height="15" fill="rgb(239,112,37)" fg:x="28428" fg:w="10"/><text x="100.0674%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node (10 samples, 0.04%)</title><rect x="99.8174%" y="293" width="0.0351%" height="15" fill="rgb(210,96,50)" fg:x="28428" fg:w="10"/><text x="100.0674%" y="303.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (10 samples, 0.04%)</title><rect x="99.8174%" y="277" width="0.0351%" height="15" fill="rgb(222,178,2)" fg:x="28428" fg:w="10"/><text x="100.0674%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::mwpf_solver::SolverSerialPlugins as mwpf::mwpf_solver::PrimalDualSolver&gt;::solve_visualizer (28,382 samples, 99.66%)</title><rect x="0.2001%" y="341" width="99.6559%" height="15" fill="rgb(226,74,18)" fg:x="57" fg:w="28382"/><text x="0.4501%" y="351.50">mwpf`&lt;mwpf::mwpf_solver::SolverSerialPlugins as mwpf::mwpf_solver::PrimalDualSolver&gt;::solve_visualizer</text></g><g><title>mwpf`mwpf::primal_module::PrimalModuleImpl::solve_visualizer (28,382 samples, 99.66%)</title><rect x="0.2001%" y="325" width="99.6559%" height="15" fill="rgb(225,67,54)" fg:x="57" fg:w="28382"/><text x="0.4501%" y="335.50">mwpf`mwpf::primal_module::PrimalModuleImpl::solve_visualizer</text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.02%)</title><rect x="99.8560%" y="325" width="0.0211%" height="15" fill="rgb(251,92,32)" fg:x="28439" fg:w="6"/><text x="100.1060%" y="335.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.02%)</title><rect x="99.8560%" y="309" width="0.0211%" height="15" fill="rgb(228,149,22)" fg:x="28439" fg:w="6"/><text x="100.1060%" y="319.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;qecp::model_hypergraph::ModelHyperedgeGroup&gt; (3 samples, 0.01%)</title><rect x="99.8666%" y="293" width="0.0105%" height="15" fill="rgb(243,54,13)" fg:x="28442" fg:w="3"/><text x="100.1166%" y="303.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (3 samples, 0.01%)</title><rect x="99.8666%" y="277" width="0.0105%" height="15" fill="rgb(243,180,28)" fg:x="28442" fg:w="3"/><text x="100.1166%" y="287.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::example_codes::QECPlaygroundCode&gt; (7 samples, 0.02%)</title><rect x="99.8560%" y="341" width="0.0246%" height="15" fill="rgb(208,167,24)" fg:x="28439" fg:w="7"/><text x="100.1060%" y="351.50"></text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::clear (5 samples, 0.02%)</title><rect x="99.8841%" y="341" width="0.0176%" height="15" fill="rgb(245,73,45)" fg:x="28447" fg:w="5"/><text x="100.1341%" y="351.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.01%)</title><rect x="99.8876%" y="325" width="0.0140%" height="15" fill="rgb(237,203,48)" fg:x="28448" fg:w="4"/><text x="100.1376%" y="335.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.01%)</title><rect x="99.8912%" y="309" width="0.0105%" height="15" fill="rgb(211,197,16)" fg:x="28449" fg:w="3"/><text x="100.1412%" y="319.50"></text></g><g><title>dyld`start (28,475 samples, 99.98%)</title><rect x="0.0000%" y="469" width="99.9824%" height="15" fill="rgb(243,99,51)" fg:x="0" fg:w="28475"/><text x="0.2500%" y="479.50">dyld`start</text></g><g><title>mwpf`main (28,474 samples, 99.98%)</title><rect x="0.0035%" y="453" width="99.9789%" height="15" fill="rgb(215,123,29)" fg:x="1" fg:w="28474"/><text x="0.2535%" y="463.50">mwpf`main</text></g><g><title>mwpf`std::rt::lang_start (28,474 samples, 99.98%)</title><rect x="0.0035%" y="437" width="99.9789%" height="15" fill="rgb(239,186,37)" fg:x="1" fg:w="28474"/><text x="0.2535%" y="447.50">mwpf`std::rt::lang_start</text></g><g><title>mwpf`std::rt::lang_start_internal (28,474 samples, 99.98%)</title><rect x="0.0035%" y="421" width="99.9789%" height="15" fill="rgb(252,136,39)" fg:x="1" fg:w="28474"/><text x="0.2535%" y="431.50">mwpf`std::rt::lang_start_internal</text></g><g><title>mwpf`std::rt::lang_start::_{{closure}} (28,474 samples, 99.98%)</title><rect x="0.0035%" y="405" width="99.9789%" height="15" fill="rgb(223,213,32)" fg:x="1" fg:w="28474"/><text x="0.2535%" y="415.50">mwpf`std::rt::lang_start::_{{closure}}</text></g><g><title>mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace (28,474 samples, 99.98%)</title><rect x="0.0035%" y="389" width="99.9789%" height="15" fill="rgb(233,115,5)" fg:x="1" fg:w="28474"/><text x="0.2535%" y="399.50">mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mwpf`mwpf::main (28,474 samples, 99.98%)</title><rect x="0.0035%" y="373" width="99.9789%" height="15" fill="rgb(207,226,44)" fg:x="1" fg:w="28474"/><text x="0.2535%" y="383.50">mwpf`mwpf::main</text></g><g><title>mwpf`mwpf::cli::Cli::run (28,473 samples, 99.98%)</title><rect x="0.0070%" y="357" width="99.9754%" height="15" fill="rgb(208,126,0)" fg:x="2" fg:w="28473"/><text x="0.2570%" y="367.50">mwpf`mwpf::cli::Cli::run</text></g><g><title>mwpf`mwpf::example_codes::QECPlaygroundCode::new (22 samples, 0.08%)</title><rect x="99.9052%" y="341" width="0.0772%" height="15" fill="rgb(244,66,21)" fg:x="28453" fg:w="22"/><text x="100.1552%" y="351.50"></text></g><g><title>mwpf`qecp::model_hypergraph::ModelHypergraph::build (21 samples, 0.07%)</title><rect x="99.9087%" y="325" width="0.0737%" height="15" fill="rgb(222,97,12)" fg:x="28454" fg:w="21"/><text x="100.1587%" y="335.50"></text></g><g><title>mwpf`qecp::model_hypergraph::ModelHypergraph::build_with_weight_function_region (20 samples, 0.07%)</title><rect x="99.9122%" y="309" width="0.0702%" height="15" fill="rgb(219,213,19)" fg:x="28455" fg:w="20"/><text x="100.1622%" y="319.50"></text></g><g><title>mwpf`qecp::simulator::Simulator::fast_measurement_given_few_errors (13 samples, 0.05%)</title><rect x="99.9368%" y="293" width="0.0456%" height="15" fill="rgb(252,169,30)" fg:x="28462" fg:w="13"/><text x="100.1868%" y="303.50"></text></g><g><title>all (28,480 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(206,32,51)" fg:x="0" fg:w="28480"/><text x="0.2500%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`__exit (5 samples, 0.02%)</title><rect x="99.9824%" y="469" width="0.0176%" height="15" fill="rgb(250,172,42)" fg:x="28475" fg:w="5"/><text x="100.2324%" y="479.50"></text></g></svg></svg>