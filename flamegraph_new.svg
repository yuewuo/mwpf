<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="517.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="517.00"> </text><svg id="frames" x="10" width="1180" total_samples="3211"><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.06%)</title><rect x="0.0311%" y="341" width="0.0623%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.2811%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.03%)</title><rect x="0.0934%" y="341" width="0.0311%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="1"/><text x="0.3434%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.03%)</title><rect x="0.1246%" y="341" width="0.0311%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.3746%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.03%)</title><rect x="0.1246%" y="325" width="0.0311%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.3746%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="0.1246%" y="309" width="0.0311%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="0.3746%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.09%)</title><rect x="0.1557%" y="341" width="0.0934%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="3"/><text x="0.4057%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="0.2491%" y="341" width="0.0311%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="1"/><text x="0.4991%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="0.2803%" y="341" width="0.0311%" height="15" fill="rgb(228,23,34)" fg:x="9" fg:w="1"/><text x="0.5303%" y="351.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="0.3114%" y="341" width="0.0311%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="1"/><text x="0.5614%" y="351.50"></text></g><g><title>mwpf`&lt;mwpf::cli::VerifierActualError as mwpf::cli::ResultVerifier&gt;::verify (1 samples, 0.03%)</title><rect x="0.3426%" y="341" width="0.0311%" height="15" fill="rgb(220,122,19)" fg:x="11" fg:w="1"/><text x="0.5926%" y="351.50"></text></g><g><title>mwpf`&lt;mwpf::mwpf_solver::SolverParallel as mwpf::mwpf_solver::PrimalDualSolver&gt;::subgraph_range_visualizer (1 samples, 0.03%)</title><rect x="0.3426%" y="325" width="0.0311%" height="15" fill="rgb(250,228,42)" fg:x="11" fg:w="1"/><text x="0.5926%" y="335.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_parallel::PrimalModuleParallel as mwpf::primal_module::PrimalModuleImpl&gt;::subgraph_range (1 samples, 0.03%)</title><rect x="0.3426%" y="309" width="0.0311%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="1"/><text x="0.5926%" y="319.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_parallel::PrimalModuleParallel as mwpf::primal_module::PrimalModuleImpl&gt;::subgraph (1 samples, 0.03%)</title><rect x="0.3426%" y="293" width="0.0311%" height="15" fill="rgb(216,20,37)" fg:x="11" fg:w="1"/><text x="0.5926%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::subgraph (1 samples, 0.03%)</title><rect x="0.3426%" y="277" width="0.0311%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="1"/><text x="0.5926%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="0.4049%" y="325" width="0.0311%" height="15" fill="rgb(217,207,13)" fg:x="13" fg:w="1"/><text x="0.6549%" y="335.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="0.4049%" y="309" width="0.0311%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="1"/><text x="0.6549%" y="319.50"></text></g><g><title>mwpf`&lt;qecp::simulator::Simulator as qecp::simulator::SimulatorGenerics&gt;::generate_random_errors (11 samples, 0.34%)</title><rect x="0.4360%" y="325" width="0.3426%" height="15" fill="rgb(225,20,46)" fg:x="14" fg:w="11"/><text x="0.6860%" y="335.50"></text></g><g><title>mwpf`qecp::simulator::Simulator::propagate_errors (6 samples, 0.19%)</title><rect x="0.5917%" y="309" width="0.1869%" height="15" fill="rgb(210,31,41)" fg:x="19" fg:w="6"/><text x="0.8417%" y="319.50"></text></g><g><title>mwpf`qecp::simulator::Simulator::propagate_error_from (3 samples, 0.09%)</title><rect x="0.6851%" y="293" width="0.0934%" height="15" fill="rgb(221,200,47)" fg:x="22" fg:w="3"/><text x="0.9351%" y="303.50"></text></g><g><title>mwpf`&lt;mwpf::example_codes::QECPlaygroundCode as mwpf::example_codes::ExampleCode&gt;::generate_random_errors (14 samples, 0.44%)</title><rect x="0.3737%" y="341" width="0.4360%" height="15" fill="rgb(226,26,5)" fg:x="12" fg:w="14"/><text x="0.6237%" y="351.50"></text></g><g><title>mwpf`&lt;qecp::simulator::Simulator as qecp::simulator::SimulatorGenerics&gt;::generate_sparse_measurement (1 samples, 0.03%)</title><rect x="0.7786%" y="325" width="0.0311%" height="15" fill="rgb(249,33,26)" fg:x="25" fg:w="1"/><text x="1.0286%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="0.8097%" y="325" width="0.0311%" height="15" fill="rgb(235,183,28)" fg:x="26" fg:w="1"/><text x="1.0597%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="0.8409%" y="325" width="0.0311%" height="15" fill="rgb(221,5,38)" fg:x="27" fg:w="1"/><text x="1.0909%" y="335.50"></text></g><g><title>mwpf`DYLD-STUB$$free (1 samples, 0.03%)</title><rect x="0.8720%" y="325" width="0.0311%" height="15" fill="rgb(247,18,42)" fg:x="28" fg:w="1"/><text x="1.1220%" y="335.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.16%)</title><rect x="0.8097%" y="341" width="0.1557%" height="15" fill="rgb(241,131,45)" fg:x="26" fg:w="5"/><text x="1.0597%" y="351.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.06%)</title><rect x="0.9031%" y="325" width="0.0623%" height="15" fill="rgb(249,31,29)" fg:x="29" fg:w="2"/><text x="1.1531%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="0.9343%" y="309" width="0.0311%" height="15" fill="rgb(225,111,53)" fg:x="30" fg:w="1"/><text x="1.1843%" y="319.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::cli::VerifierActualError&gt; (3 samples, 0.09%)</title><rect x="0.9654%" y="341" width="0.0934%" height="15" fill="rgb(238,160,17)" fg:x="31" fg:w="3"/><text x="1.2154%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.09%)</title><rect x="0.9654%" y="325" width="0.0934%" height="15" fill="rgb(214,148,48)" fg:x="31" fg:w="3"/><text x="1.2154%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.06%)</title><rect x="1.0589%" y="325" width="0.0623%" height="15" fill="rgb(232,36,49)" fg:x="34" fg:w="2"/><text x="1.3089%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="1.1211%" y="325" width="0.0623%" height="15" fill="rgb(209,103,24)" fg:x="36" fg:w="2"/><text x="1.3711%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.03%)</title><rect x="1.1834%" y="325" width="0.0311%" height="15" fill="rgb(229,88,8)" fg:x="38" fg:w="1"/><text x="1.4334%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.03%)</title><rect x="1.1834%" y="309" width="0.0311%" height="15" fill="rgb(213,181,19)" fg:x="38" fg:w="1"/><text x="1.4334%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="1.1834%" y="293" width="0.0311%" height="15" fill="rgb(254,191,54)" fg:x="38" fg:w="1"/><text x="1.4334%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="1.2146%" y="325" width="0.0311%" height="15" fill="rgb(241,83,37)" fg:x="39" fg:w="1"/><text x="1.4646%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="1.2457%" y="309" width="0.0311%" height="15" fill="rgb(233,36,39)" fg:x="40" fg:w="1"/><text x="1.4957%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.09%)</title><rect x="1.2769%" y="309" width="0.0934%" height="15" fill="rgb(226,3,54)" fg:x="41" fg:w="3"/><text x="1.5269%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="1.4014%" y="293" width="0.0311%" height="15" fill="rgb(245,192,40)" fg:x="45" fg:w="1"/><text x="1.6514%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.09%)</title><rect x="1.4326%" y="293" width="0.0934%" height="15" fill="rgb(238,167,29)" fg:x="46" fg:w="3"/><text x="1.6826%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (8 samples, 0.25%)</title><rect x="1.5260%" y="293" width="0.2491%" height="15" fill="rgb(232,182,51)" fg:x="49" fg:w="8"/><text x="1.7760%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (8 samples, 0.25%)</title><rect x="1.5260%" y="277" width="0.2491%" height="15" fill="rgb(231,60,39)" fg:x="49" fg:w="8"/><text x="1.7760%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.25%)</title><rect x="1.5260%" y="261" width="0.2491%" height="15" fill="rgb(208,69,12)" fg:x="49" fg:w="8"/><text x="1.7760%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="1.7751%" y="293" width="0.0311%" height="15" fill="rgb(235,93,37)" fg:x="57" fg:w="1"/><text x="2.0251%" y="303.50"></text></g><g><title>mwpf`DYLD-STUB$$free (2 samples, 0.06%)</title><rect x="1.8063%" y="293" width="0.0623%" height="15" fill="rgb(213,116,39)" fg:x="58" fg:w="2"/><text x="2.0563%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.03%)</title><rect x="1.9309%" y="261" width="0.0311%" height="15" fill="rgb(222,207,29)" fg:x="62" fg:w="1"/><text x="2.1809%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (3 samples, 0.09%)</title><rect x="2.0554%" y="245" width="0.0934%" height="15" fill="rgb(206,96,30)" fg:x="66" fg:w="3"/><text x="2.3054%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (3 samples, 0.09%)</title><rect x="2.0554%" y="229" width="0.0934%" height="15" fill="rgb(218,138,4)" fg:x="66" fg:w="3"/><text x="2.3054%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.06%)</title><rect x="2.1489%" y="245" width="0.0623%" height="15" fill="rgb(250,191,14)" fg:x="69" fg:w="2"/><text x="2.3989%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.03%)</title><rect x="2.2111%" y="245" width="0.0311%" height="15" fill="rgb(239,60,40)" fg:x="71" fg:w="1"/><text x="2.4611%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.40%)</title><rect x="1.8686%" y="277" width="0.4049%" height="15" fill="rgb(206,27,48)" fg:x="60" fg:w="13"/><text x="2.1186%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.31%)</title><rect x="1.9620%" y="261" width="0.3114%" height="15" fill="rgb(225,35,8)" fg:x="63" fg:w="10"/><text x="2.2120%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (1 samples, 0.03%)</title><rect x="2.2423%" y="245" width="0.0311%" height="15" fill="rgb(250,213,24)" fg:x="72" fg:w="1"/><text x="2.4923%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="2.2423%" y="229" width="0.0311%" height="15" fill="rgb(247,123,22)" fg:x="72" fg:w="1"/><text x="2.4923%" y="239.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (15 samples, 0.47%)</title><rect x="1.8686%" y="293" width="0.4671%" height="15" fill="rgb(231,138,38)" fg:x="60" fg:w="15"/><text x="2.1186%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="2.2734%" y="277" width="0.0623%" height="15" fill="rgb(231,145,46)" fg:x="73" fg:w="2"/><text x="2.5234%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.03%)</title><rect x="2.4291%" y="277" width="0.0311%" height="15" fill="rgb(251,118,11)" fg:x="78" fg:w="1"/><text x="2.6791%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (20 samples, 0.62%)</title><rect x="2.4603%" y="277" width="0.6229%" height="15" fill="rgb(217,147,25)" fg:x="79" fg:w="20"/><text x="2.7103%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.03%)</title><rect x="3.0832%" y="277" width="0.0311%" height="15" fill="rgb(247,81,37)" fg:x="99" fg:w="1"/><text x="3.3332%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="3.1143%" y="277" width="0.0311%" height="15" fill="rgb(209,12,38)" fg:x="100" fg:w="1"/><text x="3.3643%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="3.1454%" y="277" width="0.0311%" height="15" fill="rgb(227,1,9)" fg:x="101" fg:w="1"/><text x="3.3954%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.03%)</title><rect x="3.1766%" y="277" width="0.0311%" height="15" fill="rgb(248,47,43)" fg:x="102" fg:w="1"/><text x="3.4266%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.03%)</title><rect x="3.1766%" y="261" width="0.0311%" height="15" fill="rgb(221,10,30)" fg:x="102" fg:w="1"/><text x="3.4266%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="3.1766%" y="245" width="0.0311%" height="15" fill="rgb(210,229,1)" fg:x="102" fg:w="1"/><text x="3.4266%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.09%)</title><rect x="3.2077%" y="277" width="0.0934%" height="15" fill="rgb(222,148,37)" fg:x="103" fg:w="3"/><text x="3.4577%" y="287.50"></text></g><g><title>mwpf`DYLD-STUB$$free (2 samples, 0.06%)</title><rect x="3.3012%" y="277" width="0.0623%" height="15" fill="rgb(234,67,33)" fg:x="106" fg:w="2"/><text x="3.5512%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.03%)</title><rect x="3.3946%" y="261" width="0.0311%" height="15" fill="rgb(247,98,35)" fg:x="109" fg:w="1"/><text x="3.6446%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.03%)</title><rect x="3.4257%" y="261" width="0.0311%" height="15" fill="rgb(247,138,52)" fg:x="110" fg:w="1"/><text x="3.6757%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (3 samples, 0.09%)</title><rect x="3.6437%" y="245" width="0.0934%" height="15" fill="rgb(213,79,30)" fg:x="117" fg:w="3"/><text x="3.8937%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (2 samples, 0.06%)</title><rect x="4.2666%" y="229" width="0.0623%" height="15" fill="rgb(246,177,23)" fg:x="137" fg:w="2"/><text x="4.5166%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (2 samples, 0.06%)</title><rect x="4.2666%" y="213" width="0.0623%" height="15" fill="rgb(230,62,27)" fg:x="137" fg:w="2"/><text x="4.5166%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (2 samples, 0.06%)</title><rect x="4.3289%" y="229" width="0.0623%" height="15" fill="rgb(216,154,8)" fg:x="139" fg:w="2"/><text x="4.5789%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="4.3600%" y="213" width="0.0311%" height="15" fill="rgb(244,35,45)" fg:x="140" fg:w="1"/><text x="4.6100%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (7 samples, 0.22%)</title><rect x="4.3912%" y="229" width="0.2180%" height="15" fill="rgb(251,115,12)" fg:x="141" fg:w="7"/><text x="4.6412%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.06%)</title><rect x="4.6092%" y="229" width="0.0623%" height="15" fill="rgb(240,54,50)" fg:x="148" fg:w="2"/><text x="4.8592%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (6 samples, 0.19%)</title><rect x="4.6714%" y="229" width="0.1869%" height="15" fill="rgb(233,84,52)" fg:x="150" fg:w="6"/><text x="4.9214%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="4.8272%" y="213" width="0.0311%" height="15" fill="rgb(207,117,47)" fg:x="155" fg:w="1"/><text x="5.0772%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (4 samples, 0.12%)</title><rect x="4.8583%" y="229" width="0.1246%" height="15" fill="rgb(249,43,39)" fg:x="156" fg:w="4"/><text x="5.1083%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.09%)</title><rect x="4.8894%" y="213" width="0.0934%" height="15" fill="rgb(209,38,44)" fg:x="157" fg:w="3"/><text x="5.1394%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (47 samples, 1.46%)</title><rect x="3.7372%" y="245" width="1.4637%" height="15" fill="rgb(236,212,23)" fg:x="120" fg:w="47"/><text x="3.9872%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (7 samples, 0.22%)</title><rect x="4.9829%" y="229" width="0.2180%" height="15" fill="rgb(242,79,21)" fg:x="160" fg:w="7"/><text x="5.2329%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.22%)</title><rect x="4.9829%" y="213" width="0.2180%" height="15" fill="rgb(211,96,35)" fg:x="160" fg:w="7"/><text x="5.2329%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (57 samples, 1.78%)</title><rect x="3.4569%" y="261" width="1.7751%" height="15" fill="rgb(253,215,40)" fg:x="111" fg:w="57"/><text x="3.7069%" y="271.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (1 samples, 0.03%)</title><rect x="5.2009%" y="245" width="0.0311%" height="15" fill="rgb(211,81,21)" fg:x="167" fg:w="1"/><text x="5.4509%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.09%)</title><rect x="5.2320%" y="261" width="0.0934%" height="15" fill="rgb(208,190,38)" fg:x="168" fg:w="3"/><text x="5.4820%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (3 samples, 0.09%)</title><rect x="5.3254%" y="261" width="0.0934%" height="15" fill="rgb(235,213,38)" fg:x="171" fg:w="3"/><text x="5.5754%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (150 samples, 4.67%)</title><rect x="1.3703%" y="309" width="4.6714%" height="15" fill="rgb(237,122,38)" fg:x="44" fg:w="150"/><text x="1.6203%" y="319.50">mwpf`..</text></g><g><title>mwpf`core::ptr::drop_in_place&lt;qecp::model_hypergraph::ModelHyperedgeGroup&gt; (119 samples, 3.71%)</title><rect x="2.3357%" y="293" width="3.7060%" height="15" fill="rgb(244,218,35)" fg:x="75" fg:w="119"/><text x="2.5857%" y="303.50">mwpf..</text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (86 samples, 2.68%)</title><rect x="3.3634%" y="277" width="2.6783%" height="15" fill="rgb(240,68,47)" fg:x="108" fg:w="86"/><text x="3.6134%" y="287.50">mw..</text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 0.62%)</title><rect x="5.4189%" y="261" width="0.6229%" height="15" fill="rgb(210,16,53)" fg:x="174" fg:w="20"/><text x="5.6689%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.03%)</title><rect x="6.0417%" y="293" width="0.0311%" height="15" fill="rgb(235,124,12)" fg:x="194" fg:w="1"/><text x="6.2917%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.22%)</title><rect x="6.0729%" y="293" width="0.2180%" height="15" fill="rgb(224,169,11)" fg:x="195" fg:w="7"/><text x="6.3229%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.03%)</title><rect x="6.2909%" y="293" width="0.0311%" height="15" fill="rgb(250,166,2)" fg:x="202" fg:w="1"/><text x="6.5409%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.03%)</title><rect x="6.2909%" y="277" width="0.0311%" height="15" fill="rgb(242,216,29)" fg:x="202" fg:w="1"/><text x="6.5409%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="6.2909%" y="261" width="0.0311%" height="15" fill="rgb(230,116,27)" fg:x="202" fg:w="1"/><text x="6.5409%" y="271.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (164 samples, 5.11%)</title><rect x="1.2457%" y="325" width="5.1074%" height="15" fill="rgb(228,99,48)" fg:x="40" fg:w="164"/><text x="1.4957%" y="335.50">mwpf`a..</text></g><g><title>mwpf`&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.31%)</title><rect x="6.0417%" y="309" width="0.3114%" height="15" fill="rgb(253,11,6)" fg:x="194" fg:w="10"/><text x="6.2917%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="6.3220%" y="293" width="0.0311%" height="15" fill="rgb(247,143,39)" fg:x="203" fg:w="1"/><text x="6.5720%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.06%)</title><rect x="6.4154%" y="309" width="0.0623%" height="15" fill="rgb(236,97,10)" fg:x="206" fg:w="2"/><text x="6.6654%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.06%)</title><rect x="6.4777%" y="309" width="0.0623%" height="15" fill="rgb(233,208,19)" fg:x="208" fg:w="2"/><text x="6.7277%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (2 samples, 0.06%)</title><rect x="6.4777%" y="293" width="0.0623%" height="15" fill="rgb(216,164,2)" fg:x="208" fg:w="2"/><text x="6.7277%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.06%)</title><rect x="6.4777%" y="277" width="0.0623%" height="15" fill="rgb(220,129,5)" fg:x="208" fg:w="2"/><text x="6.7277%" y="287.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::example_codes::QECPlaygroundCode&gt; (177 samples, 5.51%)</title><rect x="1.0589%" y="341" width="5.5123%" height="15" fill="rgb(242,17,10)" fg:x="34" fg:w="177"/><text x="1.3089%" y="351.50">mwpf`co..</text></g><g><title>mwpf`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::boxed::Box&lt;qecp::simulator::SimulatorNode&gt;&gt;&gt;&gt;&gt; (7 samples, 0.22%)</title><rect x="6.3532%" y="325" width="0.2180%" height="15" fill="rgb(242,107,0)" fg:x="204" fg:w="7"/><text x="6.6032%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="6.5400%" y="309" width="0.0311%" height="15" fill="rgb(251,28,31)" fg:x="210" fg:w="1"/><text x="6.7900%" y="319.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::mwpf_solver::SolverParallel&gt; (3 samples, 0.09%)</title><rect x="6.5712%" y="341" width="0.0934%" height="15" fill="rgb(233,223,10)" fg:x="211" fg:w="3"/><text x="6.8212%" y="351.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.09%)</title><rect x="6.5712%" y="325" width="0.0934%" height="15" fill="rgb(215,21,27)" fg:x="211" fg:w="3"/><text x="6.8212%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.09%)</title><rect x="6.5712%" y="309" width="0.0934%" height="15" fill="rgb(232,23,21)" fg:x="211" fg:w="3"/><text x="6.8212%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="6.6646%" y="293" width="0.0623%" height="15" fill="rgb(244,5,23)" fg:x="214" fg:w="2"/><text x="6.9146%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="6.7269%" y="293" width="0.0311%" height="15" fill="rgb(226,81,46)" fg:x="216" fg:w="1"/><text x="6.9769%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.03%)</title><rect x="6.7580%" y="293" width="0.0311%" height="15" fill="rgb(247,70,30)" fg:x="217" fg:w="1"/><text x="7.0080%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="6.7892%" y="293" width="0.0311%" height="15" fill="rgb(212,68,19)" fg:x="218" fg:w="1"/><text x="7.0392%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="6.8203%" y="293" width="0.0311%" height="15" fill="rgb(240,187,13)" fg:x="219" fg:w="1"/><text x="7.0703%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="6.8514%" y="293" width="0.0311%" height="15" fill="rgb(223,113,26)" fg:x="220" fg:w="1"/><text x="7.1014%" y="303.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="6.8826%" y="293" width="0.0623%" height="15" fill="rgb(206,192,2)" fg:x="221" fg:w="2"/><text x="7.1326%" y="303.50"></text></g><g><title>mwpf`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="6.9449%" y="293" width="0.0311%" height="15" fill="rgb(241,108,4)" fg:x="223" fg:w="1"/><text x="7.1949%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.22%)</title><rect x="7.3186%" y="277" width="0.2180%" height="15" fill="rgb(247,173,49)" fg:x="235" fg:w="7"/><text x="7.5686%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="7.5366%" y="277" width="0.0311%" height="15" fill="rgb(224,114,35)" fg:x="242" fg:w="1"/><text x="7.7866%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="7.5366%" y="261" width="0.0311%" height="15" fill="rgb(245,159,27)" fg:x="242" fg:w="1"/><text x="7.7866%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="7.5677%" y="261" width="0.0311%" height="15" fill="rgb(245,172,44)" fg:x="243" fg:w="1"/><text x="7.8177%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="7.5989%" y="245" width="0.0311%" height="15" fill="rgb(236,23,11)" fg:x="244" fg:w="1"/><text x="7.8489%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="7.5989%" y="229" width="0.0311%" height="15" fill="rgb(205,117,38)" fg:x="244" fg:w="1"/><text x="7.8489%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 0.06%)</title><rect x="7.6300%" y="245" width="0.0623%" height="15" fill="rgb(237,72,25)" fg:x="245" fg:w="2"/><text x="7.8800%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memmove (1 samples, 0.03%)</title><rect x="7.8169%" y="213" width="0.0311%" height="15" fill="rgb(244,70,9)" fg:x="251" fg:w="1"/><text x="8.0669%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.06%)</title><rect x="7.8480%" y="213" width="0.0623%" height="15" fill="rgb(217,125,39)" fg:x="252" fg:w="2"/><text x="8.0980%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="7.9103%" y="213" width="0.0623%" height="15" fill="rgb(235,36,10)" fg:x="254" fg:w="2"/><text x="8.1603%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="7.9726%" y="213" width="0.0311%" height="15" fill="rgb(251,123,47)" fg:x="256" fg:w="1"/><text x="8.2226%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="8.0037%" y="213" width="0.0311%" height="15" fill="rgb(221,13,13)" fg:x="257" fg:w="1"/><text x="8.2537%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="8.0037%" y="197" width="0.0311%" height="15" fill="rgb(238,131,9)" fg:x="257" fg:w="1"/><text x="8.2537%" y="207.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (17 samples, 0.53%)</title><rect x="7.5677%" y="277" width="0.5294%" height="15" fill="rgb(211,50,8)" fg:x="243" fg:w="17"/><text x="7.8177%" y="287.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (16 samples, 0.50%)</title><rect x="7.5989%" y="261" width="0.4983%" height="15" fill="rgb(245,182,24)" fg:x="244" fg:w="16"/><text x="7.8489%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 0.40%)</title><rect x="7.6923%" y="245" width="0.4049%" height="15" fill="rgb(242,14,37)" fg:x="247" fg:w="13"/><text x="7.9423%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.28%)</title><rect x="7.8169%" y="229" width="0.2803%" height="15" fill="rgb(246,228,12)" fg:x="251" fg:w="9"/><text x="8.0669%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.06%)</title><rect x="8.0349%" y="213" width="0.0623%" height="15" fill="rgb(213,55,15)" fg:x="258" fg:w="2"/><text x="8.2849%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="8.0972%" y="245" width="0.0311%" height="15" fill="rgb(209,9,3)" fg:x="260" fg:w="1"/><text x="8.3472%" y="255.50"></text></g><g><title>mwpf`mwpf::dual_module_parallel::DualModuleParallel&lt;SerialModule,Queue&gt;::new_config (38 samples, 1.18%)</title><rect x="6.9760%" y="293" width="1.1834%" height="15" fill="rgb(230,59,30)" fg:x="224" fg:w="38"/><text x="7.2260%" y="303.50"></text></g><g><title>mwpf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.06%)</title><rect x="8.0972%" y="277" width="0.0623%" height="15" fill="rgb(209,121,21)" fg:x="260" fg:w="2"/><text x="8.3472%" y="287.50"></text></g><g><title>mwpf`hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.06%)</title><rect x="8.0972%" y="261" width="0.0623%" height="15" fill="rgb(220,109,13)" fg:x="260" fg:w="2"/><text x="8.3472%" y="271.50"></text></g><g><title>mwpf`hashbrown::raw::inner::RawTableInner::fallible_with_capacity (1 samples, 0.03%)</title><rect x="8.1283%" y="245" width="0.0311%" height="15" fill="rgb(232,18,1)" fg:x="261" fg:w="1"/><text x="8.3783%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.03%)</title><rect x="8.2217%" y="213" width="0.0311%" height="15" fill="rgb(215,41,42)" fg:x="264" fg:w="1"/><text x="8.4717%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="8.2529%" y="197" width="0.0311%" height="15" fill="rgb(224,123,36)" fg:x="265" fg:w="1"/><text x="8.5029%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.09%)</title><rect x="8.2217%" y="229" width="0.0934%" height="15" fill="rgb(240,125,3)" fg:x="264" fg:w="3"/><text x="8.4717%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.06%)</title><rect x="8.2529%" y="213" width="0.0623%" height="15" fill="rgb(205,98,50)" fg:x="265" fg:w="2"/><text x="8.5029%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="8.2840%" y="197" width="0.0311%" height="15" fill="rgb(205,185,37)" fg:x="266" fg:w="1"/><text x="8.5340%" y="207.50"></text></g><g><title>mwpf`mwpf::cli::PrimalDualType::build (54 samples, 1.68%)</title><rect x="6.6646%" y="341" width="1.6817%" height="15" fill="rgb(238,207,15)" fg:x="214" fg:w="54"/><text x="6.9146%" y="351.50"></text></g><g><title>mwpf`mwpf::mwpf_solver::SolverParallelUnionFind::new (54 samples, 1.68%)</title><rect x="6.6646%" y="325" width="1.6817%" height="15" fill="rgb(213,199,42)" fg:x="214" fg:w="54"/><text x="6.9146%" y="335.50"></text></g><g><title>mwpf`mwpf::mwpf_solver::SolverParallel::new (54 samples, 1.68%)</title><rect x="6.6646%" y="309" width="1.6817%" height="15" fill="rgb(235,201,11)" fg:x="214" fg:w="54"/><text x="6.9146%" y="319.50"></text></g><g><title>mwpf`mwpf::model_hypergraph::ModelHyperGraph::new (6 samples, 0.19%)</title><rect x="8.1595%" y="293" width="0.1869%" height="15" fill="rgb(207,46,11)" fg:x="262" fg:w="6"/><text x="8.4095%" y="303.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.12%)</title><rect x="8.2217%" y="277" width="0.1246%" height="15" fill="rgb(241,35,35)" fg:x="264" fg:w="4"/><text x="8.4717%" y="287.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (4 samples, 0.12%)</title><rect x="8.2217%" y="261" width="0.1246%" height="15" fill="rgb(243,32,47)" fg:x="264" fg:w="4"/><text x="8.4717%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.12%)</title><rect x="8.2217%" y="245" width="0.1246%" height="15" fill="rgb(247,202,23)" fg:x="264" fg:w="4"/><text x="8.4717%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="8.3152%" y="229" width="0.0311%" height="15" fill="rgb(219,102,11)" fg:x="267" fg:w="1"/><text x="8.5652%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="8.3463%" y="325" width="0.0311%" height="15" fill="rgb(243,110,44)" fg:x="268" fg:w="1"/><text x="8.5963%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="8.3775%" y="325" width="0.0623%" height="15" fill="rgb(222,74,54)" fg:x="269" fg:w="2"/><text x="8.6275%" y="335.50"></text></g><g><title>mwpf`mwpf::cli::Verifier::build (4 samples, 0.12%)</title><rect x="8.3463%" y="341" width="0.1246%" height="15" fill="rgb(216,99,12)" fg:x="268" fg:w="4"/><text x="8.5963%" y="351.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="8.4397%" y="325" width="0.0311%" height="15" fill="rgb(226,22,26)" fg:x="271" fg:w="1"/><text x="8.6897%" y="335.50"></text></g><g><title>mwpf`mwpf::example_codes::ExampleCode::get_initializer (2 samples, 0.06%)</title><rect x="8.4709%" y="341" width="0.0623%" height="15" fill="rgb(217,163,10)" fg:x="272" fg:w="2"/><text x="8.7209%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="8.5020%" y="325" width="0.0311%" height="15" fill="rgb(213,25,53)" fg:x="273" fg:w="1"/><text x="8.7520%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="8.7200%" y="325" width="0.0311%" height="15" fill="rgb(252,105,26)" fg:x="280" fg:w="1"/><text x="8.9700%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.06%)</title><rect x="8.7512%" y="325" width="0.0623%" height="15" fill="rgb(220,39,43)" fg:x="281" fg:w="2"/><text x="9.0012%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="8.8135%" y="325" width="0.0311%" height="15" fill="rgb(229,68,48)" fg:x="283" fg:w="1"/><text x="9.0635%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="8.8446%" y="325" width="0.0311%" height="15" fill="rgb(252,8,32)" fg:x="284" fg:w="1"/><text x="9.0946%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="8.8757%" y="309" width="0.0311%" height="15" fill="rgb(223,20,43)" fg:x="285" fg:w="1"/><text x="9.1257%" y="319.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.19%)</title><rect x="9.0937%" y="293" width="0.1869%" height="15" fill="rgb(229,81,49)" fg:x="292" fg:w="6"/><text x="9.3437%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 0.50%)</title><rect x="8.8757%" y="325" width="0.4983%" height="15" fill="rgb(236,28,36)" fg:x="285" fg:w="16"/><text x="9.1257%" y="335.50"></text></g><g><title>mwpf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.47%)</title><rect x="8.9069%" y="309" width="0.4671%" height="15" fill="rgb(249,185,26)" fg:x="286" fg:w="15"/><text x="9.1569%" y="319.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (3 samples, 0.09%)</title><rect x="9.2806%" y="293" width="0.0934%" height="15" fill="rgb(249,174,33)" fg:x="298" fg:w="3"/><text x="9.5306%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.06%)</title><rect x="9.4363%" y="309" width="0.0623%" height="15" fill="rgb(233,201,37)" fg:x="303" fg:w="2"/><text x="9.6863%" y="319.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (7 samples, 0.22%)</title><rect x="9.3740%" y="325" width="0.2180%" height="15" fill="rgb(221,78,26)" fg:x="301" fg:w="7"/><text x="9.6240%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (3 samples, 0.09%)</title><rect x="9.4986%" y="309" width="0.0934%" height="15" fill="rgb(250,127,30)" fg:x="305" fg:w="3"/><text x="9.7486%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (3 samples, 0.09%)</title><rect x="9.4986%" y="293" width="0.0934%" height="15" fill="rgb(230,49,44)" fg:x="305" fg:w="3"/><text x="9.7486%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.09%)</title><rect x="9.4986%" y="277" width="0.0934%" height="15" fill="rgb(229,67,23)" fg:x="305" fg:w="3"/><text x="9.7486%" y="287.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.06%)</title><rect x="9.6543%" y="309" width="0.0623%" height="15" fill="rgb(249,83,47)" fg:x="310" fg:w="2"/><text x="9.9043%" y="319.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="9.7166%" y="309" width="0.0311%" height="15" fill="rgb(215,43,3)" fg:x="312" fg:w="1"/><text x="9.9666%" y="319.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="9.8412%" y="293" width="0.0934%" height="15" fill="rgb(238,154,13)" fg:x="316" fg:w="3"/><text x="10.0912%" y="303.50"></text></g><g><title>mwpf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (13 samples, 0.40%)</title><rect x="9.5920%" y="325" width="0.4049%" height="15" fill="rgb(219,56,2)" fg:x="308" fg:w="13"/><text x="9.8420%" y="335.50"></text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (8 samples, 0.25%)</title><rect x="9.7477%" y="309" width="0.2491%" height="15" fill="rgb(233,0,4)" fg:x="313" fg:w="8"/><text x="9.9977%" y="319.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (2 samples, 0.06%)</title><rect x="9.9346%" y="293" width="0.0623%" height="15" fill="rgb(235,30,7)" fg:x="319" fg:w="2"/><text x="10.1846%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.03%)</title><rect x="10.0903%" y="277" width="0.0311%" height="15" fill="rgb(250,79,13)" fg:x="324" fg:w="1"/><text x="10.3403%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="10.1215%" y="245" width="0.0311%" height="15" fill="rgb(211,146,34)" fg:x="325" fg:w="1"/><text x="10.3715%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="10.1526%" y="229" width="0.0311%" height="15" fill="rgb(228,22,38)" fg:x="326" fg:w="1"/><text x="10.4026%" y="239.50"></text></g><g><title>mwpf`mwpf::example_codes::ExampleCode::fill_vertices (7 samples, 0.22%)</title><rect x="9.9969%" y="325" width="0.2180%" height="15" fill="rgb(235,168,5)" fg:x="321" fg:w="7"/><text x="10.2469%" y="335.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.12%)</title><rect x="10.0903%" y="309" width="0.1246%" height="15" fill="rgb(221,155,16)" fg:x="324" fg:w="4"/><text x="10.3403%" y="319.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (4 samples, 0.12%)</title><rect x="10.0903%" y="293" width="0.1246%" height="15" fill="rgb(215,215,53)" fg:x="324" fg:w="4"/><text x="10.3403%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.09%)</title><rect x="10.1215%" y="277" width="0.0934%" height="15" fill="rgb(223,4,10)" fg:x="325" fg:w="3"/><text x="10.3715%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.09%)</title><rect x="10.1215%" y="261" width="0.0934%" height="15" fill="rgb(234,103,6)" fg:x="325" fg:w="3"/><text x="10.3715%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.06%)</title><rect x="10.1526%" y="245" width="0.0623%" height="15" fill="rgb(227,97,0)" fg:x="326" fg:w="2"/><text x="10.4026%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="10.1837%" y="229" width="0.0311%" height="15" fill="rgb(234,150,53)" fg:x="327" fg:w="1"/><text x="10.4337%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="10.1837%" y="213" width="0.0311%" height="15" fill="rgb(228,201,54)" fg:x="327" fg:w="1"/><text x="10.4337%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.12%)</title><rect x="10.2149%" y="309" width="0.1246%" height="15" fill="rgb(222,22,37)" fg:x="328" fg:w="4"/><text x="10.4649%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.06%)</title><rect x="10.3395%" y="309" width="0.0623%" height="15" fill="rgb(237,53,32)" fg:x="332" fg:w="2"/><text x="10.5895%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.03%)</title><rect x="10.4017%" y="309" width="0.0311%" height="15" fill="rgb(233,25,53)" fg:x="334" fg:w="1"/><text x="10.6517%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.09%)</title><rect x="10.4329%" y="309" width="0.0934%" height="15" fill="rgb(210,40,34)" fg:x="335" fg:w="3"/><text x="10.6829%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="10.5263%" y="309" width="0.0311%" height="15" fill="rgb(241,220,44)" fg:x="338" fg:w="1"/><text x="10.7763%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (16 samples, 0.50%)</title><rect x="10.5575%" y="309" width="0.4983%" height="15" fill="rgb(235,28,35)" fg:x="339" fg:w="16"/><text x="10.8075%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.09%)</title><rect x="11.0557%" y="309" width="0.0934%" height="15" fill="rgb(210,56,17)" fg:x="355" fg:w="3"/><text x="11.3057%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="11.1492%" y="309" width="0.0311%" height="15" fill="rgb(224,130,29)" fg:x="358" fg:w="1"/><text x="11.3992%" y="319.50"></text></g><g><title>mwpf`DYLD-STUB$$free (3 samples, 0.09%)</title><rect x="11.1803%" y="309" width="0.0934%" height="15" fill="rgb(235,212,8)" fg:x="359" fg:w="3"/><text x="11.4303%" y="319.50"></text></g><g><title>mwpf`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="11.2737%" y="309" width="0.0311%" height="15" fill="rgb(223,33,50)" fg:x="362" fg:w="1"/><text x="11.5237%" y="319.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.03%)</title><rect x="11.3049%" y="309" width="0.0311%" height="15" fill="rgb(219,149,13)" fg:x="363" fg:w="1"/><text x="11.5549%" y="319.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (4 samples, 0.12%)</title><rect x="11.3360%" y="309" width="0.1246%" height="15" fill="rgb(250,156,29)" fg:x="364" fg:w="4"/><text x="11.5860%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (1 samples, 0.03%)</title><rect x="13.0489%" y="293" width="0.0311%" height="15" fill="rgb(216,193,19)" fg:x="419" fg:w="1"/><text x="13.2989%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.12%)</title><rect x="13.0800%" y="293" width="0.1246%" height="15" fill="rgb(216,135,14)" fg:x="420" fg:w="4"/><text x="13.3300%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (2 samples, 0.06%)</title><rect x="13.2046%" y="293" width="0.0623%" height="15" fill="rgb(241,47,5)" fg:x="424" fg:w="2"/><text x="13.4546%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free (14 samples, 0.44%)</title><rect x="13.2669%" y="293" width="0.4360%" height="15" fill="rgb(233,42,35)" fg:x="426" fg:w="14"/><text x="13.5169%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (9 samples, 0.28%)</title><rect x="14.8240%" y="261" width="0.2803%" height="15" fill="rgb(231,13,6)" fg:x="476" fg:w="9"/><text x="15.0740%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (46 samples, 1.43%)</title><rect x="13.7029%" y="293" width="1.4326%" height="15" fill="rgb(207,181,40)" fg:x="440" fg:w="46"/><text x="13.9529%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (41 samples, 1.28%)</title><rect x="13.8586%" y="277" width="1.2769%" height="15" fill="rgb(254,173,49)" fg:x="445" fg:w="41"/><text x="14.1086%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.03%)</title><rect x="15.1043%" y="261" width="0.0311%" height="15" fill="rgb(221,1,38)" fg:x="485" fg:w="1"/><text x="15.3543%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (23 samples, 0.72%)</title><rect x="15.1355%" y="293" width="0.7163%" height="15" fill="rgb(206,124,46)" fg:x="486" fg:w="23"/><text x="15.3855%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (12 samples, 0.37%)</title><rect x="15.4780%" y="277" width="0.3737%" height="15" fill="rgb(249,21,11)" fg:x="497" fg:w="12"/><text x="15.7280%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (6 samples, 0.19%)</title><rect x="15.8518%" y="293" width="0.1869%" height="15" fill="rgb(222,201,40)" fg:x="509" fg:w="6"/><text x="16.1018%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.12%)</title><rect x="16.0386%" y="293" width="0.1246%" height="15" fill="rgb(235,61,29)" fg:x="515" fg:w="4"/><text x="16.2886%" y="303.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.03%)</title><rect x="16.1632%" y="293" width="0.0311%" height="15" fill="rgb(219,207,3)" fg:x="519" fg:w="1"/><text x="16.4132%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.06%)</title><rect x="16.1943%" y="293" width="0.0623%" height="15" fill="rgb(222,56,46)" fg:x="520" fg:w="2"/><text x="16.4443%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.16%)</title><rect x="16.2566%" y="293" width="0.1557%" height="15" fill="rgb(239,76,54)" fg:x="522" fg:w="5"/><text x="16.5066%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="16.4123%" y="293" width="0.0311%" height="15" fill="rgb(231,124,27)" fg:x="527" fg:w="1"/><text x="16.6623%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="16.4435%" y="293" width="0.1246%" height="15" fill="rgb(249,195,6)" fg:x="528" fg:w="4"/><text x="16.6935%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="16.5992%" y="277" width="0.0311%" height="15" fill="rgb(237,174,47)" fg:x="533" fg:w="1"/><text x="16.8492%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.16%)</title><rect x="16.5680%" y="293" width="0.1557%" height="15" fill="rgb(206,201,31)" fg:x="532" fg:w="5"/><text x="16.8180%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="16.6303%" y="277" width="0.0934%" height="15" fill="rgb(231,57,52)" fg:x="534" fg:w="3"/><text x="16.8803%" y="287.50"></text></g><g><title>mwpf`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (16 samples, 0.50%)</title><rect x="16.7238%" y="293" width="0.4983%" height="15" fill="rgb(248,177,22)" fg:x="537" fg:w="16"/><text x="16.9738%" y="303.50"></text></g><g><title>mwpf`DYLD-STUB$$free (5 samples, 0.16%)</title><rect x="17.2220%" y="293" width="0.1557%" height="15" fill="rgb(215,211,37)" fg:x="553" fg:w="5"/><text x="17.4720%" y="303.50"></text></g><g><title>mwpf`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="17.3778%" y="293" width="0.0311%" height="15" fill="rgb(241,128,51)" fg:x="558" fg:w="1"/><text x="17.6278%" y="303.50"></text></g><g><title>mwpf`__rdl_dealloc (1 samples, 0.03%)</title><rect x="17.4089%" y="293" width="0.0311%" height="15" fill="rgb(227,165,31)" fg:x="559" fg:w="1"/><text x="17.6589%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.06%)</title><rect x="17.4400%" y="293" width="0.0623%" height="15" fill="rgb(228,167,24)" fg:x="560" fg:w="2"/><text x="17.6900%" y="303.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.16%)</title><rect x="17.5023%" y="293" width="0.1557%" height="15" fill="rgb(228,143,12)" fg:x="562" fg:w="5"/><text x="17.7523%" y="303.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.12%)</title><rect x="17.6581%" y="293" width="0.1246%" height="15" fill="rgb(249,149,8)" fg:x="567" fg:w="4"/><text x="17.9081%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.12%)</title><rect x="17.6581%" y="277" width="0.1246%" height="15" fill="rgb(243,35,44)" fg:x="567" fg:w="4"/><text x="17.9081%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.06%)</title><rect x="17.7203%" y="261" width="0.0623%" height="15" fill="rgb(246,89,9)" fg:x="569" fg:w="2"/><text x="17.9703%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="17.7515%" y="245" width="0.0311%" height="15" fill="rgb(233,213,13)" fg:x="570" fg:w="1"/><text x="18.0015%" y="255.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (6 samples, 0.19%)</title><rect x="17.7826%" y="293" width="0.1869%" height="15" fill="rgb(233,141,41)" fg:x="571" fg:w="6"/><text x="18.0326%" y="303.50"></text></g><g><title>mwpf`core::slice::sort::insertion_sort_shift_left (7 samples, 0.22%)</title><rect x="17.9695%" y="293" width="0.2180%" height="15" fill="rgb(239,167,4)" fg:x="577" fg:w="7"/><text x="18.2195%" y="303.50"></text></g><g><title>mwpf`core::slice::sort::merge_sort (1 samples, 0.03%)</title><rect x="18.1875%" y="293" width="0.0311%" height="15" fill="rgb(209,217,16)" fg:x="584" fg:w="1"/><text x="18.4375%" y="303.50"></text></g><g><title>mwpf`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.44%)</title><rect x="18.6235%" y="277" width="0.4360%" height="15" fill="rgb(219,88,35)" fg:x="598" fg:w="14"/><text x="18.8735%" y="287.50"></text></g><g><title>mwpf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (30 samples, 0.93%)</title><rect x="18.2186%" y="293" width="0.9343%" height="15" fill="rgb(220,193,23)" fg:x="585" fg:w="30"/><text x="18.4686%" y="303.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (3 samples, 0.09%)</title><rect x="19.0595%" y="277" width="0.0934%" height="15" fill="rgb(230,90,52)" fg:x="612" fg:w="3"/><text x="19.3095%" y="287.50"></text></g><g><title>mwpf`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12 samples, 0.37%)</title><rect x="19.2775%" y="277" width="0.3737%" height="15" fill="rgb(252,106,19)" fg:x="619" fg:w="12"/><text x="19.5275%" y="287.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (12 samples, 0.37%)</title><rect x="19.6512%" y="277" width="0.3737%" height="15" fill="rgb(206,74,20)" fg:x="631" fg:w="12"/><text x="19.9012%" y="287.50"></text></g><g><title>mwpf`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (29 samples, 0.90%)</title><rect x="20.4609%" y="261" width="0.9031%" height="15" fill="rgb(230,138,44)" fg:x="657" fg:w="29"/><text x="20.7109%" y="271.50"></text></g><g><title>mwpf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (74 samples, 2.30%)</title><rect x="19.1529%" y="293" width="2.3046%" height="15" fill="rgb(235,182,43)" fg:x="615" fg:w="74"/><text x="19.4029%" y="303.50">m..</text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (46 samples, 1.43%)</title><rect x="20.0249%" y="277" width="1.4326%" height="15" fill="rgb(242,16,51)" fg:x="643" fg:w="46"/><text x="20.2749%" y="287.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (3 samples, 0.09%)</title><rect x="21.3641%" y="261" width="0.0934%" height="15" fill="rgb(248,9,4)" fg:x="686" fg:w="3"/><text x="21.6141%" y="271.50"></text></g><g><title>libsystem_m.dylib`log (5 samples, 0.16%)</title><rect x="21.7378%" y="277" width="0.1557%" height="15" fill="rgb(210,31,22)" fg:x="698" fg:w="5"/><text x="21.9878%" y="287.50"></text></g><g><title>mwpf`__rdl_realloc (1 samples, 0.03%)</title><rect x="21.8935%" y="261" width="0.0311%" height="15" fill="rgb(239,54,39)" fg:x="703" fg:w="1"/><text x="22.1435%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 0.06%)</title><rect x="21.9246%" y="213" width="0.0623%" height="15" fill="rgb(230,99,41)" fg:x="704" fg:w="2"/><text x="22.1746%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.06%)</title><rect x="21.9869%" y="197" width="0.0623%" height="15" fill="rgb(253,106,12)" fg:x="706" fg:w="2"/><text x="22.2369%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (1 samples, 0.03%)</title><rect x="22.0492%" y="181" width="0.0311%" height="15" fill="rgb(213,46,41)" fg:x="708" fg:w="1"/><text x="22.2992%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (6 samples, 0.19%)</title><rect x="21.9869%" y="213" width="0.1869%" height="15" fill="rgb(215,133,35)" fg:x="706" fg:w="6"/><text x="22.2369%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (4 samples, 0.12%)</title><rect x="22.0492%" y="197" width="0.1246%" height="15" fill="rgb(213,28,5)" fg:x="708" fg:w="4"/><text x="22.2992%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (3 samples, 0.09%)</title><rect x="22.0803%" y="181" width="0.0934%" height="15" fill="rgb(215,77,49)" fg:x="709" fg:w="3"/><text x="22.3303%" y="191.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.31%)</title><rect x="21.8935%" y="277" width="0.3114%" height="15" fill="rgb(248,100,22)" fg:x="703" fg:w="10"/><text x="22.1435%" y="287.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (9 samples, 0.28%)</title><rect x="21.9246%" y="261" width="0.2803%" height="15" fill="rgb(208,67,9)" fg:x="704" fg:w="9"/><text x="22.1746%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.28%)</title><rect x="21.9246%" y="245" width="0.2803%" height="15" fill="rgb(219,133,21)" fg:x="704" fg:w="9"/><text x="22.1746%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.28%)</title><rect x="21.9246%" y="229" width="0.2803%" height="15" fill="rgb(246,46,29)" fg:x="704" fg:w="9"/><text x="22.1746%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="22.1738%" y="213" width="0.0311%" height="15" fill="rgb(246,185,52)" fg:x="712" fg:w="1"/><text x="22.4238%" y="223.50"></text></g><g><title>mwpf`qecp::model_hypergraph::ModelHyperedgeGroup::add (25 samples, 0.78%)</title><rect x="21.4575%" y="293" width="0.7786%" height="15" fill="rgb(252,136,11)" fg:x="689" fg:w="25"/><text x="21.7075%" y="303.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="22.2049%" y="277" width="0.0311%" height="15" fill="rgb(219,138,53)" fg:x="713" fg:w="1"/><text x="22.4549%" y="287.50"></text></g><g><title>mwpf`qecp::simulator::Simulator::clear_all_errors (1 samples, 0.03%)</title><rect x="22.2361%" y="293" width="0.0311%" height="15" fill="rgb(211,51,23)" fg:x="714" fg:w="1"/><text x="22.4861%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (3 samples, 0.09%)</title><rect x="38.2747%" y="277" width="0.0934%" height="15" fill="rgb(247,221,28)" fg:x="1229" fg:w="3"/><text x="38.5247%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="38.3681%" y="277" width="0.0623%" height="15" fill="rgb(251,222,45)" fg:x="1232" fg:w="2"/><text x="38.6181%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (24 samples, 0.75%)</title><rect x="38.4304%" y="277" width="0.7474%" height="15" fill="rgb(217,162,53)" fg:x="1234" fg:w="24"/><text x="38.6804%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="39.1778%" y="277" width="0.0311%" height="15" fill="rgb(229,93,14)" fg:x="1258" fg:w="1"/><text x="39.4278%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.06%)</title><rect x="39.2090%" y="277" width="0.0623%" height="15" fill="rgb(209,67,49)" fg:x="1259" fg:w="2"/><text x="39.4590%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (15 samples, 0.47%)</title><rect x="39.2713%" y="277" width="0.4671%" height="15" fill="rgb(213,87,29)" fg:x="1261" fg:w="15"/><text x="39.5213%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.22%)</title><rect x="39.7384%" y="277" width="0.2180%" height="15" fill="rgb(205,151,52)" fg:x="1276" fg:w="7"/><text x="39.9884%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.09%)</title><rect x="39.9564%" y="277" width="0.0934%" height="15" fill="rgb(253,215,39)" fg:x="1283" fg:w="3"/><text x="40.2064%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (12 samples, 0.37%)</title><rect x="40.0498%" y="277" width="0.3737%" height="15" fill="rgb(221,220,41)" fg:x="1286" fg:w="12"/><text x="40.2998%" y="287.50"></text></g><g><title>mwpf`__rdl_alloc (2 samples, 0.06%)</title><rect x="40.4235%" y="277" width="0.0623%" height="15" fill="rgb(218,133,21)" fg:x="1298" fg:w="2"/><text x="40.6735%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (3 samples, 0.09%)</title><rect x="42.3233%" y="245" width="0.0934%" height="15" fill="rgb(221,193,43)" fg:x="1359" fg:w="3"/><text x="42.5733%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (3 samples, 0.09%)</title><rect x="42.5413%" y="229" width="0.0934%" height="15" fill="rgb(240,128,52)" fg:x="1366" fg:w="3"/><text x="42.7913%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (3 samples, 0.09%)</title><rect x="42.5413%" y="213" width="0.0934%" height="15" fill="rgb(253,114,12)" fg:x="1366" fg:w="3"/><text x="42.7913%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.16%)</title><rect x="42.6347%" y="229" width="0.1557%" height="15" fill="rgb(215,223,47)" fg:x="1369" fg:w="5"/><text x="42.8847%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.72%)</title><rect x="42.2298%" y="261" width="0.7163%" height="15" fill="rgb(248,225,23)" fg:x="1356" fg:w="23"/><text x="42.4798%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.53%)</title><rect x="42.4167%" y="245" width="0.5294%" height="15" fill="rgb(250,108,0)" fg:x="1362" fg:w="17"/><text x="42.6667%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.16%)</title><rect x="42.7904%" y="229" width="0.1557%" height="15" fill="rgb(228,208,7)" fg:x="1374" fg:w="5"/><text x="43.0404%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.06%)</title><rect x="42.9461%" y="261" width="0.0623%" height="15" fill="rgb(244,45,10)" fg:x="1379" fg:w="2"/><text x="43.1961%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="43.0084%" y="261" width="0.0311%" height="15" fill="rgb(207,125,25)" fg:x="1381" fg:w="1"/><text x="43.2584%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (84 samples, 2.62%)</title><rect x="40.4858%" y="277" width="2.6160%" height="15" fill="rgb(210,195,18)" fg:x="1300" fg:w="84"/><text x="40.7358%" y="287.50">mw..</text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.06%)</title><rect x="43.0396%" y="261" width="0.0623%" height="15" fill="rgb(249,80,12)" fg:x="1382" fg:w="2"/><text x="43.2896%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.03%)</title><rect x="43.1018%" y="277" width="0.0311%" height="15" fill="rgb(221,65,9)" fg:x="1384" fg:w="1"/><text x="43.3518%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (7 samples, 0.22%)</title><rect x="43.2887%" y="261" width="0.2180%" height="15" fill="rgb(235,49,36)" fg:x="1390" fg:w="7"/><text x="43.5387%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (11 samples, 0.34%)</title><rect x="43.5067%" y="261" width="0.3426%" height="15" fill="rgb(225,32,20)" fg:x="1397" fg:w="11"/><text x="43.7567%" y="271.50"></text></g><g><title>mwpf`__rdl_alloc (3 samples, 0.09%)</title><rect x="43.8493%" y="261" width="0.0934%" height="15" fill="rgb(215,141,46)" fg:x="1408" fg:w="3"/><text x="44.0993%" y="271.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (28 samples, 0.87%)</title><rect x="43.1330%" y="277" width="0.8720%" height="15" fill="rgb(250,160,47)" fg:x="1385" fg:w="28"/><text x="43.3830%" y="287.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (2 samples, 0.06%)</title><rect x="43.9427%" y="261" width="0.0623%" height="15" fill="rgb(216,222,40)" fg:x="1411" fg:w="2"/><text x="44.1927%" y="271.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="44.0050%" y="277" width="0.0311%" height="15" fill="rgb(234,217,39)" fg:x="1413" fg:w="1"/><text x="44.2550%" y="287.50"></text></g><g><title>mwpf`qecp::simulator::Simulator::fast_measurement_given_few_errors (975 samples, 30.36%)</title><rect x="22.2672%" y="293" width="30.3644%" height="15" fill="rgb(207,178,40)" fg:x="715" fg:w="975"/><text x="22.5172%" y="303.50">mwpf`qecp::simulator::Simulator::fast_measurement..</text></g><g><title>mwpf`qecp::simulator::Simulator::propagate_error_from (276 samples, 8.60%)</title><rect x="44.0361%" y="277" width="8.5955%" height="15" fill="rgb(221,136,13)" fg:x="1414" fg:w="276"/><text x="44.2861%" y="287.50">mwpf`qecp::s..</text></g><g><title>mwpf`qecp::simulator::Simulator::propagate_error_from (34 samples, 1.06%)</title><rect x="52.6316%" y="293" width="1.0589%" height="15" fill="rgb(249,199,10)" fg:x="1690" fg:w="34"/><text x="52.8816%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.06%)</title><rect x="53.6904%" y="277" width="0.0623%" height="15" fill="rgb(249,222,13)" fg:x="1724" fg:w="2"/><text x="53.9404%" y="287.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.03%)</title><rect x="53.7527%" y="277" width="0.0311%" height="15" fill="rgb(244,185,38)" fg:x="1726" fg:w="1"/><text x="54.0027%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="53.8462%" y="245" width="0.0311%" height="15" fill="rgb(236,202,9)" fg:x="1729" fg:w="1"/><text x="54.0962%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (5 samples, 0.16%)</title><rect x="53.8773%" y="229" width="0.1557%" height="15" fill="rgb(250,229,37)" fg:x="1730" fg:w="5"/><text x="54.1273%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (1 samples, 0.03%)</title><rect x="54.1264%" y="213" width="0.0311%" height="15" fill="rgb(206,174,23)" fg:x="1738" fg:w="1"/><text x="54.3764%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.37%)</title><rect x="53.8150%" y="261" width="0.3737%" height="15" fill="rgb(211,33,43)" fg:x="1728" fg:w="12"/><text x="54.0650%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.31%)</title><rect x="53.8773%" y="245" width="0.3114%" height="15" fill="rgb(245,58,50)" fg:x="1730" fg:w="10"/><text x="54.1273%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.16%)</title><rect x="54.0330%" y="229" width="0.1557%" height="15" fill="rgb(244,68,36)" fg:x="1735" fg:w="5"/><text x="54.2830%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.03%)</title><rect x="54.1576%" y="213" width="0.0311%" height="15" fill="rgb(232,229,15)" fg:x="1739" fg:w="1"/><text x="54.4076%" y="223.50"></text></g><g><title>mwpf`qecp::model_hypergraph::ModelHypergraph::build_with_weight_function_region (1,373 samples, 42.76%)</title><rect x="11.4606%" y="309" width="42.7593%" height="15" fill="rgb(254,30,23)" fg:x="368" fg:w="1373"/><text x="11.7106%" y="319.50">mwpf`qecp::model_hypergraph::ModelHypergraph::build_with_weight_functi..</text></g><g><title>mwpf`qecp::simulator::SparseErrorPattern::add (17 samples, 0.53%)</title><rect x="53.6904%" y="293" width="0.5294%" height="15" fill="rgb(235,160,14)" fg:x="1724" fg:w="17"/><text x="53.9404%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (14 samples, 0.44%)</title><rect x="53.7839%" y="277" width="0.4360%" height="15" fill="rgb(212,155,44)" fg:x="1727" fg:w="14"/><text x="54.0339%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="54.1887%" y="261" width="0.0311%" height="15" fill="rgb(226,2,50)" fg:x="1740" fg:w="1"/><text x="54.4387%" y="271.50"></text></g><g><title>mwpf`qecp::model_hypergraph::ModelHypergraph::build (1,414 samples, 44.04%)</title><rect x="10.2149%" y="325" width="44.0361%" height="15" fill="rgb(234,177,6)" fg:x="328" fg:w="1414"/><text x="10.4649%" y="335.50">mwpf`qecp::model_hypergraph::ModelHypergraph::build</text></g><g><title>mwpf`qecp::simulator::Simulator::fast_measurement_given_few_errors (1 samples, 0.03%)</title><rect x="54.2199%" y="309" width="0.0311%" height="15" fill="rgb(217,24,9)" fg:x="1741" fg:w="1"/><text x="54.4699%" y="319.50"></text></g><g><title>mwpf`qecp::noise_model::NoiseModel::new (3 samples, 0.09%)</title><rect x="54.2510%" y="325" width="0.0934%" height="15" fill="rgb(220,13,46)" fg:x="1742" fg:w="3"/><text x="54.5010%" y="335.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.09%)</title><rect x="54.2510%" y="309" width="0.0934%" height="15" fill="rgb(239,221,27)" fg:x="1742" fg:w="3"/><text x="54.5010%" y="319.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.09%)</title><rect x="54.2510%" y="293" width="0.0934%" height="15" fill="rgb(222,198,25)" fg:x="1742" fg:w="3"/><text x="54.5010%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.09%)</title><rect x="54.2510%" y="277" width="0.0934%" height="15" fill="rgb(211,99,13)" fg:x="1742" fg:w="3"/><text x="54.5010%" y="287.50"></text></g><g><title>mwpf`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.09%)</title><rect x="54.2510%" y="261" width="0.0934%" height="15" fill="rgb(232,111,31)" fg:x="1742" fg:w="3"/><text x="54.5010%" y="271.50"></text></g><g><title>mwpf`qecp::noise_model::NoiseModel::set_node (1 samples, 0.03%)</title><rect x="54.3444%" y="325" width="0.0311%" height="15" fill="rgb(245,82,37)" fg:x="1745" fg:w="1"/><text x="54.5944%" y="335.50"></text></g><g><title>mwpf`qecp::simulator::Simulator::compress_error_rates (5 samples, 0.16%)</title><rect x="54.3756%" y="325" width="0.1557%" height="15" fill="rgb(227,149,46)" fg:x="1746" fg:w="5"/><text x="54.6256%" y="335.50"></text></g><g><title>mwpf`core::hash::BuildHasher::hash_one (2 samples, 0.06%)</title><rect x="54.4690%" y="309" width="0.0623%" height="15" fill="rgb(218,36,50)" fg:x="1749" fg:w="2"/><text x="54.7190%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.06%)</title><rect x="54.5313%" y="309" width="0.0623%" height="15" fill="rgb(226,80,48)" fg:x="1751" fg:w="2"/><text x="54.7813%" y="319.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.03%)</title><rect x="54.5936%" y="309" width="0.0311%" height="15" fill="rgb(238,224,15)" fg:x="1753" fg:w="1"/><text x="54.8436%" y="319.50"></text></g><g><title>mwpf`qecp::code_builder::build_code (5 samples, 0.16%)</title><rect x="54.6247%" y="309" width="0.1557%" height="15" fill="rgb(241,136,10)" fg:x="1754" fg:w="5"/><text x="54.8747%" y="319.50"></text></g><g><title>mwpf`qecp::code_builder::build_code::_{{closure}} (1 samples, 0.03%)</title><rect x="54.7804%" y="309" width="0.0311%" height="15" fill="rgb(208,32,45)" fg:x="1759" fg:w="1"/><text x="55.0304%" y="319.50"></text></g><g><title>mwpf`qecp::simulator::Simulator::new (12 samples, 0.37%)</title><rect x="54.5313%" y="325" width="0.3737%" height="15" fill="rgb(207,135,9)" fg:x="1751" fg:w="12"/><text x="54.7813%" y="335.50"></text></g><g><title>mwpf`qecp::code_builder::build_code (3 samples, 0.09%)</title><rect x="54.8116%" y="309" width="0.0934%" height="15" fill="rgb(206,86,44)" fg:x="1760" fg:w="3"/><text x="55.0616%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.09%)</title><rect x="54.8116%" y="293" width="0.0934%" height="15" fill="rgb(245,177,15)" fg:x="1760" fg:w="3"/><text x="55.0616%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.06%)</title><rect x="54.8427%" y="277" width="0.0623%" height="15" fill="rgb(206,64,50)" fg:x="1761" fg:w="2"/><text x="55.0927%" y="287.50"></text></g><g><title>mwpf`mwpf::example_codes::QECPlaygroundCode::new (1,490 samples, 46.40%)</title><rect x="8.5332%" y="341" width="46.4030%" height="15" fill="rgb(234,36,40)" fg:x="274" fg:w="1490"/><text x="8.7832%" y="351.50">mwpf`mwpf::example_codes::QECPlaygroundCode::new</text></g><g><title>mwpf`qecp::simulator::Simulator::set_error_rates (1 samples, 0.03%)</title><rect x="54.9050%" y="325" width="0.0311%" height="15" fill="rgb(213,64,8)" fg:x="1763" fg:w="1"/><text x="55.1550%" y="335.50"></text></g><g><title>mwpf`qecp::noise_model::NoiseModel::set_node (1 samples, 0.03%)</title><rect x="54.9050%" y="309" width="0.0311%" height="15" fill="rgb(210,75,36)" fg:x="1763" fg:w="1"/><text x="55.1550%" y="319.50"></text></g><g><title>dyld`start (1,765 samples, 54.97%)</title><rect x="0.0000%" y="469" width="54.9673%" height="15" fill="rgb(229,88,21)" fg:x="0" fg:w="1765"/><text x="0.2500%" y="479.50">dyld`start</text></g><g><title>mwpf`main (1,765 samples, 54.97%)</title><rect x="0.0000%" y="453" width="54.9673%" height="15" fill="rgb(252,204,47)" fg:x="0" fg:w="1765"/><text x="0.2500%" y="463.50">mwpf`main</text></g><g><title>mwpf`std::rt::lang_start (1,765 samples, 54.97%)</title><rect x="0.0000%" y="437" width="54.9673%" height="15" fill="rgb(208,77,27)" fg:x="0" fg:w="1765"/><text x="0.2500%" y="447.50">mwpf`std::rt::lang_start</text></g><g><title>mwpf`std::rt::lang_start_internal (1,765 samples, 54.97%)</title><rect x="0.0000%" y="421" width="54.9673%" height="15" fill="rgb(221,76,26)" fg:x="0" fg:w="1765"/><text x="0.2500%" y="431.50">mwpf`std::rt::lang_start_internal</text></g><g><title>mwpf`std::rt::lang_start::_{{closure}} (1,765 samples, 54.97%)</title><rect x="0.0000%" y="405" width="54.9673%" height="15" fill="rgb(225,139,18)" fg:x="0" fg:w="1765"/><text x="0.2500%" y="415.50">mwpf`std::rt::lang_start::_{{closure}}</text></g><g><title>mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace (1,765 samples, 54.97%)</title><rect x="0.0000%" y="389" width="54.9673%" height="15" fill="rgb(230,137,11)" fg:x="0" fg:w="1765"/><text x="0.2500%" y="399.50">mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mwpf`mwpf::main (1,765 samples, 54.97%)</title><rect x="0.0000%" y="373" width="54.9673%" height="15" fill="rgb(212,28,1)" fg:x="0" fg:w="1765"/><text x="0.2500%" y="383.50">mwpf`mwpf::main</text></g><g><title>mwpf`mwpf::cli::Cli::run (1,765 samples, 54.97%)</title><rect x="0.0000%" y="357" width="54.9673%" height="15" fill="rgb(248,164,17)" fg:x="0" fg:w="1765"/><text x="0.2500%" y="367.50">mwpf`mwpf::cli::Cli::run</text></g><g><title>mwpf`mwpf::util::PartitionConfig::info (1 samples, 0.03%)</title><rect x="54.9362%" y="341" width="0.0311%" height="15" fill="rgb(222,171,42)" fg:x="1764" fg:w="1"/><text x="55.1862%" y="351.50"></text></g><g><title>mwpf`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.03%)</title><rect x="54.9362%" y="325" width="0.0311%" height="15" fill="rgb(243,84,45)" fg:x="1764" fg:w="1"/><text x="55.1862%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__exit (6 samples, 0.19%)</title><rect x="54.9673%" y="469" width="0.1869%" height="15" fill="rgb(252,49,23)" fg:x="1765" fg:w="6"/><text x="55.2173%" y="479.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="55.1542%" y="373" width="0.0311%" height="15" fill="rgb(215,19,7)" fg:x="1771" fg:w="1"/><text x="55.4042%" y="383.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="55.1542%" y="357" width="0.0311%" height="15" fill="rgb(238,81,41)" fg:x="1771" fg:w="1"/><text x="55.4042%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.03%)</title><rect x="55.1542%" y="341" width="0.0311%" height="15" fill="rgb(210,199,37)" fg:x="1771" fg:w="1"/><text x="55.4042%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.03%)</title><rect x="55.1542%" y="325" width="0.0311%" height="15" fill="rgb(244,192,49)" fg:x="1771" fg:w="1"/><text x="55.4042%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`swtch_pri (1 samples, 0.03%)</title><rect x="55.1853%" y="357" width="0.0311%" height="15" fill="rgb(226,211,11)" fg:x="1772" fg:w="1"/><text x="55.4353%" y="367.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.03%)</title><rect x="55.2164%" y="277" width="0.0311%" height="15" fill="rgb(236,162,54)" fg:x="1773" fg:w="1"/><text x="55.4664%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.03%)</title><rect x="55.2164%" y="261" width="0.0311%" height="15" fill="rgb(220,229,9)" fg:x="1773" fg:w="1"/><text x="55.4664%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.06%)</title><rect x="55.2787%" y="245" width="0.0623%" height="15" fill="rgb(250,87,22)" fg:x="1775" fg:w="2"/><text x="55.5287%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::load (5 samples, 0.16%)</title><rect x="55.2164%" y="293" width="0.1557%" height="15" fill="rgb(239,43,17)" fg:x="1773" fg:w="5"/><text x="55.4664%" y="303.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::generate_matrix (4 samples, 0.12%)</title><rect x="55.2476%" y="277" width="0.1246%" height="15" fill="rgb(231,177,25)" fg:x="1774" fg:w="4"/><text x="55.4976%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (4 samples, 0.12%)</title><rect x="55.2476%" y="261" width="0.1246%" height="15" fill="rgb(219,179,1)" fg:x="1774" fg:w="4"/><text x="55.4976%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.03%)</title><rect x="55.3410%" y="245" width="0.0311%" height="15" fill="rgb(238,219,53)" fg:x="1777" fg:w="1"/><text x="55.5910%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="55.4656%" y="277" width="0.0311%" height="15" fill="rgb(232,167,36)" fg:x="1781" fg:w="1"/><text x="55.7156%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.03%)</title><rect x="55.4656%" y="261" width="0.0311%" height="15" fill="rgb(244,19,51)" fg:x="1781" fg:w="1"/><text x="55.7156%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.31%)</title><rect x="55.4967%" y="277" width="0.3114%" height="15" fill="rgb(224,6,22)" fg:x="1782" fg:w="10"/><text x="55.7467%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="55.8082%" y="277" width="0.0311%" height="15" fill="rgb(224,145,5)" fg:x="1792" fg:w="1"/><text x="56.0582%" y="287.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="55.8082%" y="261" width="0.0311%" height="15" fill="rgb(234,130,49)" fg:x="1792" fg:w="1"/><text x="56.0582%" y="271.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="55.8082%" y="245" width="0.0311%" height="15" fill="rgb(254,6,2)" fg:x="1792" fg:w="1"/><text x="56.0582%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="55.8082%" y="229" width="0.0311%" height="15" fill="rgb(208,96,46)" fg:x="1792" fg:w="1"/><text x="56.0582%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.03%)</title><rect x="55.8082%" y="213" width="0.0311%" height="15" fill="rgb(239,3,39)" fg:x="1792" fg:w="1"/><text x="56.0582%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="55.8082%" y="197" width="0.0311%" height="15" fill="rgb(233,210,1)" fg:x="1792" fg:w="1"/><text x="56.0582%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="55.8082%" y="181" width="0.0311%" height="15" fill="rgb(244,137,37)" fg:x="1792" fg:w="1"/><text x="56.0582%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="55.8082%" y="165" width="0.0311%" height="15" fill="rgb(240,136,2)" fg:x="1792" fg:w="1"/><text x="56.0582%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="55.8082%" y="149" width="0.0311%" height="15" fill="rgb(239,18,37)" fg:x="1792" fg:w="1"/><text x="56.0582%" y="159.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (44 samples, 1.37%)</title><rect x="56.8670%" y="261" width="1.3703%" height="15" fill="rgb(218,185,22)" fg:x="1826" fg:w="44"/><text x="57.1170%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::Obstacle as core::hash::Hash&gt;::hash (1 samples, 0.03%)</title><rect x="59.0782%" y="245" width="0.0311%" height="15" fill="rgb(225,218,4)" fg:x="1897" fg:w="1"/><text x="59.3282%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::Obstacle as core::hash::Hash&gt;::hash (22 samples, 0.69%)</title><rect x="60.7599%" y="229" width="0.6851%" height="15" fill="rgb(230,182,32)" fg:x="1951" fg:w="22"/><text x="61.0099%" y="239.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (67 samples, 2.09%)</title><rect x="61.4450%" y="229" width="2.0866%" height="15" fill="rgb(242,56,43)" fg:x="1973" fg:w="67"/><text x="61.6950%" y="239.50">m..</text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (210 samples, 6.54%)</title><rect x="59.1093%" y="245" width="6.5400%" height="15" fill="rgb(233,99,24)" fg:x="1898" fg:w="210"/><text x="59.3593%" y="255.50">mwpf`inde..</text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (68 samples, 2.12%)</title><rect x="63.5316%" y="229" width="2.1177%" height="15" fill="rgb(234,209,42)" fg:x="2040" fg:w="68"/><text x="63.7816%" y="239.50">m..</text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (252 samples, 7.85%)</title><rect x="58.2373%" y="261" width="7.8480%" height="15" fill="rgb(227,7,12)" fg:x="1870" fg:w="252"/><text x="58.4873%" y="271.50">mwpf`&lt;prior..</text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (14 samples, 0.44%)</title><rect x="65.6493%" y="245" width="0.4360%" height="15" fill="rgb(245,203,43)" fg:x="2108" fg:w="14"/><text x="65.8993%" y="255.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (16 samples, 0.50%)</title><rect x="66.0853%" y="261" width="0.4983%" height="15" fill="rgb(238,205,33)" fg:x="2122" fg:w="16"/><text x="66.3353%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::set_grow_rate (596 samples, 18.56%)</title><rect x="55.8393%" y="277" width="18.5612%" height="15" fill="rgb(231,56,7)" fg:x="1793" fg:w="596"/><text x="56.0893%" y="287.50">mwpf`&lt;mwpf::dual_module_pq::D..</text></g><g><title>mwpf`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (251 samples, 7.82%)</title><rect x="66.5836%" y="261" width="7.8169%" height="15" fill="rgb(244,186,29)" fg:x="2138" fg:w="251"/><text x="66.8336%" y="271.50">mwpf`priori..</text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (1 samples, 0.03%)</title><rect x="74.4316%" y="261" width="0.0311%" height="15" fill="rgb(234,111,31)" fg:x="2390" fg:w="1"/><text x="74.6816%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.03%)</title><rect x="74.4316%" y="245" width="0.0311%" height="15" fill="rgb(241,149,10)" fg:x="2390" fg:w="1"/><text x="74.6816%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (3 samples, 0.09%)</title><rect x="74.4005%" y="277" width="0.0934%" height="15" fill="rgb(249,206,44)" fg:x="2389" fg:w="3"/><text x="74.6505%" y="287.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="74.4628%" y="261" width="0.0311%" height="15" fill="rgb(251,153,30)" fg:x="2391" fg:w="1"/><text x="74.7128%" y="271.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="74.4628%" y="245" width="0.0311%" height="15" fill="rgb(239,152,38)" fg:x="2391" fg:w="1"/><text x="74.7128%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="74.4628%" y="229" width="0.0311%" height="15" fill="rgb(249,139,47)" fg:x="2391" fg:w="1"/><text x="74.7128%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.03%)</title><rect x="74.4628%" y="213" width="0.0311%" height="15" fill="rgb(244,64,35)" fg:x="2391" fg:w="1"/><text x="74.7128%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="74.4628%" y="197" width="0.0311%" height="15" fill="rgb(216,46,15)" fg:x="2391" fg:w="1"/><text x="74.7128%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.09%)</title><rect x="74.6808%" y="261" width="0.0934%" height="15" fill="rgb(250,74,19)" fg:x="2398" fg:w="3"/><text x="74.9308%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (12 samples, 0.37%)</title><rect x="74.4939%" y="277" width="0.3737%" height="15" fill="rgb(249,42,33)" fg:x="2392" fg:w="12"/><text x="74.7439%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::remove (3 samples, 0.09%)</title><rect x="74.7742%" y="261" width="0.0934%" height="15" fill="rgb(242,149,17)" fg:x="2401" fg:w="3"/><text x="75.0242%" y="271.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (2 samples, 0.06%)</title><rect x="74.8676%" y="277" width="0.0623%" height="15" fill="rgb(244,29,21)" fg:x="2404" fg:w="2"/><text x="75.1176%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="74.9922%" y="245" width="0.0311%" height="15" fill="rgb(220,130,37)" fg:x="2408" fg:w="1"/><text x="75.2422%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::Obstacle as core::hash::Hash&gt;::hash (1 samples, 0.03%)</title><rect x="75.2414%" y="213" width="0.0311%" height="15" fill="rgb(211,67,2)" fg:x="2416" fg:w="1"/><text x="75.4914%" y="223.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (5 samples, 0.16%)</title><rect x="75.2725%" y="213" width="0.1557%" height="15" fill="rgb(235,68,52)" fg:x="2417" fg:w="5"/><text x="75.5225%" y="223.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (19 samples, 0.59%)</title><rect x="75.0545%" y="229" width="0.5917%" height="15" fill="rgb(246,142,3)" fg:x="2410" fg:w="19"/><text x="75.3045%" y="239.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (7 samples, 0.22%)</title><rect x="75.4282%" y="213" width="0.2180%" height="15" fill="rgb(241,25,7)" fg:x="2422" fg:w="7"/><text x="75.6782%" y="223.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (21 samples, 0.65%)</title><rect x="75.0234%" y="245" width="0.6540%" height="15" fill="rgb(242,119,39)" fg:x="2409" fg:w="21"/><text x="75.2734%" y="255.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (1 samples, 0.03%)</title><rect x="75.6462%" y="229" width="0.0311%" height="15" fill="rgb(241,98,45)" fg:x="2429" fg:w="1"/><text x="75.8962%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="75.7085%" y="181" width="0.0311%" height="15" fill="rgb(254,28,30)" fg:x="2431" fg:w="1"/><text x="75.9585%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 0.12%)</title><rect x="75.7085%" y="197" width="0.1246%" height="15" fill="rgb(241,142,54)" fg:x="2431" fg:w="4"/><text x="75.9585%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.09%)</title><rect x="75.7396%" y="181" width="0.0934%" height="15" fill="rgb(222,85,15)" fg:x="2432" fg:w="3"/><text x="75.9896%" y="191.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.19%)</title><rect x="75.6774%" y="245" width="0.1869%" height="15" fill="rgb(210,85,47)" fg:x="2430" fg:w="6"/><text x="75.9274%" y="255.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (5 samples, 0.16%)</title><rect x="75.7085%" y="229" width="0.1557%" height="15" fill="rgb(224,206,25)" fg:x="2431" fg:w="5"/><text x="75.9585%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.16%)</title><rect x="75.7085%" y="213" width="0.1557%" height="15" fill="rgb(243,201,19)" fg:x="2431" fg:w="5"/><text x="75.9585%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="75.8331%" y="197" width="0.0311%" height="15" fill="rgb(236,59,4)" fg:x="2435" fg:w="1"/><text x="76.0831%" y="207.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (1 samples, 0.03%)</title><rect x="75.8642%" y="245" width="0.0311%" height="15" fill="rgb(254,179,45)" fg:x="2436" fg:w="1"/><text x="76.1142%" y="255.50"></text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_unique (2 samples, 0.06%)</title><rect x="75.8954%" y="245" width="0.0623%" height="15" fill="rgb(226,14,10)" fg:x="2437" fg:w="2"/><text x="76.1454%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node (44 samples, 1.37%)</title><rect x="74.9299%" y="261" width="1.3703%" height="15" fill="rgb(244,27,41)" fg:x="2406" fg:w="44"/><text x="75.1799%" y="271.50"></text></g><g><title>mwpf`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (11 samples, 0.34%)</title><rect x="75.9576%" y="245" width="0.3426%" height="15" fill="rgb(235,35,32)" fg:x="2439" fg:w="11"/><text x="76.2076%" y="255.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_or_create_node (45 samples, 1.40%)</title><rect x="74.9299%" y="277" width="1.4014%" height="15" fill="rgb(218,68,31)" fg:x="2406" fg:w="45"/><text x="75.1799%" y="287.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (1 samples, 0.03%)</title><rect x="76.3002%" y="261" width="0.0311%" height="15" fill="rgb(207,120,37)" fg:x="2450" fg:w="1"/><text x="76.5502%" y="271.50"></text></g><g><title>mwpf`mwpf::matrix::interface::MatrixEchelon::get_solution_local_minimum (2 samples, 0.06%)</title><rect x="76.3314%" y="277" width="0.0623%" height="15" fill="rgb(227,98,0)" fg:x="2451" fg:w="2"/><text x="76.5814%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="76.4248%" y="229" width="0.0311%" height="15" fill="rgb(207,7,3)" fg:x="2454" fg:w="1"/><text x="76.6748%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.19%)</title><rect x="76.3936%" y="245" width="0.1869%" height="15" fill="rgb(206,98,19)" fg:x="2453" fg:w="6"/><text x="76.6436%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.12%)</title><rect x="76.4559%" y="229" width="0.1246%" height="15" fill="rgb(217,5,26)" fg:x="2455" fg:w="4"/><text x="76.7059%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="76.5494%" y="213" width="0.0311%" height="15" fill="rgb(235,190,38)" fg:x="2458" fg:w="1"/><text x="76.7994%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.06%)</title><rect x="76.5805%" y="245" width="0.0623%" height="15" fill="rgb(247,86,24)" fg:x="2459" fg:w="2"/><text x="76.8305%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.28%)</title><rect x="76.3936%" y="261" width="0.2803%" height="15" fill="rgb(205,101,16)" fg:x="2453" fg:w="9"/><text x="76.6436%" y="271.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="76.6428%" y="245" width="0.0311%" height="15" fill="rgb(246,168,33)" fg:x="2461" fg:w="1"/><text x="76.8928%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.03%)</title><rect x="76.6428%" y="229" width="0.0311%" height="15" fill="rgb(231,114,1)" fg:x="2461" fg:w="1"/><text x="76.8928%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="76.6428%" y="213" width="0.0311%" height="15" fill="rgb(207,184,53)" fg:x="2461" fg:w="1"/><text x="76.8928%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (4 samples, 0.12%)</title><rect x="76.6739%" y="261" width="0.1246%" height="15" fill="rgb(224,95,51)" fg:x="2462" fg:w="4"/><text x="76.9239%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::bulk_build_from_sorted_iter (2 samples, 0.06%)</title><rect x="76.7362%" y="245" width="0.0623%" height="15" fill="rgb(212,188,45)" fg:x="2464" fg:w="2"/><text x="76.9862%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::append::_&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::bulk_push (2 samples, 0.06%)</title><rect x="76.7362%" y="229" width="0.0623%" height="15" fill="rgb(223,154,38)" fg:x="2464" fg:w="2"/><text x="76.9862%" y="239.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer_forest::RelaxerForest&gt; (1 samples, 0.03%)</title><rect x="76.7985%" y="261" width="0.0311%" height="15" fill="rgb(251,22,52)" fg:x="2466" fg:w="1"/><text x="77.0485%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="76.7985%" y="245" width="0.0311%" height="15" fill="rgb(229,209,22)" fg:x="2466" fg:w="1"/><text x="77.0485%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.03%)</title><rect x="76.7985%" y="229" width="0.0311%" height="15" fill="rgb(234,138,34)" fg:x="2466" fg:w="1"/><text x="77.0485%" y="239.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (16 samples, 0.50%)</title><rect x="76.8296%" y="261" width="0.4983%" height="15" fill="rgb(212,95,11)" fg:x="2467" fg:w="16"/><text x="77.0796%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (11 samples, 0.34%)</title><rect x="76.9854%" y="245" width="0.3426%" height="15" fill="rgb(240,179,47)" fg:x="2472" fg:w="11"/><text x="77.2354%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="77.3279%" y="213" width="0.0311%" height="15" fill="rgb(240,163,11)" fg:x="2483" fg:w="1"/><text x="77.5779%" y="223.50"></text></g><g><title>mwpf`core::slice::sort::merge_sort (1 samples, 0.03%)</title><rect x="77.3279%" y="197" width="0.0311%" height="15" fill="rgb(236,37,12)" fg:x="2483" fg:w="1"/><text x="77.5779%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.12%)</title><rect x="77.3591%" y="213" width="0.1246%" height="15" fill="rgb(232,164,16)" fg:x="2484" fg:w="4"/><text x="77.6091%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.09%)</title><rect x="77.4836%" y="213" width="0.0934%" height="15" fill="rgb(244,205,15)" fg:x="2488" fg:w="3"/><text x="77.7336%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.03%)</title><rect x="77.5771%" y="213" width="0.0311%" height="15" fill="rgb(223,117,47)" fg:x="2491" fg:w="1"/><text x="77.8271%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.03%)</title><rect x="77.6082%" y="197" width="0.0311%" height="15" fill="rgb(244,107,35)" fg:x="2492" fg:w="1"/><text x="77.8582%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="78.3868%" y="181" width="0.0623%" height="15" fill="rgb(205,140,8)" fg:x="2517" fg:w="2"/><text x="78.6368%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.03%)</title><rect x="78.4179%" y="165" width="0.0311%" height="15" fill="rgb(228,84,46)" fg:x="2518" fg:w="1"/><text x="78.6679%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (7 samples, 0.22%)</title><rect x="79.5079%" y="165" width="0.2180%" height="15" fill="rgb(254,188,9)" fg:x="2553" fg:w="7"/><text x="79.7579%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (47 samples, 1.46%)</title><rect x="78.4491%" y="181" width="1.4637%" height="15" fill="rgb(206,112,54)" fg:x="2519" fg:w="47"/><text x="78.6991%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (6 samples, 0.19%)</title><rect x="79.7259%" y="165" width="0.1869%" height="15" fill="rgb(216,84,49)" fg:x="2560" fg:w="6"/><text x="79.9759%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.03%)</title><rect x="79.9128%" y="181" width="0.0311%" height="15" fill="rgb(214,194,35)" fg:x="2566" fg:w="1"/><text x="80.1628%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="79.9439%" y="133" width="0.0311%" height="15" fill="rgb(249,28,3)" fg:x="2567" fg:w="1"/><text x="80.1939%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="79.9751%" y="117" width="0.0311%" height="15" fill="rgb(222,56,52)" fg:x="2568" fg:w="1"/><text x="80.2251%" y="127.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.06%)</title><rect x="79.9751%" y="133" width="0.0623%" height="15" fill="rgb(245,217,50)" fg:x="2568" fg:w="2"/><text x="80.2251%" y="143.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.03%)</title><rect x="80.0062%" y="117" width="0.0311%" height="15" fill="rgb(213,201,24)" fg:x="2569" fg:w="1"/><text x="80.2562%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="80.0062%" y="101" width="0.0311%" height="15" fill="rgb(248,116,28)" fg:x="2569" fg:w="1"/><text x="80.2562%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="80.0062%" y="85" width="0.0311%" height="15" fill="rgb(219,72,43)" fg:x="2569" fg:w="1"/><text x="80.2562%" y="95.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.12%)</title><rect x="79.9439%" y="165" width="0.1246%" height="15" fill="rgb(209,138,14)" fg:x="2567" fg:w="4"/><text x="80.1939%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.12%)</title><rect x="79.9439%" y="149" width="0.1246%" height="15" fill="rgb(222,18,33)" fg:x="2567" fg:w="4"/><text x="80.1939%" y="159.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.03%)</title><rect x="80.0374%" y="133" width="0.0311%" height="15" fill="rgb(213,199,7)" fg:x="2570" fg:w="1"/><text x="80.2874%" y="143.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete_ptr (82 samples, 2.55%)</title><rect x="77.6082%" y="213" width="2.5537%" height="15" fill="rgb(250,110,10)" fg:x="2492" fg:w="82"/><text x="77.8582%" y="223.50">mw..</text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (81 samples, 2.52%)</title><rect x="77.6394%" y="197" width="2.5226%" height="15" fill="rgb(248,123,6)" fg:x="2493" fg:w="81"/><text x="77.8894%" y="207.50">mw..</text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_raw (7 samples, 0.22%)</title><rect x="79.9439%" y="181" width="0.2180%" height="15" fill="rgb(206,91,31)" fg:x="2567" fg:w="7"/><text x="80.1939%" y="191.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.09%)</title><rect x="80.0685%" y="165" width="0.0934%" height="15" fill="rgb(211,154,13)" fg:x="2571" fg:w="3"/><text x="80.3185%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="81.1897%" y="197" width="0.0311%" height="15" fill="rgb(225,148,7)" fg:x="2607" fg:w="1"/><text x="81.4397%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="81.2208%" y="197" width="0.0311%" height="15" fill="rgb(220,160,43)" fg:x="2608" fg:w="1"/><text x="81.4708%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="82.0928%" y="181" width="0.0311%" height="15" fill="rgb(213,52,39)" fg:x="2636" fg:w="1"/><text x="82.3428%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (30 samples, 0.93%)</title><rect x="81.2519%" y="197" width="0.9343%" height="15" fill="rgb(243,137,7)" fg:x="2609" fg:w="30"/><text x="81.5019%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.06%)</title><rect x="82.1239%" y="181" width="0.0623%" height="15" fill="rgb(230,79,13)" fg:x="2637" fg:w="2"/><text x="82.3739%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="82.1551%" y="165" width="0.0311%" height="15" fill="rgb(247,105,23)" fg:x="2638" fg:w="1"/><text x="82.4051%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.03%)</title><rect x="82.1551%" y="149" width="0.0311%" height="15" fill="rgb(223,179,41)" fg:x="2638" fg:w="1"/><text x="82.4051%" y="159.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.06%)</title><rect x="82.1862%" y="197" width="0.0623%" height="15" fill="rgb(218,9,34)" fg:x="2639" fg:w="2"/><text x="82.4362%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.06%)</title><rect x="82.1862%" y="181" width="0.0623%" height="15" fill="rgb(222,106,8)" fg:x="2639" fg:w="2"/><text x="82.4362%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="82.3108%" y="181" width="0.0311%" height="15" fill="rgb(211,220,0)" fg:x="2643" fg:w="1"/><text x="82.5608%" y="191.50"></text></g><g><title>mwpf`__rdl_alloc (1 samples, 0.03%)</title><rect x="82.3419%" y="181" width="0.0311%" height="15" fill="rgb(229,52,16)" fg:x="2644" fg:w="1"/><text x="82.5919%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (7 samples, 0.22%)</title><rect x="82.2485%" y="197" width="0.2180%" height="15" fill="rgb(212,155,18)" fg:x="2641" fg:w="7"/><text x="82.4985%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (3 samples, 0.09%)</title><rect x="82.3731%" y="181" width="0.0934%" height="15" fill="rgb(242,21,14)" fg:x="2645" fg:w="3"/><text x="82.6231%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (167 samples, 5.20%)</title><rect x="77.3279%" y="245" width="5.2009%" height="15" fill="rgb(222,19,48)" fg:x="2483" fg:w="167"/><text x="77.5779%" y="255.50">mwpf`&lt;..</text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (167 samples, 5.20%)</title><rect x="77.3279%" y="229" width="5.2009%" height="15" fill="rgb(232,45,27)" fg:x="2483" fg:w="167"/><text x="77.5779%" y="239.50">mwpf`m..</text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (76 samples, 2.37%)</title><rect x="80.1619%" y="213" width="2.3669%" height="15" fill="rgb(249,103,42)" fg:x="2574" fg:w="76"/><text x="80.4119%" y="223.50">mw..</text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.06%)</title><rect x="82.4665%" y="197" width="0.0623%" height="15" fill="rgb(246,81,33)" fg:x="2648" fg:w="2"/><text x="82.7165%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="82.5288%" y="181" width="0.0311%" height="15" fill="rgb(252,33,42)" fg:x="2650" fg:w="1"/><text x="82.7788%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.09%)</title><rect x="82.5288%" y="229" width="0.0934%" height="15" fill="rgb(209,212,41)" fg:x="2650" fg:w="3"/><text x="82.7788%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.09%)</title><rect x="82.5288%" y="213" width="0.0934%" height="15" fill="rgb(207,154,6)" fg:x="2650" fg:w="3"/><text x="82.7788%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.09%)</title><rect x="82.5288%" y="197" width="0.0934%" height="15" fill="rgb(223,64,47)" fg:x="2650" fg:w="3"/><text x="82.7788%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.06%)</title><rect x="82.5600%" y="181" width="0.0623%" height="15" fill="rgb(211,161,38)" fg:x="2651" fg:w="2"/><text x="82.8100%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.06%)</title><rect x="82.5600%" y="165" width="0.0623%" height="15" fill="rgb(219,138,40)" fg:x="2651" fg:w="2"/><text x="82.8100%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::relaxer::Relaxer as core::cmp::Ord&gt;::cmp (2 samples, 0.06%)</title><rect x="82.6222%" y="229" width="0.0623%" height="15" fill="rgb(241,228,46)" fg:x="2653" fg:w="2"/><text x="82.8722%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.06%)</title><rect x="82.6222%" y="213" width="0.0623%" height="15" fill="rgb(223,209,38)" fg:x="2653" fg:w="2"/><text x="82.8722%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="82.6534%" y="197" width="0.0311%" height="15" fill="rgb(236,164,45)" fg:x="2654" fg:w="1"/><text x="82.9034%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="82.7468%" y="213" width="0.0623%" height="15" fill="rgb(231,15,5)" fg:x="2657" fg:w="2"/><text x="82.9968%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.03%)</title><rect x="83.9614%" y="197" width="0.0311%" height="15" fill="rgb(252,35,15)" fg:x="2696" fg:w="1"/><text x="84.2114%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="83.9925%" y="197" width="0.1246%" height="15" fill="rgb(248,181,18)" fg:x="2697" fg:w="4"/><text x="84.2425%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="84.7400%" y="181" width="0.0311%" height="15" fill="rgb(233,39,42)" fg:x="2721" fg:w="1"/><text x="84.9900%" y="191.50"></text></g><g><title>mwpf`DYLD-STUB$$memcpy (2 samples, 0.06%)</title><rect x="84.7711%" y="181" width="0.0623%" height="15" fill="rgb(238,110,33)" fg:x="2722" fg:w="2"/><text x="85.0211%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (26 samples, 0.81%)</title><rect x="84.1171%" y="197" width="0.8097%" height="15" fill="rgb(233,195,10)" fg:x="2701" fg:w="26"/><text x="84.3671%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (3 samples, 0.09%)</title><rect x="84.8334%" y="181" width="0.0934%" height="15" fill="rgb(254,105,3)" fg:x="2724" fg:w="3"/><text x="85.0834%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="84.8957%" y="165" width="0.0311%" height="15" fill="rgb(221,225,9)" fg:x="2726" fg:w="1"/><text x="85.1457%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.03%)</title><rect x="84.9580%" y="181" width="0.0311%" height="15" fill="rgb(224,227,45)" fg:x="2728" fg:w="1"/><text x="85.2080%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.09%)</title><rect x="84.9268%" y="197" width="0.0934%" height="15" fill="rgb(229,198,43)" fg:x="2727" fg:w="3"/><text x="85.1768%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="84.9891%" y="181" width="0.0311%" height="15" fill="rgb(206,209,35)" fg:x="2729" fg:w="1"/><text x="85.2391%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (4 samples, 0.12%)</title><rect x="85.0202%" y="197" width="0.1246%" height="15" fill="rgb(245,195,53)" fg:x="2730" fg:w="4"/><text x="85.2702%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (3 samples, 0.09%)</title><rect x="85.0514%" y="181" width="0.0934%" height="15" fill="rgb(240,92,26)" fg:x="2731" fg:w="3"/><text x="85.3014%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="85.1137%" y="165" width="0.0311%" height="15" fill="rgb(207,40,23)" fg:x="2733" fg:w="1"/><text x="85.3637%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="85.1137%" y="149" width="0.0311%" height="15" fill="rgb(223,111,35)" fg:x="2733" fg:w="1"/><text x="85.3637%" y="159.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (282 samples, 8.78%)</title><rect x="76.3936%" y="277" width="8.7823%" height="15" fill="rgb(229,147,28)" fg:x="2453" fg:w="282"/><text x="76.6436%" y="287.50">mwpf`mwpf::p..</text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (252 samples, 7.85%)</title><rect x="77.3279%" y="261" width="7.8480%" height="15" fill="rgb(211,29,28)" fg:x="2483" fg:w="252"/><text x="77.5779%" y="271.50">mwpf`mwpf::..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (85 samples, 2.65%)</title><rect x="82.5288%" y="245" width="2.6472%" height="15" fill="rgb(228,72,33)" fg:x="2650" fg:w="85"/><text x="82.7788%" y="255.50">mw..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (80 samples, 2.49%)</title><rect x="82.6845%" y="229" width="2.4914%" height="15" fill="rgb(205,214,31)" fg:x="2655" fg:w="80"/><text x="82.9345%" y="239.50">mw..</text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (76 samples, 2.37%)</title><rect x="82.8091%" y="213" width="2.3669%" height="15" fill="rgb(224,111,15)" fg:x="2659" fg:w="76"/><text x="83.0591%" y="223.50">mw..</text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.03%)</title><rect x="85.1448%" y="197" width="0.0311%" height="15" fill="rgb(253,21,26)" fg:x="2734" fg:w="1"/><text x="85.3948%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="85.6742%" y="213" width="0.0311%" height="15" fill="rgb(245,139,43)" fg:x="2751" fg:w="1"/><text x="85.9242%" y="223.50"></text></g><g><title>mwpf`DYLD-STUB$$memcpy (1 samples, 0.03%)</title><rect x="85.7054%" y="213" width="0.0311%" height="15" fill="rgb(252,170,7)" fg:x="2752" fg:w="1"/><text x="85.9554%" y="223.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (19 samples, 0.59%)</title><rect x="85.1760%" y="261" width="0.5917%" height="15" fill="rgb(231,118,14)" fg:x="2735" fg:w="19"/><text x="85.4260%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (13 samples, 0.40%)</title><rect x="85.3628%" y="245" width="0.4049%" height="15" fill="rgb(238,83,0)" fg:x="2741" fg:w="13"/><text x="85.6128%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (6 samples, 0.19%)</title><rect x="85.5808%" y="229" width="0.1869%" height="15" fill="rgb(221,39,39)" fg:x="2748" fg:w="6"/><text x="85.8308%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.03%)</title><rect x="85.7365%" y="213" width="0.0311%" height="15" fill="rgb(222,119,46)" fg:x="2753" fg:w="1"/><text x="85.9865%" y="223.50"></text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::union (24 samples, 0.75%)</title><rect x="85.1760%" y="277" width="0.7474%" height="15" fill="rgb(222,165,49)" fg:x="2735" fg:w="24"/><text x="85.4260%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.16%)</title><rect x="85.7677%" y="261" width="0.1557%" height="15" fill="rgb(219,113,52)" fg:x="2754" fg:w="5"/><text x="86.0177%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="85.8922%" y="245" width="0.0311%" height="15" fill="rgb(214,7,15)" fg:x="2758" fg:w="1"/><text x="86.1422%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve (984 samples, 30.64%)</title><rect x="55.3722%" y="293" width="30.6447%" height="15" fill="rgb(235,32,4)" fg:x="1778" fg:w="984"/><text x="55.6222%" y="303.50">mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSer..</text></g><g><title>mwpf`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (3 samples, 0.09%)</title><rect x="85.9234%" y="277" width="0.0934%" height="15" fill="rgb(238,90,54)" fg:x="2759" fg:w="3"/><text x="86.1734%" y="287.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (1 samples, 0.03%)</title><rect x="86.0480%" y="245" width="0.0311%" height="15" fill="rgb(213,208,19)" fg:x="2763" fg:w="1"/><text x="86.2980%" y="255.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (1 samples, 0.03%)</title><rect x="86.0480%" y="229" width="0.0311%" height="15" fill="rgb(233,156,4)" fg:x="2763" fg:w="1"/><text x="86.2980%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node (2 samples, 0.06%)</title><rect x="86.0480%" y="277" width="0.0623%" height="15" fill="rgb(207,194,5)" fg:x="2763" fg:w="2"/><text x="86.2980%" y="287.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (2 samples, 0.06%)</title><rect x="86.0480%" y="261" width="0.0623%" height="15" fill="rgb(206,111,30)" fg:x="2763" fg:w="2"/><text x="86.2980%" y="271.50"></text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_unique (1 samples, 0.03%)</title><rect x="86.0791%" y="245" width="0.0311%" height="15" fill="rgb(243,70,54)" fg:x="2764" fg:w="1"/><text x="86.3291%" y="255.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="86.0791%" y="229" width="0.0311%" height="15" fill="rgb(242,28,8)" fg:x="2764" fg:w="1"/><text x="86.3291%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="86.0791%" y="213" width="0.0311%" height="15" fill="rgb(219,106,18)" fg:x="2764" fg:w="1"/><text x="86.3291%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.03%)</title><rect x="86.0791%" y="197" width="0.0311%" height="15" fill="rgb(244,222,10)" fg:x="2764" fg:w="1"/><text x="86.3291%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="86.0791%" y="181" width="0.0311%" height="15" fill="rgb(236,179,52)" fg:x="2764" fg:w="1"/><text x="86.3291%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.06%)</title><rect x="86.2660%" y="261" width="0.0623%" height="15" fill="rgb(213,23,39)" fg:x="2770" fg:w="2"/><text x="86.5160%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.03%)</title><rect x="86.2971%" y="245" width="0.0311%" height="15" fill="rgb(238,48,10)" fg:x="2771" fg:w="1"/><text x="86.5471%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="86.2971%" y="229" width="0.0311%" height="15" fill="rgb(251,196,23)" fg:x="2771" fg:w="1"/><text x="86.5471%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="86.2971%" y="213" width="0.0311%" height="15" fill="rgb(250,152,24)" fg:x="2771" fg:w="1"/><text x="86.5471%" y="223.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::load (11 samples, 0.34%)</title><rect x="86.0168%" y="293" width="0.3426%" height="15" fill="rgb(209,150,17)" fg:x="2762" fg:w="11"/><text x="86.2668%" y="303.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (8 samples, 0.25%)</title><rect x="86.1102%" y="277" width="0.2491%" height="15" fill="rgb(234,202,34)" fg:x="2765" fg:w="8"/><text x="86.3602%" y="287.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_raw (1 samples, 0.03%)</title><rect x="86.3282%" y="261" width="0.0311%" height="15" fill="rgb(253,148,53)" fg:x="2772" fg:w="1"/><text x="86.5782%" y="271.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="86.3282%" y="245" width="0.0311%" height="15" fill="rgb(218,129,16)" fg:x="2772" fg:w="1"/><text x="86.5782%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::compute_maximum_update_length (8 samples, 0.25%)</title><rect x="86.3594%" y="277" width="0.2491%" height="15" fill="rgb(216,85,19)" fg:x="2773" fg:w="8"/><text x="86.6094%" y="287.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::pop_event (8 samples, 0.25%)</title><rect x="86.3594%" y="261" width="0.2491%" height="15" fill="rgb(235,228,7)" fg:x="2773" fg:w="8"/><text x="86.6094%" y="271.50"></text></g><g><title>mwpf`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (8 samples, 0.25%)</title><rect x="86.3594%" y="245" width="0.2491%" height="15" fill="rgb(245,175,0)" fg:x="2773" fg:w="8"/><text x="86.6094%" y="255.50"></text></g><g><title>mwpf`mwpf::dual_module_parallel::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::dual_module_parallel::DualModuleParallelUnit&lt;SerialModule,Queue&gt;&gt;&gt;::compute_maximum_update_length (9 samples, 0.28%)</title><rect x="86.3594%" y="293" width="0.2803%" height="15" fill="rgb(208,168,36)" fg:x="2773" fg:w="9"/><text x="86.6094%" y="303.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::pop_event (1 samples, 0.03%)</title><rect x="86.6085%" y="277" width="0.0311%" height="15" fill="rgb(246,171,24)" fg:x="2781" fg:w="1"/><text x="86.8585%" y="287.50"></text></g><g><title>mwpf`&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (1,010 samples, 31.45%)</title><rect x="55.2164%" y="341" width="31.4544%" height="15" fill="rgb(215,142,24)" fg:x="1773" fg:w="1010"/><text x="55.4664%" y="351.50">mwpf`&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as ..</text></g><g><title>mwpf`mwpf::primal_module_parallel::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::primal_module_parallel::PrimalModuleParallelUnit&gt;&gt;::individual_solve (1,010 samples, 31.45%)</title><rect x="55.2164%" y="325" width="31.4544%" height="15" fill="rgb(250,187,7)" fg:x="1773" fg:w="1010"/><text x="55.4664%" y="335.50">mwpf`mwpf::primal_module_parallel::_&lt;impl mwpf::poi..</text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::solve_step_callback_ptr (1,010 samples, 31.45%)</title><rect x="55.2164%" y="309" width="31.4544%" height="15" fill="rgb(228,66,33)" fg:x="1773" fg:w="1010"/><text x="55.4664%" y="319.50">mwpf`mwpf::primal_module_serial::PrimalModuleSerial..</text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::union (1 samples, 0.03%)</title><rect x="86.6397%" y="293" width="0.0311%" height="15" fill="rgb(234,215,21)" fg:x="2782" fg:w="1"/><text x="86.8897%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="86.7331%" y="293" width="0.0311%" height="15" fill="rgb(222,191,20)" fg:x="2785" fg:w="1"/><text x="86.9831%" y="303.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="86.7331%" y="277" width="0.0311%" height="15" fill="rgb(245,79,54)" fg:x="2785" fg:w="1"/><text x="86.9831%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.03%)</title><rect x="86.7331%" y="261" width="0.0311%" height="15" fill="rgb(240,10,37)" fg:x="2785" fg:w="1"/><text x="86.9831%" y="271.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="86.7331%" y="245" width="0.0311%" height="15" fill="rgb(214,192,32)" fg:x="2785" fg:w="1"/><text x="86.9831%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="86.7642%" y="277" width="0.0311%" height="15" fill="rgb(209,36,54)" fg:x="2786" fg:w="1"/><text x="87.0142%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="86.8265%" y="261" width="0.0311%" height="15" fill="rgb(220,10,11)" fg:x="2788" fg:w="1"/><text x="87.0765%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::clear (5 samples, 0.16%)</title><rect x="86.7331%" y="325" width="0.1557%" height="15" fill="rgb(221,106,17)" fg:x="2785" fg:w="5"/><text x="86.9831%" y="335.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.16%)</title><rect x="86.7331%" y="309" width="0.1557%" height="15" fill="rgb(251,142,44)" fg:x="2785" fg:w="5"/><text x="86.9831%" y="319.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::matrix::echelon::Echelon&lt;mwpf::matrix::tail::Tail&lt;mwpf::matrix::tight::Tight&lt;mwpf::matrix::basic::BasicMatrix&gt;&gt;&gt;&gt; (4 samples, 0.12%)</title><rect x="86.7642%" y="293" width="0.1246%" height="15" fill="rgb(238,13,15)" fg:x="2786" fg:w="4"/><text x="87.0142%" y="303.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.09%)</title><rect x="86.7954%" y="277" width="0.0934%" height="15" fill="rgb(208,107,27)" fg:x="2787" fg:w="3"/><text x="87.0454%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="86.8577%" y="261" width="0.0311%" height="15" fill="rgb(205,136,37)" fg:x="2789" fg:w="1"/><text x="87.1077%" y="271.50"></text></g><g><title>mwpf`rayon::iter::plumbing::Producer::fold_with (9 samples, 0.28%)</title><rect x="86.6708%" y="341" width="0.2803%" height="15" fill="rgb(250,205,27)" fg:x="2783" fg:w="9"/><text x="86.9208%" y="351.50"></text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::clear (2 samples, 0.06%)</title><rect x="86.8888%" y="325" width="0.0623%" height="15" fill="rgb(210,80,43)" fg:x="2790" fg:w="2"/><text x="87.1388%" y="335.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.06%)</title><rect x="86.8888%" y="309" width="0.0623%" height="15" fill="rgb(247,160,36)" fg:x="2790" fg:w="2"/><text x="87.1388%" y="319.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.06%)</title><rect x="86.8888%" y="293" width="0.0623%" height="15" fill="rgb(234,13,49)" fg:x="2790" fg:w="2"/><text x="87.1388%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="86.9200%" y="277" width="0.0311%" height="15" fill="rgb(234,122,0)" fg:x="2791" fg:w="1"/><text x="87.1700%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="86.9511%" y="309" width="0.0311%" height="15" fill="rgb(207,146,38)" fg:x="2792" fg:w="1"/><text x="87.2011%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="86.9822%" y="309" width="0.0311%" height="15" fill="rgb(207,177,25)" fg:x="2793" fg:w="1"/><text x="87.2322%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="87.0757%" y="261" width="0.0311%" height="15" fill="rgb(211,178,42)" fg:x="2796" fg:w="1"/><text x="87.3257%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="87.0757%" y="245" width="0.0311%" height="15" fill="rgb(230,69,54)" fg:x="2796" fg:w="1"/><text x="87.3257%" y="255.50"></text></g><g><title>mwpf`rayon::iter::plumbing::Folder::consume_iter (6 samples, 0.19%)</title><rect x="86.9511%" y="325" width="0.1869%" height="15" fill="rgb(214,135,41)" fg:x="2792" fg:w="6"/><text x="87.2011%" y="335.50"></text></g><g><title>mwpf`mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt;::new_partitioned (4 samples, 0.12%)</title><rect x="87.0134%" y="309" width="0.1246%" height="15" fill="rgb(237,67,25)" fg:x="2794" fg:w="4"/><text x="87.2634%" y="319.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.09%)</title><rect x="87.0445%" y="293" width="0.0934%" height="15" fill="rgb(222,189,50)" fg:x="2795" fg:w="3"/><text x="87.2945%" y="303.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (2 samples, 0.06%)</title><rect x="87.0757%" y="277" width="0.0623%" height="15" fill="rgb(245,148,34)" fg:x="2796" fg:w="2"/><text x="87.3257%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="87.1068%" y="261" width="0.0311%" height="15" fill="rgb(222,29,6)" fg:x="2797" fg:w="1"/><text x="87.3568%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.03%)</title><rect x="87.1068%" y="245" width="0.0311%" height="15" fill="rgb(221,189,43)" fg:x="2797" fg:w="1"/><text x="87.3568%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="87.1068%" y="229" width="0.0311%" height="15" fill="rgb(207,36,27)" fg:x="2797" fg:w="1"/><text x="87.3568%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.09%)</title><rect x="87.2625%" y="261" width="0.0934%" height="15" fill="rgb(217,90,24)" fg:x="2802" fg:w="3"/><text x="87.5125%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="87.3248%" y="245" width="0.0311%" height="15" fill="rgb(224,66,35)" fg:x="2804" fg:w="1"/><text x="87.5748%" y="255.50"></text></g><g><title>mwpf`rayon::iter::plumbing::Folder::consume_iter (8 samples, 0.25%)</title><rect x="87.1380%" y="293" width="0.2491%" height="15" fill="rgb(221,13,50)" fg:x="2798" fg:w="8"/><text x="87.3880%" y="303.50"></text></g><g><title>mwpf`mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt;::new_partitioned (8 samples, 0.25%)</title><rect x="87.1380%" y="277" width="0.2491%" height="15" fill="rgb(236,68,49)" fg:x="2798" fg:w="8"/><text x="87.3880%" y="287.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="87.3560%" y="261" width="0.0311%" height="15" fill="rgb(229,146,28)" fg:x="2805" fg:w="1"/><text x="87.6060%" y="271.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="87.3560%" y="245" width="0.0311%" height="15" fill="rgb(225,31,38)" fg:x="2805" fg:w="1"/><text x="87.6060%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="87.3560%" y="229" width="0.0311%" height="15" fill="rgb(250,208,3)" fg:x="2805" fg:w="1"/><text x="87.6060%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.03%)</title><rect x="87.3560%" y="213" width="0.0311%" height="15" fill="rgb(246,54,23)" fg:x="2805" fg:w="1"/><text x="87.6060%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="87.3560%" y="197" width="0.0311%" height="15" fill="rgb(243,76,11)" fg:x="2805" fg:w="1"/><text x="87.6060%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.09%)</title><rect x="87.3871%" y="229" width="0.0934%" height="15" fill="rgb(245,21,50)" fg:x="2806" fg:w="3"/><text x="87.6371%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="87.4494%" y="213" width="0.0311%" height="15" fill="rgb(228,9,43)" fg:x="2808" fg:w="1"/><text x="87.6994%" y="223.50"></text></g><g><title>mwpf`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="87.4805%" y="213" width="0.0311%" height="15" fill="rgb(208,100,47)" fg:x="2809" fg:w="1"/><text x="87.7305%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="87.5117%" y="197" width="0.0311%" height="15" fill="rgb(232,26,8)" fg:x="2810" fg:w="1"/><text x="87.7617%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.06%)</title><rect x="87.5428%" y="165" width="0.0623%" height="15" fill="rgb(216,166,38)" fg:x="2811" fg:w="2"/><text x="87.7928%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="87.5740%" y="149" width="0.0311%" height="15" fill="rgb(251,202,51)" fg:x="2812" fg:w="1"/><text x="87.8240%" y="159.50"></text></g><g><title>mwpf`rayon::iter::plumbing::bridge_producer_consumer::helper (22 samples, 0.69%)</title><rect x="86.9511%" y="341" width="0.6851%" height="15" fill="rgb(254,216,34)" fg:x="2792" fg:w="22"/><text x="87.2011%" y="351.50"></text></g><g><title>mwpf`rayon_core::join::join_context::_{{closure}} (16 samples, 0.50%)</title><rect x="87.1380%" y="325" width="0.4983%" height="15" fill="rgb(251,32,27)" fg:x="2798" fg:w="16"/><text x="87.3880%" y="335.50"></text></g><g><title>mwpf`rayon::iter::plumbing::bridge_producer_consumer::helper (16 samples, 0.50%)</title><rect x="87.1380%" y="309" width="0.4983%" height="15" fill="rgb(208,127,28)" fg:x="2798" fg:w="16"/><text x="87.3880%" y="319.50"></text></g><g><title>mwpf`rayon_core::join::join_context::_{{closure}} (8 samples, 0.25%)</title><rect x="87.3871%" y="293" width="0.2491%" height="15" fill="rgb(224,137,22)" fg:x="2806" fg:w="8"/><text x="87.6371%" y="303.50"></text></g><g><title>mwpf`rayon::iter::plumbing::bridge_producer_consumer::helper (8 samples, 0.25%)</title><rect x="87.3871%" y="277" width="0.2491%" height="15" fill="rgb(254,70,32)" fg:x="2806" fg:w="8"/><text x="87.6371%" y="287.50"></text></g><g><title>mwpf`rayon::iter::plumbing::Folder::consume_iter (8 samples, 0.25%)</title><rect x="87.3871%" y="261" width="0.2491%" height="15" fill="rgb(229,75,37)" fg:x="2806" fg:w="8"/><text x="87.6371%" y="271.50"></text></g><g><title>mwpf`mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt;::new_partitioned (8 samples, 0.25%)</title><rect x="87.3871%" y="245" width="0.2491%" height="15" fill="rgb(252,64,23)" fg:x="2806" fg:w="8"/><text x="87.6371%" y="255.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.16%)</title><rect x="87.4805%" y="229" width="0.1557%" height="15" fill="rgb(232,162,48)" fg:x="2809" fg:w="5"/><text x="87.7305%" y="239.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (4 samples, 0.12%)</title><rect x="87.5117%" y="213" width="0.1246%" height="15" fill="rgb(246,160,12)" fg:x="2810" fg:w="4"/><text x="87.7617%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.09%)</title><rect x="87.5428%" y="197" width="0.0934%" height="15" fill="rgb(247,166,0)" fg:x="2811" fg:w="3"/><text x="87.7928%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.09%)</title><rect x="87.5428%" y="181" width="0.0934%" height="15" fill="rgb(249,219,21)" fg:x="2811" fg:w="3"/><text x="87.7928%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="87.6051%" y="165" width="0.0311%" height="15" fill="rgb(205,209,3)" fg:x="2813" fg:w="1"/><text x="87.8551%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::load (2 samples, 0.06%)</title><rect x="87.6363%" y="277" width="0.0623%" height="15" fill="rgb(243,44,1)" fg:x="2814" fg:w="2"/><text x="87.8863%" y="287.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.06%)</title><rect x="87.6363%" y="261" width="0.0623%" height="15" fill="rgb(206,159,16)" fg:x="2814" fg:w="2"/><text x="87.8863%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.06%)</title><rect x="87.6363%" y="245" width="0.0623%" height="15" fill="rgb(244,77,30)" fg:x="2814" fg:w="2"/><text x="87.8863%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="87.6985%" y="261" width="0.0311%" height="15" fill="rgb(218,69,12)" fg:x="2816" fg:w="1"/><text x="87.9485%" y="271.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.12%)</title><rect x="87.8854%" y="245" width="0.1246%" height="15" fill="rgb(212,87,7)" fg:x="2822" fg:w="4"/><text x="88.1354%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::Obstacle as core::hash::Hash&gt;::hash (2 samples, 0.06%)</title><rect x="88.2903%" y="213" width="0.0623%" height="15" fill="rgb(245,114,25)" fg:x="2835" fg:w="2"/><text x="88.5403%" y="223.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.28%)</title><rect x="88.3525%" y="213" width="0.2803%" height="15" fill="rgb(210,61,42)" fg:x="2837" fg:w="9"/><text x="88.6025%" y="223.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (19 samples, 0.59%)</title><rect x="88.1968%" y="229" width="0.5917%" height="15" fill="rgb(211,52,33)" fg:x="2832" fg:w="19"/><text x="88.4468%" y="239.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (5 samples, 0.16%)</title><rect x="88.6328%" y="213" width="0.1557%" height="15" fill="rgb(234,58,33)" fg:x="2846" fg:w="5"/><text x="88.8828%" y="223.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (27 samples, 0.84%)</title><rect x="88.0100%" y="245" width="0.8409%" height="15" fill="rgb(220,115,36)" fg:x="2826" fg:w="27"/><text x="88.2600%" y="255.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (2 samples, 0.06%)</title><rect x="88.7885%" y="229" width="0.0623%" height="15" fill="rgb(243,153,54)" fg:x="2851" fg:w="2"/><text x="89.0385%" y="239.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (2 samples, 0.06%)</title><rect x="88.8508%" y="245" width="0.0623%" height="15" fill="rgb(251,47,18)" fg:x="2853" fg:w="2"/><text x="89.1008%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::set_grow_rate (61 samples, 1.90%)</title><rect x="87.7297%" y="261" width="1.8997%" height="15" fill="rgb(242,102,42)" fg:x="2817" fg:w="61"/><text x="87.9797%" y="271.50">m..</text></g><g><title>mwpf`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (23 samples, 0.72%)</title><rect x="88.9131%" y="245" width="0.7163%" height="15" fill="rgb(234,31,38)" fg:x="2855" fg:w="23"/><text x="89.1631%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (3 samples, 0.09%)</title><rect x="89.6294%" y="261" width="0.0934%" height="15" fill="rgb(221,117,51)" fg:x="2878" fg:w="3"/><text x="89.8794%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (3 samples, 0.09%)</title><rect x="89.6294%" y="245" width="0.0934%" height="15" fill="rgb(212,20,18)" fg:x="2878" fg:w="3"/><text x="89.8794%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.03%)</title><rect x="89.6917%" y="229" width="0.0311%" height="15" fill="rgb(245,133,36)" fg:x="2880" fg:w="1"/><text x="89.9417%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (1 samples, 0.03%)</title><rect x="89.7228%" y="261" width="0.0311%" height="15" fill="rgb(212,6,19)" fg:x="2881" fg:w="1"/><text x="89.9728%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.03%)</title><rect x="89.7228%" y="245" width="0.0311%" height="15" fill="rgb(218,1,36)" fg:x="2881" fg:w="1"/><text x="89.9728%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="89.7540%" y="245" width="0.0311%" height="15" fill="rgb(246,84,54)" fg:x="2882" fg:w="1"/><text x="90.0040%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.06%)</title><rect x="89.7851%" y="229" width="0.0623%" height="15" fill="rgb(242,110,6)" fg:x="2883" fg:w="2"/><text x="90.0351%" y="239.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="89.8474%" y="213" width="0.0311%" height="15" fill="rgb(214,47,5)" fg:x="2885" fg:w="1"/><text x="90.0974%" y="223.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="89.8474%" y="197" width="0.0311%" height="15" fill="rgb(218,159,25)" fg:x="2885" fg:w="1"/><text x="90.0974%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="89.8474%" y="181" width="0.0311%" height="15" fill="rgb(215,211,28)" fg:x="2885" fg:w="1"/><text x="90.0974%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.03%)</title><rect x="89.8474%" y="165" width="0.0311%" height="15" fill="rgb(238,59,32)" fg:x="2885" fg:w="1"/><text x="90.0974%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="89.8474%" y="149" width="0.0311%" height="15" fill="rgb(226,82,3)" fg:x="2885" fg:w="1"/><text x="90.0974%" y="159.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::Obstacle as core::hash::Hash&gt;::hash (1 samples, 0.03%)</title><rect x="89.9097%" y="197" width="0.0311%" height="15" fill="rgb(240,164,32)" fg:x="2887" fg:w="1"/><text x="90.1597%" y="207.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="89.9408%" y="197" width="0.0311%" height="15" fill="rgb(232,46,7)" fg:x="2888" fg:w="1"/><text x="90.1908%" y="207.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (5 samples, 0.16%)</title><rect x="89.8474%" y="229" width="0.1557%" height="15" fill="rgb(229,129,53)" fg:x="2885" fg:w="5"/><text x="90.0974%" y="239.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (4 samples, 0.12%)</title><rect x="89.8785%" y="213" width="0.1246%" height="15" fill="rgb(234,188,29)" fg:x="2886" fg:w="4"/><text x="90.1285%" y="223.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (1 samples, 0.03%)</title><rect x="89.9720%" y="197" width="0.0311%" height="15" fill="rgb(246,141,4)" fg:x="2889" fg:w="1"/><text x="90.2220%" y="207.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_or_create_node (10 samples, 0.31%)</title><rect x="89.7540%" y="261" width="0.3114%" height="15" fill="rgb(229,23,39)" fg:x="2882" fg:w="10"/><text x="90.0040%" y="271.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node (9 samples, 0.28%)</title><rect x="89.7851%" y="245" width="0.2803%" height="15" fill="rgb(206,12,3)" fg:x="2883" fg:w="9"/><text x="90.0351%" y="255.50"></text></g><g><title>mwpf`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (2 samples, 0.06%)</title><rect x="90.0031%" y="229" width="0.0623%" height="15" fill="rgb(252,226,20)" fg:x="2890" fg:w="2"/><text x="90.2531%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="90.0654%" y="245" width="0.0311%" height="15" fill="rgb(216,123,35)" fg:x="2892" fg:w="1"/><text x="90.3154%" y="255.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.03%)</title><rect x="90.0654%" y="229" width="0.0311%" height="15" fill="rgb(212,68,40)" fg:x="2892" fg:w="1"/><text x="90.3154%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::set::BTreeSet&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.03%)</title><rect x="90.0965%" y="245" width="0.0311%" height="15" fill="rgb(254,125,32)" fg:x="2893" fg:w="1"/><text x="90.3465%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::bulk_build_from_sorted_iter (1 samples, 0.03%)</title><rect x="90.0965%" y="229" width="0.0311%" height="15" fill="rgb(253,97,22)" fg:x="2893" fg:w="1"/><text x="90.3465%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::dedup_sorted_iter::DedupSortedIter&lt;K,V,I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="90.0965%" y="213" width="0.0311%" height="15" fill="rgb(241,101,14)" fg:x="2893" fg:w="1"/><text x="90.3465%" y="223.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::relaxer_forest::RelaxerForest&gt; (1 samples, 0.03%)</title><rect x="90.1277%" y="245" width="0.0311%" height="15" fill="rgb(238,103,29)" fg:x="2894" fg:w="1"/><text x="90.3777%" y="255.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="90.1277%" y="229" width="0.0311%" height="15" fill="rgb(233,195,47)" fg:x="2894" fg:w="1"/><text x="90.3777%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.03%)</title><rect x="90.1277%" y="213" width="0.0311%" height="15" fill="rgb(246,218,30)" fg:x="2894" fg:w="1"/><text x="90.3777%" y="223.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (5 samples, 0.16%)</title><rect x="90.1588%" y="245" width="0.1557%" height="15" fill="rgb(219,145,47)" fg:x="2895" fg:w="5"/><text x="90.4088%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (2 samples, 0.06%)</title><rect x="90.2523%" y="229" width="0.0623%" height="15" fill="rgb(243,12,26)" fg:x="2898" fg:w="2"/><text x="90.5023%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (9 samples, 0.28%)</title><rect x="90.4080%" y="165" width="0.2803%" height="15" fill="rgb(214,87,16)" fg:x="2903" fg:w="9"/><text x="90.6580%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.06%)</title><rect x="90.6260%" y="149" width="0.0623%" height="15" fill="rgb(208,99,42)" fg:x="2910" fg:w="2"/><text x="90.8760%" y="159.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.03%)</title><rect x="90.6883%" y="149" width="0.0311%" height="15" fill="rgb(253,99,2)" fg:x="2912" fg:w="1"/><text x="90.9383%" y="159.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.03%)</title><rect x="90.6883%" y="133" width="0.0311%" height="15" fill="rgb(220,168,23)" fg:x="2912" fg:w="1"/><text x="90.9383%" y="143.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.03%)</title><rect x="90.6883%" y="117" width="0.0311%" height="15" fill="rgb(242,38,24)" fg:x="2912" fg:w="1"/><text x="90.9383%" y="127.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete_ptr (14 samples, 0.44%)</title><rect x="90.3145%" y="197" width="0.4360%" height="15" fill="rgb(225,182,9)" fg:x="2900" fg:w="14"/><text x="90.5645%" y="207.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (14 samples, 0.44%)</title><rect x="90.3145%" y="181" width="0.4360%" height="15" fill="rgb(243,178,37)" fg:x="2900" fg:w="14"/><text x="90.5645%" y="191.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_raw (2 samples, 0.06%)</title><rect x="90.6883%" y="165" width="0.0623%" height="15" fill="rgb(232,139,19)" fg:x="2912" fg:w="2"/><text x="90.9383%" y="175.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::update_hash (1 samples, 0.03%)</title><rect x="90.7194%" y="149" width="0.0311%" height="15" fill="rgb(225,201,24)" fg:x="2913" fg:w="1"/><text x="90.9694%" y="159.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="90.7194%" y="133" width="0.0311%" height="15" fill="rgb(221,47,46)" fg:x="2913" fg:w="1"/><text x="90.9694%" y="143.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="90.8440%" y="181" width="0.0311%" height="15" fill="rgb(249,23,13)" fg:x="2917" fg:w="1"/><text x="91.0940%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="91.0308%" y="165" width="0.0311%" height="15" fill="rgb(219,9,5)" fg:x="2923" fg:w="1"/><text x="91.2808%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (7 samples, 0.22%)</title><rect x="90.8751%" y="181" width="0.2180%" height="15" fill="rgb(254,171,16)" fg:x="2918" fg:w="7"/><text x="91.1251%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.03%)</title><rect x="91.0620%" y="165" width="0.0311%" height="15" fill="rgb(230,171,20)" fg:x="2924" fg:w="1"/><text x="91.3120%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="91.0620%" y="149" width="0.0311%" height="15" fill="rgb(210,71,41)" fg:x="2924" fg:w="1"/><text x="91.3120%" y="159.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.06%)</title><rect x="91.0931%" y="181" width="0.0623%" height="15" fill="rgb(206,173,20)" fg:x="2925" fg:w="2"/><text x="91.3431%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="91.1243%" y="165" width="0.0311%" height="15" fill="rgb(233,88,34)" fg:x="2926" fg:w="1"/><text x="91.3743%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (1 samples, 0.03%)</title><rect x="91.1243%" y="149" width="0.0311%" height="15" fill="rgb(223,209,46)" fg:x="2926" fg:w="1"/><text x="91.3743%" y="159.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (28 samples, 0.87%)</title><rect x="90.3145%" y="229" width="0.8720%" height="15" fill="rgb(250,43,18)" fg:x="2900" fg:w="28"/><text x="90.5645%" y="239.50"></text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (28 samples, 0.87%)</title><rect x="90.3145%" y="213" width="0.8720%" height="15" fill="rgb(208,13,10)" fg:x="2900" fg:w="28"/><text x="90.5645%" y="223.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (14 samples, 0.44%)</title><rect x="90.7505%" y="197" width="0.4360%" height="15" fill="rgb(212,200,36)" fg:x="2914" fg:w="14"/><text x="91.0005%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.03%)</title><rect x="91.1554%" y="181" width="0.0311%" height="15" fill="rgb(225,90,30)" fg:x="2927" fg:w="1"/><text x="91.4054%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.16%)</title><rect x="91.6225%" y="181" width="0.1557%" height="15" fill="rgb(236,182,39)" fg:x="2942" fg:w="5"/><text x="91.8725%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.03%)</title><rect x="91.7471%" y="165" width="0.0311%" height="15" fill="rgb(212,144,35)" fg:x="2946" fg:w="1"/><text x="91.9971%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="91.7783%" y="165" width="0.0311%" height="15" fill="rgb(228,63,44)" fg:x="2947" fg:w="1"/><text x="92.0283%" y="175.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (57 samples, 1.78%)</title><rect x="90.0654%" y="261" width="1.7751%" height="15" fill="rgb(228,109,6)" fg:x="2892" fg:w="57"/><text x="90.3154%" y="271.50">m..</text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (49 samples, 1.53%)</title><rect x="90.3145%" y="245" width="1.5260%" height="15" fill="rgb(238,117,24)" fg:x="2900" fg:w="49"/><text x="90.5645%" y="255.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (21 samples, 0.65%)</title><rect x="91.1865%" y="229" width="0.6540%" height="15" fill="rgb(242,26,26)" fg:x="2928" fg:w="21"/><text x="91.4365%" y="239.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (21 samples, 0.65%)</title><rect x="91.1865%" y="213" width="0.6540%" height="15" fill="rgb(221,92,48)" fg:x="2928" fg:w="21"/><text x="91.4365%" y="223.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (16 samples, 0.50%)</title><rect x="91.3423%" y="197" width="0.4983%" height="15" fill="rgb(209,209,32)" fg:x="2933" fg:w="16"/><text x="91.5923%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.06%)</title><rect x="91.7783%" y="181" width="0.0623%" height="15" fill="rgb(221,70,22)" fg:x="2947" fg:w="2"/><text x="92.0283%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.03%)</title><rect x="91.8094%" y="165" width="0.0311%" height="15" fill="rgb(248,145,5)" fg:x="2948" fg:w="1"/><text x="92.0594%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="91.8405%" y="245" width="0.0311%" height="15" fill="rgb(226,116,26)" fg:x="2949" fg:w="1"/><text x="92.0905%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="91.9340%" y="197" width="0.0311%" height="15" fill="rgb(244,5,17)" fg:x="2952" fg:w="1"/><text x="92.1840%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (4 samples, 0.12%)</title><rect x="91.8717%" y="245" width="0.1246%" height="15" fill="rgb(252,159,33)" fg:x="2950" fg:w="4"/><text x="92.1217%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (4 samples, 0.12%)</title><rect x="91.8717%" y="229" width="0.1246%" height="15" fill="rgb(206,71,0)" fg:x="2950" fg:w="4"/><text x="92.1217%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.09%)</title><rect x="91.9028%" y="213" width="0.0934%" height="15" fill="rgb(233,118,54)" fg:x="2951" fg:w="3"/><text x="92.1528%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.03%)</title><rect x="91.9651%" y="197" width="0.0311%" height="15" fill="rgb(234,83,48)" fg:x="2953" fg:w="1"/><text x="92.2151%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve (139 samples, 4.33%)</title><rect x="87.6985%" y="277" width="4.3289%" height="15" fill="rgb(228,3,54)" fg:x="2816" fg:w="139"/><text x="87.9485%" y="287.50">mwpf`..</text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::union (6 samples, 0.19%)</title><rect x="91.8405%" y="261" width="0.1869%" height="15" fill="rgb(226,155,13)" fg:x="2949" fg:w="6"/><text x="92.0905%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.03%)</title><rect x="91.9963%" y="245" width="0.0311%" height="15" fill="rgb(241,28,37)" fg:x="2954" fg:w="1"/><text x="92.2463%" y="255.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (1 samples, 0.03%)</title><rect x="92.0585%" y="245" width="0.0311%" height="15" fill="rgb(233,93,10)" fg:x="2956" fg:w="1"/><text x="92.3085%" y="255.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (1 samples, 0.03%)</title><rect x="92.0585%" y="229" width="0.0311%" height="15" fill="rgb(225,113,19)" fg:x="2956" fg:w="1"/><text x="92.3085%" y="239.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node (3 samples, 0.09%)</title><rect x="92.0274%" y="261" width="0.0934%" height="15" fill="rgb(241,2,18)" fg:x="2955" fg:w="3"/><text x="92.2774%" y="271.50"></text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::insert_unique (1 samples, 0.03%)</title><rect x="92.0897%" y="245" width="0.0311%" height="15" fill="rgb(228,207,21)" fg:x="2957" fg:w="1"/><text x="92.3397%" y="255.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::load (5 samples, 0.16%)</title><rect x="92.0274%" y="277" width="0.1557%" height="15" fill="rgb(213,211,35)" fg:x="2955" fg:w="5"/><text x="92.2774%" y="287.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (2 samples, 0.06%)</title><rect x="92.1208%" y="261" width="0.0623%" height="15" fill="rgb(209,83,10)" fg:x="2958" fg:w="2"/><text x="92.3708%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.03%)</title><rect x="92.1520%" y="245" width="0.0311%" height="15" fill="rgb(209,164,1)" fg:x="2959" fg:w="1"/><text x="92.4020%" y="255.50"></text></g><g><title>mwpf`&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (149 samples, 4.64%)</title><rect x="87.6363%" y="325" width="4.6403%" height="15" fill="rgb(213,184,43)" fg:x="2814" fg:w="149"/><text x="87.8863%" y="335.50">mwpf`..</text></g><g><title>mwpf`mwpf::primal_module_parallel::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::primal_module_parallel::PrimalModuleParallelUnit&gt;&gt;::individual_solve (149 samples, 4.64%)</title><rect x="87.6363%" y="309" width="4.6403%" height="15" fill="rgb(231,61,34)" fg:x="2814" fg:w="149"/><text x="87.8863%" y="319.50">mwpf`..</text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::solve_step_callback_ptr (149 samples, 4.64%)</title><rect x="87.6363%" y="293" width="4.6403%" height="15" fill="rgb(235,75,3)" fg:x="2814" fg:w="149"/><text x="87.8863%" y="303.50">mwpf`..</text></g><g><title>mwpf`mwpf::dual_module_parallel::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::dual_module_parallel::DualModuleParallelUnit&lt;SerialModule,Queue&gt;&gt;&gt;::compute_maximum_update_length (3 samples, 0.09%)</title><rect x="92.1831%" y="277" width="0.0934%" height="15" fill="rgb(220,106,47)" fg:x="2960" fg:w="3"/><text x="92.4331%" y="287.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::compute_maximum_update_length (3 samples, 0.09%)</title><rect x="92.1831%" y="261" width="0.0934%" height="15" fill="rgb(210,196,33)" fg:x="2960" fg:w="3"/><text x="92.4331%" y="271.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::pop_event (3 samples, 0.09%)</title><rect x="92.1831%" y="245" width="0.0934%" height="15" fill="rgb(229,154,42)" fg:x="2960" fg:w="3"/><text x="92.4331%" y="255.50"></text></g><g><title>mwpf`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (3 samples, 0.09%)</title><rect x="92.1831%" y="229" width="0.0934%" height="15" fill="rgb(228,114,26)" fg:x="2960" fg:w="3"/><text x="92.4331%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.06%)</title><rect x="92.4011%" y="213" width="0.0623%" height="15" fill="rgb(208,144,1)" fg:x="2967" fg:w="2"/><text x="92.6511%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.03%)</title><rect x="92.4634%" y="197" width="0.0311%" height="15" fill="rgb(239,112,37)" fg:x="2969" fg:w="1"/><text x="92.7134%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.19%)</title><rect x="92.3388%" y="245" width="0.1869%" height="15" fill="rgb(210,96,50)" fg:x="2965" fg:w="6"/><text x="92.5888%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (6 samples, 0.19%)</title><rect x="92.3388%" y="229" width="0.1869%" height="15" fill="rgb(222,178,2)" fg:x="2965" fg:w="6"/><text x="92.5888%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.06%)</title><rect x="92.4634%" y="213" width="0.0623%" height="15" fill="rgb(226,74,18)" fg:x="2969" fg:w="2"/><text x="92.7134%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.03%)</title><rect x="92.4945%" y="197" width="0.0311%" height="15" fill="rgb(225,67,54)" fg:x="2970" fg:w="1"/><text x="92.7445%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="92.4945%" y="181" width="0.0311%" height="15" fill="rgb(251,92,32)" fg:x="2970" fg:w="1"/><text x="92.7445%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.22%)</title><rect x="92.3388%" y="261" width="0.2180%" height="15" fill="rgb(228,149,22)" fg:x="2965" fg:w="7"/><text x="92.5888%" y="271.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.03%)</title><rect x="92.5257%" y="245" width="0.0311%" height="15" fill="rgb(243,54,13)" fg:x="2971" fg:w="1"/><text x="92.7757%" y="255.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::clear (9 samples, 0.28%)</title><rect x="92.3388%" y="293" width="0.2803%" height="15" fill="rgb(243,180,28)" fg:x="2965" fg:w="9"/><text x="92.5888%" y="303.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (9 samples, 0.28%)</title><rect x="92.3388%" y="277" width="0.2803%" height="15" fill="rgb(208,167,24)" fg:x="2965" fg:w="9"/><text x="92.5888%" y="287.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::matrix::echelon::Echelon&lt;mwpf::matrix::tail::Tail&lt;mwpf::matrix::tight::Tight&lt;mwpf::matrix::basic::BasicMatrix&gt;&gt;&gt;&gt; (2 samples, 0.06%)</title><rect x="92.5568%" y="261" width="0.0623%" height="15" fill="rgb(245,73,45)" fg:x="2972" fg:w="2"/><text x="92.8068%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="92.5880%" y="245" width="0.0311%" height="15" fill="rgb(237,203,48)" fg:x="2973" fg:w="1"/><text x="92.8380%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (1 samples, 0.03%)</title><rect x="92.7126%" y="229" width="0.0311%" height="15" fill="rgb(211,197,16)" fg:x="2977" fg:w="1"/><text x="92.9626%" y="239.50"></text></g><g><title>mwpf`rayon::iter::plumbing::Producer::fold_with (16 samples, 0.50%)</title><rect x="92.2765%" y="309" width="0.4983%" height="15" fill="rgb(243,99,51)" fg:x="2963" fg:w="16"/><text x="92.5265%" y="319.50"></text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::clear (5 samples, 0.16%)</title><rect x="92.6191%" y="293" width="0.1557%" height="15" fill="rgb(215,123,29)" fg:x="2974" fg:w="5"/><text x="92.8691%" y="303.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.16%)</title><rect x="92.6191%" y="277" width="0.1557%" height="15" fill="rgb(239,186,37)" fg:x="2974" fg:w="5"/><text x="92.8691%" y="287.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.09%)</title><rect x="92.6814%" y="261" width="0.0934%" height="15" fill="rgb(252,136,39)" fg:x="2976" fg:w="3"/><text x="92.9314%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.06%)</title><rect x="92.7126%" y="245" width="0.0623%" height="15" fill="rgb(223,213,32)" fg:x="2977" fg:w="2"/><text x="92.9626%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.03%)</title><rect x="92.7437%" y="229" width="0.0311%" height="15" fill="rgb(233,115,5)" fg:x="2978" fg:w="1"/><text x="92.9937%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="92.7437%" y="213" width="0.0311%" height="15" fill="rgb(207,226,44)" fg:x="2978" fg:w="1"/><text x="92.9937%" y="223.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="92.8371%" y="229" width="0.0623%" height="15" fill="rgb(208,126,0)" fg:x="2981" fg:w="2"/><text x="93.0871%" y="239.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="92.8371%" y="213" width="0.0623%" height="15" fill="rgb(244,66,21)" fg:x="2981" fg:w="2"/><text x="93.0871%" y="223.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.06%)</title><rect x="92.8371%" y="197" width="0.0623%" height="15" fill="rgb(222,97,12)" fg:x="2981" fg:w="2"/><text x="93.0871%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.03%)</title><rect x="92.8994%" y="213" width="0.0311%" height="15" fill="rgb(219,213,19)" fg:x="2983" fg:w="1"/><text x="93.1494%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.03%)</title><rect x="92.9617%" y="197" width="0.0311%" height="15" fill="rgb(252,169,30)" fg:x="2985" fg:w="1"/><text x="93.2117%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.03%)</title><rect x="92.9617%" y="181" width="0.0311%" height="15" fill="rgb(206,32,51)" fg:x="2985" fg:w="1"/><text x="93.2117%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="92.9617%" y="165" width="0.0311%" height="15" fill="rgb(250,172,42)" fg:x="2985" fg:w="1"/><text x="93.2117%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::clear (6 samples, 0.19%)</title><rect x="92.8371%" y="261" width="0.1869%" height="15" fill="rgb(209,34,43)" fg:x="2981" fg:w="6"/><text x="93.0871%" y="271.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (6 samples, 0.19%)</title><rect x="92.8371%" y="245" width="0.1869%" height="15" fill="rgb(223,11,35)" fg:x="2981" fg:w="6"/><text x="93.0871%" y="255.50"></text></g><g><title>mwpf`core::ptr::drop_in_place&lt;mwpf::matrix::echelon::Echelon&lt;mwpf::matrix::tail::Tail&lt;mwpf::matrix::tight::Tight&lt;mwpf::matrix::basic::BasicMatrix&gt;&gt;&gt;&gt; (4 samples, 0.12%)</title><rect x="92.8994%" y="229" width="0.1246%" height="15" fill="rgb(251,219,26)" fg:x="2983" fg:w="4"/><text x="93.1494%" y="239.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.09%)</title><rect x="92.9306%" y="213" width="0.0934%" height="15" fill="rgb(231,119,3)" fg:x="2984" fg:w="3"/><text x="93.1806%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.03%)</title><rect x="92.9928%" y="197" width="0.0311%" height="15" fill="rgb(216,97,11)" fg:x="2986" fg:w="1"/><text x="93.2428%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="93.0863%" y="213" width="0.0311%" height="15" fill="rgb(223,59,9)" fg:x="2989" fg:w="1"/><text x="93.3363%" y="223.50"></text></g><g><title>mwpf`rayon_core::join::join_context::_{{closure}} (177 samples, 5.51%)</title><rect x="87.6363%" y="341" width="5.5123%" height="15" fill="rgb(233,93,31)" fg:x="2814" fg:w="177"/><text x="87.8863%" y="351.50">mwpf`ra..</text></g><g><title>mwpf`std::panicking::try (28 samples, 0.87%)</title><rect x="92.2765%" y="325" width="0.8720%" height="15" fill="rgb(239,81,33)" fg:x="2963" fg:w="28"/><text x="92.5265%" y="335.50"></text></g><g><title>mwpf`rayon_core::join::join_context::_{{closure}} (12 samples, 0.37%)</title><rect x="92.7748%" y="309" width="0.3737%" height="15" fill="rgb(213,120,34)" fg:x="2979" fg:w="12"/><text x="93.0248%" y="319.50"></text></g><g><title>mwpf`std::panicking::try (12 samples, 0.37%)</title><rect x="92.7748%" y="293" width="0.3737%" height="15" fill="rgb(243,49,53)" fg:x="2979" fg:w="12"/><text x="93.0248%" y="303.50"></text></g><g><title>mwpf`rayon::iter::plumbing::Producer::fold_with (12 samples, 0.37%)</title><rect x="92.7748%" y="277" width="0.3737%" height="15" fill="rgb(247,216,33)" fg:x="2979" fg:w="12"/><text x="93.0248%" y="287.50"></text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::clear (4 samples, 0.12%)</title><rect x="93.0240%" y="261" width="0.1246%" height="15" fill="rgb(226,26,14)" fg:x="2987" fg:w="4"/><text x="93.2740%" y="271.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.12%)</title><rect x="93.0240%" y="245" width="0.1246%" height="15" fill="rgb(215,49,53)" fg:x="2987" fg:w="4"/><text x="93.2740%" y="255.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.12%)</title><rect x="93.0240%" y="229" width="0.1246%" height="15" fill="rgb(245,162,40)" fg:x="2987" fg:w="4"/><text x="93.2740%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.03%)</title><rect x="93.1174%" y="213" width="0.0311%" height="15" fill="rgb(229,68,17)" fg:x="2990" fg:w="1"/><text x="93.3674%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.03%)</title><rect x="93.1174%" y="197" width="0.0311%" height="15" fill="rgb(213,182,10)" fg:x="2990" fg:w="1"/><text x="93.3674%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="93.1174%" y="181" width="0.0311%" height="15" fill="rgb(245,125,30)" fg:x="2990" fg:w="1"/><text x="93.3674%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (1 samples, 0.03%)</title><rect x="93.1486%" y="165" width="0.0311%" height="15" fill="rgb(232,202,2)" fg:x="2991" fg:w="1"/><text x="93.3986%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::load (2 samples, 0.06%)</title><rect x="93.1486%" y="197" width="0.0623%" height="15" fill="rgb(237,140,51)" fg:x="2991" fg:w="2"/><text x="93.3986%" y="207.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::generate_matrix (2 samples, 0.06%)</title><rect x="93.1486%" y="181" width="0.0623%" height="15" fill="rgb(236,157,25)" fg:x="2991" fg:w="2"/><text x="93.3986%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (1 samples, 0.03%)</title><rect x="93.1797%" y="165" width="0.0311%" height="15" fill="rgb(219,209,0)" fg:x="2992" fg:w="1"/><text x="93.4297%" y="175.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.19%)</title><rect x="93.5223%" y="165" width="0.1869%" height="15" fill="rgb(240,116,54)" fg:x="3003" fg:w="6"/><text x="93.7723%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::Obstacle as core::hash::Hash&gt;::hash (4 samples, 0.12%)</title><rect x="94.1140%" y="133" width="0.1246%" height="15" fill="rgb(216,10,36)" fg:x="3022" fg:w="4"/><text x="94.3640%" y="143.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (16 samples, 0.50%)</title><rect x="94.2386%" y="133" width="0.4983%" height="15" fill="rgb(222,72,44)" fg:x="3026" fg:w="16"/><text x="94.4886%" y="143.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (38 samples, 1.18%)</title><rect x="93.7091%" y="165" width="1.1834%" height="15" fill="rgb(232,159,9)" fg:x="3009" fg:w="38"/><text x="93.9591%" y="175.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (32 samples, 1.00%)</title><rect x="93.8960%" y="149" width="0.9966%" height="15" fill="rgb(210,39,32)" fg:x="3015" fg:w="32"/><text x="94.1460%" y="159.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (5 samples, 0.16%)</title><rect x="94.7368%" y="133" width="0.1557%" height="15" fill="rgb(216,194,45)" fg:x="3042" fg:w="5"/><text x="94.9868%" y="143.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (2 samples, 0.06%)</title><rect x="94.8926%" y="165" width="0.0623%" height="15" fill="rgb(218,18,35)" fg:x="3047" fg:w="2"/><text x="95.1426%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::set_grow_rate (97 samples, 3.02%)</title><rect x="93.2108%" y="181" width="3.0209%" height="15" fill="rgb(207,83,51)" fg:x="2993" fg:w="97"/><text x="93.4608%" y="191.50">mwp..</text></g><g><title>mwpf`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (41 samples, 1.28%)</title><rect x="94.9548%" y="165" width="1.2769%" height="15" fill="rgb(225,63,43)" fg:x="3049" fg:w="41"/><text x="95.2048%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (1 samples, 0.03%)</title><rect x="96.2317%" y="181" width="0.0311%" height="15" fill="rgb(207,57,36)" fg:x="3090" fg:w="1"/><text x="96.4817%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (1 samples, 0.03%)</title><rect x="96.2317%" y="165" width="0.0311%" height="15" fill="rgb(216,99,33)" fg:x="3090" fg:w="1"/><text x="96.4817%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tight::Tight&lt;M&gt; as mwpf::matrix::interface::MatrixTight&gt;::update_edge_tightness (1 samples, 0.03%)</title><rect x="96.2628%" y="181" width="0.0311%" height="15" fill="rgb(225,42,16)" fg:x="3091" fg:w="1"/><text x="96.5128%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.03%)</title><rect x="96.2940%" y="181" width="0.0311%" height="15" fill="rgb(220,201,45)" fg:x="3092" fg:w="1"/><text x="96.5440%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="96.3874%" y="149" width="0.0311%" height="15" fill="rgb(225,33,4)" fg:x="3095" fg:w="1"/><text x="96.6374%" y="159.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (3 samples, 0.09%)</title><rect x="96.4186%" y="149" width="0.0934%" height="15" fill="rgb(224,33,50)" fg:x="3096" fg:w="3"/><text x="96.6686%" y="159.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (3 samples, 0.09%)</title><rect x="96.4186%" y="133" width="0.0934%" height="15" fill="rgb(246,198,51)" fg:x="3096" fg:w="3"/><text x="96.6686%" y="143.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (2 samples, 0.06%)</title><rect x="96.4497%" y="117" width="0.0623%" height="15" fill="rgb(205,22,4)" fg:x="3097" fg:w="2"/><text x="96.6997%" y="127.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="96.5120%" y="149" width="0.0311%" height="15" fill="rgb(206,3,8)" fg:x="3099" fg:w="1"/><text x="96.7620%" y="159.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="96.5120%" y="133" width="0.0311%" height="15" fill="rgb(251,23,15)" fg:x="3099" fg:w="1"/><text x="96.7620%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.03%)</title><rect x="96.5120%" y="117" width="0.0311%" height="15" fill="rgb(252,88,28)" fg:x="3099" fg:w="1"/><text x="96.7620%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.03%)</title><rect x="96.5120%" y="101" width="0.0311%" height="15" fill="rgb(212,127,14)" fg:x="3099" fg:w="1"/><text x="96.7620%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.03%)</title><rect x="96.5120%" y="85" width="0.0311%" height="15" fill="rgb(247,145,37)" fg:x="3099" fg:w="1"/><text x="96.7620%" y="95.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::find_or_create_node (9 samples, 0.28%)</title><rect x="96.3251%" y="181" width="0.2803%" height="15" fill="rgb(209,117,53)" fg:x="3093" fg:w="9"/><text x="96.5751%" y="191.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node (9 samples, 0.28%)</title><rect x="96.3251%" y="165" width="0.2803%" height="15" fill="rgb(212,90,42)" fg:x="3093" fg:w="9"/><text x="96.5751%" y="175.50"></text></g><g><title>mwpf`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (2 samples, 0.06%)</title><rect x="96.5431%" y="149" width="0.0623%" height="15" fill="rgb(218,164,37)" fg:x="3100" fg:w="2"/><text x="96.7931%" y="159.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="96.6054%" y="149" width="0.0311%" height="15" fill="rgb(246,65,34)" fg:x="3102" fg:w="1"/><text x="96.8554%" y="159.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.03%)</title><rect x="96.6054%" y="133" width="0.0311%" height="15" fill="rgb(231,100,33)" fg:x="3102" fg:w="1"/><text x="96.8554%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.03%)</title><rect x="96.6054%" y="117" width="0.0311%" height="15" fill="rgb(228,126,14)" fg:x="3102" fg:w="1"/><text x="96.8554%" y="127.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.06%)</title><rect x="96.6054%" y="165" width="0.0623%" height="15" fill="rgb(215,173,21)" fg:x="3102" fg:w="2"/><text x="96.8554%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.03%)</title><rect x="96.6366%" y="149" width="0.0311%" height="15" fill="rgb(210,6,40)" fg:x="3103" fg:w="1"/><text x="96.8866%" y="159.50"></text></g><g><title>mwpf`mwpf::matrix::echelon::Echelon&lt;M&gt;::force_update_echelon_info (3 samples, 0.09%)</title><rect x="96.6677%" y="165" width="0.0934%" height="15" fill="rgb(212,48,18)" fg:x="3104" fg:w="3"/><text x="96.9177%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::tail::Tail&lt;M&gt; as mwpf::matrix::interface::MatrixView&gt;::columns (2 samples, 0.06%)</title><rect x="96.6988%" y="149" width="0.0623%" height="15" fill="rgb(230,214,11)" fg:x="3105" fg:w="2"/><text x="96.9488%" y="159.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="96.9480%" y="85" width="0.0311%" height="15" fill="rgb(254,105,39)" fg:x="3113" fg:w="1"/><text x="97.1980%" y="95.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.03%)</title><rect x="96.9480%" y="69" width="0.0311%" height="15" fill="rgb(245,158,5)" fg:x="3113" fg:w="1"/><text x="97.1980%" y="79.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (8 samples, 0.25%)</title><rect x="96.9791%" y="85" width="0.2491%" height="15" fill="rgb(249,208,11)" fg:x="3114" fg:w="8"/><text x="97.2291%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.06%)</title><rect x="97.1660%" y="69" width="0.0623%" height="15" fill="rgb(210,39,28)" fg:x="3120" fg:w="2"/><text x="97.4160%" y="79.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.03%)</title><rect x="97.2283%" y="69" width="0.0311%" height="15" fill="rgb(211,56,53)" fg:x="3122" fg:w="1"/><text x="97.4783%" y="79.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.03%)</title><rect x="97.2283%" y="53" width="0.0311%" height="15" fill="rgb(226,201,30)" fg:x="3122" fg:w="1"/><text x="97.4783%" y="63.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.03%)</title><rect x="97.2283%" y="37" width="0.0311%" height="15" fill="rgb(239,101,34)" fg:x="3122" fg:w="1"/><text x="97.4783%" y="47.50"></text></g><g><title>mwpf`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.03%)</title><rect x="97.2594%" y="69" width="0.0311%" height="15" fill="rgb(226,209,5)" fg:x="3123" fg:w="1"/><text x="97.5094%" y="79.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete_ptr (18 samples, 0.56%)</title><rect x="96.7611%" y="117" width="0.5606%" height="15" fill="rgb(250,105,47)" fg:x="3107" fg:w="18"/><text x="97.0111%" y="127.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (18 samples, 0.56%)</title><rect x="96.7611%" y="101" width="0.5606%" height="15" fill="rgb(230,72,3)" fg:x="3107" fg:w="18"/><text x="97.0111%" y="111.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_raw (3 samples, 0.09%)</title><rect x="97.2283%" y="85" width="0.0934%" height="15" fill="rgb(232,218,39)" fg:x="3122" fg:w="3"/><text x="97.4783%" y="95.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::update_hash (1 samples, 0.03%)</title><rect x="97.2906%" y="69" width="0.0311%" height="15" fill="rgb(248,166,6)" fg:x="3124" fg:w="1"/><text x="97.5406%" y="79.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="97.2906%" y="53" width="0.0311%" height="15" fill="rgb(247,89,20)" fg:x="3124" fg:w="1"/><text x="97.5406%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.03%)</title><rect x="97.9134%" y="85" width="0.0311%" height="15" fill="rgb(248,130,54)" fg:x="3144" fg:w="1"/><text x="98.1634%" y="95.50"></text></g><g><title>mwpf`DYLD-STUB$$memcpy (1 samples, 0.03%)</title><rect x="97.9446%" y="85" width="0.0311%" height="15" fill="rgb(234,196,4)" fg:x="3145" fg:w="1"/><text x="98.1946%" y="95.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (13 samples, 0.40%)</title><rect x="97.7266%" y="101" width="0.4049%" height="15" fill="rgb(250,143,31)" fg:x="3138" fg:w="13"/><text x="97.9766%" y="111.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (5 samples, 0.16%)</title><rect x="97.9757%" y="85" width="0.1557%" height="15" fill="rgb(211,110,34)" fg:x="3146" fg:w="5"/><text x="98.2257%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.09%)</title><rect x="98.0380%" y="69" width="0.0934%" height="15" fill="rgb(215,124,48)" fg:x="3148" fg:w="3"/><text x="98.2880%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (2 samples, 0.06%)</title><rect x="98.0691%" y="53" width="0.0623%" height="15" fill="rgb(216,46,13)" fg:x="3149" fg:w="2"/><text x="98.3191%" y="63.50"></text></g><g><title>mwpf`&lt;mwpf::plugin_union_find::PluginUnionFind as mwpf::plugin::PluginImpl&gt;::find_relaxers (46 samples, 1.43%)</title><rect x="96.7611%" y="149" width="1.4326%" height="15" fill="rgb(205,184,25)" fg:x="3107" fg:w="46"/><text x="97.0111%" y="159.50"></text></g><g><title>mwpf`mwpf::plugin_union_find::PluginUnionFind::find_single_relaxer (46 samples, 1.43%)</title><rect x="96.7611%" y="133" width="1.4326%" height="15" fill="rgb(228,1,10)" fg:x="3107" fg:w="46"/><text x="97.0111%" y="143.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (28 samples, 0.87%)</title><rect x="97.3217%" y="117" width="0.8720%" height="15" fill="rgb(213,116,27)" fg:x="3125" fg:w="28"/><text x="97.5717%" y="127.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.06%)</title><rect x="98.1314%" y="101" width="0.0623%" height="15" fill="rgb(241,95,50)" fg:x="3151" fg:w="2"/><text x="98.3814%" y="111.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.06%)</title><rect x="98.1937%" y="133" width="0.0623%" height="15" fill="rgb(238,48,32)" fg:x="3153" fg:w="2"/><text x="98.4437%" y="143.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.06%)</title><rect x="98.1937%" y="117" width="0.0623%" height="15" fill="rgb(235,113,49)" fg:x="3153" fg:w="2"/><text x="98.4437%" y="127.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.06%)</title><rect x="98.1937%" y="101" width="0.0623%" height="15" fill="rgb(205,127,43)" fg:x="3153" fg:w="2"/><text x="98.4437%" y="111.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.03%)</title><rect x="98.2249%" y="85" width="0.0311%" height="15" fill="rgb(250,162,2)" fg:x="3154" fg:w="1"/><text x="98.4749%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="98.2249%" y="69" width="0.0311%" height="15" fill="rgb(220,13,41)" fg:x="3154" fg:w="1"/><text x="98.4749%" y="79.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.03%)</title><rect x="98.3183%" y="117" width="0.0311%" height="15" fill="rgb(249,221,25)" fg:x="3157" fg:w="1"/><text x="98.5683%" y="127.50"></text></g><g><title>mwpf`mwpf::plugin::PluginManager::find_relaxer (72 samples, 2.24%)</title><rect x="96.6054%" y="181" width="2.2423%" height="15" fill="rgb(215,208,19)" fg:x="3102" fg:w="72"/><text x="96.8554%" y="191.50">m..</text></g><g><title>mwpf`mwpf::plugin::PluginEntry::execute (67 samples, 2.09%)</title><rect x="96.7611%" y="165" width="2.0866%" height="15" fill="rgb(236,175,2)" fg:x="3107" fg:w="67"/><text x="97.0111%" y="175.50">m..</text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::expand (21 samples, 0.65%)</title><rect x="98.1937%" y="149" width="0.6540%" height="15" fill="rgb(241,52,2)" fg:x="3153" fg:w="21"/><text x="98.4437%" y="159.50"></text></g><g><title>mwpf`mwpf::relaxer_forest::RelaxerForest::compute_expanded (19 samples, 0.59%)</title><rect x="98.2560%" y="133" width="0.5917%" height="15" fill="rgb(248,140,14)" fg:x="3155" fg:w="19"/><text x="98.5060%" y="143.50"></text></g><g><title>mwpf`mwpf::relaxer::Relaxer::new_raw (16 samples, 0.50%)</title><rect x="98.3494%" y="117" width="0.4983%" height="15" fill="rgb(253,22,42)" fg:x="3158" fg:w="16"/><text x="98.5994%" y="127.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (7 samples, 0.22%)</title><rect x="98.6297%" y="101" width="0.2180%" height="15" fill="rgb(234,61,47)" fg:x="3167" fg:w="7"/><text x="98.8797%" y="111.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_constraint (4 samples, 0.12%)</title><rect x="98.8477%" y="165" width="0.1246%" height="15" fill="rgb(208,226,15)" fg:x="3174" fg:w="4"/><text x="99.0977%" y="175.50"></text></g><g><title>mwpf`&lt;mwpf::matrix::basic::BasicMatrix as mwpf::matrix::interface::MatrixBasic&gt;::add_variable (3 samples, 0.09%)</title><rect x="98.8789%" y="149" width="0.0934%" height="15" fill="rgb(217,221,4)" fg:x="3175" fg:w="3"/><text x="99.1289%" y="159.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.03%)</title><rect x="98.9411%" y="133" width="0.0311%" height="15" fill="rgb(212,174,34)" fg:x="3177" fg:w="1"/><text x="99.1911%" y="143.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::resolve (187 samples, 5.82%)</title><rect x="93.2108%" y="197" width="5.8237%" height="15" fill="rgb(253,83,4)" fg:x="2993" fg:w="187"/><text x="93.4608%" y="207.50">mwpf`&lt;m..</text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::union (6 samples, 0.19%)</title><rect x="98.8477%" y="181" width="0.1869%" height="15" fill="rgb(250,195,49)" fg:x="3174" fg:w="6"/><text x="99.0977%" y="191.50"></text></g><g><title>mwpf`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.06%)</title><rect x="98.9723%" y="165" width="0.0623%" height="15" fill="rgb(241,192,25)" fg:x="3178" fg:w="2"/><text x="99.2223%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.03%)</title><rect x="99.0034%" y="149" width="0.0311%" height="15" fill="rgb(208,124,10)" fg:x="3179" fg:w="1"/><text x="99.2534%" y="159.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::add_dual_node (2 samples, 0.06%)</title><rect x="99.0346%" y="181" width="0.0623%" height="15" fill="rgb(222,33,0)" fg:x="3180" fg:w="2"/><text x="99.2846%" y="191.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::will_happen (2 samples, 0.06%)</title><rect x="99.0346%" y="165" width="0.0623%" height="15" fill="rgb(234,209,28)" fg:x="3180" fg:w="2"/><text x="99.2846%" y="175.50"></text></g><g><title>mwpf`indexmap::map::IndexMap&lt;K,V,S&gt;::entry (1 samples, 0.03%)</title><rect x="99.0657%" y="149" width="0.0311%" height="15" fill="rgb(224,11,23)" fg:x="3181" fg:w="1"/><text x="99.3157%" y="159.50"></text></g><g><title>mwpf`indexmap::map::core::entry::_&lt;impl indexmap::map::core::IndexMapCore&lt;K,V&gt;&gt;::entry (1 samples, 0.03%)</title><rect x="99.0657%" y="133" width="0.0311%" height="15" fill="rgb(232,99,1)" fg:x="3181" fg:w="1"/><text x="99.3157%" y="143.50"></text></g><g><title>mwpf`mwpf::dual_module::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::dual_module::DualModuleInterface&gt;&gt;::load (5 samples, 0.16%)</title><rect x="99.0346%" y="197" width="0.1557%" height="15" fill="rgb(237,95,45)" fg:x="3180" fg:w="5"/><text x="99.2846%" y="207.50"></text></g><g><title>mwpf`mwpf::invalid_subgraph::InvalidSubgraph::new_complete (3 samples, 0.09%)</title><rect x="99.0969%" y="181" width="0.0934%" height="15" fill="rgb(208,109,11)" fg:x="3182" fg:w="3"/><text x="99.3469%" y="191.50"></text></g><g><title>mwpf`indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (3 samples, 0.09%)</title><rect x="99.1903%" y="149" width="0.0934%" height="15" fill="rgb(216,190,48)" fg:x="3185" fg:w="3"/><text x="99.4403%" y="159.50"></text></g><g><title>mwpf`rayon::iter::plumbing::bridge_producer_consumer::helper (200 samples, 6.23%)</title><rect x="93.1486%" y="277" width="6.2286%" height="15" fill="rgb(251,171,36)" fg:x="2991" fg:w="200"/><text x="93.3986%" y="287.50">mwpf`ray..</text></g><g><title>mwpf`rayon_core::join::join_context::_{{closure}} (200 samples, 6.23%)</title><rect x="93.1486%" y="261" width="6.2286%" height="15" fill="rgb(230,62,22)" fg:x="2991" fg:w="200"/><text x="93.3986%" y="271.50">mwpf`ray..</text></g><g><title>mwpf`&lt;rayon::iter::for_each::ForEachConsumer&lt;F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume_iter (200 samples, 6.23%)</title><rect x="93.1486%" y="245" width="6.2286%" height="15" fill="rgb(225,114,35)" fg:x="2991" fg:w="200"/><text x="93.3986%" y="255.50">mwpf`&lt;ra..</text></g><g><title>mwpf`mwpf::primal_module_parallel::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::primal_module_parallel::PrimalModuleParallelUnit&gt;&gt;::individual_solve (200 samples, 6.23%)</title><rect x="93.1486%" y="229" width="6.2286%" height="15" fill="rgb(215,118,42)" fg:x="2991" fg:w="200"/><text x="93.3986%" y="239.50">mwpf`mwp..</text></g><g><title>mwpf`mwpf::primal_module_serial::PrimalModuleSerial::solve_step_callback_ptr (200 samples, 6.23%)</title><rect x="93.1486%" y="213" width="6.2286%" height="15" fill="rgb(243,119,21)" fg:x="2991" fg:w="200"/><text x="93.3986%" y="223.50">mwpf`mwp..</text></g><g><title>mwpf`mwpf::dual_module_parallel::_&lt;impl mwpf::pointers::ArcUnsafe&lt;mwpf::dual_module_parallel::DualModuleParallelUnit&lt;SerialModule,Queue&gt;&gt;&gt;::compute_maximum_update_length (6 samples, 0.19%)</title><rect x="99.1903%" y="197" width="0.1869%" height="15" fill="rgb(252,177,53)" fg:x="3185" fg:w="6"/><text x="99.4403%" y="207.50"></text></g><g><title>mwpf`&lt;mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt; as mwpf::dual_module::DualModuleImpl&gt;::compute_maximum_update_length (6 samples, 0.19%)</title><rect x="99.1903%" y="181" width="0.1869%" height="15" fill="rgb(237,209,29)" fg:x="3185" fg:w="6"/><text x="99.4403%" y="191.50"></text></g><g><title>mwpf`&lt;priority_queue::priority_queue::PriorityQueue&lt;mwpf::dual_module_pq::Obstacle,core::cmp::Reverse&lt;T&gt;&gt; as mwpf::dual_module_pq::FutureQueueMethods&lt;T,mwpf::dual_module_pq::Obstacle&gt;&gt;::pop_event (6 samples, 0.19%)</title><rect x="99.1903%" y="165" width="0.1869%" height="15" fill="rgb(212,65,23)" fg:x="3185" fg:w="6"/><text x="99.4403%" y="175.50"></text></g><g><title>mwpf`priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (3 samples, 0.09%)</title><rect x="99.2837%" y="149" width="0.0934%" height="15" fill="rgb(230,222,46)" fg:x="3188" fg:w="3"/><text x="99.5337%" y="159.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.03%)</title><rect x="99.4394%" y="197" width="0.0311%" height="15" fill="rgb(215,135,32)" fg:x="3193" fg:w="1"/><text x="99.6894%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.03%)</title><rect x="99.5329%" y="133" width="0.0311%" height="15" fill="rgb(246,101,22)" fg:x="3196" fg:w="1"/><text x="99.7829%" y="143.50"></text></g><g><title>mwpf`&lt;mwpf::primal_module_serial::PrimalModuleSerial as mwpf::primal_module::PrimalModuleImpl&gt;::clear (5 samples, 0.16%)</title><rect x="99.4394%" y="213" width="0.1557%" height="15" fill="rgb(206,107,13)" fg:x="3193" fg:w="5"/><text x="99.6894%" y="223.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.12%)</title><rect x="99.4706%" y="197" width="0.1246%" height="15" fill="rgb(250,100,44)" fg:x="3194" fg:w="4"/><text x="99.7206%" y="207.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.09%)</title><rect x="99.5017%" y="181" width="0.0934%" height="15" fill="rgb(231,147,38)" fg:x="3195" fg:w="3"/><text x="99.7517%" y="191.50"></text></g><g><title>mwpf`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.09%)</title><rect x="99.5017%" y="165" width="0.0934%" height="15" fill="rgb(229,8,40)" fg:x="3195" fg:w="3"/><text x="99.7517%" y="175.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.09%)</title><rect x="99.5017%" y="149" width="0.0934%" height="15" fill="rgb(221,135,30)" fg:x="3195" fg:w="3"/><text x="99.7517%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.03%)</title><rect x="99.5640%" y="133" width="0.0311%" height="15" fill="rgb(249,193,18)" fg:x="3197" fg:w="1"/><text x="99.8140%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.03%)</title><rect x="99.5640%" y="117" width="0.0311%" height="15" fill="rgb(209,133,39)" fg:x="3197" fg:w="1"/><text x="99.8140%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.03%)</title><rect x="99.5640%" y="101" width="0.0311%" height="15" fill="rgb(232,100,14)" fg:x="3197" fg:w="1"/><text x="99.8140%" y="111.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.03%)</title><rect x="99.5951%" y="197" width="0.0311%" height="15" fill="rgb(224,185,1)" fg:x="3198" fg:w="1"/><text x="99.8451%" y="207.50"></text></g><g><title>mwpf`&lt;rayon::iter::plumbing::bridge::Callback&lt;C&gt; as rayon::iter::plumbing::ProducerCallback&lt;I&gt;&gt;::callback (210 samples, 6.54%)</title><rect x="93.1486%" y="309" width="6.5400%" height="15" fill="rgb(223,139,8)" fg:x="2991" fg:w="210"/><text x="93.3986%" y="319.50">mwpf`&lt;ray..</text></g><g><title>mwpf`rayon_core::join::join_context::_{{closure}} (210 samples, 6.54%)</title><rect x="93.1486%" y="293" width="6.5400%" height="15" fill="rgb(232,213,38)" fg:x="2991" fg:w="210"/><text x="93.3986%" y="303.50">mwpf`rayo..</text></g><g><title>mwpf`std::panicking::try (10 samples, 0.31%)</title><rect x="99.3771%" y="277" width="0.3114%" height="15" fill="rgb(207,94,22)" fg:x="3191" fg:w="10"/><text x="99.6271%" y="287.50"></text></g><g><title>mwpf`rayon_core::join::join_context::_{{closure}} (10 samples, 0.31%)</title><rect x="99.3771%" y="261" width="0.3114%" height="15" fill="rgb(219,183,54)" fg:x="3191" fg:w="10"/><text x="99.6271%" y="271.50"></text></g><g><title>mwpf`std::panicking::try (10 samples, 0.31%)</title><rect x="99.3771%" y="245" width="0.3114%" height="15" fill="rgb(216,185,54)" fg:x="3191" fg:w="10"/><text x="99.6271%" y="255.50"></text></g><g><title>mwpf`rayon::iter::plumbing::Producer::fold_with (10 samples, 0.31%)</title><rect x="99.3771%" y="229" width="0.3114%" height="15" fill="rgb(254,217,39)" fg:x="3191" fg:w="10"/><text x="99.6271%" y="239.50"></text></g><g><title>mwpf`hashbrown::raw::RawTable&lt;T,A&gt;::clear (3 samples, 0.09%)</title><rect x="99.5951%" y="213" width="0.0934%" height="15" fill="rgb(240,178,23)" fg:x="3198" fg:w="3"/><text x="99.8451%" y="223.50"></text></g><g><title>mwpf`alloc::sync::Arc&lt;T,A&gt;::drop_slow (2 samples, 0.06%)</title><rect x="99.6263%" y="197" width="0.0623%" height="15" fill="rgb(218,11,47)" fg:x="3199" fg:w="2"/><text x="99.8763%" y="207.50"></text></g><g><title>mwpf`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.03%)</title><rect x="99.6574%" y="181" width="0.0311%" height="15" fill="rgb(218,51,51)" fg:x="3200" fg:w="1"/><text x="99.9074%" y="191.50"></text></g><g><title>mwpf`DYLD-STUB$$malloc (1 samples, 0.03%)</title><rect x="99.6886%" y="197" width="0.0311%" height="15" fill="rgb(238,126,27)" fg:x="3201" fg:w="1"/><text x="99.9386%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (2 samples, 0.06%)</title><rect x="99.7820%" y="181" width="0.0623%" height="15" fill="rgb(249,202,22)" fg:x="3204" fg:w="2"/><text x="100.0320%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.03%)</title><rect x="99.8131%" y="165" width="0.0311%" height="15" fill="rgb(254,195,49)" fg:x="3205" fg:w="1"/><text x="100.0631%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.03%)</title><rect x="99.8443%" y="165" width="0.0311%" height="15" fill="rgb(208,123,14)" fg:x="3206" fg:w="1"/><text x="100.0943%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.03%)</title><rect x="99.8754%" y="133" width="0.0311%" height="15" fill="rgb(224,200,8)" fg:x="3207" fg:w="1"/><text x="100.1254%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.03%)</title><rect x="99.9066%" y="101" width="0.0311%" height="15" fill="rgb(217,61,36)" fg:x="3208" fg:w="1"/><text x="100.1566%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 0.06%)</title><rect x="99.9066%" y="117" width="0.0623%" height="15" fill="rgb(206,35,45)" fg:x="3208" fg:w="2"/><text x="100.1566%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.03%)</title><rect x="99.9377%" y="101" width="0.0311%" height="15" fill="rgb(217,65,33)" fg:x="3209" fg:w="1"/><text x="100.1877%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.03%)</title><rect x="99.9377%" y="85" width="0.0311%" height="15" fill="rgb(222,158,48)" fg:x="3209" fg:w="1"/><text x="100.1877%" y="95.50"></text></g><g><title>all (3,211 samples, 100%)</title><rect x="0.0000%" y="485" width="100.0000%" height="15" fill="rgb(254,2,54)" fg:x="0" fg:w="3211"/><text x="0.2500%" y="495.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (1,440 samples, 44.85%)</title><rect x="55.1542%" y="469" width="44.8458%" height="15" fill="rgb(250,143,38)" fg:x="1771" fg:w="1440"/><text x="55.4042%" y="479.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (1,440 samples, 44.85%)</title><rect x="55.1542%" y="453" width="44.8458%" height="15" fill="rgb(248,25,0)" fg:x="1771" fg:w="1440"/><text x="55.4042%" y="463.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>mwpf`std::sys::unix::thread::Thread::new::thread_start (1,440 samples, 44.85%)</title><rect x="55.1542%" y="437" width="44.8458%" height="15" fill="rgb(206,152,27)" fg:x="1771" fg:w="1440"/><text x="55.4042%" y="447.50">mwpf`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>mwpf`core::ops::function::FnOnce::call_once{{vtable.shim}} (1,440 samples, 44.85%)</title><rect x="55.1542%" y="421" width="44.8458%" height="15" fill="rgb(240,77,30)" fg:x="1771" fg:w="1440"/><text x="55.4042%" y="431.50">mwpf`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace (1,440 samples, 44.85%)</title><rect x="55.1542%" y="405" width="44.8458%" height="15" fill="rgb(231,5,3)" fg:x="1771" fg:w="1440"/><text x="55.4042%" y="415.50">mwpf`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>mwpf`rayon_core::registry::ThreadBuilder::run (1,440 samples, 44.85%)</title><rect x="55.1542%" y="389" width="44.8458%" height="15" fill="rgb(207,226,32)" fg:x="1771" fg:w="1440"/><text x="55.4042%" y="399.50">mwpf`rayon_core::registry::ThreadBuilder::run</text></g><g><title>mwpf`rayon_core::registry::WorkerThread::wait_until_cold (1,439 samples, 44.81%)</title><rect x="55.1853%" y="373" width="44.8147%" height="15" fill="rgb(222,207,47)" fg:x="1772" fg:w="1439"/><text x="55.4353%" y="383.50">mwpf`rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>mwpf`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (1,438 samples, 44.78%)</title><rect x="55.2164%" y="357" width="44.7836%" height="15" fill="rgb(229,115,45)" fg:x="1773" fg:w="1438"/><text x="55.4664%" y="367.50">mwpf`&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>mwpf`rayon_core::registry::in_worker (220 samples, 6.85%)</title><rect x="93.1486%" y="341" width="6.8514%" height="15" fill="rgb(224,191,6)" fg:x="2991" fg:w="220"/><text x="93.3986%" y="351.50">mwpf`rayo..</text></g><g><title>mwpf`rayon_core::scope::ScopeBase::complete (220 samples, 6.85%)</title><rect x="93.1486%" y="325" width="6.8514%" height="15" fill="rgb(230,227,24)" fg:x="2991" fg:w="220"/><text x="93.3986%" y="335.50">mwpf`rayo..</text></g><g><title>mwpf`rayon::iter::collect::collect_into_vec (10 samples, 0.31%)</title><rect x="99.6886%" y="309" width="0.3114%" height="15" fill="rgb(228,80,19)" fg:x="3201" fg:w="10"/><text x="99.9386%" y="319.50"></text></g><g><title>mwpf`rayon::iter::plumbing::bridge_producer_consumer::helper (10 samples, 0.31%)</title><rect x="99.6886%" y="293" width="0.3114%" height="15" fill="rgb(247,229,0)" fg:x="3201" fg:w="10"/><text x="99.9386%" y="303.50"></text></g><g><title>mwpf`rayon_core::join::join_context::_{{closure}} (10 samples, 0.31%)</title><rect x="99.6886%" y="277" width="0.3114%" height="15" fill="rgb(237,194,15)" fg:x="3201" fg:w="10"/><text x="99.9386%" y="287.50"></text></g><g><title>mwpf`rayon::iter::plumbing::bridge_producer_consumer::helper (10 samples, 0.31%)</title><rect x="99.6886%" y="261" width="0.3114%" height="15" fill="rgb(219,203,20)" fg:x="3201" fg:w="10"/><text x="99.9386%" y="271.50"></text></g><g><title>mwpf`rayon_core::join::join_context::_{{closure}} (10 samples, 0.31%)</title><rect x="99.6886%" y="245" width="0.3114%" height="15" fill="rgb(234,128,8)" fg:x="3201" fg:w="10"/><text x="99.9386%" y="255.50"></text></g><g><title>mwpf`rayon::iter::plumbing::bridge_producer_consumer::helper (10 samples, 0.31%)</title><rect x="99.6886%" y="229" width="0.3114%" height="15" fill="rgb(248,202,8)" fg:x="3201" fg:w="10"/><text x="99.9386%" y="239.50"></text></g><g><title>mwpf`rayon::iter::plumbing::Folder::consume_iter (10 samples, 0.31%)</title><rect x="99.6886%" y="213" width="0.3114%" height="15" fill="rgb(206,104,37)" fg:x="3201" fg:w="10"/><text x="99.9386%" y="223.50"></text></g><g><title>mwpf`mwpf::dual_module_pq::DualModulePQ&lt;Queue&gt;::new_partitioned (9 samples, 0.28%)</title><rect x="99.7197%" y="197" width="0.2803%" height="15" fill="rgb(223,8,27)" fg:x="3202" fg:w="9"/><text x="99.9697%" y="207.50"></text></g><g><title>mwpf`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.16%)</title><rect x="99.8443%" y="181" width="0.1557%" height="15" fill="rgb(216,217,28)" fg:x="3206" fg:w="5"/><text x="100.0943%" y="191.50"></text></g><g><title>mwpf`alloc::raw_vec::finish_grow (4 samples, 0.12%)</title><rect x="99.8754%" y="165" width="0.1246%" height="15" fill="rgb(249,199,1)" fg:x="3207" fg:w="4"/><text x="100.1254%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 0.12%)</title><rect x="99.8754%" y="149" width="0.1246%" height="15" fill="rgb(240,85,17)" fg:x="3207" fg:w="4"/><text x="100.1254%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.09%)</title><rect x="99.9066%" y="133" width="0.0934%" height="15" fill="rgb(206,108,45)" fg:x="3208" fg:w="3"/><text x="100.1566%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.03%)</title><rect x="99.9689%" y="117" width="0.0311%" height="15" fill="rgb(245,210,41)" fg:x="3210" fg:w="1"/><text x="100.2189%" y="127.50"></text></g></svg></svg>